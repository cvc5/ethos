(set-logic UFDTSNIRA)

; TODO: types vs terms
;(declare-datatype sm.Type
;  (
;  )
;)
(declare-datatype sm.Term
  (
  ; The type of types  TODO: maybe this is Eunoia??
  (sm.Type)
  ; Application of an SMT-LIB term
  (sm.Apply (sm.Apply.arg1 sm.Term) (sm.Apply.arg2 sm.Term))

  ; generated by signature
  ; declare $eo_undef_type SMT_TERM
  (sm.$eo_undef_type)
  ; declare Int SMT_TERM
  (sm.Int)
  ; declare Real SMT_TERM
  (sm.Real)
  ; declare Char SMT_TERM
  (sm.Char)
  ; declare Seq SMT_TERM
  (sm.Seq)
  ; declare $smt_unknown_type SMT_TERM
  (sm.$smt_unknown_type)
  ; declare $eo_Term SMT_TERM
  (sm.$eo_Term)
  ; declare True SMT_DT_CONS
  (sm.True)
  ; declare False SMT_DT_CONS
  (sm.False)
  ; declare Numeral SMT_DT_CONS
  (sm.Numeral (sm.Numeral.arg1 Int))
  ; declare Rational SMT_DT_CONS
  (sm.Rational (sm.Rational.arg1 Real))
  ; declare String SMT_DT_CONS
  (sm.String (sm.String.arg1 String))
  ; declare Binary SMT_DT_CONS
  (sm.Binary (sm.Binary.arg1 Int) (sm.Binary.arg2 Int))
  ; declare $smt_from_eo_bool SMT_TERM
  (sm.$smt_from_eo_bool)
  ; declare not SMT_TERM
  (sm.not)
  ; declare and SMT_TERM
  (sm.and)
  ; declare $eo_Var SMT_TERM
  (sm.$eo_Var)
  ; declare = SMT_TERM
  (sm.=)
  ; declare BitVec SMT_TERM
  (sm.BitVec)
  ; declare $smt_FunType SMT_TERM
  (sm.$smt_FunType (sm.$smt_FunType.arg1 sm.Term) (sm.$smt_FunType.arg2 sm.Term))
  ; declare $smt_unknown_type_enum SMT_TERM
  (sm.$smt_unknown_type_enum (sm.$smt_unknown_type_enum.arg1 sm.Term) (sm.$smt_unknown_type_enum.arg2 sm.Term))
  ; declare $smt_Const SMT_TERM
  (sm.$smt_Const (sm.$smt_Const.arg1 sm.Term) (sm.$smt_Const.arg2 sm.Term) (sm.$smt_Const.arg3 sm.Term))

  )
)

; A Eunoia internal term
(declare-datatype eo.Term
  (
  ; Application of a Eunoia term
  (eo.Apply (eo.Apply.arg1 eo.Term) (eo.Apply.arg2 eo.Term))
  ; generated by signature
  ; declare Stuck EUNOIA_DT_CONS
  (eo.Stuck)
  ; declare SmtTerm EUNOIA_SMT_TERM_CONS
  (eo.SmtTerm (eo.SmtTerm.arg1 sm.Term))
  ; declare $eo_List EUNOIA_TERM
  (eo.$eo_List)
  ; declare $eo_List_nil EUNOIA_TERM
  (eo.$eo_List_nil)
  ; declare $eo_List_cons EUNOIA_TERM
  (eo.$eo_List_cons)
  ; declare @Map EUNOIA_TERM
  (eo.@Map)
  ; declare @smt_RatPair EUNOIA_TERM
  (eo.@smt_RatPair)
  ; declare @Map_nil EUNOIA_TERM
  (eo.@Map_nil)
  ; declare @smt_ratPair EUNOIA_TERM
  (eo.@smt_ratPair)

  )
)

; convert to SMT
(define-fun eo.to_smt ((x eo.Term)) sm.Term (eo.SmtTerm.arg1 x))
(define-fun smt.to_eo ((x sm.Term)) eo.Term (eo.SmtTerm x))

;;; Utilities

; Stuckness propagates through non-nullary constructors
;(define-fun $sm_FunType ((x sm.Term) (y sm.Term)) sm.Term
;  (ite (or (= x sm.Stuck) (= y sm.Stuck))
;    sm.Stuck
;    (sm.FunType x y)))

(define-fun $eo_Apply ((x eo.Term) (y eo.Term)) eo.Term
  (ite (or (= x eo.Stuck) (= y eo.Stuck))
    eo.Stuck
    (eo.Apply x y)))

;;; Definitions of forward declared programs in SMT preamble

; note: should never be called on negative numbers
(declare-fun $sm_mk_pow2 (Int) Int)
(assert (! (forall ((i Int))
  (= ($sm_mk_pow2 i) (ite (<= i 0) 1 (* 2 ($sm_mk_pow2 (- i 1)))))) :named sm.mk_pow2))

(define-fun $sm_mk_bit ((x Int) (i Int)) Bool
  (= (mod (div x ($sm_mk_pow2 i)) 2) 1))

(declare-fun $sm_mk_binary_and (Int Int Int) Int)
(assert (! (forall ((w Int) (x1 Int) (x2 Int))
  (= ($sm_mk_binary_and w x1 x2)
    (ite (= w 0) 0
    (ite (= w 1) (ite (and (= x1 1) (= x2 1)) 1 0)
      (+ ($sm_mk_binary_and (- w 1) x1 x2) (* ($sm_mk_pow2 w)
         (ite (and ($sm_mk_bit x1 w) ($sm_mk_bit x2 w)) 1 0))))))) :named sm.mk_bin_and))

; ((w Int) (x1 Int) (x2 Int))
(declare-fun $sm_mk_binary_or (Int Int Int) Int) ; TODO

; ((w Int) (x1 Int) (x2 Int))
(declare-fun $sm_mk_binary_xor (Int Int Int) Int) ; TODO

; ((w Int) (x1 Int))
(declare-fun $sm_mk_binary_not (Int Int) Int) ; TODO

; ((w Int))
(define-fun $sm_mk_binary_max ((w Int)) Int
  (- ($sm_mk_pow2 w) 1))

; ((x1 Int) (l Int) (h Int))
(declare-fun $sm_mk_binary_extract (Int Int Int) Int) ; TODO

; ((w Int) (x Int) (x1 Int) (x2 Int))
(declare-fun $sm_mk_binary_concat (Int Int Int Int) Int) ; TODO


;;; Literal conversions
; All these methods should only be used for sm.Term

; smt-define: $eo_mk_bool
(define-fun $eo_mk_bool ((x Bool)) eo.Term
  (smt.to_eo (ite x sm.True sm.False)))

; program: $eo_mk_numeral
(define-fun $eo_mk_numeral ((n Int)) eo.Term
  (smt.to_eo (sm.Numeral n)))

; program: $eo_mk_rational
(define-fun $eo_mk_rational ((r Real)) eo.Term
  (smt.to_eo (sm.Rational r)))

; program: $eo_mk_string
(define-fun $eo_mk_string ((s String)) eo.Term
  (smt.to_eo (sm.String s)))

; program: $eo_mk_binary
(define-fun $eo_mk_binary ((w Int) (n Int)) eo.Term
  (ite (and (<= 0 w) (< w 4294967296))
    (smt.to_eo (sm.Binary w (mod n ($sm_mk_pow2 w))))
    eo.Stuck))

;;; Core operators

; axiom: $eo_is_ok
(define-fun $eo_is_ok ((x1 eo.Term)) eo.Term
  ($eo_mk_bool (not (= x1 eo.Stuck))))

; axiom: $eo_ite
(define-fun $eo_ite ((x1 eo.Term) (x2 eo.Term) (x3 eo.Term)) eo.Term
  (ite (= x1 (eo.SmtTerm sm.True))
    x2
  (ite (= x1 (eo.SmtTerm sm.False))
    x3
    eo.Stuck)))

; axiom: $eo_requires
(define-fun $eo_requires ((x1 eo.Term) (x2 eo.Term) (x3 eo.Term)) eo.Term
  (ite (and (not (= x1 eo.Stuck)) (not (= x2 eo.Stuck)) (= x1 x2))
    x3
    eo.Stuck))

; axiom: $eo_hash
; note: This is defined axiomatically.
; TODO: break dependence on sm.Numeral??
(declare-fun $eo_hash (eo.Term) eo.Term)
(assert (! (forall ((x eo.Term))
  (=> (not (= x eo.Stuck))
    (and
      ((_ is eo.SmtTerm) ($eo_hash x))
      ((_ is sm.Numeral) (eo.to_smt ($eo_hash x)))))) :named sm.hash_numeral))
(assert (! (forall ((x eo.Term) (y eo.Term))
  (=> (and (not (= x eo.Stuck)) (not (= y eo.Stuck))
    (= ($eo_hash x) ($eo_hash y))) (= x y))) :named sm.hash_inj))

;;; User defined symbols

; fwd-decl: $eo_typeof
(declare-fun $eo_typeof (eo.Term) eo.Term)

; fwd-decl: $eo_model_sat
(declare-fun $eo_model_sat (eo.Term) eo.Term)

; program: $eo_not
(define-fun $eo_not ((x1 eo.Term)) eo.Term
  (ite (= x1 eo.Stuck)
    eo.Stuck
  (ite (and ((_ is eo.SmtTerm) x1) (= (eo.SmtTerm.arg1 x1) sm.True))
    (eo.SmtTerm sm.False)
  (ite (and ((_ is eo.SmtTerm) x1) (= (eo.SmtTerm.arg1 x1) sm.False))
    (eo.SmtTerm sm.True)
  (ite (and ((_ is eo.SmtTerm) x1) ((_ is sm.Binary) (eo.SmtTerm.arg1 x1)))
    ($eo_mk_binary (sm.Binary.arg1 (eo.SmtTerm.arg1 x1)) ($sm_mk_binary_not (sm.Binary.arg1 (eo.SmtTerm.arg1 x1)) (sm.Binary.arg2 (eo.SmtTerm.arg1 x1))))
    eo.Stuck))))
)

; program: $eo_and
(define-fun $eo_and ((x1 eo.Term) (x2 eo.Term)) eo.Term
  (ite (or (= x1 eo.Stuck) (= x2 eo.Stuck))
    eo.Stuck
  (ite (and ((_ is eo.SmtTerm) x1) ((_ is sm.Binary) (eo.SmtTerm.arg1 x1)) ((_ is eo.SmtTerm) x2) ((_ is sm.Binary) (eo.SmtTerm.arg1 x2)) (= (sm.Binary.arg1 (eo.SmtTerm.arg1 x2)) (sm.Binary.arg1 (eo.SmtTerm.arg1 x1))))
    ($eo_mk_binary (sm.Binary.arg1 (eo.SmtTerm.arg1 x1)) ($sm_mk_binary_and (sm.Binary.arg1 (eo.SmtTerm.arg1 x1)) (sm.Binary.arg2 (eo.SmtTerm.arg1 x1)) (sm.Binary.arg2 (eo.SmtTerm.arg1 x2))))
  (ite true
    (ite (and (or (= sm.True (eo.to_smt x1)) (= sm.False (eo.to_smt x1))) (or (= sm.True (eo.to_smt x2)) (= sm.False (eo.to_smt x2)))) ($eo_mk_bool (and (= sm.True (eo.to_smt x1)) (= sm.True (eo.to_smt x2)))) eo.Stuck)
    eo.Stuck)))
)

; program: $eo_add
(define-fun $eo_add ((x1 eo.Term) (x2 eo.Term)) eo.Term
  (ite (or (= x1 eo.Stuck) (= x2 eo.Stuck))
    eo.Stuck
  (ite (and ((_ is eo.SmtTerm) x1) ((_ is sm.Numeral) (eo.SmtTerm.arg1 x1)) ((_ is eo.SmtTerm) x2) ((_ is sm.Numeral) (eo.SmtTerm.arg1 x2)))
    ($eo_mk_numeral (+ (sm.Numeral.arg1 (eo.SmtTerm.arg1 x1)) (sm.Numeral.arg1 (eo.SmtTerm.arg1 x2))))
  (ite (and ((_ is eo.SmtTerm) x1) ((_ is sm.Rational) (eo.SmtTerm.arg1 x1)) ((_ is eo.SmtTerm) x2) ((_ is sm.Rational) (eo.SmtTerm.arg1 x2)))
    ($eo_mk_rational (+ (sm.Rational.arg1 (eo.SmtTerm.arg1 x1)) (sm.Rational.arg1 (eo.SmtTerm.arg1 x2))))
  (ite (and ((_ is eo.SmtTerm) x1) ((_ is sm.Binary) (eo.SmtTerm.arg1 x1)) ((_ is eo.SmtTerm) x2) ((_ is sm.Binary) (eo.SmtTerm.arg1 x2)) (= (sm.Binary.arg1 (eo.SmtTerm.arg1 x2)) (sm.Binary.arg1 (eo.SmtTerm.arg1 x1))))
    ($eo_mk_binary (sm.Binary.arg1 (eo.SmtTerm.arg1 x1)) (+ (sm.Binary.arg2 (eo.SmtTerm.arg1 x1)) (sm.Binary.arg2 (eo.SmtTerm.arg1 x2))))
    eo.Stuck))))
)

; program: $eo_qdiv
(define-fun $eo_qdiv ((x1 eo.Term) (x2 eo.Term)) eo.Term
  (ite (or (= x1 eo.Stuck) (= x2 eo.Stuck))
    eo.Stuck
  (ite (and ((_ is eo.SmtTerm) x1) ((_ is sm.Numeral) (eo.SmtTerm.arg1 x1)) ((_ is eo.SmtTerm) x2) ((_ is sm.Numeral) (eo.SmtTerm.arg1 x2)))
    (ite (= 0 (sm.Numeral.arg1 (eo.SmtTerm.arg1 x2))) eo.Stuck ($eo_mk_rational (/ (to_real (sm.Numeral.arg1 (eo.SmtTerm.arg1 x1))) (to_real (sm.Numeral.arg1 (eo.SmtTerm.arg1 x2))))))
  (ite (and ((_ is eo.SmtTerm) x1) ((_ is sm.Rational) (eo.SmtTerm.arg1 x1)) ((_ is eo.SmtTerm) x2) ((_ is sm.Rational) (eo.SmtTerm.arg1 x2)))
    (ite (= 0/1 (sm.Rational.arg1 (eo.SmtTerm.arg1 x2))) eo.Stuck ($eo_mk_rational (/ (sm.Rational.arg1 (eo.SmtTerm.arg1 x1)) (sm.Rational.arg1 (eo.SmtTerm.arg1 x2)))))
    eo.Stuck)))
)

; program: $eo_zdiv
(define-fun $eo_zdiv ((x1 eo.Term) (x2 eo.Term)) eo.Term
  (ite (or (= x1 eo.Stuck) (= x2 eo.Stuck))
    eo.Stuck
  (ite (and ((_ is eo.SmtTerm) x1) ((_ is sm.Numeral) (eo.SmtTerm.arg1 x1)) ((_ is eo.SmtTerm) x2) ((_ is sm.Numeral) (eo.SmtTerm.arg1 x2)))
    (ite (= 0 (sm.Numeral.arg1 (eo.SmtTerm.arg1 x2))) eo.Stuck ($eo_mk_numeral (div (sm.Numeral.arg1 (eo.SmtTerm.arg1 x1)) (sm.Numeral.arg1 (eo.SmtTerm.arg1 x2)))))
  (ite (and ((_ is eo.SmtTerm) x1) ((_ is sm.Binary) (eo.SmtTerm.arg1 x1)) ((_ is eo.SmtTerm) x2) ((_ is sm.Binary) (eo.SmtTerm.arg1 x2)) (= (sm.Binary.arg1 (eo.SmtTerm.arg1 x2)) (sm.Binary.arg1 (eo.SmtTerm.arg1 x1))))
    (ite (= 0 (sm.Binary.arg2 (eo.SmtTerm.arg1 x2))) ($eo_mk_binary (sm.Binary.arg1 (eo.SmtTerm.arg1 x1)) ($sm_mk_binary_max (sm.Binary.arg1 (eo.SmtTerm.arg1 x1)))) ($eo_mk_binary (sm.Binary.arg1 (eo.SmtTerm.arg1 x1)) (div (sm.Binary.arg2 (eo.SmtTerm.arg1 x1)) (sm.Binary.arg2 (eo.SmtTerm.arg1 x2)))))
    eo.Stuck)))
)

; program: $eo_zmod
(define-fun $eo_zmod ((x1 eo.Term) (x2 eo.Term)) eo.Term
  (ite (or (= x1 eo.Stuck) (= x2 eo.Stuck))
    eo.Stuck
  (ite (and ((_ is eo.SmtTerm) x1) ((_ is sm.Numeral) (eo.SmtTerm.arg1 x1)) ((_ is eo.SmtTerm) x2) ((_ is sm.Numeral) (eo.SmtTerm.arg1 x2)))
    (ite (= 0 (sm.Numeral.arg1 (eo.SmtTerm.arg1 x2))) eo.Stuck ($eo_mk_numeral (mod (sm.Numeral.arg1 (eo.SmtTerm.arg1 x1)) (sm.Numeral.arg1 (eo.SmtTerm.arg1 x2)))))
  (ite (and ((_ is eo.SmtTerm) x1) ((_ is sm.Binary) (eo.SmtTerm.arg1 x1)) ((_ is eo.SmtTerm) x2) ((_ is sm.Binary) (eo.SmtTerm.arg1 x2)) (= (sm.Binary.arg1 (eo.SmtTerm.arg1 x2)) (sm.Binary.arg1 (eo.SmtTerm.arg1 x1))))
    (ite (= 0 (sm.Binary.arg2 (eo.SmtTerm.arg1 x2))) (eo.SmtTerm (sm.Binary (sm.Binary.arg1 (eo.SmtTerm.arg1 x1)) (sm.Binary.arg2 (eo.SmtTerm.arg1 x1)))) ($eo_mk_binary (sm.Binary.arg1 (eo.SmtTerm.arg1 x1)) (mod (sm.Binary.arg2 (eo.SmtTerm.arg1 x1)) (sm.Binary.arg2 (eo.SmtTerm.arg1 x2)))))
    eo.Stuck)))
)

; program: $eo_neg
(define-fun $eo_neg ((x1 eo.Term)) eo.Term
  (ite (= x1 eo.Stuck)
    eo.Stuck
  (ite (and ((_ is eo.SmtTerm) x1) ((_ is sm.Numeral) (eo.SmtTerm.arg1 x1)))
    ($eo_mk_numeral (-  (sm.Numeral.arg1 (eo.SmtTerm.arg1 x1))))
  (ite (and ((_ is eo.SmtTerm) x1) ((_ is sm.Rational) (eo.SmtTerm.arg1 x1)))
    ($eo_mk_rational (- (sm.Rational.arg1 (eo.SmtTerm.arg1 x1))))
    eo.Stuck)))
)

; program: $eo_len
(define-fun $eo_len ((x1 eo.Term)) eo.Term
  (ite (= x1 eo.Stuck)
    eo.Stuck
  (ite (and ((_ is eo.SmtTerm) x1) ((_ is sm.String) (eo.SmtTerm.arg1 x1)))
    ($eo_mk_numeral (str.len (sm.String.arg1 (eo.SmtTerm.arg1 x1))))
  (ite (and ((_ is eo.SmtTerm) x1) ((_ is sm.Binary) (eo.SmtTerm.arg1 x1)))
    ($eo_mk_numeral (sm.Binary.arg1 (eo.SmtTerm.arg1 x1)))
    eo.Stuck)))
)

; program: $eo_concat
(define-fun $eo_concat ((x1 eo.Term) (x2 eo.Term)) eo.Term
  (ite (or (= x1 eo.Stuck) (= x2 eo.Stuck))
    eo.Stuck
  (ite (and ((_ is eo.SmtTerm) x1) ((_ is sm.String) (eo.SmtTerm.arg1 x1)) ((_ is eo.SmtTerm) x2) ((_ is sm.String) (eo.SmtTerm.arg1 x2)))
    ($eo_mk_string (str.++ (sm.String.arg1 (eo.SmtTerm.arg1 x1)) (sm.String.arg1 (eo.SmtTerm.arg1 x2))))
  (ite (and ((_ is eo.SmtTerm) x1) ((_ is sm.Binary) (eo.SmtTerm.arg1 x1)) ((_ is eo.SmtTerm) x2) ((_ is sm.Binary) (eo.SmtTerm.arg1 x2)))
    ($eo_mk_binary (+ (sm.Binary.arg1 (eo.SmtTerm.arg1 x1)) (sm.Binary.arg1 (eo.SmtTerm.arg1 x2))) ($sm_mk_binary_concat (sm.Binary.arg1 (eo.SmtTerm.arg1 x1)) (sm.Binary.arg2 (eo.SmtTerm.arg1 x1)) (sm.Binary.arg1 (eo.SmtTerm.arg1 x2)) (sm.Binary.arg2 (eo.SmtTerm.arg1 x2))))
    eo.Stuck)))
)

; program: $eo_to_z
(define-fun $eo_to_z ((x1 eo.Term)) eo.Term
  (ite (= x1 eo.Stuck)
    eo.Stuck
  (ite (and ((_ is eo.SmtTerm) x1) ((_ is sm.Numeral) (eo.SmtTerm.arg1 x1)))
    ($eo_mk_numeral (sm.Numeral.arg1 (eo.SmtTerm.arg1 x1)))
  (ite (and ((_ is eo.SmtTerm) x1) ((_ is sm.Rational) (eo.SmtTerm.arg1 x1)))
    ($eo_mk_numeral (to_int (sm.Rational.arg1 (eo.SmtTerm.arg1 x1))))
  (ite (and ((_ is eo.SmtTerm) x1) ((_ is sm.String) (eo.SmtTerm.arg1 x1)))
    (ite (= 1 (str.len (sm.String.arg1 (eo.SmtTerm.arg1 x1)))) ($eo_mk_numeral (str.to_code (sm.String.arg1 (eo.SmtTerm.arg1 x1)))) eo.Stuck)
  (ite (and ((_ is eo.SmtTerm) x1) ((_ is sm.Binary) (eo.SmtTerm.arg1 x1)))
    ($eo_mk_numeral (sm.Binary.arg2 (eo.SmtTerm.arg1 x1)))
    eo.Stuck)))))
)

; program: $eo_to_q
(define-fun $eo_to_q ((x1 eo.Term)) eo.Term
  (ite (= x1 eo.Stuck)
    eo.Stuck
  (ite (and ((_ is eo.SmtTerm) x1) ((_ is sm.Numeral) (eo.SmtTerm.arg1 x1)))
    ($eo_mk_rational (to_real (sm.Numeral.arg1 (eo.SmtTerm.arg1 x1))))
  (ite (and ((_ is eo.SmtTerm) x1) ((_ is sm.Rational) (eo.SmtTerm.arg1 x1)))
    ($eo_mk_rational (sm.Rational.arg1 (eo.SmtTerm.arg1 x1)))
    eo.Stuck)))
)

; program: $eo_to_bin
(define-fun $eo_to_bin ((x1 eo.Term) (x2 eo.Term)) eo.Term
  (ite (or (= x1 eo.Stuck) (= x2 eo.Stuck))
    eo.Stuck
  (ite (and ((_ is eo.SmtTerm) x1) ((_ is sm.Numeral) (eo.SmtTerm.arg1 x1)) ((_ is eo.SmtTerm) x2) ((_ is sm.Numeral) (eo.SmtTerm.arg1 x2)))
    ($eo_mk_binary (sm.Numeral.arg1 (eo.SmtTerm.arg1 x1)) (sm.Numeral.arg1 (eo.SmtTerm.arg1 x2)))
  (ite (and ((_ is eo.SmtTerm) x1) ((_ is sm.Numeral) (eo.SmtTerm.arg1 x1)) ((_ is eo.SmtTerm) x2) ((_ is sm.Binary) (eo.SmtTerm.arg1 x2)))
    ($eo_mk_binary (sm.Numeral.arg1 (eo.SmtTerm.arg1 x1)) (sm.Binary.arg2 (eo.SmtTerm.arg1 x2)))
    eo.Stuck)))
)

; program: $eo_to_str
(define-fun $eo_to_str ((x1 eo.Term)) eo.Term
  (ite (= x1 eo.Stuck)
    eo.Stuck
  (ite (and ((_ is eo.SmtTerm) x1) ((_ is sm.Numeral) (eo.SmtTerm.arg1 x1)))
    (ite (and (<= 0 (sm.Numeral.arg1 (eo.SmtTerm.arg1 x1))) (> 196608 (sm.Numeral.arg1 (eo.SmtTerm.arg1 x1)))) ($eo_mk_string (str.from_code (sm.Numeral.arg1 (eo.SmtTerm.arg1 x1)))) eo.Stuck)
  (ite (and ((_ is eo.SmtTerm) x1) ((_ is sm.String) (eo.SmtTerm.arg1 x1)))
    ($eo_mk_string (sm.String.arg1 (eo.SmtTerm.arg1 x1)))
    eo.Stuck)))
)

; fwd-decl: $eo_dt_constructors
(declare-fun $eo_dt_constructors (eo.Term) eo.Term)

; fwd-decl: $eo_dt_selectors
(declare-fun $eo_dt_selectors (eo.Term) eo.Term)

; program: $eo_eq
(define-fun $eo_eq ((x1 eo.Term) (x2 eo.Term)) eo.Term
  (ite (or (= x1 eo.Stuck) (= x2 eo.Stuck))
    eo.Stuck
  (ite (= x2 x1)
    (eo.SmtTerm sm.True)
  (ite true
    (eo.SmtTerm sm.False)
    eo.Stuck)))
)

; define $eo_is_eq
(define-fun $eo_is_eq ((t eo.Term) (s eo.Term)) eo.Term ($eo_ite ($eo_and ($eo_is_ok t) ($eo_is_ok s)) ($eo_eq s t) (eo.SmtTerm sm.False)))

; define $eo_is_z
(define-fun $eo_is_z ((x eo.Term)) eo.Term ($eo_ite ($eo_and ($eo_is_ok ($eo_to_z x)) ($eo_is_ok x)) ($eo_eq x ($eo_to_z x)) (eo.SmtTerm sm.False)))

; define $eo_is_q
(define-fun $eo_is_q ((x eo.Term)) eo.Term ($eo_ite ($eo_and ($eo_is_ok ($eo_to_q x)) ($eo_is_ok x)) ($eo_eq x ($eo_to_q x)) (eo.SmtTerm sm.False)))

; define $eo_is_bin
(define-fun $eo_is_bin ((x eo.Term)) eo.Term ($eo_ite ($eo_and ($eo_is_ok ($eo_to_bin ($eo_len x) x)) ($eo_is_ok x)) ($eo_eq x ($eo_to_bin ($eo_len x) x)) (eo.SmtTerm sm.False)))

; define $eo_is_str
(define-fun $eo_is_str ((x eo.Term)) eo.Term ($eo_ite ($eo_and ($eo_is_ok ($eo_to_str x)) ($eo_is_ok x)) ($eo_eq x ($eo_to_str x)) (eo.SmtTerm sm.False)))

; define $eo_is_bool
(define-fun $eo_is_bool ((x eo.Term)) eo.Term ($eo_ite ($eo_ite ($eo_and ($eo_is_ok x) (eo.SmtTerm sm.True)) ($eo_eq (eo.SmtTerm sm.True) x) (eo.SmtTerm sm.False)) (eo.SmtTerm sm.True) ($eo_ite ($eo_and ($eo_is_ok x) (eo.SmtTerm sm.True)) ($eo_eq (eo.SmtTerm sm.False) x) (eo.SmtTerm sm.False))))

; program: $mk_symm
(define-fun $mk_symm ((x1 eo.Term)) eo.Term
  (ite (= x1 eo.Stuck)
    eo.Stuck
  (ite (and ((_ is eo.Apply) x1) ((_ is eo.SmtTerm) (eo.Apply.arg1 x1)) ((_ is sm.Apply) (eo.to_smt (eo.Apply.arg1 x1))) (= (sm.Apply.arg1 (eo.to_smt (eo.Apply.arg1 x1))) sm.=))
    ($eo_Apply (sm.Apply sm.= (eo.Apply.arg2 x1)) (sm.Apply.arg2 (eo.to_smt (eo.Apply.arg1 x1))))
  (ite (and ((_ is eo.SmtTerm) x1) ((_ is sm.Apply) (eo.to_smt x1)) ((_ is sm.Apply) (sm.Apply.arg2 (eo.to_smt x1))) ((_ is sm.Apply) (sm.Apply.arg1 (sm.Apply.arg2 (eo.to_smt x1)))) (= (sm.Apply.arg1 (sm.Apply.arg1 (sm.Apply.arg2 (eo.to_smt x1)))) sm.=) (= (sm.Apply.arg1 (eo.to_smt x1)) sm.not))
    (sm.Apply sm.not ($eo_Apply (sm.Apply sm.= (sm.Apply.arg2 (sm.Apply.arg2 (eo.to_smt x1)))) (sm.Apply.arg2 (sm.Apply.arg1 (sm.Apply.arg2 (eo.to_smt x1))))))
    eo.Stuck)))
)

; program: $eo_typeof_apply
(define-fun $eo_typeof_apply ((x1 eo.Term) (x2 eo.Term)) eo.Term
  (ite (or (= x1 eo.Stuck) (= x2 eo.Stuck))
    eo.Stuck
  (ite (and ((_ is eo.FunType) x1) (= x2 (eo.FunType.arg1 x1)))
    (eo.FunType.arg2 x1)
    eo.Stuck))
)

; program: $eo_typeof_=
(define-fun $eo_typeof_= ((x1 eo.Term)) eo.Term
  (ite (= x1 eo.Stuck)
    eo.Stuck
  (ite true
    ($sm_FunType x1 sm.BoolType)
    eo.Stuck))
)

; program: $eo_typeof_main
(define-fun $eo_typeof_main ((x1 eo.Term)) eo.Term
  (ite (= x1 eo.Stuck)
    eo.Stuck
  (ite (= x1 sm.Type)
    sm.Type
  (ite ((_ is eo.FunType) x1)
    ($eo_requires ($eo_typeof (eo.FunType.arg1 x1)) sm.Type ($eo_requires ($eo_typeof (eo.FunType.arg2 x1)) sm.Type sm.Type))
  (ite (= x1 sm.BoolType)
    sm.Type
  (ite (= x1 (eo.SmtTerm sm.True))
    sm.BoolType
  (ite (= x1 (eo.SmtTerm sm.False))
    sm.BoolType
  (ite (= x1 sm.Int)
    sm.Type
  (ite (= x1 sm.Real)
    sm.Type
  (ite (= x1 sm.Char)
    sm.Type
  (ite (= x1 sm.Seq)
    ($sm_FunType sm.Type sm.Type)
  (ite (= x1 sm.not)
    ($sm_FunType sm.BoolType sm.BoolType)
  (ite (= x1 sm.and)
    ($sm_FunType sm.BoolType ($sm_FunType sm.BoolType sm.BoolType))
  (ite (and ((_ is eo.SmtTerm) x1) ((_ is sm.Apply) (eo.to_smt x1)) (= (sm.Apply.arg1 (eo.to_smt x1)) sm.=))
    ($eo_typeof_= ($eo_typeof (sm.Apply.arg2 (eo.to_smt x1))))
  (ite (= x1 sm.BitVec)
    ($sm_FunType sm.Int sm.Type)
  (ite ((_ is eo.Apply) x1)
    ($eo_typeof_apply ($eo_typeof (eo.Apply.arg1 x1)) ($eo_typeof (eo.Apply.arg2 x1)))
    eo.Stuck)))))))))))))))
)

; program: $eo_dt_constructors
(assert (! (forall ((x1 eo.Term))
  (= ($eo_dt_constructors x1)
  (ite (= x1 eo.Stuck)
    eo.Stuck
  (ite true
    ($eo_requires (eo.SmtTerm sm.True) (eo.SmtTerm sm.False) (eo.SmtTerm sm.True))
    eo.Stuck))))
 :named sm.axiom.$eo_dt_constructors))

; program: $eo_dt_selectors
(assert (! (forall ((x1 eo.Term))
  (= ($eo_dt_selectors x1)
  (ite (= x1 eo.Stuck)
    eo.Stuck
  (ite true
    ($eo_requires (eo.SmtTerm sm.True) (eo.SmtTerm sm.False) (eo.SmtTerm sm.True))
    eo.Stuck))))
 :named sm.axiom.$eo_dt_selectors))

; program: $eo_typeof
(assert (! (forall ((x1 eo.Term))
  (= ($eo_typeof x1)
  (ite (= x1 eo.Stuck)
    eo.Stuck
  (ite (and ((_ is eo.Apply) x1) ((_ is eo.SmtTerm) (eo.Apply.arg1 x1)) ((_ is sm.Apply) (eo.to_smt (eo.Apply.arg1 x1))) (= (sm.Apply.arg1 (eo.to_smt (eo.Apply.arg1 x1))) sm.$eo_Var))
    (eo.Apply.arg2 x1)
  (ite true
    ($eo_ite ($eo_ite ($eo_ite ($eo_and ($eo_is_ok x1) (eo.SmtTerm sm.True)) ($eo_eq (eo.SmtTerm sm.True) x1) (eo.SmtTerm sm.False)) (eo.SmtTerm sm.True) ($eo_ite ($eo_and ($eo_is_ok x1) (eo.SmtTerm sm.True)) ($eo_eq (eo.SmtTerm sm.False) x1) (eo.SmtTerm sm.False))) sm.BoolType ($eo_ite ($eo_ite ($eo_and ($eo_is_ok ($eo_to_z x1)) ($eo_is_ok x1)) ($eo_eq x1 ($eo_to_z x1)) (eo.SmtTerm sm.False)) sm.Int ($eo_ite ($eo_ite ($eo_and ($eo_is_ok ($eo_to_q x1)) ($eo_is_ok x1)) ($eo_eq x1 ($eo_to_q x1)) (eo.SmtTerm sm.False)) sm.Real ($eo_ite ($eo_ite ($eo_and ($eo_is_ok ($eo_to_str x1)) ($eo_is_ok x1)) ($eo_eq x1 ($eo_to_str x1)) (eo.SmtTerm sm.False)) (sm.Apply sm.Seq sm.Char) ($eo_ite ($eo_ite ($eo_and ($eo_is_ok ($eo_to_bin ($eo_len x1) x1)) ($eo_is_ok x1)) ($eo_eq x1 ($eo_to_bin ($eo_len x1) x1)) (eo.SmtTerm sm.False)) sm.$eo_undef_type ($eo_typeof_main x1))))))
    eo.Stuck)))))
 :named sm.axiom.$eo_typeof))

; program: $eorx_symm
(define-fun $eorx_symm ((x1 eo.Term) (x2 eo.Term)) eo.Term
  (ite (or (= x1 eo.Stuck) (= x2 eo.Stuck))
    eo.Stuck
  (ite (= x2 sm.BoolType)
    ($mk_symm x1)
    eo.Stuck))
)

; program: $eor_symm
(define-fun $eor_symm ((x1 eo.Term)) eo.Term
  (ite (= x1 eo.Stuck)
    eo.Stuck
  (ite true
    ($eorx_symm x1 ($eo_typeof x1))
    eo.Stuck))
)

; program: $eovc_symm
(define-fun $eovc_symm ((x1 eo.Term)) eo.Term
  (ite (= x1 eo.Stuck)
    eo.Stuck
  (ite true
    ($eo_requires ($eo_model_sat x1) (eo.SmtTerm sm.True) ($eo_requires ($eo_model_sat ($eor_symm x1)) (eo.SmtTerm sm.False) (eo.SmtTerm sm.True)))
    eo.Stuck))
)

; program: $eo_type_enum
(define-fun $eo_type_enum ((x1 eo.Term) (x2 eo.Term)) eo.Term
  (ite (or (= x1 eo.Stuck) (= x2 eo.Stuck))
    eo.Stuck
  (ite true
    ($eo_requires (eo.SmtTerm sm.True) (eo.SmtTerm sm.False) (eo.SmtTerm sm.True))
    eo.Stuck))
)

; program: $eo_const_predicate
(define-fun $eo_const_predicate ((x1 eo.Term) (x2 eo.Term) (x3 eo.Term)) eo.Term
  (ite (or (= x1 eo.Stuck) (= x2 eo.Stuck) (= x3 eo.Stuck))
    eo.Stuck
  (ite true
    ($eo_requires (eo.SmtTerm sm.True) (eo.SmtTerm sm.False) (eo.SmtTerm sm.True))
    eo.Stuck))
)

; program: $eo_model_eval
(define-fun $eo_model_eval ((x1 eo.Term)) eo.Term
  (ite (= x1 eo.Stuck)
    eo.Stuck
  (ite true
    ($eo_requires (eo.SmtTerm sm.True) (eo.SmtTerm sm.False) (eo.SmtTerm sm.True))
    eo.Stuck))
)

; fwd-decl: $smt_typeof
(declare-fun $smt_typeof (eo.Term) eo.Term)

; program: $smt_list_concat
(declare-fun $smt_list_concat (eo.Term eo.Term) eo.Term)
(assert (! (forall ((x1 eo.Term) (x2 eo.Term))
  (= ($smt_list_concat x1 x2)
  (ite (or (= x1 eo.Stuck) (= x2 eo.Stuck))
    eo.Stuck
  (ite (and ((_ is eo.Apply) x1) ((_ is eo.Apply) (eo.Apply.arg2 x1)) (= (eo.Apply.arg2 (eo.Apply.arg2 x1)) eo.$eo_List_nil) ((_ is eo.Apply) (eo.Apply.arg1 (eo.Apply.arg2 x1))) (= (eo.Apply.arg1 (eo.Apply.arg1 (eo.Apply.arg2 x1))) eo.$eo_List_cons) ((_ is eo.Apply) (eo.Apply.arg1 x1)) (= (eo.Apply.arg1 (eo.Apply.arg1 x1)) eo.$eo_List_cons))
    ($eo_Apply ($eo_Apply eo.$eo_List_cons (eo.Apply.arg2 (eo.Apply.arg1 x1))) ($eo_Apply ($eo_Apply eo.$eo_List_cons ($smt_list_concat (eo.Apply.arg2 (eo.Apply.arg1 (eo.Apply.arg2 x1))) x2)) eo.$eo_List_nil))
  (ite (= x1 eo.$eo_List_nil)
    x2
    eo.Stuck)))))
 :named sm.axiom.$smt_list_concat))

; program: $smt_rat_enum_rec
(declare-fun $smt_rat_enum_rec (eo.Term eo.Term) eo.Term)
(assert (! (forall ((x1 eo.Term) (x2 eo.Term))
  (= ($smt_rat_enum_rec x1 x2)
  (ite (or (= x1 eo.Stuck) (= x2 eo.Stuck))
    eo.Stuck
  (ite (and (= x1 (sm.Numeral 0)) ((_ is eo.Apply) x2) ((_ is eo.Apply) (eo.Apply.arg2 x2)) (= (eo.Apply.arg2 (eo.Apply.arg2 x2)) eo.$eo_List_nil) ((_ is eo.Apply) (eo.Apply.arg1 (eo.Apply.arg2 x2))) (= (eo.Apply.arg1 (eo.Apply.arg1 (eo.Apply.arg2 x2))) eo.$eo_List_cons) ((_ is eo.Apply) (eo.Apply.arg1 x2)) (= (eo.Apply.arg1 (eo.Apply.arg1 x2)) eo.$eo_List_cons))
    (eo.Apply.arg2 (eo.Apply.arg1 x2))
  (ite (and ((_ is eo.Apply) x2) ((_ is eo.Apply) (eo.Apply.arg2 x2)) (= (eo.Apply.arg2 (eo.Apply.arg2 x2)) eo.$eo_List_nil) ((_ is eo.Apply) (eo.Apply.arg1 (eo.Apply.arg2 x2))) (= (eo.Apply.arg1 (eo.Apply.arg1 (eo.Apply.arg2 x2))) eo.$eo_List_cons) ((_ is eo.Apply) (eo.Apply.arg1 x2)) ((_ is eo.Apply) (eo.Apply.arg2 (eo.Apply.arg1 x2))) ((_ is eo.Apply) (eo.Apply.arg1 (eo.Apply.arg2 (eo.Apply.arg1 x2)))) (= (eo.Apply.arg1 (eo.Apply.arg1 (eo.Apply.arg2 (eo.Apply.arg1 x2)))) eo.@smt_ratPair) (= (eo.Apply.arg1 (eo.Apply.arg1 x2)) eo.$eo_List_cons))
    ($smt_rat_enum_rec ($eo_add x1 (sm.Numeral (- 1))) ($smt_list_concat (eo.Apply.arg2 (eo.Apply.arg1 (eo.Apply.arg2 x2))) ($eo_Apply ($eo_Apply eo.$eo_List_cons ($eo_Apply ($eo_Apply eo.@smt_ratPair ($eo_add (eo.Apply.arg2 (eo.Apply.arg1 (eo.Apply.arg2 (eo.Apply.arg1 x2)))) (eo.Apply.arg2 (eo.Apply.arg2 (eo.Apply.arg1 x2))))) (eo.Apply.arg2 (eo.Apply.arg2 (eo.Apply.arg1 x2))))) ($eo_Apply ($eo_Apply eo.$eo_List_cons ($eo_Apply ($eo_Apply eo.$eo_List_cons ($eo_Apply ($eo_Apply eo.@smt_ratPair (eo.Apply.arg2 (eo.Apply.arg1 (eo.Apply.arg2 (eo.Apply.arg1 x2))))) ($eo_add (eo.Apply.arg2 (eo.Apply.arg1 (eo.Apply.arg2 (eo.Apply.arg1 x2)))) (eo.Apply.arg2 (eo.Apply.arg2 (eo.Apply.arg1 x2)))))) ($eo_Apply ($eo_Apply eo.$eo_List_cons eo.$eo_List_nil) eo.$eo_List_nil))) eo.$eo_List_nil))))
    eo.Stuck)))))
 :named sm.axiom.$smt_rat_enum_rec))

; program: $smt_rat_to_num
(define-fun $smt_rat_to_num ((x1 eo.Term)) eo.Term
  (ite (= x1 eo.Stuck)
    eo.Stuck
  (ite (and ((_ is eo.Apply) x1) ((_ is eo.Apply) (eo.Apply.arg1 x1)) (= (eo.Apply.arg1 (eo.Apply.arg1 x1)) eo.@smt_ratPair))
    ($eo_qdiv (eo.Apply.arg2 (eo.Apply.arg1 x1)) (eo.Apply.arg2 x1))
    eo.Stuck))
)

; program: $smt_type_enum
(declare-fun $smt_type_enum (eo.Term eo.Term) eo.Term)
(assert (! (forall ((x1 eo.Term) (x2 eo.Term))
  (= ($smt_type_enum x1 x2)
  (ite (or (= x1 eo.Stuck) (= x2 eo.Stuck))
    eo.Stuck
  (ite (= x1 sm.Int)
    ($eo_ite ($eo_eq ($eo_zmod x2 (sm.Numeral 2)) (sm.Numeral 0)) ($eo_zdiv x2 (sm.Numeral 2)) ($eo_neg ($eo_zdiv x2 (sm.Numeral 2))))
  (ite (and ((_ is eo.SmtTerm) x1) ((_ is sm.Apply) (eo.to_smt x1)) (= (sm.Apply.arg2 (eo.to_smt x1)) sm.Char) (= (sm.Apply.arg1 (eo.to_smt x1)) sm.Seq))
    ($eo_ite ($eo_eq x2 (sm.Numeral 0)) (sm.String "") ($eo_concat ($eo_to_str ($eo_zmod x2 (sm.Numeral 196608))) ($smt_type_enum (sm.Apply sm.Seq sm.Char) ($eo_zdiv x2 (sm.Numeral 196608)))))
  (ite (= x1 sm.Real)
    ($eo_ite ($eo_eq ($eo_zmod ($eo_zdiv ($eo_zdiv x2 (sm.Numeral 2)) (sm.Numeral 2)) (sm.Numeral 2)) (sm.Numeral 0)) ($eo_ite ($eo_eq ($eo_zmod ($eo_zdiv x2 (sm.Numeral 2)) (sm.Numeral 2)) (sm.Numeral 0)) ($smt_rat_to_num ($smt_rat_enum_rec ($eo_zdiv ($eo_zdiv x2 (sm.Numeral 2)) (sm.Numeral 2)) ($eo_Apply ($eo_Apply eo.$eo_List_cons ($eo_Apply ($eo_Apply eo.@smt_ratPair (sm.Numeral 1)) (sm.Numeral 1))) ($eo_Apply ($eo_Apply eo.$eo_List_cons eo.$eo_List_nil) eo.$eo_List_nil)))) (sm.$smt_unknown_type_enum sm.Real ($eo_zdiv ($eo_zdiv x2 (sm.Numeral 2)) (sm.Numeral 2)))) ($eo_neg ($eo_ite ($eo_eq ($eo_zmod ($eo_zdiv x2 (sm.Numeral 2)) (sm.Numeral 2)) (sm.Numeral 0)) ($smt_rat_to_num ($smt_rat_enum_rec ($eo_zdiv ($eo_zdiv x2 (sm.Numeral 2)) (sm.Numeral 2)) ($eo_Apply ($eo_Apply eo.$eo_List_cons ($eo_Apply ($eo_Apply eo.@smt_ratPair (sm.Numeral 1)) (sm.Numeral 1))) ($eo_Apply ($eo_Apply eo.$eo_List_cons eo.$eo_List_nil) eo.$eo_List_nil)))) (sm.$smt_unknown_type_enum sm.Real ($eo_zdiv ($eo_zdiv x2 (sm.Numeral 2)) (sm.Numeral 2))))))
  (ite true
    ($eo_ite ($eo_is_ok ($eo_type_enum x1 x2)) ($eo_type_enum x1 x2) (sm.$smt_unknown_type_enum x1 x2))
    eo.Stuck)))))))
 :named sm.axiom.$smt_type_enum))

; program: $smt_type_enum_contains_rec
(declare-fun $smt_type_enum_contains_rec (eo.Term eo.Term eo.Term) eo.Term)
(assert (! (forall ((x1 eo.Term) (x2 eo.Term) (x3 eo.Term))
  (= ($smt_type_enum_contains_rec x1 x2 x3)
  (ite (or (= x1 eo.Stuck) (= x2 eo.Stuck) (= x3 eo.Stuck))
    eo.Stuck
  (ite true
    ($eo_ite ($eo_is_ok ($smt_type_enum x1 x3)) ($eo_ite ($eo_eq ($smt_type_enum x1 x3) x2) (eo.SmtTerm sm.True) ($smt_type_enum_contains_rec x1 x3 ($eo_add x3 (sm.Numeral 1)))) (eo.SmtTerm sm.False))
    eo.Stuck))))
 :named sm.axiom.$smt_type_enum_contains_rec))

; fwd-decl: $smt_is_value
(declare-fun $smt_is_value (eo.Term eo.Term) eo.Term)

; program: $smt_map_is_value
(define-fun $smt_map_is_value ((x1 eo.Term)) eo.Term
  (ite (= x1 eo.Stuck)
    eo.Stuck
  (ite (and ((_ is eo.Apply) x1) ((_ is eo.Apply) (eo.Apply.arg1 x1)) ((_ is eo.Apply) (eo.Apply.arg1 (eo.Apply.arg1 x1))) (= (eo.Apply.arg1 (eo.Apply.arg1 (eo.Apply.arg1 x1))) eo.@Map_nil))
    ($smt_is_value (eo.Apply.arg2 (eo.Apply.arg1 x1)) (eo.Apply.arg2 x1))
    eo.Stuck))
)

; program: $smt_dt_is_value
(declare-fun $smt_dt_is_value (eo.Term) eo.Term)
(assert (! (forall ((x1 eo.Term))
  (= ($smt_dt_is_value x1)
  (ite (= x1 eo.Stuck)
    eo.Stuck
  (ite ((_ is eo.Apply) x1)
    ($eo_ite ($smt_is_value ($smt_typeof (eo.Apply.arg2 x1)) (eo.Apply.arg2 x1)) ($smt_dt_is_value (eo.Apply.arg1 x1)) (eo.SmtTerm sm.False))
  (ite true
    ($eo_is_ok ($eo_dt_selectors x1))
    eo.Stuck)))))
 :named sm.axiom.$smt_dt_is_value))

; program: $smt_is_value
(assert (! (forall ((x1 eo.Term) (x2 eo.Term))
  (= ($smt_is_value x1 x2)
  (ite (or (= x1 eo.Stuck) (= x2 eo.Stuck))
    eo.Stuck
  (ite (= x1 sm.$smt_unknown_type)
    (eo.SmtTerm sm.False)
  (ite (and (= x1 sm.BoolType) (= x2 (eo.SmtTerm sm.True)))
    (eo.SmtTerm sm.True)
  (ite (and (= x1 sm.BoolType) (= x2 (eo.SmtTerm sm.False)))
    (eo.SmtTerm sm.True)
  (ite (and (= x1 sm.Int) ((_ is eo.SmtTerm) x2) ((_ is sm.Numeral) (eo.SmtTerm.arg1 x2)))
    (eo.SmtTerm sm.True)
  (ite (and (= x1 sm.Real) ((_ is eo.SmtTerm) x2) ((_ is sm.Rational) (eo.SmtTerm.arg1 x2)))
    (eo.SmtTerm sm.True)
  (ite (and ((_ is eo.SmtTerm) x1) ((_ is sm.Apply) (eo.to_smt x1)) (= (sm.Apply.arg2 (eo.to_smt x1)) sm.Char) (= (sm.Apply.arg1 (eo.to_smt x1)) sm.Seq) ((_ is eo.SmtTerm) x2) ((_ is sm.String) (eo.SmtTerm.arg1 x2)))
    (eo.SmtTerm sm.True)
  (ite (and ((_ is eo.Apply) x1) ((_ is eo.Apply) (eo.Apply.arg1 x1)) (= (eo.Apply.arg1 (eo.Apply.arg1 x1)) eo.@Map))
    ($smt_map_is_value x2)
  (ite true
    ($eo_ite ($eo_is_ok ($eo_dt_constructors x1)) ($smt_dt_is_value x2) ($smt_type_enum_contains_rec x1 x2 (sm.Numeral 0)))
    eo.Stuck)))))))))))
 :named sm.axiom.$smt_is_value))

; fwd-decl: $smt_model_eval
(declare-fun $smt_model_eval (eo.Term) eo.Term)

; fwd-decl: $smt_model_lookup
(declare-fun $smt_model_lookup (eo.Term eo.Term eo.Term) eo.Term)

; program: $smt_model_eval
(assert (! (forall ((x1 eo.Term))
  (= ($smt_model_eval x1)
  (ite (= x1 eo.Stuck)
    eo.Stuck
  (ite (= x1 (eo.SmtTerm sm.True))
    (eo.SmtTerm sm.True)
  (ite (= x1 (eo.SmtTerm sm.False))
    (eo.SmtTerm sm.False)
  (ite (and ((_ is eo.SmtTerm) x1) ((_ is sm.Apply) (eo.to_smt x1)) (= (sm.Apply.arg1 (eo.to_smt x1)) sm.not))
    ($eo_mk_bool (not ($sm_Applysm.$smt_from_eo_bool ($smt_model_eval (sm.Apply.arg2 (eo.to_smt x1))))))
  (ite (and ((_ is eo.Apply) x1) ((_ is eo.SmtTerm) (eo.Apply.arg1 x1)) ((_ is sm.Apply) (eo.to_smt (eo.Apply.arg1 x1))) (= (sm.Apply.arg1 (eo.to_smt (eo.Apply.arg1 x1))) sm.and))
    ($eo_mk_bool (and ($sm_Applysm.$smt_from_eo_bool ($smt_model_eval (sm.Apply.arg2 (eo.to_smt (eo.Apply.arg1 x1))))) ($sm_Applysm.$smt_from_eo_bool ($smt_model_eval (eo.Apply.arg2 x1)))))
  (ite (and ((_ is eo.Apply) x1) ((_ is eo.SmtTerm) (eo.Apply.arg1 x1)) ((_ is sm.Apply) (eo.to_smt (eo.Apply.arg1 x1))) (= (sm.Apply.arg1 (eo.to_smt (eo.Apply.arg1 x1))) sm.=))
    ($eo_ite ($eo_and ($smt_is_value ($smt_typeof (sm.Apply.arg2 (eo.to_smt (eo.Apply.arg1 x1)))) ($smt_model_eval (sm.Apply.arg2 (eo.to_smt (eo.Apply.arg1 x1))))) ($smt_is_value ($smt_typeof (sm.Apply.arg2 (eo.to_smt (eo.Apply.arg1 x1)))) ($smt_model_eval (eo.Apply.arg2 x1)))) ($eo_mk_bool (= ($smt_model_eval (sm.Apply.arg2 (eo.to_smt (eo.Apply.arg1 x1)))) ($smt_model_eval (eo.Apply.arg2 x1)))) ($eo_Apply (sm.Apply sm.= (sm.Apply.arg2 (eo.to_smt (eo.Apply.arg1 x1)))) (eo.Apply.arg2 x1)))
  (ite ((_ is sm.$smt_Const) x1)
    ($eo_ite ($smt_model_eval ($eo_ite ($eo_eq (sm.$smt_Const.arg1 x1) (sm.Numeral 0)) (eo.SmtTerm sm.True) ($eo_ite ($eo_is_ok ($eo_const_predicate (sm.$smt_Const.arg1 x1) (sm.$smt_Const.arg2 x1) (sm.$smt_Const.arg3 x1))) ($eo_const_predicate (sm.$smt_Const.arg1 x1) (sm.$smt_Const.arg2 x1) (sm.$smt_Const.arg3 x1)) (eo.SmtTerm sm.True)))) ($smt_model_lookup (sm.$smt_Const.arg1 x1) (sm.$smt_Const.arg2 x1) (sm.$smt_Const.arg3 x1)) (sm.$smt_Const (sm.$smt_Const.arg1 x1) (sm.$smt_Const.arg2 x1) (sm.$smt_Const.arg3 x1)))
  (ite ((_ is eo.Apply) x1)
    ($eo_ite ($eo_is_ok ($eo_model_eval ($eo_Apply ($smt_model_eval (eo.Apply.arg1 x1)) ($smt_model_eval (eo.Apply.arg2 x1))))) ($eo_model_eval ($eo_Apply ($smt_model_eval (eo.Apply.arg1 x1)) ($smt_model_eval (eo.Apply.arg2 x1)))) ($eo_Apply ($smt_model_eval (eo.Apply.arg1 x1)) ($smt_model_eval (eo.Apply.arg2 x1))))
  (ite true
    ($eo_ite ($eo_is_ok ($eo_model_eval x1)) ($eo_model_eval x1) x1)
    eo.Stuck)))))))))))
 :named sm.axiom.$smt_model_eval))

; program: $eo_model_sat
(assert (! (forall ((x1 eo.Term))
  (= ($eo_model_sat x1)
  (ite (= x1 eo.Stuck)
    eo.Stuck
  (ite true
    ($smt_model_eval x1)
    eo.Stuck))))
 :named sm.axiom.$eo_model_sat))

; program: $smt_typeof
(assert (! (forall ((x1 eo.Term))
  (= ($smt_typeof x1)
  (ite (= x1 eo.Stuck)
    eo.Stuck
  (ite ((_ is sm.$smt_FunType) x1)
    ($eo_requires ($smt_typeof (sm.$smt_FunType.arg1 x1)) sm.Type ($eo_requires ($smt_typeof (sm.$smt_FunType.arg2 x1)) sm.Type sm.Type))
  (ite (= x1 sm.$smt_unknown_type)
    sm.Type
  (ite ((_ is sm.$smt_Const) x1)
    (sm.$smt_Const.arg3 x1)
  (ite true
    ($eo_ite ($eo_is_ok ($eo_typeof x1)) ($eo_typeof x1) sm.$smt_unknown_type)
    eo.Stuck)))))))
 :named sm.axiom.$smt_typeof))



;;; The verification condition

;;;; final verification condition for $eovc_symm
(assert (! (exists ((x1 sm.Term))
  (= ($eovc_symm (eo.SmtTerm x1)) sm.True)) :named sm.conjecture.$eovc_symm))


(check-sat)
