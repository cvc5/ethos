; trim-defs: $eovc_refl $eo_typeof_main $eo_String $eo_Numeral $eo_Rational $eo_Binary $eo_dt_constructors $eo_dt_selectors
; #trim-defs: 44
(declare-const Int Type)
(declare-consts <numeral> Int)
(declare-const Real Type)
(declare-consts <rational> Real)
(declare-const Char Type)
(declare-const Seq (-> Type Type))
(declare-consts <string> (Seq Char))
(define $eo_Numeral () Int)
(define $eo_Rational () Real)
(define $eo_String () (Seq Char))
(define $eo_Binary () Type)
(declare-const $eo_Term Type)
(define $eo_fail () (eo::requires true false true))
(program $eo_typeof ((T Type))
  :signature (T) Type)
(echo "include eo_builtin_smt")
(declare-const $eo_List Type)
(program $eo_dt_constructors ((T Type))
  :signature (Type) $eo_List)
(program $eo_dt_selectors ((T Type) (t T))
  :signature (T) $eo_List)
(declare-parameterized-const ite (($eo_x_1 Bool) (A Type :implicit) ($eo_x_2 A) ($eo_x_3 A)) A)
(declare-const and (-> Bool (-> Bool Bool)))
(declare-parameterized-const = ((A Type :implicit) ($eo_x_1 A) ($eo_x_2 A)) Bool)
(declare-const BitVec (-> Int Type))
(program $eo_typeof_apply ((T Type) (U Type))
  :signature (Type Type) Type
  (
  (($eo_typeof_apply (-> T U) T) U)
  )
)
(program $eo_typeof_ite (($eo_T Type) (A Type))
  :signature ($eo_T $eo_T) Type
  (
  (($eo_typeof_ite Bool A) (-> A A))
  )
)
(program $eo_typeof_= (($eo_T Type) (A Type))
  :signature ($eo_T) Type
  (
  (($eo_typeof_= A) (-> A Bool))
  )
)
(program $eo_typeof_fun_type ()
  :signature (Type Type) Type
  (
  (($eo_typeof_fun_type Type Type) Type)
  )
)
(program $eo_typeof_main
  ((T Type) (U Type) (V Type) (W Type) (f (-> U V T)) (x U) (t T)
   (W1 Type) (x1 W1) (W2 Type) (x2 W2) (W3 Type) (x3 W3)) 
  :signature (T) Type
  (
  (($eo_typeof_main Type)      Type)
  (($eo_typeof_main (-> T U))  ($eo_typeof_fun_type ($eo_typeof T) ($eo_typeof U))) 
  (($eo_typeof_main Bool)      Type)
  (($eo_typeof_main true)      Bool)
  (($eo_typeof_main false)     Bool)
  
  (($eo_typeof_main Int) Type)
  
  (($eo_typeof_main Real) Type)
  
  (($eo_typeof_main Char) Type)
  
  (($eo_typeof_main Seq) (-> Type Type))
  
  (($eo_typeof_main (_ (ite x1) x2)) ($eo_typeof_ite ($eo_typeof x1) ($eo_typeof x2)))
  
  (($eo_typeof_main and) (-> Bool (-> Bool Bool)))
  
  (($eo_typeof_main (= x1)) ($eo_typeof_= ($eo_typeof x1)))
  
  (($eo_typeof_main BitVec) (-> Int Type))

  (($eo_typeof_main (f x))     ($eo_typeof_apply ($eo_typeof f) ($eo_typeof x)))
  )
)
(program $eo_dt_constructors
  ((T Type))
  :signature (Type) $eo_List
  (

  (($eo_dt_constructors T) $eo_fail)
  )
)
(program $eo_dt_selectors ((T Type) (t T))
  :signature (T) $eo_List
  (

  (($eo_dt_selectors t) $eo_fail)
  )
)
(program $eo_model_sat () :signature ($eo_Term) Bool)
(program $eo_model_typeof () :signature ($eo_Term) Bool)
(echo "include eo_model_sat")
(program $eorx_refl ((T Type) (t T))
  :signature ( T Type) Bool
  (
  (($eorx_refl t T) (_ (= t) t))
  )
)
(program $eor_refl ((T Type) (t T))
  :signature (T) Bool
  (
  (($eor_refl t) ($eorx_refl t ($eo_model_typeof t)))
  )
)
(program $eovc_refl ((T Type) (t T))
  :signature (T) Bool
  (
  (($eovc_refl t)
     (eo::requires ($eo_model_sat ($eor_refl t)) false
       true))
  )
)
(echo "smt-meta $eovc_refl")
