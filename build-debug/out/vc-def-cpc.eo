; trim-defs: $eovc_instantiate
; #trim-defs: 55
(declare-const Int Type)
(declare-consts <numeral> Int)
(declare-const Real Type)
(declare-consts <rational> Real)
(declare-const Char Type)
(declare-const Seq (-> Type Type))
(declare-consts <string> (Seq Char))
(define $eo_Numeral () Int)
(define $eo_Rational () Real)
(define $eo_String () (Seq Char))
(define $eo_Binary () Type)
(program $eo_nil ((T Type) (U Type) (V Type) (W Type))
  :signature ((-> T U V) (eo::quote W)) W)
(program $eo_typeof ((T Type))
  :signature (T) Type)
(program $eo_fail_prog ()
  :signature (Bool) Bool
  (
  (($eo_fail_prog true) true)
  )
)
(define $eo_fail () ($eo_fail_prog false))
(program $eo_if_both ((b1 Bool) (b2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eo_if_both true true)  true)
  (($eo_if_both b1 b2)      false)
  )
)
(program $eo_requires_eq ((T Type) (U Type) (x1 T) (x3 U))
  :signature (T T U) U
  (
  (($eo_requires_eq x1 x1 x3) x3)
  )
)
(echo "include eo_builtin_smt :deps $eo_typeof_main $eo_String $eo_Numeral $eo_Rational $eo_Binary $eo_typeof ")
(declare-const $eo_List Type)
(declare-const $eo_List_nil $eo_List)
(declare-parameterized-const $eo_List_cons ((T Type :implicit))
  (-> T $eo_List $eo_List)
  :right-assoc-nil $eo_List_nil)
(define $eo_Option_null () $eo_List_nil)
(define $eo_Option_some ((T Type :implicit) (t T)) ($eo_List_cons t $eo_List_nil))
(define $eo_Option () $eo_List)
(program $eo_is_list_rec
  ((T Type) (U Type) (V Type) (W Type) (X Type)
   (f (-> T U V)) (x T) (y U) (nil W) (z X))
  :signature ((-> T U V) W X) Bool
  (
  (($eo_is_list_rec f nil (f x y)) ($eo_is_list_rec f nil y))
  (($eo_is_list_rec f nil nil)     true)
  (($eo_is_list_rec f nil z)       false)
  )
)
(define $eo_is_list
  ((T Type :implicit) (U Type :implicit) (V Type :implicit) (W Type :implicit)
   (f (-> T U V)) (x W))
  ($eo_is_list_rec f ($eo_nil f ($eo_typeof x)) x))
(program $eo_list_find_rec
  ((T Type) (U Type) (V Type) (W Type) (X Type)
   (f (-> T U V)) (x W) (z W) (y U) (z X) (nil W) (n $eo_Numeral))
  :signature ((-> T U V) W X $eo_Numeral) $eo_Numeral
  (
  (($eo_list_find_rec f (f x y) x n)  n)
  (($eo_list_find_rec f (f x y) z n)  ($eo_list_find_rec f y z (eo::add n 1)))
  (($eo_list_find_rec f nil z n)      -1)
  )
)
(define $eo_list_find
  ((T Type :implicit) (U Type :implicit) (V Type :implicit)
   (W1 Type :implicit) (W2 Type :implicit)
   (f (-> T U V)) (a W1) (e W2))
  ($eo_requires_eq ($eo_is_list f a) true
    ($eo_list_find_rec f a e 0)))
(declare-parameterized-const ite (($eo_x_1 Bool) (A Type :implicit) ($eo_x_2 A) ($eo_x_3 A)) A)
(declare-const and (-> Bool (-> Bool Bool)))
(declare-parameterized-const = ((A Type :implicit) ($eo_x_1 A) ($eo_x_2 A)) Bool)
(program $assoc_nil_nth_type ((T Type) (U Type) (V Type) (W Type) (W1 Type) (x1 W1) (f (-> T (-> U V))) (W2 Type) (x2 W2) (n Int))
  :signature ((-> T (-> U V)) W Int) Type
  (
  (($assoc_nil_nth_type f (_ (f x1) x2) 0) (eo::typeof x1))
  (($assoc_nil_nth_type f (_ (f x1) x2) n) ($assoc_nil_nth_type f x2 (eo::add n -1)))
  )
)
(program $assoc_nil_nth ((W Type) (x W) (W1 Type) (x1 W1) (T Type) (U Type) (V Type) (f (-> T (-> U V))) (W2 Type) (x2 W2) (n Int))
  :signature ((eo::quote f) (eo::quote x) (eo::quote n)) ($assoc_nil_nth_type f x n)
  (
  (($assoc_nil_nth f (_ (f x1) x2) 0) x1)
  (($assoc_nil_nth f (_ (f x1) x2) n) ($assoc_nil_nth f x2 (eo::add n -1)))
  )
)
(declare-const BitVec (-> Int Type))
(declare-const forall (-> $eo_List (-> Bool Bool)))
(program $substitute_simul ((S Type))
  :signature (S $eo_List $eo_List) S
)
(program $substitute_simul.fev2 ((S Type) (ss $eo_List) (xs $eo_List) (x S))
  :signature (S $eo_List $eo_List Bool) S
  (
  (($substitute_simul.fev2 x xs ss true) x)
  (($substitute_simul.fev2 x xs ss false) ($assoc_nil_nth $eo_List_cons ss ($eo_list_find $eo_List_cons xs x)))
  )
)
(program $substitute_simul.fev1 ((T Type) (S Type) (ss $eo_List) (xs $eo_List) (a T) (f (-> T S)) ($eo_2 (-> T S)) ($eo_1 T))
  :signature ($eo_List $eo_List T (-> T S) T (-> T S)) S
  (
  (($substitute_simul.fev1 ss xs a f $eo_1 $eo_2) ($eo_2 $eo_1))
  )
)
(program $substitute_simul ((S Type) (T Type) (a T) (f (-> T S)) (ss $eo_List) (xs $eo_List) (x S))
  :signature (S $eo_List $eo_List) S
  (
  (($substitute_simul (f a) xs ss) ($substitute_simul.fev1 ss xs a f ($substitute_simul a xs ss) ($substitute_simul f xs ss)))
  (($substitute_simul x xs ss) ($substitute_simul.fev2 x xs ss (eo::is_neg ($eo_list_find $eo_List_cons xs x))))
  )
)
(program $eo_typeof_apply ((T Type) (U Type))
  :signature (Type Type) Type
  (
  (($eo_typeof_apply (-> T U) T) U)
  )
)
(program $eo_typeof_ite ((A Type))
  :signature (Type Type) Type
  (
  (($eo_typeof_ite Bool A) (-> A A))
  )
)
(program $eo_typeof_= ((A Type))
  :signature (Type) Type
  (
  (($eo_typeof_= A) (-> A Bool))
  )
)
(program $eo_typeof_fun_type ()
  :signature (Type Type) Type
  (
  (($eo_typeof_fun_type Type Type) Type)
  )
)
(program $eo_typeof_main
  ((T Type) (U Type) (V Type) (W Type) (f (-> U V T)) (x U) (t T)
   (W1 Type) (x1 W1) (W2 Type) (x2 W2) (W3 Type) (x3 W3)) 
  :signature (T) Type
  (
  (($eo_typeof_main Type)      Type)
  (($eo_typeof_main (-> T U))  ($eo_typeof_fun_type ($eo_typeof T) ($eo_typeof U))) 
  (($eo_typeof_main Bool)      Type)
  (($eo_typeof_main true)      Bool)
  (($eo_typeof_main false)     Bool)
  
  (($eo_typeof_main Int) Type)
  
  (($eo_typeof_main Real) Type)
  
  (($eo_typeof_main Char) Type)
  
  (($eo_typeof_main Seq) (-> Type Type))
  
  (($eo_typeof_main (_ (ite x1) x2)) ($eo_typeof_ite ($eo_typeof x1) ($eo_typeof x2)))
  
  (($eo_typeof_main and) (-> Bool (-> Bool Bool)))
  
  (($eo_typeof_main (= x1)) ($eo_typeof_= ($eo_typeof x1)))
  
  (($eo_typeof_main BitVec) (-> Int Type))
  
  (($eo_typeof_main forall) (-> $eo_List (-> Bool Bool)))

  (($eo_typeof_main (f x))     ($eo_typeof_apply ($eo_typeof f) ($eo_typeof x)))
  )
)
(program $eo_dt_constructors
  ((T Type))
  :signature (Type) $eo_List
  (

  (($eo_dt_constructors T) $eo_fail)
  )
)
(program $eo_dt_selectors ((T Type) (t T))
  :signature (T) $eo_List
  (

  (($eo_dt_selectors t) $eo_fail)
  )
)
(program $eo_nil
  ((T Type) (U Type) (V Type) (W Type) (f (-> T U V)))
  :signature ((-> T U V) (eo::quote W)) W
  (
  (($eo_nil and T) true)

  (($eo_nil f T) $eo_fail)
  )
)
(program $eo_model_sat () :signature (Bool) $eo_Option)
(program $eo_model_typeof () :signature (Bool) Type)
(program $eo_model_is_input () :signature (Bool) Bool)
(echo "include eo_model_sat :deps $eo_typeof_main $eo_dt_constructors $eo_dt_selectors $eo_if_both $eo_Option_some $eo_Option_null $eo_model_sat $eo_model_typeof $eo_model_is_input ")
(program $eor_instantiate ((F Bool) (xs $eo_List) (ts $eo_List))
  :signature ($eo_List Bool) Bool
  (
  (($eor_instantiate ts (_ (forall xs) F)) ($substitute_simul F xs ts))
  )
)
(program $eovc_instantiate ((ts $eo_List) (xs $eo_List) (F Bool))
  :signature (Bool $eo_List $eo_List) Bool
  (
  (($eovc_instantiate F xs ts) (eo::define ((_v0 (_ (forall xs) F))) ($eo_requires_eq ($eo_model_sat _v0) ($eo_Option_some true) ($eo_requires_eq ($eo_model_sat ($eor_instantiate ts _v0)) ($eo_Option_some false) true))))
  )
)
(echo "smt-meta $eovc_instantiate :deps $smtx_hash $eo_reverse_hash $smtx_value_hash $eo_smt_type $tsm_Bool $eo_type $eo_fun_type $eo_apply ")
