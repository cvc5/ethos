; trim-defs: $eovc_symm
; #trim-defs: 48
(declare-const Int Type)
(declare-consts <numeral> Int)
(define $eo_Numeral () Int)
(declare-const Real Type)
(declare-consts <rational> Real)
(define $eo_Rational () Real)
(declare-const BitVec (-> Int Type))
(declare-consts <binary> (BitVec (eo::len eo::self)))
(define $eo_Binary () (BitVec 1))
(declare-const Char Type)
(declare-const Seq (-> Type Type))
(declare-consts <string> (Seq Char))
(define $eo_String () (Seq Char))
(declare-const $eo_List Type)
(declare-const $eo_List_nil $eo_List)
(declare-parameterized-const $eo_List_cons ((T Type :implicit))
  (-> T $eo_List $eo_List))
(declare-const $eo_Option Type)
(declare-const $eo_Option_null $eo_Option)
(declare-parameterized-const $eo_Option_some ((T Type :implicit) (t T :opaque)) $eo_Option)
(program $eo_typeof ((T Type)) :signature (T) Type)
(program $eo_dt_constructors () :signature (Type) $eo_List)
(program $eo_dt_selectors ((T Type)) :signature (T) $eo_List)
(program $eo_fail_prog ()
  :signature (Bool) Bool
  (
  (($eo_fail_prog true) true)
  )
)
(define $eo_fail () ($eo_fail_prog false))
(program $eo_if_both ((b1 Bool) (b2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eo_if_both true true)  true)
  (($eo_if_both b1 b2)      false)
  )
)
(program $eo_requires_eq ((T Type) (U Type) (x1 T) (x3 U))
  :signature (T T U) U
  (
  (($eo_requires_eq x1 x1 x3) x3)
  )
)
(echo "include eo_builtin_smt :deps $eo_typeof_main $eo_String $eo_Numeral $eo_Rational $eo_Binary $eo_typeof ")
(declare-const not (-> Bool Bool))
(declare-const and (-> Bool (-> Bool Bool)))
(declare-parameterized-const = ((A Type :implicit) ($eo_x_1 A) ($eo_x_2 A)) Bool)
(program $mk_symm ((T Type) (t2 T) (t1 T))
  :signature (Bool) Bool
  (
  (($mk_symm (_ (= t1) t2)) (_ (= t2) t1))
  (($mk_symm (not (_ (= t1) t2))) (not (_ (= t2) t1)))
  )
)
(program $eo_typeof_apply ((T Type) (U Type))
  :signature (Type Type) Type
  (
  (($eo_typeof_apply (-> T U) T) U)
  )
)
(program $eo_typeof_= ((A Type))
  :signature (Type) Type
  (
  (($eo_typeof_= A) (-> A Bool))
  )
)
(program $eo_typeof_fun_type ()
  :signature (Type Type) Type
  (
  (($eo_typeof_fun_type Type Type) Type)
  )
)
(program $eo_typeof_main
  ((T Type) (U Type) (V Type) (W Type) (f (-> U V T)) (x U) (t T)
   (W1 Type) (x1 W1) (W2 Type) (x2 W2) (W3 Type) (x3 W3)) 
  :signature (T) Type
  (
  (($eo_typeof_main Type)                 Type)
  (($eo_typeof_main (-> T U))
    
    ($eo_typeof_fun_type ($eo_typeof T)   ($eo_typeof U)))
  (($eo_typeof_main Bool)                 Type)
  (($eo_typeof_main true)                 Bool)
  (($eo_typeof_main false)                Bool)
  
  (($eo_typeof_main $eo_List)             Type)
  (($eo_typeof_main $eo_List_nil)         $eo_List)
  (($eo_typeof_main ($eo_List_cons x1))   (-> $eo_List $eo_List))
  (($eo_typeof_main $eo_Option)           Type)
  (($eo_typeof_main $eo_Option_null)      $eo_Option)
  (($eo_typeof_main ($eo_Option_some x1)) $eo_Option)
  
  (($eo_typeof_main Int) Type)
  
  (($eo_typeof_main Real) Type)
  
  (($eo_typeof_main BitVec) (-> Int Type))
  
  (($eo_typeof_main Char) Type)
  
  (($eo_typeof_main Seq) (-> Type Type))
  
  (($eo_typeof_main not) (-> Bool Bool))
  
  (($eo_typeof_main and) (-> Bool (-> Bool Bool)))
  
  (($eo_typeof_main (= x1)) ($eo_typeof_= ($eo_typeof x1)))

  (($eo_typeof_main (f x))        ($eo_typeof_apply ($eo_typeof f) ($eo_typeof x)))
  )
)
(program $eo_lit_type_Numeral ((T Type) (t T))
  :signature (T) Type
  (
  (($eo_lit_type_Numeral t) Int)
  )
)
(program $eo_lit_type_Rational ((T Type) (t T))
  :signature (T) Type
  (
  (($eo_lit_type_Rational t) Real)
  )
)
(program $eo_lit_type_Binary ((T Type) (t T))
  :signature (T) Type
  (
  (($eo_lit_type_Binary t) (BitVec (eo::len t)))
  )
)
(program $eo_lit_type_String ((T Type) (t T))
  :signature (T) Type
  (
  (($eo_lit_type_String t) (Seq Char))
  )
)
(program $eo_dt_constructors
  ((T Type))
  :signature (Type) $eo_List
  (

  (($eo_dt_constructors T) $eo_fail)
  )
)
(program $eo_dt_selectors ((T Type) (t T))
  :signature (T) $eo_List
  (

  (($eo_dt_selectors t) $eo_fail)
  )
)
(program $eo_model_sat () :signature (Bool) $eo_Option)
(program $eo_model_is_input () :signature (Bool) Bool)
(echo "include eo_model_sat :deps $eo_typeof_main $eo_is_ok $eo_dt_constructors $eo_dt_selectors $eo_if_both $eo_List_nil $eo_List_cons $eo_Option_some $eo_Option_null $eo_model_sat $eo_model_is_input $eo_Pair_mk $eo_Pair_first $eo_Pair_second $eo_lit_type_Numeral $eo_lit_type_Rational $eo_lit_type_String $eo_lit_type_Binary ")
(program $eor_symm ((F Bool))
  :signature (Bool) Bool
  (
  (($eor_symm F) (eo::define ((_v0 ($mk_symm F))) ($eo_requires_eq ($eo_typeof _v0) Bool _v0)))
  )
)
(program $eovc_symm ((F Bool))
  :signature (Bool) Bool
  (
  (($eovc_symm F) (eo::define ((_v0 ($eor_symm F))) ($eo_requires_eq ($eo_model_is_input _v0) true ($eo_requires_eq ($eo_typeof F) Bool ($eo_requires_eq ($eo_model_sat F) ($eo_Option_some true) ($eo_requires_eq ($eo_model_sat _v0) ($eo_Option_some false) true))))))
  )
)
(echo "smt-meta $eovc_symm :deps $smtx_hash $eo_reverse_hash $smtx_value_hash $smtx_reverse_value_hash $eo_smt_type $tsm_Bool $eo_Type $eo_fun_type $eo_apply ")
