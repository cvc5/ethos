; trim-defs: $eovc_arrays_ext
; #trim-defs: 48
(declare-const Int Type)
(declare-consts <numeral> Int)
(declare-const Real Type)
(declare-consts <rational> Real)
(declare-const Char Type)
(declare-const Seq (-> Type Type))
(declare-consts <string> (Seq Char))
(define $eo_Numeral () Int)
(define $eo_Rational () Real)
(define $eo_String () (Seq Char))
(define $eo_Binary () Type)
(program $eo_typeof ((T Type))
  :signature (T) Type)
(program $eo_fail_prog ()
  :signature (Bool) Bool
  (
  (($eo_fail_prog true) true)
  )
)
(define $eo_fail () ($eo_fail_prog false))
(program $eo_if_both ((b1 Bool) (b2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eo_if_both true true)  true)
  (($eo_if_both b1 b2)      false)
  )
)
(program $eo_requires_eq ((T Type) (U Type) (x1 T) (x3 U))
  :signature (T T U) U
  (
  (($eo_requires_eq x1 x1 x3) x3)
  )
)
(echo "include eo_builtin_smt :deps $eo_typeof_main $eo_String $eo_Numeral $eo_Rational $eo_Binary $eo_typeof ")
(declare-const $eo_List Type)
(declare-const $eo_List_nil $eo_List)
(declare-parameterized-const $eo_List_cons ((T Type :implicit))
  (-> T $eo_List $eo_List)
  :right-assoc-nil $eo_List_nil)
(define $eo_Option_null () $eo_List_nil)
(define $eo_Option_some ((T Type :implicit) (t T)) ($eo_List_cons t $eo_List_nil))
(define $eo_Option () $eo_List)
(declare-parameterized-const ite (($eo_x_1 Bool) (A Type :implicit) ($eo_x_2 A) ($eo_x_3 A)) A)
(declare-const not (-> Bool Bool))
(declare-const and (-> Bool (-> Bool Bool)))
(declare-parameterized-const = ((A Type :implicit) ($eo_x_1 A) ($eo_x_2 A)) Bool)
(declare-const Array (-> Type (-> Type Type)))
(declare-parameterized-const select ((U Type :implicit) (T Type :implicit) ($eo_x_1 (_ (Array U) T)) ($eo_x_2 U)) T)
(declare-parameterized-const @array_deq_diff ((T Type :implicit) (U Type :implicit) (a (_ (Array T) U) :opaque) (b (_ (Array T) U) :opaque)) T)
(declare-const BitVec (-> Int Type))
(program $eo_typeof_apply ((T Type) (U Type))
  :signature (Type Type) Type
  (
  (($eo_typeof_apply (-> T U) T) U)
  )
)
(program $eo_typeof_ite ((A Type))
  :signature (Type Type) Type
  (
  (($eo_typeof_ite Bool A) (-> A A))
  )
)
(program $eo_typeof_= ((A Type))
  :signature (Type) Type
  (
  (($eo_typeof_= A) (-> A Bool))
  )
)
(program $eo_typeof_select ((U Type) (T Type))
  :signature (Type) Type
  (
  (($eo_typeof_select (_ (Array U) T)) (-> U T))
  )
)
(program $eo_typeof_@array_deq_diff ((T Type) (U Type) (a (_ (Array T) U)) (b (_ (Array T) U)))
  :signature (Type Type Type Type) Type
  (
  ((eo::define ((_v0 (_ (Array T) U))) ($eo_typeof_@array_deq_diff _v0 a _v0 b)) T)
  )
)
(program $eo_typeof_fun_type ()
  :signature (Type Type) Type
  (
  (($eo_typeof_fun_type Type Type) Type)
  )
)
(program $eo_typeof_main
  ((T Type) (U Type) (V Type) (W Type) (f (-> U V T)) (x U) (t T)
   (W1 Type) (x1 W1) (W2 Type) (x2 W2) (W3 Type) (x3 W3)) 
  :signature (T) Type
  (
  (($eo_typeof_main Type)      Type)
  (($eo_typeof_main (-> T U))  ($eo_typeof_fun_type ($eo_typeof T) ($eo_typeof U))) 
  (($eo_typeof_main Bool)      Type)
  (($eo_typeof_main true)      Bool)
  (($eo_typeof_main false)     Bool)
  
  (($eo_typeof_main Int) Type)
  
  (($eo_typeof_main Real) Type)
  
  (($eo_typeof_main Char) Type)
  
  (($eo_typeof_main Seq) (-> Type Type))
  
  (($eo_typeof_main (_ (ite x1) x2)) ($eo_typeof_ite ($eo_typeof x1) ($eo_typeof x2)))
  
  (($eo_typeof_main not) (-> Bool Bool))
  
  (($eo_typeof_main and) (-> Bool (-> Bool Bool)))
  
  (($eo_typeof_main (= x1)) ($eo_typeof_= ($eo_typeof x1)))
  
  (($eo_typeof_main Array) (-> Type (-> Type Type)))
  
  (($eo_typeof_main (select x1)) ($eo_typeof_select ($eo_typeof x1)))
  
  (($eo_typeof_main (@array_deq_diff x1 x2)) ($eo_typeof_@array_deq_diff ($eo_typeof x1) x1 ($eo_typeof x2) x2))
  
  (($eo_typeof_main BitVec) (-> Int Type))

  (($eo_typeof_main (f x))     ($eo_typeof_apply ($eo_typeof f) ($eo_typeof x)))
  )
)
(program $eo_dt_constructors
  ((T Type))
  :signature (Type) $eo_List
  (

  (($eo_dt_constructors T) $eo_fail)
  )
)
(program $eo_dt_selectors ((T Type) (t T))
  :signature (T) $eo_List
  (

  (($eo_dt_selectors t) $eo_fail)
  )
)
(program $eo_model_sat () :signature (Bool) $eo_Option)
(program $eo_model_typeof () :signature (Bool) Type)
(program $eo_model_is_input () :signature (Bool) Bool)
(echo "include eo_model_sat :deps $eo_typeof_main $eo_dt_constructors $eo_dt_selectors $eo_if_both $eo_Option_some $eo_Option_null $eo_model_sat $eo_model_typeof $eo_model_is_input ")
(program $eor_arrays_ext ((T Type) (U Type) (a (_ (Array T) U)) (b (_ (Array T) U)))
  :signature (Bool) Bool
  (
  (($eor_arrays_ext (not (_ (= a) b))) (eo::define ((_v0 (@array_deq_diff a b))) (not (_ (= (_ (select a) _v0)) (_ (select b) _v0)))))
  )
)
(program $eovc_arrays_ext ((T Type) (U Type) (a (_ (Array T) U)) (b (_ (Array T) U)))
  :signature ((_ (Array T) U) (_ (Array T) U)) Bool
  (
  (($eovc_arrays_ext b a) (eo::define ((_v0 (not (_ (= a) b)))) ($eo_requires_eq ($eo_model_sat _v0) ($eo_Option_some true) ($eo_requires_eq ($eo_model_sat ($eor_arrays_ext _v0)) ($eo_Option_some false) true))))
  )
)
(echo "smt-meta $eovc_arrays_ext :deps $smtx_model_lookup_predicate $smtx_hash $eo_reverse_hash $smtx_value_hash $vsm_reverse_hash $tsm_Bool $eo_type $eo_fun_type $eo_apply ")
