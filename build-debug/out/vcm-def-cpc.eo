; trim-defs: $eovc_cong $eo_typeof_main $eo_String $eo_Numeral $eo_Rational $eo_Binary $eo_dt_constructors $eo_dt_selectors
; #trim-defs: 49
(declare-const Int Type)
(declare-consts <numeral> Int)
(declare-const Real Type)
(declare-consts <rational> Real)
(declare-const Char Type)
(declare-const Seq (-> Type Type))
(declare-consts <string> (Seq Char))
(define $eo_Numeral () Int)
(define $eo_Rational () Real)
(define $eo_String () (Seq Char))
(define $eo_Binary () Type)
(program $eo_nil ((T Type) (U Type) (V Type) (W Type))
  :signature ((-> T U V) (eo::quote W)) W)
(program $eo_typeof ((T Type))
  :signature (T) Type)
(program $eo_fail_prog ()
  :signature (Bool) Bool
  (
  (($eo_fail_prog true) true)
  )
)
(define $eo_fail () ($eo_fail_prog false))
(program $eo_requires_true ((T Type) (t T))
  :signature (Bool T) T
  (
  (($eo_requires_true true t) t)
  )
)
; This file defines a deep embedding of SMT-LIB into Eunoia.
; It is used for two purposes:
; 1. To give an SMT-LIB specific bootstrapping of the SMT-LIB inspired builtin Eunoia functions, e.g. $eo_add.
; 2. It is used to define the end signature for defining the model semantics of SMT-LIB.

; All of the functions in this file will be handled by smt_meta.

;;; declarations to define literal types

; The type of $smt_apply_* terms.
; If a term has this type, we know it is an SMT-LIB type,
; but we don't know which one from ordinary type checking.
(declare-const $smt_BuiltinType Type)

; The operator of $smt_apply_* terms
(define $smt_id () $eo_String)

; note: decimal and hexadecimal omitted for now.

;;; Deep embedding of SMT-LIB operator applications into Eunoia

; Apply the SMT operator named "op" to x1, x2, and so on.
; Assumes arity of SMT-LIB operators are at most 5.
(declare-parameterized-const $smt_type_0
  ((op $smt_id :opaque))
  Type)
(declare-parameterized-const $smt_type_1
  ((W1 Type :implicit) (op $smt_id :opaque) (x1 W1 :opaque))
  Type)
(declare-parameterized-const $smt_apply_0
  ((op $smt_id :opaque))
  $smt_BuiltinType)
(declare-parameterized-const $smt_apply_1
  ((W1 Type :implicit)
   (op $smt_id :opaque) (x1 W1 :opaque)) $smt_BuiltinType)
(declare-parameterized-const $smt_apply_2
  ((W1 Type :implicit) (W2 Type :implicit)
   (op $smt_id :opaque) (x1 W1 :opaque) (x2 W2 :opaque)) $smt_BuiltinType)
(declare-parameterized-const $smt_apply_3
  ((W1 Type :implicit) (W2 Type :implicit) (W3 Type :implicit)
   (op $smt_id :opaque) (x1 W1 :opaque) (x2 W2 :opaque) (x3 W3 :opaque)) $smt_BuiltinType)
(declare-parameterized-const $smt_apply_4
  ((W1 Type :implicit) (W2 Type :implicit) (W3 Type :implicit) (W4 Type :implicit)
   (op $smt_id :opaque) (x1 W1 :opaque) (x2 W2 :opaque) (x3 W3 :opaque) (x4 W4 :opaque)) $smt_BuiltinType)
(declare-parameterized-const $smt_apply_5
  ((W1 Type :implicit) (W2 Type :implicit) (W3 Type :implicit) (W4 Type :implicit) (W5 Type :implicit)
   (op $smt_id :opaque) (x1 W1 :opaque) (x2 W2 :opaque) (x3 W3 :opaque) (x4 W4 :opaque) (x5 W5 :opaque)) $smt_BuiltinType)

; Handles the corner case of SMT-LIB equality, which we use for Eunoia terms as well.
(declare-parameterized-const $smt_apply_=
  ((W Type :implicit) (x1 W :opaque) (x2 W :opaque))
  $smt_BuiltinType)

; builtin types, which print as e.g. "sm.Int".
(declare-parameterized-const $smt_builtin_type_0
  ((op $smt_id :opaque))
  Type)
; NOTE: the fact that x1 is not opaque indicates that
; bitvectors print as (_ BitVec w) not (BitVec w).
(declare-parameterized-const $smt_builtin_type_1
  ((W1 Type :implicit) (op $smt_id :opaque) (x1 W1))
  Type)

(define $smt_builtin_Bool () ($smt_type_0 "Bool"))
(define $smt_builtin_Int () ($smt_type_0 "Int"))
(define $smt_builtin_Real () ($smt_type_0 "Real"))
(define $smt_builtin_String () ($smt_type_0 "String"))
(define $smt_builtin_true () ($smt_apply_0 "true"))
(define $smt_builtin_false () ($smt_apply_0 "false"))
(define $smt_builtin_= ((W Type :implicit) (x1 W) (x2 W)) ($smt_apply_= x1 x2))
(define $smt_builtin_ite ((W Type :implicit) (b $smt_builtin_Bool) (x1 W) (x2 W)) ($smt_apply_3 "ite" b x1 x2))
(define $smt_builtin_z_zero () ($smt_apply_0 "0"))
(define $smt_builtin_z_one () ($smt_apply_0 "1"))
(define $smt_builtin_z_two () ($smt_apply_0 "2"))
(define $smt_builtin_add ((W Type :implicit) (x1 W) (x2 W)) ($smt_apply_2 "+" x1 x2))
(define $smt_builtin_mul ((W Type :implicit) (x1 W) (x2 W)) ($smt_apply_2 "*" x1 x2))
(define $smt_builtin_neg ((W Type :implicit) (x1 W)) ($smt_apply_1 "-" x1))
(define $smt_builtin_div ((W Type :implicit) (x1 W) (x2 W)) ($smt_apply_2 "div" x1 x2))
(define $smt_builtin_mod ((W Type :implicit) (x1 W) (x2 W)) ($smt_apply_2 "mod" x1 x2))
(define $smt_builtin_not ((b $smt_builtin_Bool)) ($smt_apply_1 "not" b))
(define $smt_builtin_and ((b1 $smt_builtin_Bool) (b2 $smt_builtin_Bool)) ($smt_apply_2 "and" b1 b2))
(define $smt_builtin_or ((b1 $smt_builtin_Bool) (b2 $smt_builtin_Bool)) ($smt_apply_2 "or" b1 b2))

; TODO: =, ite

; In this signature, we heavily use references to the Datatypes corresponding
; to the final deep embeddings of Eunoia terms (eo.Term) and SMT-LIB terms
; (sm.Term), where the latter is a subfield type of the former.
; Opaque arguments of a symbol X will be an argument of the constructor eo.X
; (respectively sm.X). Symbols with no

; We introduce datatype constructors for these datatypes ($smd_eo.X and $smd_sm.X)
; respectively. It is important that we mark their arguments as :opaque, as this
; correctly models the pattern matching in the smt-meta later.

; Note that these datatypes will be renamed and replaced by their definitions
; which is hardcoded into smt_meta.smt2.
; We could also have these auto-generated, but leads to complications when it
; comes to printing the argument types, as e.g. the argument to sm.Numeral is
; an SMT-LIB numeral, not a symbolic SMT term.

;;; Final deep embedding datatypes

; Now, we introduce placeholders for the final deep embedding.
; - $smt_Term, $smt_Type, $smt_Value are introduced as placeholders for the final datatypes in the deep embedding.
; - The SMT-like literals are declared for $smt_Term.
; - 

; A Eunoia term.
; This will be replaced by the datatype eo.Term in the final encoding.
(declare-const $eo_Term Type)

; An SMT-LIB type.
; This will be replaced by the datatype tsm.Type in the final encoding.
(declare-const $smt_Type Type)

; An SMT-LIB term.
; This will be replaced by the datatype sm.Term in the final encoding.
(declare-const $smt_Term Type)

; An SMT-LIB value.
; This will be replaced by the datatype vsm.Value in the final encoding.
(declare-const $smt_Value Type)

; The type of values for functions in SMT-LIB.
(declare-const $smt_Map Type)

;;; SMT type datatype constructors

; The Boolean type
(declare-const $smd_tsm.Bool $smt_Type)

; Function types
(declare-parameterized-const $smd_tsm.FunType
  ((T1 $smt_Type :opaque) (T2 $smt_Type :opaque)) $smt_Type)

; Uninterpreted sorts
(declare-parameterized-const $smd_tsm.USort
  ((id $smt_builtin_Int :opaque)) $smt_Type)

; The sort of a term that doesn't have an SMT-LIB type.
; This is used as an error condition
(declare-parameterized-const $smd_tsm.NullSort
  ((id $smt_builtin_Int :opaque)) $smt_Type)

; Apply types
(declare-parameterized-const $smd_tsm.Apply
  ((t1 $smt_Type :opaque) (t2 $smt_Type :opaque)) $smt_Type)

;;; SMT term datatype constructors

; Note the Bool type is "inlined" into the final signature
(declare-parameterized-const $smd_sm.Bool
  ((b $smt_builtin_Bool :opaque)) $smt_Term)
(declare-parameterized-const $smd_sm.Numeral
  ((n $smt_builtin_Int :opaque)) $smt_Term)
(declare-parameterized-const $smd_sm.Rational
  ((r $smt_builtin_Real :opaque)) $smt_Term)
(declare-parameterized-const $smd_sm.String
  ((s ($smt_type_0 "String") :opaque)) $smt_Term)
(declare-parameterized-const $smd_sm.Binary
  ((w $smt_builtin_Int :opaque) (v $smt_builtin_Int :opaque)) $smt_Term)

; Apply terms
(declare-parameterized-const $smd_sm.Apply
  ((t1 $smt_Term :opaque) (t2 $smt_Term :opaque)) $smt_Term)

; Skolems?
;(declare-parameterized-const $smd_sm.Skolem
;  ((T $smt_Type :opaque) (k $smt_Term :opaque) (id $smt_builtin_Int :opaque))
;  $smt_Term)

; Free constants
(declare-parameterized-const $smd_sm.Const ((v $smt_Value :opaque)) $smt_Term)
(define $sm_Const ((v $smt_Value)) ($smd_sm.Const v))

;;; SMT value datatype constructors

; A value denoting a map.
(declare-parameterized-const $smd_vsm.Map
  ((T $smt_Type :opaque) (m $smt_Map :opaque))
  $smt_Value)

; A value denoting an uninterpreted constant.
(declare-parameterized-const $smd_vsm.UConst
  ((T $smt_Type :opaque) (id $smt_builtin_Int :opaque))
  $smt_Value)

; A value represented by an SMT-LIB term. This is used for types
; where terms are used to denote the values of that type, e.g.
; SMT-LIB numerals for Int.
(declare-parameterized-const $smd_vsm.Term
  ((t $smt_Term :opaque))
  $smt_Value)

; Denotes a failure case for values.
(declare-const $smd_vsm.NotValue $smt_Value)

;;; SMT map value datatype constructors

; Constructs a map value where i is mapped to e.
(declare-parameterized-const $smd_msm.Map.cons
  ((i $smt_Value :opaque) (e $smt_Value :opaque) (m $smt_Map :opaque))
  $smt_Map)

; Constructs a map value where all indices are mapped to e.
(declare-parameterized-const $smd_msm.Map.default
  ((e $smt_Value :opaque))
  $smt_Map)

;;; Eunoia datatype constructors

; The type of types
(declare-const $smd_eo.Type $eo_Term)

; The Eunoia representation of "stuckness".
(declare-const $smd_eo.Stuck $eo_Term)
(define $eo_stuck () $smd_eo.Stuck)

; An application of a Eunoia term
(declare-parameterized-const $smd_eo.Apply
  ((f $eo_Term :opaque) (a $eo_Term :opaque))
  $eo_Term)
; note: this is a program to ensure that "stuckness" propagates. It is also
; necessary to preserve its definition, since it must be in the final vc.
;(define $eo_apply ((x $eo_Term) (y $eo_Term)) ($smd_eo.Apply x y))
(program $eo_apply ((x $eo_Term) (y $eo_Term))
  :signature ($eo_Term $eo_Term) $eo_Term
  (
  (($eo_apply x y) ($smd_eo.Apply x y))
  )
)

; The Eunoia function type
(declare-parameterized-const $smd_eo.FunType
  ((t1 $eo_Term :opaque) (t2 $eo_Term :opaque))
  $eo_Term)
; note: this is a program to ensure that "stuckness" propagates. It is also
; necessary to preserve its definition, since it must be in the final vc.
;(define $eo_fun_type ((t1 $eo_Term) (t2 $eo_Term)) ($smd_eo.FunType t1 t2))
(program $eo_fun_type ((t1 $eo_Term) (t2 $eo_Term))
  :signature ($eo_Term $eo_Term) $eo_Term
  (
  (($eo_fun_type t1 t2) ($smd_eo.FunType t1 t2))
  )
)

; The Eunoia representation of an SMT-LIB term.
(declare-parameterized-const $smd_eo.SmtTerm ((t $smt_Term :opaque)) $eo_Term)
(define $eo_smt_term ((t $smt_Term)) ($smd_eo.SmtTerm t))

; The Eunoia representation of an SMT-LIB type.
(declare-parameterized-const $smd_eo.SmtType ((t $smt_Type :opaque)) $eo_Term)
(define $eo_smt_type ((T $smt_Type)) ($smd_eo.SmtType T))

; The Eunoia representation of an SMT-LIB value.
(declare-parameterized-const $smd_eo.SmtValue ((t $smt_Value :opaque)) $eo_Term)
(define $eo_smt_value ((T $smt_Value)) ($smd_eo.SmtValue T))

; Represents a Eunoia variable in the final deep embedding.
(declare-parameterized-const $smd_eo.Var
  ((s $smt_builtin_String :opaque) (T $eo_Term :opaque))
  $eo_Term)
(define $eo_Var ((s $smt_builtin_String) (T $eo_Term)) ($smd_eo.Var s T))

;;; External datatype access

(define $sm_mk_true () ($smd_sm.Bool $smt_builtin_true))
(define $sm_mk_false () ($smd_sm.Bool $smt_builtin_false))
(define $sm_mk_bool ((c $smt_builtin_Bool))
  ($smd_sm.Bool c))
(define $sm_mk_z ((n $smt_builtin_Int))
  ($smd_sm.Numeral n))
(define $sm_mk_q ((r $smt_builtin_Real))
  ($smd_sm.Rational r))
(define $sm_mk_str ((s $smt_builtin_String))
  ($smd_sm.String s))

;(define $smt_Int () ($smt_builtin_type_0 "Int"))
;(define $smt_Real () ($smt_builtin_type_0 "Real"))
;(define $smt_BitVec ((w $smt_builtin_Int)) (_ ($smt_builtin_type_1 "BitVec") w))
;(define $smt_String () ($smt_builtin_type_0 "String"))

;;; Defining parametric bitvector operators

; The operators in this section are needed to reason about the parametric
; operations on the Eunoia binary literal type.

; program: $sm_mk_pow2
; return: >
;   The integer value of 2 raised to the i^th power.
; note: We expect i to be non-negative.
(program $sm_mk_pow2 ((i $smt_builtin_Int))
  :signature ($smt_builtin_Int) $smt_builtin_Int
  (
  (($sm_mk_pow2 i)  
    ($smt_apply_3 "ite" ($smt_apply_2 "<=" i $smt_builtin_z_zero)
      $smt_builtin_z_one
      ($smt_builtin_mul $smt_builtin_z_two
        ($sm_mk_pow2 ($smt_apply_2 "-" i $smt_builtin_z_one)))))
  )
)

; program: $sm_mk_bit
; return: >
;   true iff the i^th bit of a binary with integer value x is set. Note this
;   method is agnostic to bitwidth. 
(program $sm_mk_bit ((x $smt_builtin_Int) (i $smt_builtin_Int))
  :signature ($smt_builtin_Int $smt_builtin_Int) $smt_builtin_Bool
  (
  (($sm_mk_bit x i) ($smt_apply_1 "= 1" ($smt_builtin_mod ($smt_builtin_div x ($sm_mk_pow2 i)) $smt_builtin_z_two)))
  )
)

; program: $sm_mk_binary_and
; return: >
;   The integer value of the binary value obtained by taking the bitwise and of
;   binary literals ($eo_binary w n1) and ($eo_binary w n2). This value will be
;   taken modulo 2^w.
; note: >
;   Assumes that 0 <= n1 < 2^w, 0 <= n2 < 2^w.
(program $sm_mk_binary_and ((w $smt_builtin_Int) (n1 $smt_builtin_Int) (n2 $smt_builtin_Int))
  :signature ($smt_builtin_Int $smt_builtin_Int $smt_builtin_Int) $smt_builtin_Int
  (
  (($sm_mk_binary_and w n1 n2)
     ($smt_apply_3 "ite" ($smt_apply_2 "=" w $smt_builtin_z_zero) $smt_builtin_z_zero
     ($smt_apply_3 "ite" ($smt_apply_2 "=" w $smt_builtin_z_one)
       ($smt_apply_3 "ite"
        ($smt_builtin_and
          ($smt_apply_2 "=" n1 $smt_builtin_z_one)
          ($smt_apply_2 "=" n2 $smt_builtin_z_one))
        $smt_builtin_z_one $smt_builtin_z_zero)
       ($smt_builtin_add
         ($sm_mk_binary_and ($smt_apply_2 "-" w $smt_builtin_z_one) n1 n2)
         ($smt_builtin_mul ($sm_mk_pow2 w)
            ($smt_apply_3 "ite" ($smt_builtin_and ($sm_mk_bit n1 w) ($sm_mk_bit n2 w)) $smt_builtin_z_one $smt_builtin_z_zero))))))
  )
)

; program: $sm_mk_binary_or
; return: >
;   The integer value of the binary value obtained by taking the bitwise or of
;   binary literals ($eo_binary w n1) and ($eo_binary w n2). This is equal to
;   n1+n2-($sm_mk_binary_and w n1 n2). This value will be taken modulo 2^w.
; note: >
;   Assumes that 0 <= n1 < 2^w, 0 <= n2 < 2^w.
(program $sm_mk_binary_or ((w $smt_builtin_Int) (n1 $smt_builtin_Int) (n2 $smt_builtin_Int))
  :signature ($smt_builtin_Int $smt_builtin_Int $smt_builtin_Int) $smt_builtin_Int
  (
  (($sm_mk_binary_or w n1 n2)
    ($smt_apply_3 "+" n1 n2 ($smt_builtin_neg ($sm_mk_binary_and w n1 n2))))
  )
)

; program: $sm_mk_binary_xor
; return: >
;   The integer value of the binary value obtained by taking the bitwise xor of
;   binary literals ($eo_binary w n1) and ($eo_binary w n2). This is equal to
;   n1+n2-(2*($sm_mk_binary_and w n1 n2)). This value will be taken modulo 2^w.
; note: >
;   Assumes that 0 <= n1 < 2^w, 0 <= n2 < 2^w.
(program $sm_mk_binary_xor ((w $smt_builtin_Int) (n1 $smt_builtin_Int) (n2 $smt_builtin_Int))
  :signature ($smt_builtin_Int $smt_builtin_Int $smt_builtin_Int) $smt_builtin_Int
  (
  (($sm_mk_binary_xor w n1 n2)
    ($smt_apply_3 "+" n1 n2 ($smt_builtin_neg ($smt_apply_1 "* 2" ($sm_mk_binary_and w n1 n2)))))
  )
)

; program: $sm_mk_binary_not
; return: >
;   The integer value of the binary value obtained by taking bitwise not of
;   the binary literal ($eo_binary w n). This is equal to 2^w-(1+n). This value
;   will be taken modulo 2^w.
; note: >
;   Assumes that 0 <= n < 2^w.
(program $sm_mk_binary_not ((w $smt_builtin_Int) (n $smt_builtin_Int))
  :signature ($smt_builtin_Int $smt_builtin_Int) $smt_builtin_Int
  (
  (($sm_mk_binary_not w n)
    ($smt_apply_2 "-" ($sm_mk_pow2 w) ($smt_apply_1 "+ 1" n)))
  )
)

; program: $sm_mk_binary_max
; return: >
;   The integer value of the maximum unsigned binary value of width w. This is
;   equal to 1-2^w. This value will be taken modulo 2^w.
(program $sm_mk_binary_max ((w $smt_builtin_Int))
  :signature ($smt_builtin_Int) $smt_builtin_Int
  (
  (($sm_mk_binary_max w) ($smt_apply_1 "- 1" ($sm_mk_pow2 w)))
  )
)

; program: $sm_mk_binary_concat
; return: >
;   The integer value of the binary value obtained by concatenating binary
;   literals ($eo_binary w1 n1) and ($eo_binary w2 n2). This is equal to
;   n1*2^w2 + n2. Note the return value does not depend on w1. This value will
;   be taken modulo 2^(w1+w2).
; note: >
;   Assumes that 0 <= n1 < 2^w1, 0 <= n2 < 2^w2.
(program $sm_mk_binary_concat
  ((w1 $smt_builtin_Int) (n1 $smt_builtin_Int) (w2 $smt_builtin_Int) (n2 $smt_builtin_Int))
  :signature ($smt_builtin_Int $smt_builtin_Int $smt_builtin_Int $smt_builtin_Int) $smt_builtin_Int
  (
  (($sm_mk_binary_concat w1 n1 w2 n2)
    ($smt_builtin_add ($smt_builtin_mul n1 ($sm_mk_pow2 w2)) n2))
  )
)

; program: $sm_mk_binary_extract
; return: >
;   The integer value of the binary value obtained by extracting bits x1
;   through x2 (inclusive) of binary literal ($eo_binary w n). This is equal
;   to (div n 2^x1). This value will be taken modulo 2^(1+x2-x1).
; note: >
;   Assumes that 0 <= n < 2^w, 0 <= x1 <= x2.
(program $sm_mk_binary_extract
  ((w $smt_builtin_Int) (n $smt_builtin_Int) (x1 $smt_builtin_Int) (x2 $smt_builtin_Int))
  :signature ($smt_builtin_Int $smt_builtin_Int $smt_builtin_Int $smt_builtin_Int) $smt_builtin_Int
  (
  (($sm_mk_binary_extract w n x1 x2) ($smt_builtin_div n ($sm_mk_pow2 x1)))
  )
)

;;; Utilities

(define $eo_true () ($eo_smt_term $sm_mk_true))
(define $eo_false () ($eo_smt_term $sm_mk_false))
(define $eo_mk_bool ((x $smt_builtin_Bool))
  ($eo_smt_term ($sm_mk_bool x)))
(define $eo_mk_true () ($eo_smt_term $sm_mk_true))
(define $eo_mk_false () ($eo_smt_term $sm_mk_false))
(define $eo_mk_numeral ((x $smt_builtin_Int))
  ($eo_smt_term ($sm_mk_z x)))
(define $eo_mk_rational ((x $smt_builtin_Real))
  ($eo_smt_term ($sm_mk_q x)))
(define $eo_mk_string ((x $smt_builtin_String))
  ($eo_smt_term ($sm_mk_str x)))

; define: $eo_binary
; note: >
;   This should be used in pattern matching only, where it is assume that
;   it will match "legal" binary values only.
(define $eo_binary ((x1 $smt_builtin_Int) (x2 $smt_builtin_Int))
  ($eo_smt_term ($smd_sm.Binary x1 x2)))

; define: $eo_empty_binary
(define $eo_empty_binary ()
  ($eo_binary 0 0))

; program: $eo_mk_binary
; return: >
;   A "legal" binary value ($eo_mk_binary w n1), where 0 <= n1 < 2^w, n1 is
;   congruent mod 2^w to n if w is a 32-bit numeral value, or stuck otherwise.
; note: >
;   All binaries considered by Eunoia should run through this method to ensure
;   they are legal.
(program $eo_mk_binary ((w $smt_builtin_Int) (n $smt_builtin_Int))
  :signature ($smt_builtin_Int $smt_builtin_Int) $eo_Term
  (
  (($eo_mk_binary w n)
    ($smt_apply_3 "ite"
      ($smt_builtin_and ($smt_apply_1 "<= 0" w) ($smt_apply_1 ">= 4294967296" w))
      ($eo_binary w ($smt_builtin_mod n ($sm_mk_pow2 w)))
      $eo_stuck))
  )
)

;;;;;; Eunoia builtin

; We are now ready to define the builtins of Eunoia.
; We define all the Eunoia builtins here that are best to
; define in terms of SMT-LIB operators.

;;; If then else, is ok, requires

; program: $eo_ite
; implements: $eo_ite
(define $eo_ite ((x1 $eo_Term) (x2 $eo_Term) (x3 $eo_Term))
  ($smt_apply_3 "ite" ($smt_apply_= x1 $eo_mk_true)
    x2
  ($smt_apply_3 "ite" ($smt_apply_= x1 $eo_mk_false)
    x3
    $eo_stuck)))

; TODO: we could define a total version here, which
; can be used if we are sure the condition is not
; stuck. Alternatively this could be automated in
; the compiler.

; program: $eo_is_ok
; implements: $eo_is_ok
(define $eo_is_ok ((x $eo_Term))
  ($smt_apply_3 "ite" ($smt_apply_= x $eo_stuck)
    $eo_mk_false
    $eo_mk_true))

; program: $eo_requires
; implements: $eo_requires
(program $eo_requires ((x1 $eo_Term) (x3 $eo_Term))
  :signature ($eo_Term $eo_Term $eo_Term) $eo_Term
  (
  (($eo_requires x1 x1 x3) x3)
  )
)

;;; Boolean operators

; program: $eo_not
; implements: $eo_not
(program $eo_not ((b $smt_builtin_Bool) (w $smt_builtin_Int) (n $smt_builtin_Int))
  :signature ($eo_Term) $eo_Term
  (
  (($eo_not ($eo_mk_bool b))   ($eo_mk_bool ($smt_apply_1 "not" b)))
  (($eo_not ($eo_binary w n))  ($eo_mk_binary w ($sm_mk_binary_not w n)))
  )
)

; program: $eo_and
; implements: $eo_and
(program $eo_and
  ((b1 $smt_builtin_Bool) (b2 $smt_builtin_Bool) (w $smt_builtin_Int)
   (n1 $smt_builtin_Int) (n2 $smt_builtin_Int))
  :signature ($eo_Term $eo_Term) $eo_Term
  (
  (($eo_and ($eo_mk_bool b1) ($eo_mk_bool b2))
     ($eo_mk_bool ($smt_apply_2 "and" b1 b2)))
  (($eo_and ($eo_binary w n1) ($eo_binary w n2))
     ($eo_mk_binary w ($sm_mk_binary_and w n1 n2)))
  )
)

; program: $eo_or
; implements: $eo_or
(program $eo_or
  ((b1 $smt_builtin_Bool) (b2 $smt_builtin_Bool) (w $smt_builtin_Int)
   (n1 $smt_builtin_Int) (n2 $smt_builtin_Int))
  :signature ($eo_Term $eo_Term) $eo_Term
  (
  (($eo_or ($eo_mk_bool b1) ($eo_mk_bool b2))
     ($eo_mk_bool ($smt_apply_2 "or" b1 b2)))
  (($eo_or ($eo_binary w n1) ($eo_binary w n2))
     ($eo_mk_binary w ($sm_mk_binary_or w n1 n2)))
  )
)

; program: $eo_xor
; implements: $eo_xor
(program $eo_xor
  ((b1 $smt_builtin_Bool) (b2 $smt_builtin_Bool) (w $smt_builtin_Int)
   (n1 $smt_builtin_Int) (n2 $smt_builtin_Int))
  :signature ($eo_Term $eo_Term) $eo_Term
  (
  (($eo_xor ($eo_mk_bool b1) ($eo_mk_bool b2))
     ($eo_mk_bool ($smt_apply_2 "xor" b1 b2)))
  (($eo_xor ($eo_binary w n1) ($eo_binary w n2))
     ($eo_mk_binary w ($sm_mk_binary_or w n1 n2)))
  )
)

;;; Arithmetic operators

; program: $eo_add
; implements: $eo_add
(program $eo_add
  ((w $smt_builtin_Int) (n1 $smt_builtin_Int) (n2 $smt_builtin_Int) (r1 $smt_builtin_Real) (r2 $smt_builtin_Real))
  :signature ($eo_Term $eo_Term) $eo_Term
  (
  (($eo_add ($eo_mk_numeral n1) ($eo_mk_numeral n2))
    ($eo_mk_numeral ($smt_builtin_add n1 n2)))
  (($eo_add ($eo_mk_rational r1) ($eo_mk_rational r2))
    ($eo_mk_rational ($smt_builtin_add r1 r2)))
  (($eo_add ($eo_binary w n1) ($eo_binary w n2))
    ($eo_mk_binary w ($smt_builtin_add n1 n2)))
  )
)

(program $eo_mul
  ((w $smt_builtin_Int) (n1 $smt_builtin_Int) (n2 $smt_builtin_Int) (r1 $smt_builtin_Real) (r2 $smt_builtin_Real))
  :signature ($eo_Term $eo_Term) $eo_Term
  (
  (($eo_mul ($eo_mk_numeral n1) ($eo_mk_numeral n2))
    ($eo_mk_numeral ($smt_builtin_mul n1 n2)))
  (($eo_mul ($eo_mk_rational r1) ($eo_mk_rational r2))
    ($eo_mk_rational ($smt_builtin_mul r1 r2)))
  (($eo_mul ($eo_binary w n1) ($eo_binary w n2))
    ($eo_mk_binary w ($smt_builtin_mul n1 n2)))
  )
)

(program $eo_qdiv ((w $smt_builtin_Int) (n1 $smt_builtin_Int) (n2 $smt_builtin_Int) (r1 $smt_builtin_Real) (r2 $smt_builtin_Real))
  :signature ($eo_Term $eo_Term) $eo_Term
  (
  (($eo_qdiv ($eo_mk_numeral n1) ($eo_mk_numeral n2))
    (eo::define ((r1 ($smt_apply_1 "to_real" n1)))
    (eo::define ((r2 ($smt_apply_1 "to_real" n2)))
    ($smt_apply_3 "ite" ($smt_apply_1 "= 0" n2)
      $eo_stuck
      ($eo_mk_rational ($smt_apply_2 "/" r1 r2))))))
  (($eo_qdiv ($eo_mk_rational r1) ($eo_mk_rational r2))
    ($smt_apply_3 "ite" ($smt_apply_1 "= 0/1" r2)
      $eo_stuck
      ($eo_mk_rational ($smt_apply_2 "/" r1 r2))))
  )
)


(program $eo_zdiv ((w $smt_builtin_Int) (n1 $smt_builtin_Int) (n2 $smt_builtin_Int))
  :signature ($eo_Term $eo_Term) $eo_Term
  (
  (($eo_zdiv ($eo_mk_numeral n1) ($eo_mk_numeral n2))
    ($smt_apply_3 "ite" ($smt_apply_1 "= 0" n2)
      $eo_stuck
      ($eo_mk_numeral ($smt_builtin_div n1 n2))))
  (($eo_zdiv ($eo_binary w n1) ($eo_binary w n2))
    ($smt_apply_3 "ite" ($smt_apply_1 "= 0" n2)
      ($eo_mk_binary w ($sm_mk_binary_max w))
      ($eo_mk_binary w ($smt_builtin_div n1 n2))))
  )
)

(program $eo_zmod ((w $smt_builtin_Int) (n1 $smt_builtin_Int) (n2 $smt_builtin_Int))
  :signature ($eo_Term $eo_Term) $eo_Term
  (
  (($eo_zmod ($eo_mk_numeral n1) ($eo_mk_numeral n2))
    ($smt_apply_3 "ite" ($smt_apply_1 "= 0" n2)
      $eo_stuck
      ($eo_mk_numeral ($smt_builtin_mod n1 n2))))
  (($eo_zmod ($eo_binary w n1) ($eo_binary w n2))
    ($smt_apply_3 "ite" ($smt_apply_1 "= 0" n2)
      ($eo_binary w n1)
      ($eo_mk_binary w ($smt_builtin_mod n1 n2))))
  )
)

(program $eo_is_neg ((n1 $smt_builtin_Int) (r1 $smt_builtin_Real))
  :signature ($eo_Term) $eo_Term
  (
  (($eo_is_neg ($eo_mk_numeral n1))
    ($eo_mk_bool ($smt_apply_1 "> 0 " n1)))
  (($eo_is_neg ($eo_mk_rational r1))
    ($eo_mk_bool ($smt_apply_1 "> 0/1" r1)))
  )
)

; program: $eo_neg
; implements: $eo_neg
(program $eo_neg ((n1 $smt_builtin_Int) (r1 $smt_builtin_Real))
  :signature ($eo_Term) $eo_Term
  (
  (($eo_neg ($eo_mk_numeral n1))
    ($eo_mk_numeral ($smt_builtin_neg n1)))
  (($eo_neg ($eo_mk_rational r1))
    ($eo_mk_rational ($smt_builtin_neg r1)))
  )
)


;;; String operators

; program: $eo_len
; implements: $eo_len
(program $eo_len ((s1 $smt_builtin_String) (w $smt_builtin_Int) (n1 $smt_builtin_Int))
  :signature ($eo_Term) $eo_Term
  (
  (($eo_len ($eo_mk_string s1))
    ($eo_mk_numeral ($smt_apply_1 "str.len" s1)))
  (($eo_len ($eo_binary w n1))
    ($eo_mk_numeral w))
  )
)

; program: $eo_concat
; implements: $eo_concat
(program $eo_concat
  ((w1 $smt_builtin_Int) (n1 $smt_builtin_Int) (w2 $smt_builtin_Int) (n2 $smt_builtin_Int)
   (s1 $smt_builtin_String) (s2 $smt_builtin_String))
  :signature ($eo_Term $eo_Term) $eo_Term
  (
  (($eo_concat ($eo_mk_string s1) ($eo_mk_string s2))
     ($eo_mk_string ($smt_apply_2 "str.++" s1 s2)))
  (($eo_concat ($eo_binary w1 n1) ($eo_binary w2 n2))
     ($eo_mk_binary ($smt_builtin_add w1 w2) ($sm_mk_binary_concat w1 n1 w2 n2)))
  )
)

; program: $eo_extract
; implements: $eo_extract
(program $eo_extract
  ((s1 $smt_builtin_String) (w $smt_builtin_Int) (n1 $smt_builtin_Int) (n2 $smt_builtin_Int) (n3 $smt_builtin_Int))
  :signature ($eo_Term $eo_Term $eo_Term) $eo_Term
  (
  (($eo_extract ($eo_mk_string s1) ($eo_mk_numeral n2) ($eo_mk_numeral n3))
     ($eo_mk_string ($smt_apply_3 "str.substr" s1 n2 ($smt_apply_1 "+ 1" ($smt_apply_2 "-" n3 n2)))))
  (($eo_extract ($eo_binary w n1) ($eo_mk_numeral n2) ($eo_mk_numeral n3))
    (eo::define ((nw ($smt_apply_2 "-" n3 n2)))
    ($smt_apply_3 "ite" ($smt_builtin_or ($eo_is_neg n2) ($eo_is_neg nw))
      $eo_empty_binary
      ($eo_mk_binary
        ($smt_apply_1 "+ 1" nw)
        ($sm_mk_binary_extract w n1 n2 n3)))))
  )
)

; program: $eo_find
; implements: $eo_find
(program $eo_find ((s1 $smt_builtin_String) (s2 $smt_builtin_String))
  :signature ($eo_Term $eo_Term) $eo_Term
  (
  (($eo_find ($eo_mk_string s1) ($eo_mk_string s2))
     ($eo_mk_string ($smt_apply_3 "str.indexof" s1 s2 $smt_builtin_z_zero)))
  )
)

;;; Conversion operators

; program: $eo_to_z
; implements: $eo_to_z
(program $eo_to_z ((n1 $smt_builtin_Int) (r1 $smt_builtin_Real) (s1 $smt_builtin_String) (w $smt_builtin_Int))
  :signature ($eo_Term) $eo_Term
  (
  (($eo_to_z ($eo_mk_numeral n1))
    ($eo_mk_numeral n1))
  (($eo_to_z ($eo_mk_rational r1))
    ($eo_mk_numeral ($smt_apply_1 "to_int" r1)))
  (($eo_to_z ($eo_mk_string s1))
    ($smt_apply_3 "ite"
      ($smt_apply_1 "= 1" ($smt_apply_1 "str.len" s1))
      ($eo_mk_numeral ($smt_apply_1 "str.to_code" s1))
      $eo_stuck))
  (($eo_to_z ($eo_binary w n1))
    ($eo_mk_numeral n1))
  )
)

; program: $eo_to_q
; implements: $eo_to_q
(program $eo_to_q ((n1 $smt_builtin_Int) (r1 $smt_builtin_Real) (s1 $smt_builtin_String) (w $smt_builtin_Int))
  :signature ($eo_Term) $eo_Term
  (
  (($eo_to_q ($eo_mk_numeral n1))
    ($eo_mk_rational ($smt_apply_1 "to_real" n1)))
  (($eo_to_q ($eo_mk_rational r1))
    ($eo_mk_rational r1))
  )
)

; program: $eo_to_bin
; implements: $eo_to_bin
(program $eo_to_bin ((w $smt_builtin_Int) (w1 $smt_builtin_Int) (n1 $smt_builtin_Int))
  :signature ($eo_Term $eo_Term) $eo_Term
  (
  (($eo_to_bin ($eo_mk_numeral w) ($eo_mk_numeral n1))
    ($eo_mk_binary w n1))
  (($eo_to_bin ($eo_mk_numeral w) ($eo_binary w1 n1))
    ($eo_mk_binary w n1))
  )
)

; program: $eo_to_str
; implements: $eo_to_str
(program $eo_to_str ((n1 $smt_builtin_Int) (s1 $smt_builtin_String))
  :signature ($eo_Term) $eo_Term
  (
  (($eo_to_str ($eo_mk_numeral n1))
    ($smt_apply_3 "ite"
      ($smt_builtin_and ($smt_apply_1 "<= 0" n1) ($smt_apply_1 "> 196608" n1))
      ($eo_mk_string ($smt_apply_1 "str.from_code" n1))
      $eo_stuck))
  (($eo_to_str ($eo_mk_string s1))
    ($eo_mk_string s1))
  ; TODO: technically others here
  )
)

;;; $eo_is_eq

; Returns true if t and s are equivalent values (ground and fully evaluated).
; define: $eo_is_eq
; implements: $eo_is_eq
(define $eo_is_eq ((t $eo_Term) (s $eo_Term))
  ($eo_ite ($eo_is_ok t)
    ($eo_ite ($eo_is_ok s)
      ($eo_mk_bool ($smt_apply_= s t))  ; Note it is sound to use SMT-LIB equality, since we are guarding stuckness
      $eo_false)
    $eo_false))

;;; $eo_is_bool

; Returns true if x is a Boolean literal.
; define: $eo_is_bool
; implements: $eo_is_bool
(program $eo_is_bool ((x $eo_Term))
  :signature ($eo_Term) $eo_Term
  (
  (($eo_is_bool $eo_true)   $eo_true)
  (($eo_is_bool $eo_false)  $eo_true)
  (($eo_is_bool x)          $eo_false)
  )
)

;;; Conversion operators

;;; $eo_is_z

; Returns true if x is a numeral literal.
; define: $eo_is_z
; implements: $eo_is_z
(define $eo_is_z ((x $eo_Term))
  ($eo_is_eq ($eo_to_z x) x))

;;; $eo_is_q

; Returns true if x is a rational literal.
; define: $eo_is_q
; implements: $eo_is_q
(define $eo_is_q ((x $eo_Term))
  ($eo_is_eq ($eo_to_q x) x))

;;; $eo_is_bin

; Returns true if x is a binary literal.
; define: $eo_is_bin
; implements: $eo_is_bin
(define $eo_is_bin ((x $eo_Term))
  ($eo_is_eq ($eo_to_bin ($eo_len x) x) x))

;;; $eo_is_str

; Returns true if x is a string literal.
; define: $eo_is_str
; implements: $eo_is_str
(define $eo_is_str ((x $eo_Term))
  ($eo_is_eq ($eo_to_str x) x))

;;; Derived arithmetic

; fwd-decl: $eo_hash
; Note: $eo_hash is defined axiomatically in the final smt2 encoding.
(program $eo_hash () :signature ($eo_Term) $eo_Term)

;;; $eo_gt

; Compare arithmetic greater than. Assumes x and y are values.
; Returns true if x > y.
; define: $eo_gt
; implements: $eo_gt
(define $eo_gt ((x $eo_Term) (y $eo_Term))
  ($eo_is_neg ($eo_add ($eo_neg x) y)))


;;; $eo_cmp

; An arbitrary deterministic comparison of terms. Returns true if a > b based
; on this ordering.
; define: $eo_cmp
; implements: $eo_cmp
(define $eo_cmp ((a $eo_Term) (b $eo_Term))
  ($eo_is_neg ($eo_add ($eo_hash b) ($eo_neg ($eo_hash a)))))

;;; since eo_typeof depends on literal predicates, typeof is only now ready.

; program: $eo_var
; implements: $eo_var
(program $eo_var ((s $smt_builtin_String) (T $eo_Term))
  :signature ($eo_Term $eo_Term) $eo_Term
  (
  (($eo_var ($eo_mk_string s) T)
      ($eo_requires ($eo_typeof T) Type
        ($eo_Var s T)))
  )
)

; program: $eo_nameof
; implements: $eo_nameof
(program $eo_nameof ((s $eo_Term) (T $eo_Term))
  :signature ($eo_Term) $eo_Term
  (
  (($eo_nameof ($eo_Var s T)) s)
  )
)

; Returns true if x is a variable.
; define: $eo_is_var
; implements: $eo_is_var
(define $eo_is_var ((x $eo_Term))
  ($eo_is_eq ($eo_var ($eo_nameof x) ($eo_typeof x)) x))

; fwd-decl: $eo_typeof_main
; Note: This method returns the type for all user defined terms.
(program $eo_typeof_main () :signature ($eo_Term) Type)

; program: $eo_typeof
; implements: $eo_typeof
(program $eo_typeof
  ((t $eo_Term) (T $eo_Term) (n $smt_builtin_Int) (r $smt_builtin_Real)
   (s $smt_builtin_String) (w $smt_builtin_Int) (val $smt_Value))
  :signature ($eo_Term) $eo_Term
  (
  ; TODO: auto-generate these?
  (($eo_typeof $eo_true)                        Bool)
  (($eo_typeof $eo_false)                       Bool)
  (($eo_typeof ($eo_mk_numeral n))              $eo_Numeral)
  (($eo_typeof ($eo_mk_rational r))             $eo_Rational)
  (($eo_typeof ($eo_mk_string s))               $eo_String)
  (($eo_typeof ($eo_binary w n))                $eo_Binary)
  (($eo_typeof ($eo_Var s T))                   T)
  ; otherwise, invoke the routine for builtin types from the signature.
  ; Note that we do not include SMT-LIB specific constructs here, as these are
  ; not modelled in Eunoia's builtin typeof method.
  (($eo_typeof t)                               ($eo_typeof_main t))
  )
)
(declare-const $eo_List Type)
(program $eo_is_list_rec
  ((T Type) (U Type) (V Type) (W Type) (X Type)
   (f (-> T U V)) (x T) (y U) (nil W) (z X))
  :signature ((-> T U V) W X) Bool
  (
  (($eo_is_list_rec f nil (f x y)) ($eo_is_list_rec f nil y))
  (($eo_is_list_rec f nil nil)     true)
  (($eo_is_list_rec f nil z)       false)
  )
)
(define $eo_is_list
  ((T Type :implicit) (U Type :implicit) (V Type :implicit) (W Type :implicit)
   (f (-> T U V)) (x W))
  ($eo_is_list_rec f ($eo_nil f ($eo_typeof x)) x))
(program $eo_list_rev_rec
  ((T Type) (U Type) (V Type) (W Type)
   (f (-> T V V)) (x W) (y U) (nil U) (acc U))
  :signature ((-> T V V) U U) U
  (
    (($eo_list_rev_rec f (f x y) acc) ($eo_list_rev_rec f y (f x acc)))
    (($eo_list_rev_rec f nil acc)      acc)
  )
)
(define $eo_list_rev
  ((T Type :implicit) (U Type :implicit) (V Type :implicit)
   (f (-> T V V)) (a U))
  ($eo_requires_true ($eo_is_list f a)
    ($eo_list_rev_rec f a ($eo_nil f ($eo_typeof a)))))
(declare-parameterized-const ite (($eo_x_1 Bool) (A Type :implicit) ($eo_x_2 A) ($eo_x_3 A)) A)
(declare-const and (-> Bool (-> Bool Bool)))
(declare-parameterized-const = ((A Type :implicit) ($eo_x_1 A) ($eo_x_2 A)) Bool)
(program $mk_cong_rhs ((U Type) (t1 U) (tail Bool) (t2 U) (T Type) (f (-> T U)))
  :signature (U Bool) U
  (
  (($mk_cong_rhs (f t1) (_ (and (_ (= t1) t2)) tail)) (_ ($mk_cong_rhs f tail) t2))
  (($mk_cong_rhs f true) f)
  )
)
(declare-const BitVec (-> Int Type))
(program $eo_typeof_apply ((T Type) (U Type))
  :signature (Type Type) Type
  (
  (($eo_typeof_apply (-> T U) T) U)
  )
)
(program $eo_typeof_ite ((A Type))
  :signature (Type Type) Type
  (
  (($eo_typeof_ite Bool A) (-> A A))
  )
)
(program $eo_typeof_= ((A Type))
  :signature (Type) Type
  (
  (($eo_typeof_= A) (-> A Bool))
  )
)
(program $eo_typeof_fun_type ()
  :signature (Type Type) Type
  (
  (($eo_typeof_fun_type Type Type) Type)
  )
)
(program $eo_typeof_main
  ((T Type) (U Type) (V Type) (W Type) (f (-> U V T)) (x U) (t T)
   (W1 Type) (x1 W1) (W2 Type) (x2 W2) (W3 Type) (x3 W3)) 
  :signature (T) Type
  (
  (($eo_typeof_main Type)      Type)
  (($eo_typeof_main (-> T U))  ($eo_typeof_fun_type ($eo_typeof T) ($eo_typeof U))) 
  (($eo_typeof_main Bool)      Type)
  (($eo_typeof_main true)      Bool)
  (($eo_typeof_main false)     Bool)
  
  (($eo_typeof_main Int) Type)
  
  (($eo_typeof_main Real) Type)
  
  (($eo_typeof_main Char) Type)
  
  (($eo_typeof_main Seq) (-> Type Type))
  
  (($eo_typeof_main (_ (ite x1) x2)) ($eo_typeof_ite ($eo_typeof x1) ($eo_typeof x2)))
  
  (($eo_typeof_main and) (-> Bool (-> Bool Bool)))
  
  (($eo_typeof_main (= x1)) ($eo_typeof_= ($eo_typeof x1)))
  
  (($eo_typeof_main BitVec) (-> Int Type))

  (($eo_typeof_main (f x))     ($eo_typeof_apply ($eo_typeof f) ($eo_typeof x)))
  )
)
(program $eo_dt_constructors
  ((T Type))
  :signature (Type) $eo_List
  (

  (($eo_dt_constructors T) $eo_fail)
  )
)
(program $eo_dt_selectors ((T Type) (t T))
  :signature (T) $eo_List
  (

  (($eo_dt_selectors t) $eo_fail)
  )
)
(program $eo_nil
  ((T Type) (U Type) (V Type) (W Type) (f (-> T U V)))
  :signature ((-> T U V) (eo::quote W)) W
  (
  (($eo_nil and T) true)

  (($eo_nil f T) $eo_fail)
  )
)
(program $eo_model_sat () :signature (Bool) Bool)
(program $eo_model_typeof ((T Type)) :signature (T) Bool)
; This file defines SMT-LIB model semantics in Eunoia.
; It has exception handling utilities to call Eunoia programs in
; a safe way that ensures that all programs in this signature are total.

; The programs in this file operate on datatypes that correspond to
; a deep embedding of Eunoia and SMT-LIB terms, types and values.
; In particular, we use the following types:
; 1. $eo_Term, the type of Eunoia terms.
; 2. $smt_Term, the type of SMT-LIB terms.
; 3. $smt_Type, the type of SMT-LIB types.
; 4. $smt_Value, the type of SMT-LIB values.
; 5. Further types defining specific SMT-LIB values, e.g. $smt_Map.
; 6. $smt_builtin_X, the builtin SMT-LIB type X.
; Note that the last type allows us to define symbols whose type
; will be a native SMT-LIB type in the final embedding generated
; by the smt-meta plugin.

;;; SMT term datatype constructors

; An application of SMT-LIB terms.
(define $sm_apply_term ((t1 $smt_Term) (t2 $smt_Term))
  ($smd_sm.Apply t1 t2))
  
; A skolem, identified by kind, identifier and Type.
; The kind 0 is reserved for standard SMT-LIB symbols introduced
; by the user by declare-const. The other kinds of free symbols
; can be custom defined based on the Eunoia signature (see method
; $eo_const_predicate in model_eo.eo).
; A skolem is identified by a type, a term and a kind.
;(define $sm_skolem
;  ((T $smt_Type) (k $smt_Term) (id $smt_builtin_Int))
;  ($smd_sm.Skolem T k id))
  
;;; SMT type datatype constructors

; The Boolean type
(define $tsm_Bool () $smd_tsm.Bool)

; Function types
(define $tsm_fun_type ((T1 $smt_Type) (T2 $smt_Type))
  ($smd_tsm.FunType T1 T2))
  
; Uninterpreted sorts
(define $tsm_USort ((id $smt_builtin_Int)) ($smd_tsm.USort id))
  
; The sort of a term that doesn't have an SMT-LIB type.
; This is used as an error condition
(define $tsm_NullSort ((id $smt_builtin_Int)) ($smd_tsm.NullSort id))

;;; SMT value datatype constructors

; A value denoting a map.
(define $vsm_map ((T $smt_Type) (m $smt_Map))
  ($smd_vsm.Map T m))

; A value denoting an uninterpreted constant.
(define $vsm_uconst ((T $smt_Type) (id $smt_builtin_Int))
  ($smd_vsm.UConst T id))

; A value represented by an SMT-LIB term. This is used for types
; where terms are used to denote the values of that type, e.g.
; SMT-LIB numerals for Int.
(define $vsm_term ((t $smt_Term)) ($smd_vsm.Term t))
(define $vsm_true () ($vsm_term $sm_mk_true))
(define $vsm_false () ($vsm_term $sm_mk_false))

; Denotes a failure case for values.
(define $vsm_not_value () $smd_vsm.NotValue)

;;; SMT map value datatype constructors

; Constructs a map value where i is mapped to e.
(define $map_cons ((i $smt_Value) (e $smt_Value) (m $smt_Map))
  ($smd_msm.Map.cons i e m))

; Constructs a map value where all indices are mapped to e.
(define $map_default ((e $smt_Value)) ($smd_msm.Map.default e))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Exception handling

; Invariant: all programs in this signature should be well-founded and never
; never get stuck unless otherwise stated.

; Returns SMT-LIB builtin true/false if x is stuck
(define $smt_builtin_is_ok ((x $eo_Term))
  ($smt_apply_3 "ite" ($smt_apply_= x $eo_stuck)
    $smt_builtin_false
    $smt_builtin_true))

; Utilities to ensure that programs are total.
; Takes
; - A $eo_Term t where we are not sure if it gets stuck.
; - A $eo_Term elseTerm where we are sure it does not get stuck.
; Returns the SMT term corresponding to the evaluation of t, if possible,
; or elseTerm otherwise. This always successfully evaluates.
(define $smt_try_eo ((t $eo_Term) (elseTerm $eo_Term))
  ($smt_apply_3 "ite" ($smt_apply_1 "(_ is eo.SmtTerm)" t)
    t
    elseTerm))
; Same as above, for SMT types.
(define $smt_try_eo_type ((t $eo_Term) (elseTerm $eo_Term))
  ($smt_apply_3 "ite" ($smt_apply_1 "(_ is eo.SmtType)" t)
    t
    elseTerm))
; Same as above, for SMT values.
(define $smt_try_eo_value ((t $eo_Term) (elseTerm $eo_Term))
  ($smt_apply_3 "ite" ($smt_apply_1 "(_ is eo.SmtValue)" t)
    t
    elseTerm))

;;;;;; SMT values

; forward declaration
; This method classifies SMT terms as being values.
; The invariant of this method is that if
;   ($smt_Type t1) and ($smt_Type t2)
; return true where t1 and t2 have the same type ($smtx_typeof), then
;   (not (= t1 t2))
; is valid.
(program $smtx_term_is_value ()
  :signature ($smt_Term) $smt_builtin_Bool)

;;; Functions and array values.

; $smt_Map is recursive and thus defined above.

; Get the default for the map
(program $smtx_map_default
  ((i $smt_Value) (j $smt_Value) (e $smt_Value) (M $smt_Map))
  :signature ($smt_Map) $smt_Value
  (
  (($smtx_map_default ($map_cons j e M))  ($smtx_map_default M))
  (($smtx_map_default ($map_default e))   e)
  )
)

; This program looks up the value of a term in a map.
; This is used for function evaluation.
(program $smtx_map_lookup
  ((i $smt_Value) (j $smt_Value) (e $smt_Value) (M $smt_Map))
  :signature ($smt_Map $smt_Value) $smt_Value
  (
  ; NOTE: the cases here are exhaustive
  (($smtx_map_lookup ($map_cons i e M) i)  e)
  (($smtx_map_lookup ($map_cons j e M) i)  ($smtx_map_lookup M i))
  (($smtx_map_lookup ($map_default e) i)   e)
  )
)

; This program determines whether the map value is canonical
; This program is only necessary if we are doing equality between arrays
; (or functions).
(program $smtx_map_is_redundant
  ((T $smt_Type) (U $smt_Type) (t $smt_Value) (u $smt_Value) (M $smt_Map))
  :signature ($smt_Map $smt_Type) $smt_builtin_Bool
  (
  (($smtx_map_is_redundant ($map_default u) U)     $smt_builtin_false)
  (($smtx_map_is_redundant ($map_cons t u M) U)
    ; lookup value on tail
    ; if it is the same, this index is redundant and thus we are not a value
    ($smt_apply_3 "ite"
      ($smt_apply_= ($smtx_map_lookup t M) u)
      $smt_builtin_true
      ($smtx_map_is_redundant M)))
  )
)

; TODO: use $smtx_map_is_redundant.
; Also requires a sortedness and non-exhaustiveness conditions.
(program $smtx_map_is_value ()
  :signature ($smt_Type $smt_Map) $smt_builtin_Bool)

;;; Datatype values

; Datatypes are not embedded.

; TODO: since e.g. uinterpreted sorts can be nested in
; datatypes we need a lifted datatype value.

; define: $smt_is_dt
; returns: true if t is a datatpe (i.e. it has constructors).
(define $smt_is_dt ((t $smt_Type))
  ($smt_builtin_is_ok ($eo_dt_constructors t)))

; define: $smt_is_dt_cons
; returns: true if t is a constructor (i.e. it has selectors).
(define $smt_is_dt_cons ((t $smt_Term))
  ($smt_builtin_is_ok ($eo_dt_selectors t)))

; program: $smtx_dt_is_value
; Returns true if its argument is a datatype value.
; This checks that the term is constructed solely based on values and values of
; (possibly other) types.
(program $smtx_dt_is_value ((f $smt_Term) (a $smt_Term) (c $smt_Term))
  :signature ($smt_Term) $smt_builtin_Bool
  (
  (($smtx_dt_is_value ($sm_apply_term f a)) ($smt_apply_3 "ite"
                                              ($smtx_term_is_value a)
                                              ($smtx_dt_is_value f)
                                              $smt_builtin_false))
  (($smtx_dt_is_value c)                    ($smt_is_dt_cons c))
  )
)

;;; Term values.

; program: $smtx_term_is_value
; Returns true if its argument is an SMT value.
; This function is expected to never get stuck.
; Note that this does not take a type. This function must ensure
; that if it returns true for two terms t1 and t2 of the same type,
; then t1 != t2 in all models.
(program $smtx_term_is_value
  ((t $smt_Term) (b $smt_builtin_Bool) (n $smt_builtin_Int) (r $smt_builtin_Real) (s $smt_builtin_String))
  :signature ($smt_Term) $smt_builtin_Bool
  (
  ; standard atomic types are values
  (($smtx_term_is_value ($sm_mk_bool b))  $smt_builtin_true)
  (($smtx_term_is_value ($sm_mk_z n))     $smt_builtin_true)
  (($smtx_term_is_value ($sm_mk_q r))     $smt_builtin_true)
  (($smtx_term_is_value ($sm_mk_str s))   $smt_builtin_true)
  ; by default, not a value
  (($smtx_term_is_value t)                $smt_builtin_false)
  )
)

;;; Guarded utilities for making values

; Returns a term of type $smt_Value, embeds the term
; if indeed it is a value, or returns not a value otherwise.
(define $smt_mk_value_term ((t $smt_Term))
  ($smt_apply_3 "ite"
    ($smtx_term_is_value t)
    ($vsm_term t)
    $vsm_not_value))

(define $smt_mk_value_map ((T $smt_Type) (m $smt_Map))
  ($smt_apply_3 "ite"
    ($smtx_map_is_value T m)
    ($vsm_map T m)
    $vsm_not_value))

; program: $smtx_ensure_value
; args:
; - v $smt_Value: A value term.
; return: >
;   v itself if it denotes a proper SMT-LIB value, or $vsm_not_value otherwise.
(program $smtx_ensure_value
  ((t $smt_Value) (val $smt_Value) (T $smt_Type) (m $smt_Map) (id $smt_builtin_Int))
  :signature ($smt_Value) $smt_Value
  (
  (($smtx_ensure_value ($vsm_term t))        ($smt_mk_value_term t))
  (($smtx_ensure_value ($vsm_map T m))       ($smt_mk_value_map T m))
  (($smtx_ensure_value ($vsm_uconst T id))   ($vsm_uconst T id))
  (($smtx_ensure_value t)                    $vsm_not_value)
  )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; Model semantics

; Forward declaration of the main method defined by this signature.
; We use this to define $eo_model_sat.
(program $smtx_model_eval () :signature ($smt_Term) $smt_Value)

; program: $smtx_model_lookup
; Conceptually, returns the model value for a term whose value is
; partially constrained or unconstrained in the model. This is
; intentionally undefined. For example, we may pass the following
; terms to this method:
;   (sm.Apply (sm.Apply sm./ x1) x2), when M(x2) = 0,
;   TODO: skolems??
(program $smtx_model_lookup ()
  :signature ($smt_Term) $smt_Value)

; Lookup the predicate the constant can be assumed to have.
; These should be valid formulas.
(program $smtx_model_lookup_predicate_internal ((t $smt_Term) (v $smt_Value))
  :signature ($smt_Term $smt_Value) $smt_builtin_Bool
  (

  ; otherwise, no predicate
  (($smtx_model_lookup_predicate_internal t v) $smt_builtin_true)
  )
)

; Calls the method above
(program $smtx_model_lookup_predicate ((t $smt_Term))
  :signature ($smt_Term) $smt_builtin_Bool
  (
  (($smtx_model_lookup_predicate t)
    ($smtx_model_lookup_predicate_internal t ($smtx_model_lookup t)))
  )
)

; program: $smtx_substitute
; Used to define $smtx_eval_quant.
; TODO: debruijn
(program $smtx_substitute
  ((x $smt_Term) (y $smt_Term) (f $smt_Term) (a $smt_Term) (z $smt_Term))
  :signature ($smt_Term $smt_Term $smt_Term) $smt_Term
  (
  (($smtx_substitute x y (f a))         (_ ($smtx_substitute x y f) ($smtx_substitute x y a)))
  (($smtx_substitute x y x)             y)
  (($smtx_substitute x y z)             z)
  )
)

;;; Core definition of $smtx_model_eval

; program: $smtx_model_eval_apply
; We call ($smtx_model_eval_apply value_f value_i) when
; evaluating (f i) whose values are value_f and value_i
; respectively. If value_f is a map value, then we extract
; the map and call the map lookup routine.
(program $smtx_model_eval_apply
  ((T $smt_Type) (m $smt_Map) (i $smt_Value) (v $smt_Value))
  :signature ($smt_Value $smt_Value) $smt_Value
  (
  ; The function evaluated to a map value, call the map lookup.
  (($smtx_model_eval_apply ($vsm_map T m) i)  ($smtx_map_lookup m i))
  ; The function did not evaluate to a map value, we fail.
  (($smtx_model_eval_apply v i)               $vsm_not_value)
  )
)

; return: The evaluation of an ite application.
(program $smtx_model_eval_ite
  ((t1 $smt_Value) (t2 $smt_Value) (t3 $smt_Value))
  :signature ($smt_Value $smt_Value $smt_Value) $smt_Value

  (
  (($smtx_model_eval_ite $vsm_true t2 t3)   t2)
  (($smtx_model_eval_ite $vsm_false t2 t3)  t3)
  (($smtx_model_eval_ite t1 t2 t3)          $vsm_not_value)
  )
)

; return: The evaluation of an equality application.
(program $smtx_model_eval_=
  ((t1 $smt_Value) (t2 $smt_Value))
  :signature ($smt_Value $smt_Value) $smt_Value

  (
  (($smtx_model_eval_= $vsm_not_value t2) $vsm_not_value)
  (($smtx_model_eval_= t1 $vsm_not_value) $vsm_not_value)
  ; use datatype equality over $smt_Value, which depends on t1 and t2 being proper values.
  (($smtx_model_eval_= t1 t2)             ($vsm_term ($sm_mk_bool ($smt_apply_= t1 t2))))
  )
)

(program $smtx_model_eval_and
  ((x1 $smt_builtin_Bool) (x2 $smt_builtin_Bool) (t1 $smt_Value) (t2 $smt_Value))
  :signature ($smt_Value $smt_Value) $smt_Value

  (
  (($smtx_model_eval_and ($vsm_term ($sm_mk_bool x1)) ($vsm_term ($sm_mk_bool x2))) ($vsm_term ($sm_mk_bool ($smt_apply_2 "and" x1 x2))))
  (($smtx_model_eval_and t1 t2) $vsm_not_value)
  )
)


; An evaluator for all terms that we can reason about models.
; This is a recursive call.
; invariant: this must be a total function
; invariant: unless this method returns $vsm_not_value, it must be such that
;            it represents a unique SMT-LIB value, i.e. ($vsm_term t) is
;            forbidden unless t denotes a value.
(program $smtx_model_eval
  ((T $smt_Type) (f $smt_Term) (y $smt_Term) (z $smt_Term) (k $smt_Term) (id $smt_builtin_Int) (F Bool)
   (val $smt_Value)
   ; generic parameters that may appear in terms to pattern match
   (x1 $smt_Term) (x2 $smt_Term) (x3 $smt_Term) (x4 $smt_Term) (x5 $smt_Term))
  :signature ($smt_Term) $smt_Value
  (
  ; ITE branches to the appropriate child.
  (($smtx_model_eval (ite x1 x2 x3))
    ($smtx_model_eval_ite ($smtx_model_eval x1) ($smtx_model_eval x2) ($smtx_model_eval x3)))
  ; Equality insists on valueness and then reduces to an equality over datatypes
  ; in the deep embedding (vsm.Value), meaning it works for all types, including
  ; functions and uninterpreted sorts where values are not represented by terms.
  ; Note that the valueness predicate ensures this is sound. Moreover note that
  ; we do not invoke the type checker here. This means that if an ill-typed
  ; equality was given as input to this method, it would always evaluate to false.
  ; The caller of this method is responsible for ensuring that this behavior is
  ; either avoided or admissible.
  (($smtx_model_eval (= x1 x2))
    ($smtx_model_eval_= ($smtx_model_eval x1) ($smtx_model_eval x2)))
  ; evaluation of standard SMT symbols
  ; These calls will reference helper methods above, e.g. of the form
  ; $smtx_model_eval_*, or call builtin methods e.g. $smtx_eval_quant.
  (($smtx_model_eval (and x1 x2)) ($smtx_model_eval_and ($smtx_model_eval x1) ($smtx_model_eval x2)))

  ; Apply case. We evaluate f and y separately and then call the
  ; $smtx_model_eval_apply above. We expect f to be an uninterpreted
  ; function whose model evaluation is an SMT-LIB map in this case.
  ; All interpreted f should be handled in the evaluation cases above.
  (($smtx_model_eval ($sm_apply_term f y))
    ($smtx_model_eval_apply ($smtx_model_eval f) ($smtx_model_eval y)))

  ;; free constants
  ; Constants carry their value in the model, which is an arbitrary value term.
  ; We run this value through $smtx_ensure_value to ensure it is a proper value.
  (($smtx_model_eval ($sm_Const val))           ($smtx_ensure_value val))
  
  ; Otherwise, it may be a term value (e.g. if z is a Boolean or numeral constant).
  ; We call the utility method which will either generate an SMT-LIB term value or
  ; a SMT-LIB non-value error term.
  (($smtx_model_eval z)                         ($smtx_ensure_value ($vsm_term z)))
  )
)

; program: $eo_model_sat_internal
(program $eo_model_sat_internal ((val $smt_Value))
  :signature ($smt_Value) Bool
  (
  (($eo_model_sat_internal ($vsm_term $sm_mk_true)) true)
  (($eo_model_sat_internal ($vsm_term $sm_mk_false)) false)
  )
)

; program: $eo_model_sat
; note: F is satisfied by the model if F evaluates to the SMT-LIB value denoting true.
; We expect the input to this method to be a Eunoia term denoting an SMT-LIB formula
; (term of Boolean type).
(program $eo_model_sat ((F $smt_Term))
  :signature (Bool) Bool
  (
  (($eo_model_sat ($eo_smt_term F)) ($eo_model_sat_internal ($smtx_model_eval F)))
  )
)

; program: $eo_app_from_smt
; args:
; - t $eo_Term: A Eunoia term, expected to be an SMT-LIB application.
; return: >
;   The (embedding of) the Eunoia term application that is equivalent to
;   the given SMT-LIB application.
; note: >
;   We model Eunoia applications (eo.Apply) and SMT-LIB applications (sm.Apply)
;   since we distinguish SMT-LIB terms from Eunoia terms. This ensures that
;   sm.Term contains only legal SMT-LIB terms. However, to define
;   $eo_model_typeof below, we rely on calling $eo_typeof, which in the final
;   encoding expects applications to be eo.Apply. Thus, this method is used to
;   "lift" SMT-LIB applications to Eunoia ones. For example:
;      (eo.smt_term (sm.Apply sm.not sm.True))
;   is lifted to:
;      (eo.Apply (eo.smt_term sm.not) (eo.smt_term sm.True))
;   The latter can be type checked using $eo_typeof. Note that we recurisvely
;   convert sm.Apply in the head of terms only; their arguments may have
;   further occurrences of sm.Apply.
(program $eo_app_from_smt ((f $smt_Term) (a $smt_Term) (t $eo_Term))
  :signature ($eo_Term) $eo_Term
  (
  (($eo_app_from_smt ($eo_smt_term ($sm_apply_term f a)))
    ($eo_apply ($eo_app_from_smt ($eo_smt_term f)) ($eo_smt_term a)))
  (($eo_app_from_smt t) t)
  )
)

; The EO model typeof function, which incorporates builtin SMT terms.
; This is intended to cover all Eunoia and SMT terms (those of the form
; (eo.SmtTerm *). Since values are embedded into SMT terms, we cover SMT values,
; i.e. those of the form (eo.SmtValue *) as well.
; Furthermore note:
; - (SMT terms in $eo_typeof_main): sm.True, sm.False
; - (SMT terms in $eo_typeof): sm.Numeral, sm.Rational, sm.String, sm.Binary
; - (SMT terms handled below): sm.Const, sm.Apply
; - (EO terms in $eo_typeof_main): eo.Type, eo.FunType, eo.Apply
; - (EO terms in $eo_typeof): eo.Var
; - (EO terms intentionally unhandled): eo.Stuck, eo.SmtType
; invariant: all terms introduced by this layer must be given a type rule here.
; TODO: use hash for the nullsort below?
(program $eo_model_typeof
  ((t $eo_Term) (val $smt_Value) (T $smt_Type) (m $smt_Map) (id $smt_builtin_Int)
   (f $smt_Term) (a $smt_Term))
  :signature ($eo_Term) $eo_Term
  (
  ; To compute the type of an apply, convert it to a Eunoia application as
  ; described above.
  (($eo_model_typeof ($eo_smt_term ($sm_apply_term f a)))
    ($eo_model_typeof ($eo_app_from_smt ($eo_smt_term ($sm_apply_term f a)))))
  ; the type of a constant is the type of its value.
  (($eo_model_typeof ($eo_smt_term ($sm_Const val)))      ($eo_model_typeof ($eo_smt_value val)))
  ; the type of a value term is the type of its term.
  (($eo_model_typeof ($eo_smt_value ($vsm_term t)))       ($eo_model_typeof ($eo_smt_term t)))
  (($eo_model_typeof ($eo_smt_value ($vsm_map T m)))      T) ; FIXME
  ; the type of uninterpreted constants carry its type.
  (($eo_model_typeof ($eo_smt_value ($vsm_uconst T id)))  T)
  ; the type of not-values is the null sort.
  (($eo_model_typeof ($eo_smt_value $vsm_not_value))      ($tsm_NullSort $smt_builtin_z_zero))
  ; For all other terms, we try to run Eunoia's typeof builtin. If this fails,
  ; then we are null sort. 
  (($eo_model_typeof t) ($smt_try_eo_type
                          ($eo_typeof t)
                          ($eo_smt_type ($tsm_NullSort $smt_builtin_z_zero))))
  )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; model_end
(program $eor_cong ((U Type) (t U) (E Bool))
  :signature (U Bool) Bool
  (
  (($eor_cong t E) (eo::define ((_v0 (_ (= t) ($mk_cong_rhs t ($eo_list_rev and E))))) ($eo_requires ($eo_model_typeof _v0) Bool _v0)))
  )
)
(program $eovc_cong ((U Type) (t U) (E Bool))
  :signature (Bool U) Bool
  (
  (($eovc_cong E t) ($eo_requires ($eo_model_typeof E) Bool ($eo_requires ($eo_model_sat E) true ($eo_requires ($eo_model_sat ($eor_cong t E)) false true))))
  )
)
(echo "smt-meta $eovc_cong")
