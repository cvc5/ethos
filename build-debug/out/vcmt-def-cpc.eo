; trim-defs: $eovc_arrays_ext
; #trim-defs: 122
(declare-const Int Type)
(declare-consts <numeral> Int)
(declare-const Real Type)
(declare-consts <rational> Real)
(declare-const Char Type)
(declare-const Seq (-> Type Type))
(declare-consts <string> (Seq Char))
(define $eo_String () (Seq Char))
(program $eo_fail_prog ()
  :signature (Bool) Bool
  (
  (($eo_fail_prog true) true)
  )
)
(define $eo_fail () ($eo_fail_prog false))
(program $eo_if_both ((b1 Bool) (b2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eo_if_both true true)  true)
  (($eo_if_both b1 b2)      false)
  )
)
(program $eo_requires_eq ((T Type) (U Type) (x1 T) (x3 U))
  :signature (T T U) U
  (
  (($eo_requires_eq x1 x1 x3) x3)
  )
)
(declare-const $smt_BuiltinType Type)
(define $smt_id () $eo_String)
(declare-parameterized-const $smt_type_0
  ((op $smt_id :opaque))
  Type)
(declare-parameterized-const $smt_apply_0
  ((op $smt_id :opaque))
  $smt_BuiltinType)
(declare-parameterized-const $smt_apply_1
  ((W1 Type :implicit)
   (op $smt_id :opaque) (x1 W1 :opaque)) $smt_BuiltinType)
(declare-parameterized-const $smt_apply_2
  ((W1 Type :implicit) (W2 Type :implicit)
   (op $smt_id :opaque) (x1 W1 :opaque) (x2 W2 :opaque)) $smt_BuiltinType)
(declare-parameterized-const $smt_apply_3
  ((W1 Type :implicit) (W2 Type :implicit) (W3 Type :implicit)
   (op $smt_id :opaque) (x1 W1 :opaque) (x2 W2 :opaque) (x3 W3 :opaque)) $smt_BuiltinType)
(declare-parameterized-const $smt_apply_=
  ((W Type :implicit) (x1 W :opaque) (x2 W :opaque))
  $smt_BuiltinType)
(define $smt_builtin_Bool () ($smt_type_0 "Bool"))
(define $smt_builtin_Int () ($smt_type_0 "Int"))
(define $smt_builtin_Real () ($smt_type_0 "Real"))
(define $smt_builtin_String () ($smt_type_0 "String"))
(define $smt_builtin_true () ($smt_apply_0 "true"))
(define $smt_builtin_false () ($smt_apply_0 "false"))
(declare-const $eo_Term Type)
(declare-const $smt_Type Type)
(declare-const $smt_Term Type)
(declare-const $smt_Value Type)
(declare-const $smt_Map Type)
(declare-const $smd_tsm.Bool $smt_Type)
(define $tsm_Bool () $smd_tsm.Bool)
(declare-parameterized-const $smd_sm.Bool
  ((b $smt_builtin_Bool :opaque)) $smt_Term)
(declare-parameterized-const $smd_sm.Numeral
  ((n $smt_builtin_Int :opaque)) $smt_Term)
(declare-parameterized-const $smd_sm.Rational
  ((r $smt_builtin_Real :opaque)) $smt_Term)
(declare-parameterized-const $smd_sm.String
  ((s ($smt_type_0 "String") :opaque)) $smt_Term)
(declare-parameterized-const $smd_sm.Const ((v $smt_Value :opaque)) $smt_Term)
(define $sm_Const ((v $smt_Value)) ($smd_sm.Const v))
(declare-parameterized-const $smd_vsm.Map
  ((T $smt_builtin_Int :opaque) (m $smt_Map :opaque))
  $smt_Value)
(define $vsm_map ((T $smt_builtin_Int) (m $smt_Map))
  ($smd_vsm.Map T m))
(declare-parameterized-const $smd_vsm.UConst
  ((T $smt_builtin_Int :opaque) (id $smt_builtin_Int :opaque))
  $smt_Value)
(define $vsm_uconst ((T $smt_builtin_Int) (id $smt_builtin_Int))
  ($smd_vsm.UConst T id))
(declare-parameterized-const $smd_vsm.Term
  ((t $smt_Term :opaque))
  $smt_Value)
(define $vsm_term ((t $smt_Term)) ($smd_vsm.Term t))
(declare-parameterized-const $smd_vsm.Apply
  ((f $smt_Value :opaque) (a $smt_Value :opaque))
  $smt_Value)
(define $vsm_apply ((f $smt_Value) (a $smt_Value))
  ($smd_vsm.Apply f a))
(declare-const $smd_vsm.NotValue $smt_Value)
(define $vsm_not_value () $smd_vsm.NotValue)
(declare-parameterized-const $smd_msm.Map.cons
  ((i $smt_Value :opaque) (e $smt_Value :opaque) (m $smt_Map :opaque))
  $smt_Map)
(define $msm_cons ((i $smt_Value) (e $smt_Value) (m $smt_Map))
  ($smd_msm.Map.cons i e m))
(declare-parameterized-const $smd_msm.Map.default
  ((e $smt_Value :opaque))
  $smt_Map)
(define $msm_default ((e $smt_Value)) ($smd_msm.Map.default e))
(declare-const $smd_eo.Type $eo_Term)
(define $eo_type () $smd_eo.Type)
(declare-const $smd_eo.Stuck $eo_Term)
(define $eo_stuck () $smd_eo.Stuck)
(declare-parameterized-const $smd_eo.Apply
  ((f $eo_Term :opaque) (a $eo_Term :opaque))
  $eo_Term)
(define $eo_apply ((x $eo_Term) (y $eo_Term)) ($smd_eo.Apply x y))
(declare-parameterized-const $smd_eo.FunType () $eo_Term)
(define $eo_fun_type () $smd_eo.FunType)
(declare-parameterized-const $smd_eo.SmtTerm ((t $smt_Term :opaque)) $eo_Term)
(define $eo_smt_term ((t $smt_Term)) ($smd_eo.SmtTerm t))
(declare-parameterized-const $smd_eo.SmtType ((t $smt_Type :opaque)) $eo_Term)
(define $eo_smt_type ((T $smt_Type)) ($smd_eo.SmtType T))
(define $sm_mk_true () ($smd_sm.Bool $smt_builtin_true))
(define $sm_mk_false () ($smd_sm.Bool $smt_builtin_false))
(define $sm_mk_bool ((c $smt_builtin_Bool))
  ($smd_sm.Bool c))
(define $sm_mk_z ((n $smt_builtin_Int))
  ($smd_sm.Numeral n))
(define $sm_mk_q ((r $smt_builtin_Real))
  ($smd_sm.Rational r))
(define $sm_mk_str ((s $smt_builtin_String))
  ($smd_sm.String s))
(define $vsm_true () ($vsm_term $sm_mk_true))
(define $vsm_false () ($vsm_term $sm_mk_false))
(define $eo_mk_bool ((x $smt_builtin_Bool))
  ($eo_smt_term ($sm_mk_bool x)))
(define $smt_builtin_is_ok ((x $eo_Term))
  ($smt_apply_1 "not" ($smt_apply_= x $eo_stuck)))
(program $smtx_hash ((T Type)) :signature (T) $smt_builtin_Int)
(program $eo_reverse_hash () :signature ($smt_builtin_Int) $eo_Term)
(program $smtx_value_hash () :signature ($smt_Value) $smt_builtin_Int)
(program $vsm_reverse_hash () :signature ($smt_builtin_Int) $smt_Value)
(declare-const $eo_List Type)
(declare-const $eo_List_nil $eo_List)
(declare-parameterized-const $eo_List_cons ((T Type :implicit))
  (-> T $eo_List $eo_List)
  :right-assoc-nil $eo_List_nil)
(define $eo_Option_null () $eo_List_nil)
(define $eo_Option_some ((T Type :implicit) (t T)) ($eo_List_cons t $eo_List_nil))
(define $eo_Option () $eo_List)
(declare-parameterized-const ite (($eo_x_1 Bool) (A Type :implicit) ($eo_x_2 A) ($eo_x_3 A)) A)
(declare-const not (-> Bool Bool))
(declare-const and (-> Bool (-> Bool Bool)))
(declare-parameterized-const = ((A Type :implicit) ($eo_x_1 A) ($eo_x_2 A)) Bool)
(declare-const Array (-> Type (-> Type Type)))
(declare-parameterized-const select ((U Type :implicit) (T Type :implicit) ($eo_x_1 (_ (Array U) T)) ($eo_x_2 U)) T)
(declare-parameterized-const @array_deq_diff ((T Type :implicit) (U Type :implicit) (a (_ (Array T) U) :opaque) (b (_ (Array T) U) :opaque)) T)
(program $eo_dt_selectors ((T Type) (t T))
  :signature (T) $eo_List
  (

  (($eo_dt_selectors t) $eo_fail)
  )
)
(program $eo_model_sat () :signature (Bool) $eo_Option)
(program $eo_model_is_input () :signature (Bool) Bool)
(program $smtx_map_lookup
  ((i $smt_Value) (j $smt_Value) (e $smt_Value) (M $smt_Map))
  :signature ($smt_Map $smt_Value) $smt_Value
  (
  
  (($smtx_map_lookup ($msm_cons i e M) i)  e)
  (($smtx_map_lookup ($msm_cons j e M) i)  ($smtx_map_lookup M i))
  (($smtx_map_lookup ($msm_default e) i)   e)
  )
)
(program $smtx_map_is_value ()
  :signature ($smt_builtin_Int $smt_Map) $smt_builtin_Bool)
(program $smtx_select
  ((v $smt_Value) (i $smt_Value) (T $smt_builtin_Int) (m $smt_Map))
  :signature ($smt_Value $smt_Value) $smt_Value
  (
  (($smtx_select ($vsm_map T m) i) ($smtx_map_lookup m i))
  (($smtx_select v i)              $vsm_not_value)
  )
)
(define $smt_is_dt_cons ((t $smt_Term))
  ($smt_builtin_is_ok ($eo_dt_selectors t)))
(program $smtx_term_is_value
  ((t $smt_Term) (b $smt_builtin_Bool) (n $smt_builtin_Int) (r $smt_builtin_Real) (s $smt_builtin_String))
  :signature ($smt_Term) $smt_builtin_Bool
  (
  
  (($smtx_term_is_value ($sm_mk_bool b))  $smt_builtin_true)
  (($smtx_term_is_value ($sm_mk_z n))     $smt_builtin_true)
  (($smtx_term_is_value ($sm_mk_q r))     $smt_builtin_true)
  (($smtx_term_is_value ($sm_mk_str s))   $smt_builtin_true)
  
  (($smtx_term_is_value t)                $smt_builtin_false)
  )
)
(define $smt_mk_value_term ((t $smt_Term))
  ($smt_apply_3 "ite" ($smtx_term_is_value t)
    
    ($vsm_term t)
    ($smt_apply_3 "ite" ($smt_is_dt_cons t)
      
      ($vsm_apply ($vsm_term t) $vsm_not_value)
      $vsm_not_value)))
(define $smt_mk_value_map ((T $smt_builtin_Int) (m $smt_Map))
  ($smt_apply_3 "ite"
    ($smtx_map_is_value T m)
    ($vsm_map T m)
    $vsm_not_value))
(program $smtx_is_value
  ((t $smt_Term) (f $smt_Value) (v $smt_Value) (T $eo_Term) (m $smt_Map)
   (T $smt_builtin_Int) (id $smt_builtin_Int))
  :signature ($smt_Value) $smt_builtin_Bool
  (
  (($smtx_is_value ($vsm_term t))         ($smtx_term_is_value t))
  (($smtx_is_value ($vsm_map T m))        ($smtx_map_is_value T m))
  (($smtx_is_value ($vsm_uconst T id))    $smt_builtin_true)
  
  (($smtx_is_value ($vsm_apply ($vsm_term t) $vsm_not_value))
                                          ($smt_is_dt_cons t))
  (($smtx_is_value ($vsm_apply f v))      ($smt_apply_2 "and" ($smtx_is_value f) ($smtx_is_value v)))
  
  (($smtx_is_value v)                     $smt_builtin_false)
  )
)
(program $smtx_ensure_value
  ((v $smt_Value) (t $smt_Term) (T $smt_builtin_Int) (m $smt_Map) (id $smt_builtin_Int))
  :signature ($smt_Value) $smt_Value
  (
  (($smtx_ensure_value ($vsm_term t))         ($smt_mk_value_term t))
  (($smtx_ensure_value ($vsm_map T m))        ($smt_mk_value_map T m))
  (($smtx_ensure_value ($vsm_uconst T id))    ($vsm_uconst T id))
  (($smtx_ensure_value v)                     $vsm_not_value)
  )
)
(program $smtx_model_eval () :signature ($eo_Term) $smt_Value)
(program $smtx_model_lookup ()
  :signature ($smt_Term) $smt_Value)
(program $smtx_model_lookup_predicate_internal ((t $smt_Term) (v $smt_Value))
  :signature ($smt_Term $smt_Value) $smt_builtin_Bool
  (

  
  (($smtx_model_lookup_predicate_internal t v) $smt_builtin_true)
  )
)
(program $smtx_model_lookup_predicate ((t $smt_Term))
  :signature ($smt_Term) $smt_builtin_Bool
  (
  (($smtx_model_lookup_predicate t)
    ($smtx_model_lookup_predicate_internal t ($smtx_model_lookup t)))
  )
)
(program $smtx_model_eval_apply
  ((T $smt_builtin_Int) (m $smt_Map) (i $smt_Value) (f $smt_Value) (v $smt_Value))
  :signature ($smt_Value $smt_Value) $smt_Value
  (
  
  (($smtx_model_eval_apply ($vsm_apply f v) i)  ($vsm_apply ($vsm_apply f v) i))
  
  (($smtx_model_eval_apply ($vsm_map T m) i)    ($smtx_map_lookup m i))
  
  (($smtx_model_eval_apply v i)                 $vsm_not_value)
  )
)
(program $smtx_model_eval_ite
  ((t1 $smt_Value) (t2 $smt_Value) (t3 $smt_Value))
  :signature ($smt_Value $smt_Value $smt_Value) $smt_Value

  (
  (($smtx_model_eval_ite $vsm_true t2 t3)   t2)
  (($smtx_model_eval_ite $vsm_false t2 t3)  t3)
  (($smtx_model_eval_ite t1 t2 t3)          $vsm_not_value)
  )
)
(program $smtx_model_eval_=
  ((t1 $smt_Value) (t2 $smt_Value))
  :signature ($smt_Value $smt_Value) $smt_Value
  (
  (($smtx_model_eval_= $vsm_not_value t2) $vsm_not_value)
  (($smtx_model_eval_= t1 $vsm_not_value) $vsm_not_value)
  
  (($smtx_model_eval_= t1 t2)             ($vsm_term ($sm_mk_bool ($smt_apply_= t1 t2))))
  )
)
(program $smtx_model_eval_not
  ((x1 $smt_builtin_Bool) (t1 $smt_Value))
  :signature ($smt_Value) $smt_Value
  (
  (($smtx_model_eval_not ($vsm_term ($sm_mk_bool x1))) ($vsm_term ($sm_mk_bool ($smt_apply_1 "not" x1))))
  (($smtx_model_eval_not t1) $vsm_not_value)
  )
)
(program $smtx_model_eval_and
  ((x1 $smt_builtin_Bool) (x2 $smt_builtin_Bool) (t1 $smt_Value) (t2 $smt_Value))
  :signature ($smt_Value $smt_Value) $smt_Value
  (
  (($smtx_model_eval_and ($vsm_term ($sm_mk_bool x1)) ($vsm_term ($sm_mk_bool x2))) ($vsm_term ($sm_mk_bool ($smt_apply_2 "and" x1 x2))))
  (($smtx_model_eval_and t1 t2) $vsm_not_value)
  )
)
(program $smtx_model_eval
  ((f $eo_Term) (y $eo_Term) (z $eo_Term)
   (val $smt_Value)
   
   (x1 $eo_Term) (x2 $eo_Term) (x3 $eo_Term) (x4 $eo_Term) (x5 $eo_Term))
  :signature ($eo_Term) $smt_Value
  (
  
  
  
  (($smtx_model_eval (ite x1 x2 x3)) ($smtx_model_eval_ite ($smtx_model_eval x1) ($smtx_model_eval x2) ($smtx_model_eval x3)))
  (($smtx_model_eval (not x1)) ($smtx_model_eval_not ($smtx_model_eval x1)))
  (($smtx_model_eval (and x1 x2)) ($smtx_model_eval_and ($smtx_model_eval x1) ($smtx_model_eval x2)))
  (($smtx_model_eval (= x1 x2)) ($smtx_model_eval_= ($smtx_model_eval x1) ($smtx_model_eval x2)))
  (($smtx_model_eval (select x1 x2)) ($smtx_select ($smtx_model_eval x1) ($smtx_model_eval x2)))

  
  
  
  (($smtx_model_eval ($sm_Const val))           ($smtx_ensure_value val))
  
  
  
  
  
  (($smtx_model_eval (f y))
    ($smtx_model_eval_apply ($smtx_model_eval f) ($smtx_model_eval y)))

  
  
  
  (($smtx_model_eval z)                         ($smt_mk_value_term z))
  )
)
(program $smtx_model_sat ((val $smt_Value))
  :signature ($smt_Value) $eo_Option
  (
  (($smtx_model_sat $vsm_true)  ($eo_Option_some true))
  (($smtx_model_sat $vsm_false) ($eo_Option_some false))
  (($smtx_model_sat val)        $eo_Option_null)
  )
)
(program $smtx_is_input
  ((t $eo_Term) (a $eo_Term) (s $smt_Term) (T $smt_Type) (v $smt_Value))
  :signature ($eo_Term) Bool
  (
  (($smtx_is_input ($eo_apply t a))
    ($eo_if_both ($smtx_is_input t) ($smtx_is_input a)))
  (($smtx_is_input ($eo_smt_term ($sm_Const v)))  ($eo_mk_bool ($smtx_is_value v)))
  (($smtx_is_input ($eo_smt_term s))              true)
  (($smtx_is_input ($eo_smt_type T))              true)
  (($smtx_is_input t)                             false)
  )
)
(program $eo_model_sat ((F Bool))
  :signature (Bool) $eo_Option
  (
  (($eo_model_sat F) ($smtx_model_sat ($smtx_model_eval F)))
  )
)
(program $eo_model_is_input ((F Bool))
  :signature (Bool) Bool
  (
  (($eo_model_is_input F) ($smtx_is_input F))
  )
)
(program $eor_arrays_ext ((T Type) (U Type) (a (_ (Array T) U)) (b (_ (Array T) U)))
  :signature (Bool) Bool
  (
  (($eor_arrays_ext (not (_ (= a) b))) (eo::define ((_v0 (@array_deq_diff a b))) (not (_ (= (_ (select a) _v0)) (_ (select b) _v0)))))
  )
)
(program $eovc_arrays_ext ((T Type) (U Type) (a (_ (Array T) U)) (b (_ (Array T) U)))
  :signature ((_ (Array T) U) (_ (Array T) U)) Bool
  (
  (($eovc_arrays_ext b a) (eo::define ((_v0 (not (_ (= a) b)))) (eo::define ((_v1 ($eor_arrays_ext _v0))) ($eo_requires_eq ($eo_model_is_input _v1) true ($eo_requires_eq ($eo_model_sat _v0) ($eo_Option_some true) ($eo_requires_eq ($eo_model_sat _v1) ($eo_Option_some false) true))))))
  )
)
(echo "smt-meta $eovc_arrays_ext :deps $smtx_model_lookup_predicate $smtx_hash $eo_reverse_hash $smtx_value_hash $vsm_reverse_hash $tsm_Bool $eo_type $eo_fun_type ")
