; trim-defs: $eovc_symm $eo_typeof $eo_hash $eo_requires $eo_apply $eo_fun_type
; #trim-defs: 131
(declare-const Int Type)
(declare-consts <numeral> Int)
(declare-const Real Type)
(declare-consts <rational> Real)
(declare-const Char Type)
(declare-const Seq (-> Type Type))
(declare-consts <string> (Seq Char))
(define $eo_Numeral () Int)
(define $eo_Rational () Real)
(define $eo_String () (Seq Char))
(define $eo_Binary () Type)
(declare-const $eo_Term Type)
(program $eo_typeof ((T Type))
  :signature (T) Type)
(declare-const $smt_BuiltinType Type)
(define $smt_id () $eo_String)
(declare-parameterized-const $smt_type_0
  ((op $smt_id :opaque))
  Type)
(declare-parameterized-const $smt_apply_0
  ((op $smt_id :opaque))
  $smt_BuiltinType)
(declare-parameterized-const $smt_apply_1
  ((W1 Type :implicit)
   (op $smt_id :opaque) (x1 W1 :opaque)) $smt_BuiltinType)
(declare-parameterized-const $smt_apply_2
  ((W1 Type :implicit) (W2 Type :implicit)
   (op $smt_id :opaque) (x1 W1 :opaque) (x2 W2 :opaque)) $smt_BuiltinType)
(declare-parameterized-const $smt_apply_3
  ((W1 Type :implicit) (W2 Type :implicit) (W3 Type :implicit)
   (op $smt_id :opaque) (x1 W1 :opaque) (x2 W2 :opaque) (x3 W3 :opaque)) $smt_BuiltinType)
(declare-parameterized-const $smt_apply_=
  ((W Type :implicit) (x1 W :opaque) (x2 W :opaque))
  $smt_BuiltinType)
(define $smt_builtin_Bool () ($smt_type_0 "Bool"))
(define $smt_builtin_Int () ($smt_type_0 "Int"))
(define $smt_builtin_Real () ($smt_type_0 "Real"))
(define $smt_builtin_String () ($smt_type_0 "String"))
(define $smt_builtin_true () ($smt_apply_0 "true"))
(define $smt_builtin_false () ($smt_apply_0 "false"))
(define $smt_builtin_z_zero () ($smt_apply_0 "0"))
(define $smt_builtin_and ((b1 $smt_builtin_Bool) (b2 $smt_builtin_Bool)) ($smt_apply_2 "and" b1 b2))
(define $smt_builtin_or ((b1 $smt_builtin_Bool) (b2 $smt_builtin_Bool)) ($smt_apply_2 "or" b1 b2))
(declare-const $smt_Type Type)
(declare-const $smt_Term Type)
(declare-const $smt_Value Type)
(declare-const $smt_Map Type)
(declare-parameterized-const $smd_tsm.NullSort
  ((id $smt_builtin_Int :opaque)) $smt_Type)
(declare-const $smd_sm.True $smt_Term)
(declare-const $smd_sm.False $smt_Term)
(declare-parameterized-const $smd_sm.Numeral
  ((n $smt_builtin_Int :opaque)) $smt_Term)
(declare-parameterized-const $smd_sm.Rational
  ((r $smt_builtin_Real :opaque)) $smt_Term)
(declare-parameterized-const $smd_sm.String
  ((s ($smt_type_0 "String") :opaque)) $smt_Term)
(declare-parameterized-const $smd_sm.Binary
  ((w $smt_builtin_Int :opaque) (v $smt_builtin_Int :opaque)) $smt_Term)
(declare-parameterized-const $smd_sm.Apply
  ((t1 $smt_Term :opaque) (t2 $smt_Term :opaque)) $smt_Term)
(declare-parameterized-const $smd_sm.Const ((v $smt_Value :opaque)) $smt_Term)
(define $sm_Const ((v $smt_Value)) ($smd_sm.Const v))
(declare-parameterized-const $smd_vsm.Map
  ((T $smt_Type :opaque) (m $smt_Map :opaque))
  $smt_Value)
(declare-parameterized-const $smd_vsm.UConst
  ((T $smt_Type :opaque) (id $smt_builtin_Int :opaque))
  $smt_Value)
(declare-parameterized-const $smd_vsm.Term
  ((t $smt_Term :opaque))
  $smt_Value)
(declare-const $smd_vsm.NotValue $smt_Value)
(declare-parameterized-const $smd_msm.Map.cons
  ((i $smt_Value :opaque) (e $smt_Value :opaque) (m $smt_Map :opaque))
  $smt_Map)
(declare-parameterized-const $smd_msm.Map.default
  ((e $smt_Value :opaque))
  $smt_Map)
(declare-const $smd_eo.Stuck $eo_Term)
(define $eo_stuck () $smd_eo.Stuck)
(declare-parameterized-const $smd_eo.Apply
  ((f $eo_Term :opaque) (a $eo_Term :opaque))
  $eo_Term)
(program $eo_apply ((x $eo_Term) (y $eo_Term))
  :signature ($eo_Term $eo_Term) $eo_Term
  (
  (($eo_apply x y)
    ($smt_apply_3 "ite"
      ($smt_builtin_or
        ($smt_apply_= x $eo_stuck)
        ($smt_apply_= y $eo_stuck))
      $eo_stuck
      ($smd_eo.Apply x y)))
  )
)
(declare-parameterized-const $smd_eo.FunType
  ((t1 $eo_Term :opaque) (t2 $eo_Term :opaque))
  $eo_Term)
(program $eo_fun_type ((t1 $eo_Term) (t2 $eo_Term))
  :signature ($eo_Term $eo_Term) $eo_Term
  (
  (($eo_fun_type t1 t2)
      ($smt_apply_3 "ite"
        ($smt_builtin_or
          ($smt_apply_= t1 $eo_stuck)
          ($smt_apply_= t2 $eo_stuck))
        $eo_stuck
        ($smd_eo.FunType t1 t2)))
  )
)
(declare-parameterized-const $smd_eo.SmtTerm ((t $smt_Term :opaque)) $eo_Term)
(define $eo_smt_term ((t $smt_Term)) ($smd_eo.SmtTerm t))
(declare-parameterized-const $smd_eo.SmtType ((t $smt_Type :opaque)) $eo_Term)
(define $eo_smt_type ((T $smt_Type)) ($smd_eo.SmtType T))
(declare-parameterized-const $smd_eo.SmtValue ((t $smt_Value :opaque)) $eo_Term)
(define $eo_smt_value ((T $smt_Value)) ($smd_eo.SmtValue T))
(declare-parameterized-const $smd_eo.Var
  ((s $smt_builtin_String :opaque) (T $eo_Term :opaque))
  $eo_Term)
(define $eo_Var ((s $smt_builtin_String) (T $eo_Term)) ($smd_eo.Var s T))
(define $sm_mk_true () $smd_sm.True)
(define $sm_mk_false () $smd_sm.False)
(define $sm_mk_bool ((c $smt_builtin_Bool))
  ($smt_apply_3 "ite" c $sm_mk_true $sm_mk_false))
(define $sm_Numeral ((n $smt_builtin_Int))
  ($smd_sm.Numeral n))
(define $sm_Rational ((r $smt_builtin_Real))
  ($smd_sm.Rational r))
(define $sm_String ((s $smt_builtin_String))
  ($smd_sm.String s))
(define $sm_is_true ((b $smt_Term)) ($smt_apply_= b $sm_mk_true))
(define $sm_is_false ((b $smt_Term)) ($smt_apply_= b $sm_mk_false))
(define $eo_true () ($eo_smt_term $sm_mk_true))
(define $eo_false () ($eo_smt_term $sm_mk_false))
(define $eo_mk_numeral ((x $smt_builtin_Int))
  ($eo_smt_term ($sm_Numeral x)))
(define $eo_mk_rational ((x $smt_builtin_Real))
  ($eo_smt_term ($sm_Rational x)))
(define $eo_mk_string ((x $smt_builtin_String))
  ($eo_smt_term ($sm_String x)))
(define $eo_binary ((x1 $smt_builtin_Int) (x2 $smt_builtin_Int))
  ($eo_smt_term ($smd_sm.Binary x1 x2)))
(program $eo_requires ((x1 $eo_Term) (x3 $eo_Term))
  :signature ($eo_Term $eo_Term $eo_Term) $eo_Term
  (
  (($eo_requires x1 x1 x3) x3)
  )
)
(program $eo_hash () :signature ($eo_Term) $eo_Term)
(program $eo_typeof_main () :signature ($eo_Term) Type)
(program $eo_typeof
  ((t $eo_Term) (T $eo_Term) (n $smt_builtin_Int) (r $smt_builtin_Real)
   (s $smt_builtin_String) (w $smt_builtin_Int) (val $smt_Value))
  :signature ($eo_Term) $eo_Term
  (
  
  (($eo_typeof $eo_true)                        Bool)
  (($eo_typeof $eo_false)                       Bool)
  (($eo_typeof ($eo_mk_numeral n))              $eo_Numeral)
  (($eo_typeof ($eo_mk_rational r))             $eo_Rational)
  (($eo_typeof ($eo_mk_string s))               $eo_String)
  (($eo_typeof ($eo_binary w n))                $eo_Binary)
  (($eo_typeof ($eo_Var s T))                   T)
  
  
  
  (($eo_typeof t)                               ($eo_typeof_main t))
  )
)
(declare-parameterized-const ite (($eo_x_1 Bool) (A Type :implicit) ($eo_x_2 A) ($eo_x_3 A)) A)
(declare-const not (-> Bool Bool))
(declare-const and (-> Bool (-> Bool Bool)))
(declare-parameterized-const = ((A Type :implicit) ($eo_x_1 A) ($eo_x_2 A)) Bool)
(program $mk_symm ((T Type) (t2 T) (t1 T))
  :signature (Bool) Bool
  (
  (($mk_symm (_ (= t1) t2)) (_ (= t2) t1))
  (($mk_symm (not (_ (= t1) t2))) (not (_ (= t2) t1)))
  )
)
(declare-const BitVec (-> Int Type))
(program $eo_typeof_apply ((T Type) (U Type))
  :signature (Type Type) Type
  (
  (($eo_typeof_apply (-> T U) T) U)
  )
)
(program $eo_typeof_ite (($eo_T Type) (A Type))
  :signature ($eo_T $eo_T) Type
  (
  (($eo_typeof_ite Bool A) (-> A A))
  )
)
(program $eo_typeof_= (($eo_T Type) (A Type))
  :signature ($eo_T) Type
  (
  (($eo_typeof_= A) (-> A Bool))
  )
)
(program $eo_typeof_fun_type ()
  :signature (Type Type) Type
  (
  (($eo_typeof_fun_type Type Type) Type)
  )
)
(program $eo_typeof_main
  ((T Type) (U Type) (V Type) (W Type) (f (-> U V T)) (x U) (t T)
   (W1 Type) (x1 W1) (W2 Type) (x2 W2) (W3 Type) (x3 W3)) 
  :signature (T) Type
  (
  (($eo_typeof_main Type)      Type)
  (($eo_typeof_main (-> T U))  ($eo_typeof_fun_type ($eo_typeof T) ($eo_typeof U))) 
  (($eo_typeof_main Bool)      Type)
  (($eo_typeof_main true)      Bool)
  (($eo_typeof_main false)     Bool)
  
  (($eo_typeof_main Int) Type)
  
  (($eo_typeof_main Real) Type)
  
  (($eo_typeof_main Char) Type)
  
  (($eo_typeof_main Seq) (-> Type Type))
  
  (($eo_typeof_main (_ (ite x1) x2)) ($eo_typeof_ite ($eo_typeof x1) ($eo_typeof x2)))
  
  (($eo_typeof_main not) (-> Bool Bool))
  
  (($eo_typeof_main and) (-> Bool (-> Bool Bool)))
  
  (($eo_typeof_main (= x1)) ($eo_typeof_= ($eo_typeof x1)))
  
  (($eo_typeof_main BitVec) (-> Int Type))

  (($eo_typeof_main (f x))     ($eo_typeof_apply ($eo_typeof f) ($eo_typeof x)))
  )
)
(program $eo_model_sat () :signature ($eo_Term) Bool)
(program $eo_model_typeof () :signature ($eo_Term) Bool)
(define $sm_apply_term ((t1 $smt_Term) (t2 $smt_Term))
  ($smd_sm.Apply t1 t2))
(define $tsm_NullSort ((id $smt_builtin_Int)) ($smd_tsm.NullSort id))
(define $vsm_map ((T $smt_Type) (m $smt_Map))
  ($smd_vsm.Map T m))
(define $vsm_uconst ((T $smt_Type) (id $smt_builtin_Int))
  ($smd_vsm.UConst T id))
(define $vsm_term ((t $smt_Term)) ($smd_vsm.Term t))
(define $vsm_not_value () $smd_vsm.NotValue)
(define $map_cons ((i $smt_Value) (e $smt_Value) (m $smt_Map))
  ($smd_msm.Map.cons i e m))
(define $map_default ((e $smt_Value)) ($smd_msm.Map.default e))
(define $smt_try_eo_type ((t $eo_Term) (elseTerm $eo_Term))
  ($smt_apply_3 "ite" ($smt_apply_1 "(_ is eo.SmtType)" t)
    t
    elseTerm))
(define $smt_term_from_value ((t $smt_Term))
  ($smt_apply_1 "vsm.Term.arg1" t))
(program $smtx_term_is_value ()
  :signature ($smt_Term) $smt_builtin_Bool)
(program $smtx_map_lookup
  ((i $smt_Value) (j $smt_Value) (e $smt_Value) (M $smt_Map))
  :signature ($smt_Map $smt_Value) $smt_Value
  (
  
  (($smtx_map_lookup ($map_cons i e M) i)  e)
  (($smtx_map_lookup ($map_cons j e M) i)  ($smtx_map_lookup M i))
  (($smtx_map_lookup ($map_default e) i)   e)
  )
)
(program $smtx_map_is_value ()
  :signature ($smt_Type $smt_Map) $smt_builtin_Bool)
(program $smtx_term_is_value
  ((T $smt_Type) (t $smt_Term) (n $smt_builtin_Int) (r $smt_builtin_Real) (s $smt_builtin_String))
  :signature ($smt_Term) $smt_builtin_Bool
  (
  
  (($smtx_term_is_value $sm_mk_true)        $smt_builtin_true)
  (($smtx_term_is_value $sm_mk_false)       $smt_builtin_true)
  (($smtx_term_is_value ($sm_Numeral n))    $smt_builtin_true)
  (($smtx_term_is_value ($sm_Rational r))   $smt_builtin_true)
  (($smtx_term_is_value ($sm_String s))     $smt_builtin_true)
  
  (($smtx_term_is_value t)                  $smt_builtin_false)
  )
)
(define $smt_mk_value_term ((t $smt_Term))
  ($smt_apply_3 "ite"
    ($smtx_term_is_value t)
    ($vsm_term t)
    $vsm_not_value))
(define $smt_mk_value_map ((T $smt_Type) (m $smt_Map))
  ($smt_apply_3 "ite"
    ($smtx_map_is_value T m)
    ($vsm_map T m)
    $vsm_not_value))
(program $smtx_ensure_value
  ((t $smt_Value) (val $smt_Value) (T $smt_Type) (m $smt_Map) (id $smt_builtin_Int))
  :signature ($smt_Value) $smt_Value
  (
  (($smtx_ensure_value ($vsm_term t))        ($smt_mk_value_term t))
  (($smtx_ensure_value ($vsm_map T m))       ($smt_mk_value_map T m))
  (($smtx_ensure_value ($vsm_uconst T id))   ($vsm_uconst T id))
  (($smtx_ensure_value t)                    $vsm_not_value)
  )
)
(define $vsm_is_value ((t $smt_Value))
  ($smt_apply_1 "not" ($smt_apply_1 "(_ is vsm.NotValue)" t)))
(define $vsm_is_true ((t $smt_Value))
  ($smt_builtin_and
    ($smt_apply_1 "(_ is vsm.Term)" t)
    ($sm_is_true ($smt_apply_1 "vsm.Term.arg1" t))))
(define $vsm_is_false ((t $smt_Value))
  ($smt_builtin_and
    ($smt_apply_1 "(_ is vsm.Term)" t)
    ($sm_is_false ($smt_apply_1 "vsm.Term.arg1" t))))
(program $smtx_model_eval () :signature ($smt_Term) $smt_Value)
(program $smtx_model_eval_apply
  ((T $smt_Type) (m $smt_Map) (i $smt_Value) (v $smt_Value))
  :signature ($smt_Value $smt_Value) $smt_Value
  (
  
  (($smtx_model_eval_apply ($vsm_map T m) i)  ($smtx_map_lookup m i))
  
  (($smtx_model_eval_apply v i)               $vsm_not_value)
  )
)
(program $smtx_model_eval
  ((T $smt_Type) (f $smt_Term) (y $smt_Term) (z $smt_Term) (k $smt_Term) (id $smt_builtin_Int) (F Bool)
   (val $smt_Value)
   
   (x1 $smt_Term) (x2 $smt_Term) (x3 $smt_Term) (x4 $smt_Term) (x5 $smt_Term))
  :signature ($smt_Term) $smt_Value
  (
  
  (($smtx_model_eval (ite x1 x2 x3))
    (eo::define ((e1 ($smtx_model_eval x1)))
    ($smt_apply_3 "ite" ($vsm_is_true e1)
      ($smtx_model_eval x2)
      ($smt_apply_3 "ite" ($vsm_is_false e1)
        ($smtx_model_eval x3)
        $vsm_not_value))))
  
  
  
  
  
  
  
  
  (($smtx_model_eval (= x1 x2))
    (eo::define ((e1 ($smtx_model_eval x1)))
    (eo::define ((e2 ($smtx_model_eval x2)))
    ($smt_apply_3 "ite" ($smt_builtin_and ($vsm_is_value e1) ($vsm_is_value e2))
      
      ($vsm_term ($sm_mk_bool ($smt_apply_= e1 e2)))
      $vsm_not_value))))
  
  
  
  
  
  (($smtx_model_eval (not x1))
    (eo::define ((e1 ($smtx_model_eval x1)))
    ($smt_apply_3 "ite" ($vsm_is_value e1)
      ($vsm_term ($sm_mk_bool ($smt_apply_1 "not" ($smt_apply_= $sm_mk_true ($smt_term_from_value e1)))))
    $vsm_not_value)))
  (($smtx_model_eval (and x1 x2))
    (eo::define ((e1 ($smtx_model_eval x1)))
    ($smt_apply_3 "ite" ($vsm_is_value e1)
    (eo::define ((e2 ($smtx_model_eval x2)))
    ($smt_apply_3 "ite" ($vsm_is_value e2)
      ($vsm_term ($sm_mk_bool ($smt_apply_2 "and" ($smt_apply_= $sm_mk_true ($smt_term_from_value e1)) ($smt_apply_= $sm_mk_true ($smt_term_from_value e2)))))
    $vsm_not_value))
    $vsm_not_value)))

  
  
  
  
  (($smtx_model_eval ($sm_apply_term f y))    (eo::define ((fme ($smtx_model_eval f)))
                                              (eo::define ((yme ($smtx_model_eval y)))
                                                ($smtx_model_eval_apply fme yme))))
  
  
  
  (($smtx_model_eval ($sm_Const val))          ($smtx_ensure_value val))
  
  
  
  
  (($smtx_model_eval z)                       ($smtx_ensure_value ($vsm_term z)))
  )
)
(program $eo_model_sat_internal ((val $smt_Value))
  :signature ($smt_Value) Bool
  (
  (($eo_model_sat_internal ($vsm_term $sm_mk_true)) true)
  (($eo_model_sat_internal ($vsm_term $sm_mk_false)) false)
  )
)
(program $eo_model_sat ((F $smt_Term))
  :signature ($eo_Term) Bool
  (
  (($eo_model_sat ($eo_smt_term F)) ($eo_model_sat_internal ($smtx_model_eval F)))
  )
)
(program $eo_model_typeof
  ((t $eo_Term) (val $smt_Value) (T $smt_Type) (m $smt_Map) (id $smt_builtin_Int))
  :signature ($eo_Term) $eo_Term
  (
  
  (($eo_model_typeof ($eo_smt_term ($sm_Const val)))      ($eo_model_typeof ($eo_smt_value val)))
  (($eo_model_typeof ($eo_smt_value ($vsm_term t)))       ($eo_model_typeof ($eo_smt_term t)))
  (($eo_model_typeof ($eo_smt_value ($vsm_map T m)))      T) 
  (($eo_model_typeof ($eo_smt_value ($vsm_uconst T id)))  T)
  (($eo_model_typeof ($eo_smt_value $vsm_not_value))      ($tsm_NullSort $smt_builtin_z_zero))
  (($eo_model_typeof t) ($smt_try_eo_type
                          ($eo_typeof t)
                          ($eo_smt_type ($tsm_NullSort $smt_builtin_z_zero))))
  )
)
(program $eorx_symm ((F Bool))
  :signature (Bool Type) Bool
  (
  (($eorx_symm F Bool) ($mk_symm F))
  )
)
(program $eor_symm ((F Bool))
  :signature (Bool) Bool
  (
  (($eor_symm F) ($eorx_symm F ($eo_model_typeof F)))
  )
)
(program $eovc_symm ((F Bool))
  :signature (Bool) Bool
  (
  (($eovc_symm F)
     (eo::requires ($eo_model_sat F) true
     (eo::requires ($eo_model_sat ($eor_symm F)) false
       true)))
  )
)
(echo "smt-meta $eovc_symm")
