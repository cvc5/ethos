; This file is used for bootstrapping the semantics of Eunoia.
; We use a naming convention where eo:: operators are defined as ordinary
; programs with prefix $eo_. We additionally setup further desugaring
; to be done in later stages. Overall, this includes:
; 1. Definition of the builtin Eunoia list.
; 2. A definition of $eo_eq.
; 3. Definition of derived list operators.
; 4. Definition of $eo_cons and (a template for) $eo_nil.
; 5. Definition of a template of $eo_typeof_main, which is used in
;    part to define $eo_typeof.
; 6. Templates for $eo_dt_constructors and $eo_dt_selectors.
; 7. A placeholder command (echo "include eo_builtin_smt") to specify
;    where further eo:: builtins should be defined.
; 8. Placeholders for defining a test environment for analyzing properties
;    of proof rules ($eo_model_sat/$eo_model_typeof).
; This file contains templates $EO_*$ which are automatically filled in
; by user definitions. This includes:
; 1. The literal type definitions (EO_LITERAL_TYPE_DECL).
; 2. All user declarations and definitions (EO_DEFS).
; 3. (Monomorphized) type rules for user declarations, for $eo_typeof.
; 4. Cases of $eo_dt_constructors, $eo_dt_selectors, $eo_nil.
; 5. A verification condition (EO_VC).

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; literal types

; declare: Int
(declare-const Int Type)
; type-rules: NUMERAL
(declare-consts <numeral> Int)
; declare: Real
(declare-const Real Type)
; type-rules: RATIONAL
(declare-consts <rational> Real)
; declare: Char
(declare-const Char Type)
; declare: Seq
(declare-const Seq (-> Type Type))
; type-rules: STRING
(declare-consts <string> (Seq Char))
(define $eo_Numeral () Int)
(define $eo_Rational () Real)
(define $eo_String () (Seq Char))
(define $eo_Binary () Type)
; decimal and hexadecimal omitted for now.


;;; forward declarations

; forward declaration
(program $eo_nil ((T Type) (U Type) (V Type) (W Type))
  :signature ((-> T U V) (eo::quote W)) W)

; forward declaration
(program $eo_typeof ((T Type))
  :signature (T) Type)

;;; core utilities

; The methods in this section are temporary definitions to eliminate
; dependencies on other builtin constructs.

; note: Used to intentionally specify a stuck evaluation.
(program $eo_fail_prog ()
  :signature (Bool) Bool
  (
  (($eo_fail_prog true) true)
  )
)
(define $eo_fail () ($eo_fail_prog false))

; note: This is used to ensure this signature does not depend on not.
(program $eo_if_not ()
  :signature (Bool) Bool
  (
  (($eo_if_not true)  false)
  (($eo_if_not false) true)
  )
)

; note: This is used to ensure this signature does not depend on and.
(program $eo_if_both ((b1 Bool) (b2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eo_if_both true true)  true)
  (($eo_if_both b1 b2)      false)
  )
)

; note: This is used to ensure signature does not depend on requires.
(program $eo_requires_true ((T Type) (t T))
  :signature (Bool T) T
  (
  (($eo_requires_true true t) t)
  )
)
(program $eo_requires_false ((T Type) (t T))
  :signature (Bool T) T
  (
  (($eo_requires_false false t) t)
  )
)

; note: This is used to ensure signature does not depend on ite.
(program $eo_prepend_if ((T Type) (V Type) (x T) (f (-> T V V)) (res V))
  :signature (Bool (-> T V V) V V) V
  (
  (($eo_prepend_if true f x res)  (f x res))
  (($eo_prepend_if false f x res) res)
  )
)

;;; Core SMT-like builtins

; We use a "lazy" include style that allows this file to
; be parsable without including the file.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; eo_builtin_smt

; This will contain the definitions of eo::add, etc.
; It is (for now) specific to a deep embedding into SMT.
(echo "include eo_builtin_smt")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; desugar core

;;; $eo_List

; The builtin Eunoia list.
(declare-const $eo_List Type)
(declare-const $eo_List_nil $eo_List)
(declare-parameterized-const $eo_List_cons ((T Type :implicit))
  (-> T $eo_List $eo_List)
  :right-assoc-nil $eo_List_nil)

;;; $eo_eq

; program: $eo_eq
; implements: eo::eq
(program $eo_eq ((T Type) (S Type) (t T) (s S))
  :signature (T S) Bool
  (
  (($eo_eq t t) true)
  (($eo_eq t s) false)
  )
)

;;;;;; List operators

;;; $eo_is_list

; Note: a helper for $eo_is_list.
(program $eo_is_list_rec
  ((T Type) (U Type) (V Type) (W Type) (X Type)
   (f (-> T U V)) (x T) (y U) (nil W) (z X))
  :signature ((-> T U V) W X) Bool
  (
  (($eo_is_list_rec f nil (f x y)) ($eo_is_list_rec f nil y))
  (($eo_is_list_rec f nil nil)     true)
  (($eo_is_list_rec f nil z)       false)
  )
)

; Note: >
;   This does not correspond to a builtin operator. It is used as a helper
;   to define the preconditions for most of the operators below.
(define $eo_is_list
  ((T Type :implicit) (U Type :implicit) (V Type :implicit) (W Type :implicit)
   (f (-> T U V)) (x W))
  ($eo_is_list_rec f ($eo_nil f ($eo_typeof x)) x))

;;; $eo_cons

; define: $eo_cons
; implements: eo::cons
(define $eo_cons
  ((T Type :implicit) (U Type :implicit) (V Type :implicit)
   (W1 Type :implicit) (W2 Type :implicit)
   (f (-> T U V)) (e W1) (a W2))
  ($eo_requires_true ($eo_is_list f a) (f e a)))

;;; $eo_get_elements

; Note: a helper for $eo_get_elements.
(program $eo_get_elements_rec
  ((T Type) (U Type) (V Type) (W Type) (W1 Type) (W2 Type) (X Type)
   (f (-> T U V)) (x W1) (y W2) (z X) (nil W))
  :signature ((-> T U V) W X) $eo_List
  (
  (($eo_get_elements_rec f nil (f x y)) ($eo_cons $eo_List_cons x ($eo_get_elements_rec f nil y)))
  (($eo_get_elements_rec f nil nil)     $eo_List_nil)
  )
)

; Note: >
;   This does not correspond to a builtin operator. It is used as a helper
;   to define eo_list_minclude below.
(define $eo_get_elements
  ((T Type :implicit) (U Type :implicit) (V Type :implicit) (W Type :implicit)
   (f (-> T U V)) (a W))
  ($eo_requires_true ($eo_is_list f a)
    ($eo_get_elements_rec f ($eo_nil f ($eo_typeof a)) a)))

;;; $eo_list_len

; Note: a helper for $eo_list_len.
; TODO: uses eo::add
(program $eo_list_len_rec
  ((T Type) (U Type) (V Type) (W Type) (f (-> T U V)) (x T) (y U) (nil W))
  :signature ((-> T U V) W) $eo_Numeral
  (
  (($eo_list_len_rec f (f x y))  (eo::add 1 ($eo_list_len_rec f y)))
  (($eo_list_len_rec f nil)      0)
  )
)

; define: $eo_list_len
; implements: eo::list_len
(define $eo_list_len
  ((T Type :implicit) (U Type :implicit) (V Type :implicit) (W Type :implicit)
   (f (-> T U V)) (a W))
  ($eo_requires_true ($eo_is_list f a) ($eo_list_len_rec f a)))

;;; $eo_list_concat

; Note: a helper for $eo_list_concat.
(program $eo_list_concat_rec
  ((T Type) (U Type) (V Type) (W Type) (f (-> T V V)) (x W) (y U) (z U) (nil U))
  :signature ((-> T V V) U U) U
  (
  (($eo_list_concat_rec f (f x y) z)  (f x ($eo_list_concat_rec f y z)))
  (($eo_list_concat_rec f nil z)      z)
  )
)

; define: $eo_list_concat
; implements: eo::list_concat
(define $eo_list_concat
  ((T Type :implicit) (U Type :implicit) (V Type :implicit)
   (f (-> T V V)) (a U) (b U))
  ($eo_requires_true ($eo_is_list f a)
  ($eo_requires_true ($eo_is_list f b)
    ($eo_list_concat_rec f a b))))

;;; $eo_list_nth

; Note: a helper for $eo_list_nth.
; TODO: uses eo::add
(program $eo_list_nth_rec
  ((T Type) (U Type) (f (-> T T T)) (x U) (y U) (n $eo_Numeral))
  :signature ((-> T T T) U $eo_Numeral) U
  (
  (($eo_list_nth_rec f (f x y) 0)  x)
  (($eo_list_nth_rec f (f x y) n)  ($eo_list_nth_rec f y (eo::add n -1)))
  )
)

; define: $eo_list_nth
; implements: eo::list_nth
(define $eo_list_nth
  ((T Type :implicit) (U Type :implicit)
   (f (-> T T T)) (a U) (n $eo_Numeral))
  ($eo_requires_true ($eo_is_list f a)
    ($eo_list_nth_rec f a n)))

;;; $eo_list_find

; Note: a helper for $eo_list_find.
; TODO: uses add
(program $eo_list_find_rec
  ((T Type) (U Type) (V Type) (W Type) (X Type)
   (f (-> T U V)) (x W) (z W) (y U) (z X) (nil W) (n $eo_Numeral))
  :signature ((-> T U V) W X $eo_Numeral) $eo_Numeral
  (
  (($eo_list_find_rec f (f x y) x n)  n)
  (($eo_list_find_rec f (f x y) z n)  ($eo_list_find_rec f y z (eo::add n 1)))
  (($eo_list_find_rec f nil z n)      -1)
  )
)

; define: $eo_list_find
; implements: eo::list_find
(define $eo_list_find
  ((T Type :implicit) (U Type :implicit) (V Type :implicit)
   (W1 Type :implicit) (W2 Type :implicit)
   (f (-> T U V)) (a W1) (e W2))
  ($eo_requires_true ($eo_is_list f a)
    ($eo_list_find_rec f a e 0)))

;;; $eo_list_rev

; Note: a helper for $eo_list_rev.
(program $eo_list_rev_rec
  ((T Type) (U Type) (V Type) (W Type)
   (f (-> T V V)) (x W) (y U) (nil U) (acc U))
  :signature ((-> T V V) U U) U
  (
    (($eo_list_rev_rec f (f x y) acc) ($eo_list_rev_rec f y (f x acc)))
    (($eo_list_rev_rec f nil acc)      acc)
  )
)

; define: $eo_list_rev
; implements: eo::list_rev
(define $eo_list_rev
  ((T Type :implicit) (U Type :implicit) (V Type :implicit)
   (f (-> T V V)) (a U))
  ($eo_requires_true ($eo_is_list f a)
    ($eo_list_rev_rec f a ($eo_nil f ($eo_typeof a)))))

;;; $eo_list_erase

; Note: a helper for $eo_list_erase.
(program $eo_list_erase_rec
  ((T Type) (U Type) (V Type) (W Type) (X Type)
   (f (-> T V V)) (x W) (y U) (z X) (nil U))
  ((-> T V V) U X) U
  (
  (($eo_list_erase_rec f (f x y) x)   y)
  (($eo_list_erase_rec f (f x y) z)   (f x ($eo_list_erase_rec f y z)))
  (($eo_list_erase_rec f nil z)       nil)
  )
)

; define: $eo_list_erase
; implements: eo::list_erase
(define $eo_list_erase
  ((T Type :implicit) (U Type :implicit) (V Type :implicit) (W Type :implicit)
   (f (-> T V V)) (a U) (e W))
  ($eo_requires_true ($eo_is_list f a)
    ($eo_list_erase_rec f a e)))

;;; $eo_list_erase_all

; Note: a helper for $eo_list_erase_all.
(program $eo_list_erase_all_rec
  ((T Type) (U Type) (V Type) (W Type) (X Type)
   (f (-> T V V)) (x W) (y U) (z X) (nil W))
  ((-> T V V) U X) U
  (
  (($eo_list_erase_all_rec f (f x y) z)  ($eo_prepend_if ($eo_if_not ($eo_eq z x))
                                              f x ($eo_list_erase_all_rec f y z)))
  (($eo_list_erase_all_rec f nil z)       nil)
  )
)

; define: $eo_list_erase_all
; implements: eo::list_erase_all
(define $eo_list_erase_all
  ((T Type :implicit) (U Type :implicit) (V Type :implicit) (W Type :implicit)
   (f (-> T V V)) (a U) (e W))
  ($eo_requires_true ($eo_is_list f a)
    ($eo_list_erase_all_rec f a e)))

;;; $eo_list_setof

; Note: a helper for $eo_list_setof.
(program $eo_list_setof_rec
  ((T Type) (U Type) (V Type) (W Type)
   (f (-> T V V)) (x W) (y U) (nil U))
  ((-> T V V) U) U
  (
  (($eo_list_setof_rec f (f x y))  (f x ($eo_list_setof_rec f ($eo_list_erase_all f y x))))
  (($eo_list_setof_rec f nil)      nil)
  )
)

; define: $eo_list_setof
; implements: eo::list_setof
(define $eo_list_setof
  ((T Type :implicit) (U Type :implicit) (V Type :implicit) (f (-> T V V)) (a U))
  ($eo_requires_true ($eo_is_list f a)
    ($eo_list_setof_rec f a)))

;;; $eo_list_minclude

; program: $eo_list_minclude_rec
; - y $eo_List: The first list.
; - z $eo_List: The second list.
; - rmLast Bool: false if we failed to remove the last element of y from z.
; return: true iff we successfully remove all elements of y from z.
; note: a helper for $eo_list_minclude.
(program $eo_list_minclude_rec
  ((T Type) (x T) (y $eo_List :list) (z $eo_List))
  ($eo_List $eo_List Bool) Bool
  (
  (($eo_list_minclude_rec y z false)            false)
  (($eo_list_minclude_rec ($eo_List_cons x y) z true)
    (eo::define ((res ($eo_list_erase $eo_List_cons z x)))
      ; pass true iff we successfully removed x from z.
      ($eo_list_minclude_rec y res ($eo_if_not ($eo_eq res z)))))
  (($eo_list_minclude_rec $eo_List_nil z true)  true)
  )
)

; define: $eo_list_minclude
; implements: eo::list_minclude
; Note: >
;   Since $eo_list_erase is a key submethod for defining $eo_list_minclude,
;   and $eo_list_erase requires functions (-> T V V), we convert the elements
;   of both lists to builtin lists $eo_List using the auxiliary method
;   $eo_get_elements in this definition.
(define $eo_list_minclude
  ((T Type :implicit) (U Type :implicit) (V Type :implicit)
   (W1 Type :implicit) (W2 Type :implicit)
   (f (-> T U V)) (a W1) (b W2))
  ($eo_requires_true ($eo_is_list f a)
  ($eo_requires_true ($eo_is_list f b)
    ($eo_list_minclude_rec ($eo_get_elements f a) ($eo_get_elements f b) true))))

;;; $eo_list_meq

; define: $eo_list_meq
; implements: eo::list_meq
(define $eo_list_meq
  ((T Type :implicit) (U Type :implicit) (V Type :implicit)
   (W1 Type :implicit) (W2 Type :implicit)
   (f (-> T U V)) (a W1) (b W2))
  ($eo_if_both ($eo_list_minclude f a b) ($eo_list_minclude f b a)))

;;; $eo_list_diff

; Note: a helper for $eo_list_diff.
(program $eo_list_diff_rec
  ((T Type) (V Type) (x T) (y V) (f (-> T V V)) (nil V) (z V))
  :signature ((-> T V V) V V) V
  (
  (($eo_list_diff_rec f (f x y) z)  (eo::define ((res ($eo_list_erase $eo_List_cons z x)))
                                    ($eo_prepend_if ($eo_eq res z)
                                      f x ($eo_list_diff_rec y res))))
  (($eo_list_diff_rec f nil z)      nil)
  )
)

; define: $eo_list_diff
; implements: eo::list_diff
(define $eo_list_diff
  ((T Type :implicit) (V Type :implicit)
   (f (-> T V V)) (a V) (b V))
  ($eo_requires_true ($eo_is_list f a)
  ($eo_requires_true ($eo_is_list f b)
    ($eo_list_diff_rec f a b))))

;;; $eo_list_inter

; Note: a helper for $eo_list_inter
(program $eo_list_inter_rec
  ((T Type) (V Type) (x T) (y V) (f (-> T V V)) (nil V) (z V))
  :signature ((-> T V V) V V) V
  (
  (($eo_list_inter_rec f (f x y) z) (eo::define ((res ($eo_list_erase $eo_List_cons z x)))
                                    ($eo_prepend_if ($eo_if_not ($eo_eq res z))
                                      f x ($eo_list_inter_rec y res))))
  (($eo_list_inter_rec f nil z)     nil)
  )
)

; define: $eo_list_inter
; implements: eo::list_inter
(define $eo_list_inter
  ((T Type :implicit) (V Type :implicit)
   (f (-> T V V)) (a V) (b V))
  ($eo_requires_true ($eo_is_list f a)
  ($eo_requires_true ($eo_is_list f b)
    ($eo_list_inter_rec f a b))))

; all further definitions

; define: $compare_geq
(define $compare_geq ((T Type :implicit) (y T) (x T))
  (eo::ite (eo::eq x y) true (eo::gt x y)))
; define: $sgn
(define $sgn ((T Type :implicit) (x T))
  (eo::ite (eo::is_neg x) -1 (eo::ite (eo::is_neg (eo::neg x)) 1 0)))
; declare: @Pair
(declare-const @Pair (-> Type (-> Type Type)))
; declare: @pair
(declare-parameterized-const @pair ((U Type :implicit) ($eo_x_1 U) (T Type :implicit) ($eo_x_2 T)) (_ (@Pair U) T))
; program: $pair_first
(program $pair_first ((S Type) (T Type) (s S) (t T))
  :signature ((_ (@Pair T) S)) T
  (
  (($pair_first (_ (@pair t) s)) t)
  )
)
; program: $pair_second
(program $pair_second ((T Type) (S Type) (t T) (s S))
  :signature ((_ (@Pair T) S)) S
  (
  (($pair_second (_ (@pair t) s)) s)
  )
)
; fwd-decl: $evaluate_list
(program $evaluate_list ()
  :signature ($eo_List) $eo_List
)
; program: $evaluate_internal
(program $evaluate_internal ((T Type) (t T) (tev T))
  :signature (T $eo_List) T
  (
  (($evaluate_internal t (_ ($eo_List_cons tev) $eo_List_nil)) tev)
  )
)
; define: $evaluate
(define $evaluate ((T Type :implicit) (t T))
  ($evaluate_internal t ($evaluate_list (_ ($eo_List_cons t) $eo_List_nil))))
; program: $get_arg_list_rec
(program $get_arg_list_rec ((S Type) (T Type) (f (-> T S)) (x T) (y S) (acc $eo_List))
  :signature (S $eo_List) $eo_List
  (
  (($get_arg_list_rec (f x) acc) ($get_arg_list_rec f (eo::cons $eo_List_cons x acc)))
  (($get_arg_list_rec y acc) acc)
  )
)
; define: $get_arg_list
(define $get_arg_list ((T Type :implicit) (t T))
  ($get_arg_list_rec t $eo_List_nil))
; program: $is_app
(program $is_app ((T Type) (U Type) (S Type) (g (-> T S)) (f (-> T U)) (x T))
  :signature ((-> T U) S) Bool
  (
  (($is_app f (g x)) ($is_app f g))
  (($is_app f x) (eo::eq f x))
  )
)
; define: $compare_var
(define $compare_var ((U Type :implicit) (b U) (T Type :implicit) (a T))
  (eo::cmp b a))
; program: $singleton_elim
(program $singleton_elim ((S Type) (T Type) (U Type) (f (-> T (-> U S))) (x1 S) (x2 T) (x S))
  :signature (S) S
  (
  (($singleton_elim (_ (f x1) x2)) (eo::define ((_v0 (_ (f x1) x2))) (eo::ite (eo::eq x2 (eo::nil f (eo::typeof _v0))) x1 _v0)))
  (($singleton_elim x) x)
  )
)
; declare: @result.null
(declare-const @result.null Bool)
; declare: @result.invalid
(declare-const @result.invalid Bool)
; program: $result_combine
(program $result_combine ((b1 Bool) (b2 Bool))
  :signature (Bool Bool) Bool
  (
  (($result_combine b1 @result.null) b1)
  (($result_combine b1 b1) b1)
  (($result_combine b1 b2) @result.invalid)
  )
)
; program: $is_pairwise
(program $is_pairwise ((T Type) (U Type) (bs $eo_List) (b T) (B U) (rem $eo_List) (f (-> T (-> T U))) (nil U) (op (-> U (-> U U))) (a T))
  :signature ((-> T (-> T U)) (-> U (-> U U)) T $eo_List U $eo_List) Bool
  (
  (($is_pairwise f op a (_ ($eo_List_cons b) bs) (_ (op (_ (f a) b)) B) rem) ($is_pairwise f op a bs B rem))
  (($is_pairwise f op a $eo_List_nil B (_ ($eo_List_cons b) rem)) ($is_pairwise f op b rem B rem))
  (($is_pairwise f op a $eo_List_nil nil $eo_List_nil) (eo::requires nil (eo::nil op (eo::typeof a)) true))
  )
)
; program: $extract_pairwise_args_rec
(program $extract_pairwise_args_rec ((T Type) (U Type) (c T) (f (-> T (-> T U))) (op (-> U (-> U U))) (a T) (B U))
  :signature ((-> T (-> T U)) (-> U (-> U U)) T U) $eo_List
  (
  (($extract_pairwise_args_rec f op a (_ (op (_ (f a) c)) B)) (eo::cons $eo_List_cons c ($extract_pairwise_args_rec f op a B)))
  (($extract_pairwise_args_rec f op a B) $eo_List_nil)
  )
)
; program: $extract_pairwise_args
(program $extract_pairwise_args ((T Type) (U Type) (B U) (op (-> U (-> U U))) (f (-> T (-> T U))) (a T) (b T))
  :signature ((-> T (-> T U)) (-> U (-> U U)) U) $eo_List
  (
  (($extract_pairwise_args f op (_ (op (_ (f a) b)) B)) (eo::define ((_v0 (_ (op (_ (f a) b)) B))) (eo::define ((_v1 ($extract_pairwise_args_rec f op a _v0))) (eo::requires ($is_pairwise f op a _v1 _v0 _v1) true (eo::cons $eo_List_cons a _v1)))))
  (($extract_pairwise_args f op (_ (f a) b)) (_ ($eo_List_cons a) (_ ($eo_List_cons b) $eo_List_nil)))
  )
)
; declare: ite
(declare-parameterized-const ite (($eo_x_1 Bool) (A Type :implicit) ($eo_x_2 A) ($eo_x_3 A)) A)
; declare: not
(declare-const not (-> Bool Bool))
; declare: or
(declare-const or (-> Bool (-> Bool Bool)))
; declare: and
(declare-const and (-> Bool (-> Bool Bool)))
; declare: =>
(declare-const => (-> Bool (-> Bool Bool)))
; declare: xor
(declare-const xor (-> Bool (-> Bool Bool)))
; declare: =
(declare-parameterized-const = ((A Type :implicit) ($eo_x_1 A) ($eo_x_2 A)) Bool)
; program: $get_lambda_type
(program $get_lambda_type ((x $eo_List) (xs $eo_List) (B Type))
  :signature ($eo_List Type) Type
  (
  (($get_lambda_type (_ ($eo_List_cons x) xs) B) (-> (eo::typeof x) ($get_lambda_type xs B)))
  (($get_lambda_type $eo_List_nil B) B)
  )
)
; declare: lambda
(declare-parameterized-const lambda ((L $eo_List) (B Type :implicit) ($eo_x_1 B)) ($get_lambda_type L B))
; declare: distinct
(declare-parameterized-const distinct ((A Type :implicit) ($eo_x_1 A) ($eo_x_2 A)) Bool)
; declare: @purify
(declare-parameterized-const @purify ((A Type :implicit) (t A :opaque)) A)
; program: $extract_antec_rec
(program $extract_antec_rec ((F1 Bool) (F2 Bool) (C Bool))
  :signature (Bool Bool) Bool
  (
  (($extract_antec_rec C C) true)
  (($extract_antec_rec (_ (=> F1) F2) C) (eo::cons and F1 ($extract_antec_rec F2 C)))
  )
)
; program: $extract_antec
(program $extract_antec ((F Bool) (C Bool))
  :signature (Bool Bool) Bool
  (
  (($extract_antec (_ (=> F) C) C) F)
  (($extract_antec F C) ($extract_antec_rec F C))
  )
)
; program: $run_process_scope
(program $run_process_scope ((F Bool) (C Bool))
  :signature (Bool Bool) Bool
  (
  (($run_process_scope F false) (not ($extract_antec F false)))
  (($run_process_scope F C) (_ (=> ($extract_antec F C)) C))
  )
)
; program: $arith_typeunion
(program $arith_typeunion ()
  :signature (Type Type) Type
  (
  (($arith_typeunion Int Int) Int)
  (($arith_typeunion Real Real) Real)
  (($arith_typeunion Real Int) Real)
  (($arith_typeunion Int Real) Real)
  )
)
; program: $is_arith_type
(program $is_arith_type ()
  :signature (Type) Bool
  (
  (($is_arith_type Int) true)
  (($is_arith_type Real) true)
  )
)
; declare: +
(declare-parameterized-const + ((T Type :implicit) ($eo_x_1 T) (U Type :implicit) ($eo_x_2 U)) ($arith_typeunion T U))
; declare: -
(declare-parameterized-const - ((T Type :implicit) ($eo_x_1 T) (U Type :implicit) ($eo_x_2 U)) ($arith_typeunion T U))
; declare: *
(declare-parameterized-const * ((T Type :implicit) ($eo_x_1 T) (U Type :implicit) ($eo_x_2 U)) ($arith_typeunion T U))
; declare: <
(declare-parameterized-const < ((T Type :implicit) ($eo_x_1 T) (U Type :implicit) ($eo_x_2 U)) Bool)
; declare: <=
(declare-parameterized-const <= ((T Type :implicit) ($eo_x_1 T) (U Type :implicit) ($eo_x_2 U)) Bool)
; declare: >
(declare-parameterized-const > ((T Type :implicit) ($eo_x_1 T) (U Type :implicit) ($eo_x_2 U)) Bool)
; declare: >=
(declare-parameterized-const >= ((T Type :implicit) ($eo_x_1 T) (U Type :implicit) ($eo_x_2 U)) Bool)
; declare: to_real
(declare-parameterized-const to_real ((T Type :implicit) ($eo_x_1 T)) Real)
; declare: to_int
(declare-parameterized-const to_int ((T Type :implicit) ($eo_x_1 T)) Int)
; declare: is_int
(declare-parameterized-const is_int ((T Type :implicit) ($eo_x_1 T)) Bool)
; declare: abs
(declare-parameterized-const abs ((T Type :implicit) ($eo_x_1 T)) T)
; declare: ^
(declare-parameterized-const ^ ((T Type :implicit) ($eo_x_1 T) ($eo_x_2 T)) T)
; declare: -
(declare-parameterized-const $eoo_-.2 ((T Type :implicit) ($eo_x_1 T)) T)
; declare: div
(declare-const div (-> Int (-> Int Int)))
; declare: mod
(declare-const mod (-> Int (-> Int Int)))
; declare: divisible
(declare-const divisible (-> Int (-> Int Bool)))
; declare: int.pow2
(declare-const int.pow2 (-> Int Int))
; declare: int.log2
(declare-const int.log2 (-> Int Int))
; declare: int.ispow2
(declare-const int.ispow2 (-> Int Bool))
; declare: div_total
(declare-const div_total (-> Int (-> Int Int)))
; declare: mod_total
(declare-const mod_total (-> Int (-> Int Int)))
; declare: @int_div_by_zero
(declare-const @int_div_by_zero (-> Int Int))
; declare: @mod_by_zero
(declare-const @mod_by_zero (-> Int Int))
; program: $assoc_nil_nth_type
(program $assoc_nil_nth_type ((T Type) (U Type) (V Type) (W Type) (W1 Type) (x1 W1) (f (-> T (-> U V))) (W2 Type) (x2 W2) (n Int))
  :signature ((-> T (-> U V)) W Int) Type
  (
  (($assoc_nil_nth_type f (_ (f x1) x2) 0) (eo::typeof x1))
  (($assoc_nil_nth_type f (_ (f x1) x2) n) ($assoc_nil_nth_type f x2 (eo::add n -1)))
  )
)
; program: $assoc_nil_nth
(program $assoc_nil_nth ((W Type) (x W) (W1 Type) (x1 W1) (T Type) (U Type) (V Type) (f (-> T (-> U V))) (W2 Type) (x2 W2) (n Int))
  :signature ((eo::quote f) (eo::quote x) (eo::quote n)) ($assoc_nil_nth_type f x n)
  (
  (($assoc_nil_nth f (_ (f x1) x2) 0) x1)
  (($assoc_nil_nth f (_ (f x1) x2) n) ($assoc_nil_nth f x2 (eo::add n -1)))
  )
)
; program: $to_clause
(program $to_clause ((F2 Bool) (F1 Bool))
  :signature (Bool) Bool
  (
  (($to_clause (_ (or F1) F2)) (_ (or F1) F2))
  (($to_clause false) false)
  (($to_clause F1) (_ (or F1) false))
  )
)
; program: $from_clause
(program $from_clause ((F2 Bool) (F1 Bool))
  :signature (Bool) Bool
  (
  (($from_clause (_ (or F1) F2)) (eo::ite (eo::eq F2 false) F1 (_ (or F1) F2)))
  (($from_clause F1) F1)
  )
)
; define: $remove_maybe_self
(define $remove_maybe_self ((C Bool) (l Bool))
  (eo::ite (eo::eq l C) false (eo::list_erase or C l)))
; define: $resolve
(define $resolve ((L Bool) (pol Bool) (C2 Bool) (C1 Bool))
  (eo::define ((_v0 (not L))) (eo::define ((_v1 (eo::ite pol _v0 L))) (eo::define ((_v2 ($to_clause C2))) (eo::define ((_v3 (eo::ite pol L _v0))) (eo::define ((_v4 ($to_clause C1))) ($from_clause (eo::list_concat or (eo::ite (eo::eq _v3 _v4) false (eo::list_erase or _v4 _v3)) (eo::ite (eo::eq _v1 _v2) false (eo::list_erase or _v2 _v1))))))))))
; program: $chain_resolve_rec
(program $chain_resolve_rec ((C1 Bool) (C2 Bool) (pol Bool) (L Bool) (Cs Bool) (pols $eo_List) (lits $eo_List))
  :signature (Bool Bool $eo_List $eo_List) Bool
  (
  (($chain_resolve_rec C1 true $eo_List_nil $eo_List_nil) ($from_clause C1))
  (($chain_resolve_rec C1 (_ (and C2) Cs) (_ ($eo_List_cons pol) pols) (_ ($eo_List_cons L) lits)) (eo::define ((_v0 (not L))) (eo::define ((_v1 (eo::ite pol _v0 L))) (eo::define ((_v2 (eo::ite pol L _v0))) ($chain_resolve_rec (eo::list_concat or (eo::ite (eo::eq _v2 C1) false (eo::list_erase or C1 _v2)) (eo::ite (eo::eq _v1 C2) false (eo::list_erase or C2 _v1))) Cs pols lits)))))
  )
)
; program: $lower_not_and
(program $lower_not_and ((l Bool) (ls Bool))
  :signature (Bool) Bool
  (
  (($lower_not_and true) false)
  (($lower_not_and (_ (and l) ls)) (eo::cons or (not l) ($lower_not_and ls)))
  )
)
; declare: Array
(declare-const Array (-> Type (-> Type Type)))
; declare: select
(declare-parameterized-const select ((U Type :implicit) (T Type :implicit) ($eo_x_1 (_ (Array U) T)) ($eo_x_2 U)) T)
; declare: store
(declare-parameterized-const store ((U Type :implicit) (T Type :implicit) ($eo_x_1 (_ (Array U) T)) ($eo_x_2 U) ($eo_x_3 T)) (_ (Array U) T))
; declare: @array_deq_diff
(declare-parameterized-const @array_deq_diff ((T Type :implicit) (U Type :implicit) (a (_ (Array T) U) :opaque) (b (_ (Array T) U) :opaque)) T)
; program: $mk_symm
(program $mk_symm ((T Type) (t2 T) (t1 T))
  :signature (Bool) Bool
  (
  (($mk_symm (_ (= t1) t2)) (_ (= t2) t1))
  (($mk_symm (not (_ (= t1) t2))) (not (_ (= t2) t1)))
  )
)
; program: $mk_trans
(program $mk_trans ((U Type) (t3 U) (t4 U) (tail Bool) (t1 U) (t2 U))
  :signature (U U Bool) Bool
  (
  (($mk_trans t1 t2 (_ (and (_ (= t3) t4)) tail)) (eo::requires t2 t3 ($mk_trans t1 t4 tail)))
  (($mk_trans t1 t2 true) (_ (= t1) t2))
  )
)
; program: $mk_cong_rhs
(program $mk_cong_rhs ((U Type) (t1 U) (tail Bool) (t2 U) (T Type) (f (-> T U)))
  :signature (U Bool) U
  (
  (($mk_cong_rhs (f t1) (_ (and (_ (= t1) t2)) tail)) (_ ($mk_cong_rhs f tail) t2))
  (($mk_cong_rhs f true) f)
  )
)
; program: $mk_nary_cong_rhs
(program $mk_nary_cong_rhs ((U Type) (s1 U) (f (-> U (-> U U))) (s2 U) (t U) (tail Bool) (nil U))
  :signature (U Bool) U
  (
  (($mk_nary_cong_rhs (_ (f s1) t) (_ (and (_ (= s1) s2)) tail)) (eo::cons f s2 ($mk_nary_cong_rhs t tail)))
  (($mk_nary_cong_rhs nil true) nil)
  )
)
; program: $mk_ho_cong
(program $mk_ho_cong ((U Type) (T Type) (f1 (-> T U)) (f2 (-> T U)) (tail Bool) (t1 U) (t2 U))
  :signature (U U Bool) Bool
  (
  (($mk_ho_cong f1 f2 (_ (and (_ (= t1) t2)) tail)) ($mk_ho_cong (f1 t1) (f2 t2) tail))
  (($mk_ho_cong t1 t2 true) (_ (= t1) t2))
  )
)
; program: $mk_distinct-elim
(program $mk_distinct-elim ((b Bool) (T Type) (x T) (y T))
  :signature (Bool) Bool
  (
  (($mk_distinct-elim (_ (and (_ (distinct x) y)) b)) (eo::cons and (not (_ (= x) y)) ($mk_distinct-elim b)))
  (($mk_distinct-elim true) true)
  (($mk_distinct-elim (_ (distinct x) y)) (not (_ (= x) y)))
  )
)
; declare: /
(declare-parameterized-const / ((T Type :implicit) ($eo_x_1 T) (U Type :implicit) ($eo_x_2 U)) Real)
; declare: /_total
(declare-parameterized-const /_total ((T Type :implicit) ($eo_x_1 T) (U Type :implicit) ($eo_x_2 U)) Real)
; declare: @div_by_zero
(declare-const @div_by_zero (-> Real Real))
; define: $arith_mk_zero
(define $arith_mk_zero ((T Type))
  (eo::ite (eo::is_eq T Int) 0 (eo::requires T Real 0/1)))
; define: $arith_eval_add
(define $arith_eval_add ((U Type :implicit) (y U) (T Type :implicit) (x T))
  (eo::define ((_v0 (eo::to_q y))) (eo::define ((_v1 (eo::to_q x))) (eo::define ((_v2 (eo::add _v1 _v0))) (eo::ite (eo::eq x _v1) _v2 (eo::ite (eo::eq y _v0) _v2 (eo::add x y)))))))
; define: $arith_eval_sub
(define $arith_eval_sub ((T Type :implicit) (y T) (U Type :implicit) (x U))
  (eo::define ((_v0 (eo::neg y))) (eo::define ((_v1 (eo::to_q _v0))) (eo::define ((_v2 (eo::to_q x))) (eo::define ((_v3 (eo::add _v2 _v1))) (eo::ite (eo::eq x _v2) _v3 (eo::ite (eo::eq _v0 _v1) _v3 (eo::add x _v0))))))))
; define: $arith_eval_mul
(define $arith_eval_mul ((U Type :implicit) (y U) (T Type :implicit) (x T))
  (eo::define ((_v0 (eo::to_q y))) (eo::define ((_v1 (eo::to_q x))) (eo::define ((_v2 (eo::mul _v1 _v0))) (eo::ite (eo::eq x _v1) _v2 (eo::ite (eo::eq y _v0) _v2 (eo::mul x y)))))))
; define: $arith_eval_qsub
(define $arith_eval_qsub ((T Type :implicit) (y T) (U Type :implicit) (x U))
  (eo::add (eo::to_q x) (eo::neg (eo::to_q y))))
; define: $arith_mk_binary_minus
(define $arith_mk_binary_minus ((U Type :implicit) (y U) (T Type :implicit) (x T))
  (_ (- x) y))
; program: $arith_eval_int_log_2_rec
(program $arith_eval_int_log_2_rec ((x Int))
  :signature (Int) Int
  (
  (($arith_eval_int_log_2_rec 1) 0)
  (($arith_eval_int_log_2_rec x) (eo::add 1 ($arith_eval_int_log_2_rec (eo::zdiv x 2))))
  )
)
; define: $arith_eval_int_log_2
(define $arith_eval_int_log_2 ((x Int))
  (eo::ite (eo::is_neg (eo::neg x)) ($arith_eval_int_log_2_rec x) (int.log2 x)))
; program: $arith_eval_int_pow_2_rec
(program $arith_eval_int_pow_2_rec ((x Int))
  :signature (Int) Int
  (
  (($arith_eval_int_pow_2_rec 0) 1)
  (($arith_eval_int_pow_2_rec x) (eo::mul 2 ($arith_eval_int_pow_2_rec (eo::add x -1))))
  )
)
; define: $arith_eval_int_pow_2
(define $arith_eval_int_pow_2 ((x Int))
  (eo::ite (eo::is_z x) (eo::ite (eo::is_neg x) 0 ($arith_eval_int_pow_2_rec x)) (int.pow2 x)))
; program: $arith_eval_int_is_pow_2_rec
(program $arith_eval_int_is_pow_2_rec ((x Int))
  :signature (Int) Bool
  (
  (($arith_eval_int_is_pow_2_rec 1) true)
  (($arith_eval_int_is_pow_2_rec x) (eo::ite (eo::eq (eo::zmod x 2) 0) ($arith_eval_int_is_pow_2_rec (eo::zdiv x 2)) false))
  )
)
; define: $arith_eval_int_is_pow_2
(define $arith_eval_int_is_pow_2 ((x Int))
  (eo::ite (eo::is_z x) (eo::ite (eo::is_neg x) false ($arith_eval_int_is_pow_2_rec x)) (int.ispow2 x)))
; program: $arith_unfold_pow_rec
(program $arith_unfold_pow_rec ((T Type) (n Int) (a T))
  :signature ((eo::quote n) T) (eo::ite (eo::eq n 0) Int T)
  (
  (($arith_unfold_pow_rec 0 a) 1)
  (($arith_unfold_pow_rec n a) (eo::cons * a ($arith_unfold_pow_rec (eo::add n -1) a)))
  )
)
; define: $arith_unfold_pow
(define $arith_unfold_pow ((T Type :implicit) (a T) (n Int))
  (eo::ite (eo::and (eo::is_z n) (eo::not (eo::is_neg n))) ($arith_unfold_pow_rec n a) (_ (^ a) n)))
; declare: BitVec
(declare-const BitVec (-> Int Type))
; program: $bv_bitwidth
(program $bv_bitwidth ((n Int))
  :signature (Type) Int
  (
  (($bv_bitwidth (BitVec n)) n)
  )
)
; declare: @bvsize
(declare-parameterized-const @bvsize ((m Int :implicit) ($eo_x_1 (BitVec m))) Int)
; declare: concat
(declare-parameterized-const concat ((n Int :implicit) ($eo_x_1 (BitVec n)) (m Int :implicit) ($eo_x_2 (BitVec m))) (BitVec (eo::add n m)))
; declare: extract
(declare-parameterized-const extract ((h Int) (l Int) (n Int :implicit) ($eo_x_1 (BitVec n))) (BitVec (eo::requires (eo::gt (eo::add l 1) 0) true (eo::requires (eo::gt n h) true (eo::add 1 (eo::neg l))))))
; declare: repeat
(declare-parameterized-const repeat ((i Int) (n Int :implicit) ($eo_x_1 (BitVec n))) (BitVec (eo::mul i n)))
; declare: bvnot
(declare-parameterized-const bvnot ((m Int :implicit) ($eo_x_1 (BitVec m))) (BitVec m))
; declare: bvand
(declare-parameterized-const bvand ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) (BitVec m))
; declare: bvor
(declare-parameterized-const bvor ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) (BitVec m))
; declare: bvnand
(declare-parameterized-const bvnand ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) (BitVec m))
; declare: bvnor
(declare-parameterized-const bvnor ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) (BitVec m))
; declare: bvxor
(declare-parameterized-const bvxor ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) (BitVec m))
; declare: bvxnor
(declare-parameterized-const bvxnor ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) (BitVec m))
; declare: bvcomp
(declare-parameterized-const bvcomp ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) (BitVec 1))
; declare: bvneg
(declare-parameterized-const bvneg ((m Int :implicit) ($eo_x_1 (BitVec m))) (BitVec m))
; declare: bvadd
(declare-parameterized-const bvadd ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) (BitVec m))
; declare: bvmul
(declare-parameterized-const bvmul ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) (BitVec m))
; declare: bvudiv
(declare-parameterized-const bvudiv ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) (BitVec m))
; declare: bvurem
(declare-parameterized-const bvurem ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) (BitVec m))
; declare: bvsub
(declare-parameterized-const bvsub ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) (BitVec m))
; declare: bvsdiv
(declare-parameterized-const bvsdiv ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) (BitVec m))
; declare: bvsrem
(declare-parameterized-const bvsrem ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) (BitVec m))
; declare: bvsmod
(declare-parameterized-const bvsmod ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) (BitVec m))
; declare: bvult
(declare-parameterized-const bvult ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) Bool)
; declare: bvule
(declare-parameterized-const bvule ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) Bool)
; declare: bvugt
(declare-parameterized-const bvugt ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) Bool)
; declare: bvuge
(declare-parameterized-const bvuge ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) Bool)
; declare: bvslt
(declare-parameterized-const bvslt ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) Bool)
; declare: bvsle
(declare-parameterized-const bvsle ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) Bool)
; declare: bvsgt
(declare-parameterized-const bvsgt ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) Bool)
; declare: bvsge
(declare-parameterized-const bvsge ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) Bool)
; declare: bvshl
(declare-parameterized-const bvshl ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) (BitVec m))
; declare: bvlshr
(declare-parameterized-const bvlshr ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) (BitVec m))
; declare: bvashr
(declare-parameterized-const bvashr ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) (BitVec m))
; declare: zero_extend
(declare-parameterized-const zero_extend ((i Int) (m Int :implicit) ($eo_x_1 (BitVec m))) (BitVec (eo::add m i)))
; declare: sign_extend
(declare-parameterized-const sign_extend ((i Int) (m Int :implicit) ($eo_x_1 (BitVec m))) (BitVec (eo::add m i)))
; declare: rotate_left
(declare-parameterized-const rotate_left (($eo_x_1 Int) (m Int :implicit) ($eo_x_2 (BitVec m))) (BitVec m))
; declare: rotate_right
(declare-parameterized-const rotate_right (($eo_x_1 Int) (m Int :implicit) ($eo_x_2 (BitVec m))) (BitVec m))
; declare: reduce_and
(declare-parameterized-const reduce_and ((m Int :implicit) ($eo_x_1 (BitVec m))) (BitVec 1))
; declare: reduce_or
(declare-parameterized-const reduce_or ((m Int :implicit) ($eo_x_1 (BitVec m))) (BitVec 1))
; declare: reduce_xor
(declare-parameterized-const reduce_xor ((m Int :implicit) ($eo_x_1 (BitVec m))) (BitVec 1))
; declare: bvite
(declare-parameterized-const bvite (($eo_x_1 (BitVec 1)) (T Type :implicit) ($eo_x_2 T) ($eo_x_3 T)) T)
; declare: bv1ult
(declare-parameterized-const bv1ult ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) (BitVec 1))
; declare: bvuaddo
(declare-parameterized-const bvuaddo ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) Bool)
; declare: bvnego
(declare-parameterized-const bvnego ((m Int :implicit) ($eo_x_1 (BitVec m))) Bool)
; declare: bvsaddo
(declare-parameterized-const bvsaddo ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) Bool)
; declare: bvumulo
(declare-parameterized-const bvumulo ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) Bool)
; declare: bvsmulo
(declare-parameterized-const bvsmulo ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) Bool)
; declare: bvusubo
(declare-parameterized-const bvusubo ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) Bool)
; declare: bvssubo
(declare-parameterized-const bvssubo ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) Bool)
; declare: bvsdivo
(declare-parameterized-const bvsdivo ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) Bool)
; declare: bvultbv
(declare-parameterized-const bvultbv ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) (BitVec 1))
; declare: bvsltbv
(declare-parameterized-const bvsltbv ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) (BitVec 1))
; declare: bvredand
(declare-parameterized-const bvredand ((m Int :implicit) ($eo_x_1 (BitVec m))) (BitVec 1))
; declare: bvredor
(declare-parameterized-const bvredor ((m Int :implicit) ($eo_x_1 (BitVec m))) (BitVec 1))
; declare: @bit
(declare-parameterized-const @bit (($eo_x_1 Int) (m Int :implicit) ($eo_x_2 (BitVec m))) Bool)
; declare: @from_bools
(declare-parameterized-const @from_bools (($eo_x_1 Bool) (n Int :implicit) ($eo_x_2 (BitVec n))) (BitVec (eo::add 1 n)))
; declare: @bv
(declare-parameterized-const @bv ((value Int) (w Int)) (BitVec w))
; define: $typeunion
(define $typeunion ((U Type) (T Type))
  (eo::ite (eo::eq T U) T ($arith_typeunion T U)))
; declare: @Monomial
(declare-const @Monomial Type)
; declare: @mon
(declare-parameterized-const @mon ((T Type :implicit) ($eo_x_1 T) ($eo_x_2 Real)) @Monomial)
; declare: @Polynomial
(declare-const @Polynomial Type)
; declare: @poly.zero
(declare-const @poly.zero @Polynomial)
; declare: @poly
(declare-const @poly (-> @Monomial (-> @Polynomial @Polynomial)))
; program: $poly_neg
(program $poly_neg ((T Type) (a T) (c Real) (p @Polynomial))
  :signature (@Polynomial) @Polynomial
  (
  (($poly_neg @poly.zero) @poly.zero)
  (($poly_neg (_ (@poly (_ (@mon a) c)) p)) (eo::cons @poly (_ (@mon a) (eo::neg c)) ($poly_neg p)))
  )
)
; program: $poly_mod_coeffs
(program $poly_mod_coeffs ((T Type) (a T) (c Real) (p @Polynomial) (w Int))
  :signature (@Polynomial Int) @Polynomial
  (
  (($poly_mod_coeffs @poly.zero w) @poly.zero)
  (($poly_mod_coeffs (_ (@poly (_ (@mon a) c)) p) w) (eo::define ((_v0 ($poly_mod_coeffs p w))) (eo::define ((_v1 (eo::zmod (eo::to_z c) w))) (eo::ite (eo::eq _v1 0) _v0 (eo::cons @poly (_ (@mon a) (eo::to_q _v1)) _v0)))))
  )
)
; program: $poly_add
(program $poly_add ((U Type) (a2 U) (c2 Real) (T Type) (a1 T) (c1 Real) (p1 @Polynomial) (p2 @Polynomial) (p @Polynomial))
  :signature (@Polynomial @Polynomial) @Polynomial
  (
  (($poly_add (_ (@poly (_ (@mon a1) c1)) p1) (_ (@poly (_ (@mon a2) c2)) p2)) (eo::define ((_v0 (@mon a1))) (eo::define ((_v1 (_ _v0 c1))) (eo::define ((_v2 (_ (@mon a2) c2))) (eo::define ((_v3 ($poly_add p1 p2))) (eo::define ((_v4 (eo::add c1 c2))) (eo::ite (eo::eq a1 a2) (eo::ite (eo::eq _v4 0/1) _v3 (eo::cons @poly (_ _v0 _v4) _v3)) (eo::ite (eo::cmp a2 a1) (eo::cons @poly _v1 ($poly_add p1 (_ (@poly _v2) p2))) (eo::cons @poly _v2 ($poly_add (_ (@poly _v1) p1) p2))))))))))
  (($poly_add @poly.zero p) p)
  (($poly_add p @poly.zero) p)
  )
)
; program: $mvar_mul_mvar
(program $mvar_mul_mvar ((X Type) (Y Type) (T Type) (a1 T) (U Type) (a2 U) (V Type) (c1 V) (W Type) (c2 W) (m Int) (ba2 (BitVec m)) (bc2 (BitVec m)) (bc1 (BitVec m)) (ba1 (BitVec m)))
  :signature (X Y) (eo::ite (eo::eq X Y) X ($arith_typeunion X Y))
  (
  (($mvar_mul_mvar (_ (* a1) a2) (_ (* c1) c2)) (eo::ite (eo::cmp c1 a1) (eo::cons * a1 ($mvar_mul_mvar a2 (_ (* c1) c2))) (eo::cons * c1 ($mvar_mul_mvar (_ (* a1) a2) c2))))
  (($mvar_mul_mvar (_ (* a1) a2) 1) (_ (* a1) a2))
  (($mvar_mul_mvar 1 (_ (* c1) c2)) (_ (* c1) c2))
  (($mvar_mul_mvar (_ (bvmul ba1) ba2) (_ (bvmul bc1) bc2)) (eo::ite (eo::cmp bc1 ba1) (eo::cons bvmul ba1 ($mvar_mul_mvar ba2 (_ (bvmul bc1) bc2))) (eo::cons bvmul bc1 ($mvar_mul_mvar (_ (bvmul ba1) ba2) bc2))))
  (($mvar_mul_mvar (_ (bvmul ba1) ba2) bc1) (eo::requires (eo::to_z bc1) 1 (_ (bvmul ba1) ba2)))
  (($mvar_mul_mvar ba1 (_ (bvmul bc1) bc2)) (eo::requires (eo::to_z ba1) 1 (_ (bvmul bc1) bc2)))
  (($mvar_mul_mvar ba1 bc1) (eo::requires (eo::to_z ba1) 1 (eo::requires (eo::to_z bc1) 1 ba1)))
  )
)
; program: $mon_mul_mon
(program $mon_mul_mon ((T Type) (a1 T) (U Type) (a2 U) (c1 Real) (c2 Real))
  :signature (@Monomial @Monomial) @Monomial
  (
  (($mon_mul_mon (_ (@mon a1) c1) (_ (@mon a2) c2)) (_ (@mon ($mvar_mul_mvar a1 a2)) (eo::mul c1 c2)))
  )
)
; program: $poly_mul_mon
(program $poly_mul_mon ((m2 @Monomial) (p2 @Polynomial) (m1 @Monomial))
  :signature (@Monomial @Polynomial) @Polynomial
  (
  (($poly_mul_mon m1 (_ (@poly m2) p2)) ($poly_add (_ (@poly ($mon_mul_mon m1 m2)) @poly.zero) ($poly_mul_mon m1 p2)))
  (($poly_mul_mon m1 @poly.zero) @poly.zero)
  )
)
; program: $poly_mul
(program $poly_mul ((m @Monomial) (p1 @Polynomial) (p @Polynomial))
  :signature (@Polynomial @Polynomial) @Polynomial
  (
  (($poly_mul (_ (@poly m) p1) p) ($poly_add ($poly_mul_mon m p) ($poly_mul p1 p)))
  (($poly_mul @poly.zero p) @poly.zero)
  (($poly_mul p @poly.zero) @poly.zero)
  )
)
; define: $get_arith_poly_norm_div
(define $get_arith_poly_norm_div ((V Type :implicit) (a2 V) (a1p @Polynomial) (U Type :implicit) (a1 U))
  (eo::define ((_v0 (eo::to_q a2))) (eo::ite (eo::ite (eo::is_q _v0) (eo::not (eo::eq _v0 0/1)) false) ($poly_mul_mon (_ (@mon 1) (eo::qdiv 1/1 _v0)) a1p) (_ (@poly (_ (@mon (_ (* (_ (/ a1) a2)) 1)) 1/1)) @poly.zero))))
; program: $get_arith_poly_norm
(program $get_arith_poly_norm ((T Type) (V Type) (a2 V) (U Type) (a1 U) (a T))
  :signature (T) @Polynomial
  (
  (($get_arith_poly_norm ($eoo_-.2 a1)) ($poly_neg ($get_arith_poly_norm a1)))
  (($get_arith_poly_norm (_ (+ a1) a2)) ($poly_add ($get_arith_poly_norm a1) ($get_arith_poly_norm a2)))
  (($get_arith_poly_norm (_ (- a1) a2)) ($poly_add ($get_arith_poly_norm a1) ($poly_neg ($get_arith_poly_norm a2))))
  (($get_arith_poly_norm (_ (* a1) a2)) ($poly_mul ($get_arith_poly_norm a1) ($get_arith_poly_norm a2)))
  (($get_arith_poly_norm (_ (/ a1) a2)) (eo::define ((_v0 (eo::to_q a2))) (eo::ite (eo::ite (eo::is_q _v0) (eo::not (eo::eq _v0 0/1)) false) ($poly_mul_mon (_ (@mon 1) (eo::qdiv 1/1 _v0)) ($get_arith_poly_norm a1)) (_ (@poly (_ (@mon (_ (* (_ (/ a1) a2)) 1)) 1/1)) @poly.zero))))
  (($get_arith_poly_norm (_ (/_total a1) a2)) (eo::define ((_v0 (eo::to_q a2))) (eo::ite (eo::ite (eo::is_q _v0) (eo::not (eo::eq _v0 0/1)) false) ($poly_mul_mon (_ (@mon 1) (eo::qdiv 1/1 _v0)) ($get_arith_poly_norm a1)) (_ (@poly (_ (@mon (_ (* (_ (/ a1) a2)) 1)) 1/1)) @poly.zero))))
  (($get_arith_poly_norm (to_real a1)) ($get_arith_poly_norm a1))
  (($get_arith_poly_norm a) (eo::define ((_v0 (eo::to_q a))) (eo::ite (eo::is_q _v0) (eo::ite (eo::is_eq _v0 0/1) @poly.zero (_ (@poly (_ (@mon 1) _v0)) @poly.zero)) (_ (@poly (_ (@mon (_ (* a) 1)) 1/1)) @poly.zero))))
  )
)
; program: $get_bv_poly_norm_rec
(program $get_bv_poly_norm_rec ((m Int) (b1 (BitVec m)) (b2 (BitVec m)) (b (BitVec m)))
  :signature ((BitVec m)) @Polynomial
  (
  (($get_bv_poly_norm_rec (bvneg b1)) ($poly_neg ($get_bv_poly_norm_rec b1)))
  (($get_bv_poly_norm_rec (_ (bvadd b1) b2)) ($poly_add ($get_bv_poly_norm_rec b1) ($get_bv_poly_norm_rec b2)))
  (($get_bv_poly_norm_rec (_ (bvsub b1) b2)) ($poly_add ($get_bv_poly_norm_rec b1) ($poly_neg ($get_bv_poly_norm_rec b2))))
  (($get_bv_poly_norm_rec (_ (bvmul b1) b2)) ($poly_mul ($get_bv_poly_norm_rec b1) ($get_bv_poly_norm_rec b2)))
  (($get_bv_poly_norm_rec b) (eo::define ((_v0 (eo::typeof b))) (eo::define ((_v1 (eo::to_z b))) (eo::ite (eo::is_bin b) (eo::ite (eo::is_eq _v1 0) @poly.zero (_ (@poly (_ (@mon (eo::to_bin ($bv_bitwidth _v0) 1)) (eo::to_q _v1))) @poly.zero)) (_ (@poly (_ (@mon (_ (bvmul b) (eo::nil bvmul _v0))) 1/1)) @poly.zero)))))
  )
)
; define: $get_bv_poly_norm
(define $get_bv_poly_norm ((m Int :implicit) (b (BitVec m)) (w Int))
  ($poly_mod_coeffs ($get_bv_poly_norm_rec b) w))
; program: $arith_poly_to_term_rec
(program $arith_poly_to_term_rec ((c Real) (T Type) (a T) (p @Polynomial))
  :signature (@Polynomial) Real
  (
  (($arith_poly_to_term_rec @poly.zero) 0/1)
  (($arith_poly_to_term_rec (_ (@poly (_ (@mon a) c)) p)) (_ (+ (_ (* c) (_ (* a) 1))) (_ (+ ($arith_poly_to_term_rec p)) 0)))
  )
)
; define: $arith_poly_to_term
(define $arith_poly_to_term ((T Type :implicit) (t T))
  ($arith_poly_to_term_rec ($get_arith_poly_norm t)))
; program: $arith_rel_sum
(program $arith_rel_sum ((T Type) (U Type) (V Type) (W Type) (a V) (b W))
  :signature (T U V W) Bool
  (
  (($arith_rel_sum < < a b) (_ (< a) b))
  (($arith_rel_sum < = a b) (_ (< a) b))
  (($arith_rel_sum < <= a b) (_ (< a) b))
  (($arith_rel_sum <= < a b) (_ (< a) b))
  (($arith_rel_sum <= = a b) (_ (<= a) b))
  (($arith_rel_sum <= <= a b) (_ (<= a) b))
  (($arith_rel_sum = < a b) (_ (< a) b))
  (($arith_rel_sum = = a b) (_ (<= a) b))
  (($arith_rel_sum = <= a b) (_ (<= a) b))
  )
)
; program: $mk_arith_sum_ub
(program $mk_arith_sum_ub ((acc Bool) (tail Bool) (T Type) (U Type) (r1 (-> T (-> U Bool))) (S Type) (V Type) (r2 (-> S (-> V Bool))) (a1 T) (a2 S) (b1 U) (b2 V))
  :signature (Bool Bool) Bool
  (
  (($mk_arith_sum_ub true acc) acc)
  (($mk_arith_sum_ub (_ (and (_ (r1 a1) b1)) tail) (_ (r2 a2) b2)) ($mk_arith_sum_ub tail ($arith_rel_sum r1 r2 (_ (+ a1) a2) (_ (+ b1) b2))))
  )
)
; program: $mk_arith_mult_pos
(program $mk_arith_mult_pos ((S Type) (T Type) (U Type) (r (-> T (-> U Bool))) (a T) (m S) (b U))
  :signature (S Bool) Bool
  (
  (($mk_arith_mult_pos m (_ (r a) b)) (eo::define ((_v0 (* m))) (_ (r (_ _v0 (_ (* a) 1))) (_ _v0 (_ (* b) 1)))))
  )
)
; program: $arith_rel_inv
(program $arith_rel_inv ((T Type) (U Type) (V Type) (a U) (b V))
  :signature (T U V) Bool
  (
  (($arith_rel_inv = a b) (_ (= a) b))
  (($arith_rel_inv < a b) (_ (> a) b))
  (($arith_rel_inv <= a b) (_ (>= a) b))
  (($arith_rel_inv > a b) (_ (< a) b))
  (($arith_rel_inv >= a b) (_ (<= a) b))
  )
)
; program: $mk_arith_mult_neg
(program $mk_arith_mult_neg ((S Type) (T Type) (U Type) (r (-> T (-> U Bool))) (a T) (m S) (b U))
  :signature (S Bool) Bool
  (
  (($mk_arith_mult_neg m (_ (r a) b)) (eo::define ((_v0 (* m))) ($arith_rel_inv r (_ _v0 (_ (* a) 1)) (_ _v0 (_ (* b) 1)))))
  )
)
; program: $arith_rel_trichotomy
(program $arith_rel_trichotomy ((T Type) (U Type) (V Type) (W Type) (a V) (b W))
  :signature (T U V W) Bool
  (
  (($arith_rel_trichotomy = < a b) (_ (> a) b))
  (($arith_rel_trichotomy = > a b) (_ (< a) b))
  (($arith_rel_trichotomy > = a b) (_ (< a) b))
  (($arith_rel_trichotomy < = a b) (_ (> a) b))
  (($arith_rel_trichotomy > < a b) (_ (= a) b))
  (($arith_rel_trichotomy < > a b) (_ (= a) b))
  )
)
; program: $arith_rel_neg
(program $arith_rel_neg ((T Type) (U Type) (V Type) (a U) (b V))
  :signature (T U V) Bool
  (
  (($arith_rel_neg < a b) (_ (>= a) b))
  (($arith_rel_neg <= a b) (_ (> a) b))
  (($arith_rel_neg > a b) (_ (<= a) b))
  (($arith_rel_neg >= a b) (_ (< a) b))
  )
)
; program: $arith_normalize_lit
(program $arith_normalize_lit ((T Type) (U Type) (r (-> T (-> U Bool))) (a T) (b U))
  :signature (Bool) Bool
  (
  (($arith_normalize_lit (not (not (_ (r a) b)))) (_ (r a) b))
  (($arith_normalize_lit (not (_ (r a) b))) ($arith_rel_neg r a b))
  (($arith_normalize_lit (_ (r a) b)) (_ (r a) b))
  )
)
; program: $mk_arith_trichotomy
(program $mk_arith_trichotomy ((T Type) (U Type) (r1 (-> T (-> U Bool))) (r2 (-> T (-> U Bool))) (a T) (b U))
  :signature (Bool Bool) Bool
  (
  (($mk_arith_trichotomy (_ (r1 a) b) (_ (r2 a) b)) ($arith_rel_trichotomy r1 r2 a b))
  )
)
; program: $greatest_int_lt
(program $greatest_int_lt ((R Type) (c R))
  :signature (R) Int
  (
  (($greatest_int_lt c) (eo::define ((_v0 (eo::to_z c))) (eo::ite (eo::eq (eo::to_q c) (eo::to_q _v0)) (eo::add -1 _v0) _v0)))
  )
)
; program: $least_int_gt
(program $least_int_gt ((R Type) (c R))
  :signature (R) Int
  (
  (($least_int_gt c) (eo::add 1 (eo::to_z c)))
  )
)
; program: $strip_even_exponent
(program $strip_even_exponent ((T Type) (U Type) (t T) (V Type) (m V))
  :signature (T U) U
  (
  ((eo::define ((_v0 (* t))) ($strip_even_exponent t (_ _v0 (_ _v0 m)))) ($strip_even_exponent t m))
  (($strip_even_exponent t m) m)
  )
)
; program: $mk_arith_mult_sign_sgn
(program $mk_arith_mult_sign_sgn ((T Type) (U Type) (z U) (F Bool) (t T) (sgn Bool) (l Bool) (V Type) (m V))
  :signature (Bool Bool T) Bool
  (
  ((eo::define ((_v0 (* t))) ($mk_arith_mult_sign_sgn sgn (_ (and (not (_ (= t) z))) F) (_ _v0 (_ _v0 m)))) (eo::requires (eo::to_z z) 0 ($mk_arith_mult_sign_sgn sgn F ($strip_even_exponent t m))))
  (($mk_arith_mult_sign_sgn sgn (_ (and (_ (> t) z)) F) (_ (* t) m)) (eo::requires (eo::to_z z) 0 ($mk_arith_mult_sign_sgn sgn F ($strip_even_exponent t m))))
  (($mk_arith_mult_sign_sgn sgn (_ (and (_ (< t) z)) F) (_ (* t) m)) (eo::requires (eo::to_z z) 0 ($mk_arith_mult_sign_sgn (eo::not sgn) F ($strip_even_exponent t m))))
  (($mk_arith_mult_sign_sgn sgn true 1) sgn)
  (($mk_arith_mult_sign_sgn sgn l m) ($mk_arith_mult_sign_sgn sgn (eo::cons and l true) m))
  )
)
; program: $mk_arith_mult_abs_comparison_rec
(program $mk_arith_mult_abs_comparison_rec ((V Type) (z V) (B Bool) (T Type) (t T) (U Type) (u U) (W Type) (X Type) (r (-> W (-> X Bool))) (a W) (b X))
  :signature (Bool Bool) Bool
  (
  (($mk_arith_mult_abs_comparison_rec (_ (and (_ (r (abs t)) (abs u))) B) (_ (r a) b)) ($mk_arith_mult_abs_comparison_rec B (_ (r (eo::list_concat * a (_ (* t) 1))) (eo::list_concat * b (_ (* u) 1)))))
  (($mk_arith_mult_abs_comparison_rec (_ (and (_ (and (_ (= (abs t)) (abs u))) (_ (and (not (_ (= t) z))) true))) B) (_ (> a) b)) (eo::requires (eo::to_z z) 0 ($mk_arith_mult_abs_comparison_rec B (_ (> (eo::list_concat * a (_ (* t) 1))) (eo::list_concat * b (_ (* u) 1))))))
  (($mk_arith_mult_abs_comparison_rec true (_ (r a) b)) (_ (r (abs a)) (abs b)))
  )
)
; program: $mk_arith_mult_abs_comparison
(program $mk_arith_mult_abs_comparison ((B Bool) (T Type) (t T) (U Type) (u U))
  :signature (Bool) Bool
  (
  (($mk_arith_mult_abs_comparison (_ (and (_ (> (abs t)) (abs u))) B)) ($mk_arith_mult_abs_comparison_rec B (_ (> (_ (* t) 1)) (_ (* u) 1))))
  (($mk_arith_mult_abs_comparison (_ (and (_ (= (abs t)) (abs u))) B)) ($mk_arith_mult_abs_comparison_rec B (_ (= (_ (* t) 1)) (_ (* u) 1))))
  )
)
; define: $arith_to_int_reduction
(define $arith_to_int_reduction ((r Real))
  (eo::define ((_v0 (_ (- r) (_ @purify (to_int r))))) (_ (and (_ (<= 0/1) _v0)) (_ (and (_ (< _v0) 1/1)) true))))
; define: $arith_int_div_total_reduction
(define $arith_int_div_total_reduction ((v Int) (u Int))
  (eo::define ((_v0 (_ @purify (_ (div_total u) v)))) (eo::define ((_v1 (+ _v0))) (eo::define ((_v2 (* v))) (eo::define ((_v3 (< u))) (eo::define ((_v4 (and (_ (<= (_ _v2 (_ (* _v0) 1))) u)))) (eo::ite (eo::is_z v) (eo::requires (eo::eq v 0) false (_ _v4 (_ (and (_ _v3 (_ _v2 (_ (* (_ _v1 (_ (+ (eo::ite (eo::is_neg v) -1 1)) 0))) 1)))) true))) (_ (and (_ (=> (_ (> v) 0)) (_ _v4 (_ (and (_ _v3 (_ _v2 (_ (* (_ _v1 (_ (+ 1) 0))) 1)))) true)))) (_ (and (_ (=> (_ (< v) 0)) (_ _v4 (_ (and (_ _v3 (_ _v2 (_ (* (_ _v1 (_ (+ -1) 0))) 1)))) true)))) true)))))))))
; program: $arith_reduction_pred
(program $arith_reduction_pred ((T Type) (V Type) (v V) (a Int) (b Int) (U Type) (u U))
  :signature (T) Bool
  (
  (($arith_reduction_pred (is_int u)) (eo::define ((_v0 (_ (- u) (_ @purify (to_int u))))) (_ (and (_ (= (is_int u)) (_ (= _v0) 0/1))) (_ (and (_ (and (_ (<= 0/1) _v0)) (_ (and (_ (< _v0) 1/1)) true))) true))))
  (($arith_reduction_pred (to_int u)) (eo::define ((_v0 (to_int u))) (eo::define ((_v1 (_ @purify _v0))) (eo::define ((_v2 (_ (- u) _v1))) (_ (and (_ (= _v0) _v1)) (_ (and (_ (and (_ (<= 0/1) _v2)) (_ (and (_ (< _v2) 1/1)) true))) true))))))
  (($arith_reduction_pred (_ (/ u) v)) (eo::define ((_v0 (eo::typeof v))) (_ (= (_ (/ u) v)) (_ (_ (ite (_ (= v) (eo::ite (eo::is_eq _v0 Int) 0 (eo::requires _v0 Real 0/1)))) (@div_by_zero (eo::ite (eo::eq (eo::typeof u) Int) (to_real u) u))) (_ (/_total u) v)))))
  (($arith_reduction_pred (_ (div a) b)) (_ (= (_ (div a) b)) (_ (_ (ite (_ (= b) 0)) (@int_div_by_zero a)) (_ (div_total a) b))))
  (($arith_reduction_pred (_ (mod a) b)) (_ (= (_ (mod a) b)) (_ (_ (ite (_ (= b) 0)) (@mod_by_zero a)) (_ (mod_total a) b))))
  (($arith_reduction_pred (_ (/_total u) v)) (eo::define ((_v0 (_ (/_total u) v))) (eo::define ((_v1 (_ @purify _v0))) (eo::define ((_v2 (eo::typeof v))) (_ (and (_ (= _v0) _v1)) (_ (and (_ (=> (not (_ (= v) (eo::ite (eo::is_eq _v2 Int) 0 (eo::requires _v2 Real 0/1))))) (_ (= (_ (* v) (_ (* _v1) 1))) u))) true))))))
  (($arith_reduction_pred (_ (div_total a) b)) (eo::define ((_v0 (_ (div_total a) b))) (eo::define ((_v1 (_ @purify _v0))) (eo::define ((_v2 (+ _v1))) (eo::define ((_v3 (* b))) (eo::define ((_v4 (< a))) (eo::define ((_v5 (and (_ (<= (_ _v3 (_ (* _v1) 1))) a)))) (_ (and (_ (= _v0) _v1)) (_ (and (eo::ite (eo::is_z b) (eo::requires (eo::eq b 0) false (_ _v5 (_ (and (_ _v4 (_ _v3 (_ (* (_ _v2 (_ (+ (eo::ite (eo::is_neg b) -1 1)) 0))) 1)))) true))) (_ (and (_ (=> (_ (> b) 0)) (_ _v5 (_ (and (_ _v4 (_ _v3 (_ (* (_ _v2 (_ (+ 1) 0))) 1)))) true)))) (_ (and (_ (=> (_ (< b) 0)) (_ _v5 (_ (and (_ _v4 (_ _v3 (_ (* (_ _v2 (_ (+ -1) 0))) 1)))) true)))) true)))) true)))))))))
  (($arith_reduction_pred (_ (mod_total a) b)) (eo::define ((_v0 (_ @purify (_ (div_total a) b)))) (eo::define ((_v1 (+ _v0))) (eo::define ((_v2 (* b))) (eo::define ((_v3 (< a))) (eo::define ((_v4 (_ _v2 (_ (* _v0) 1)))) (eo::define ((_v5 (and (_ (<= _v4) a)))) (_ (and (_ (= (_ (mod_total a) b)) (_ (- a) _v4))) (_ (and (eo::ite (eo::is_z b) (eo::requires (eo::eq b 0) false (_ _v5 (_ (and (_ _v3 (_ _v2 (_ (* (_ _v1 (_ (+ (eo::ite (eo::is_neg b) -1 1)) 0))) 1)))) true))) (_ (and (_ (=> (_ (> b) 0)) (_ _v5 (_ (and (_ _v3 (_ _v2 (_ (* (_ _v1 (_ (+ 1) 0))) 1)))) true)))) (_ (and (_ (=> (_ (< b) 0)) (_ _v5 (_ (and (_ _v3 (_ _v2 (_ (* (_ _v1 (_ (+ -1) 0))) 1)))) true)))) true)))) true)))))))))
  (($arith_reduction_pred (abs u)) (eo::define ((_v0 (eo::typeof u))) (_ (= (abs u)) (_ (_ (ite (_ (< u) (eo::ite (eo::is_eq _v0 Int) 0 (eo::requires _v0 Real 0/1)))) ($eoo_-.2 u)) u))))
  )
)
; program: $is_poly_norm_rel_consts
(program $is_poly_norm_rel_consts ((T Type) (cx T) (U Type) (cy U) (b Bool))
  :signature (Bool) Bool
  (
  (($is_poly_norm_rel_consts (_ (< cx) cy)) (eo::eq (eo::ite (eo::is_neg cx) -1 (eo::ite (eo::is_neg (eo::neg cx)) 1 0)) (eo::ite (eo::is_neg cy) -1 (eo::ite (eo::is_neg (eo::neg cy)) 1 0))))
  (($is_poly_norm_rel_consts (_ (<= cx) cy)) (eo::eq (eo::ite (eo::is_neg cx) -1 (eo::ite (eo::is_neg (eo::neg cx)) 1 0)) (eo::ite (eo::is_neg cy) -1 (eo::ite (eo::is_neg (eo::neg cy)) 1 0))))
  (($is_poly_norm_rel_consts (_ (= cx) cy)) true)
  (($is_poly_norm_rel_consts (_ (>= cx) cy)) (eo::eq (eo::ite (eo::is_neg cx) -1 (eo::ite (eo::is_neg (eo::neg cx)) 1 0)) (eo::ite (eo::is_neg cy) -1 (eo::ite (eo::is_neg (eo::neg cy)) 1 0))))
  (($is_poly_norm_rel_consts (_ (> cx) cy)) (eo::eq (eo::ite (eo::is_neg cx) -1 (eo::ite (eo::is_neg (eo::neg cx)) 1 0)) (eo::ite (eo::is_neg cy) -1 (eo::ite (eo::is_neg (eo::neg cy)) 1 0))))
  (($is_poly_norm_rel_consts b) false)
  )
)
; program: $is_eq_maybe_to_real
(program $is_eq_maybe_to_real ((U Type) (T Type) (x U))
  :signature (U T) Bool
  (
  (($is_eq_maybe_to_real x x) true)
  (($is_eq_maybe_to_real (to_real x) x) true)
  )
)
; define: $bv_sign_bit
(define $bv_sign_bit ((m Int :implicit) (b (BitVec m)))
  (eo::define ((_v0 (eo::add ($bv_bitwidth (eo::typeof b)) -1))) (eo::extract b _v0 _v0)))
; define: $bv_ones
(define $bv_ones ((m Int))
  (eo::to_bin m (eo::add (eo::ite (eo::is_z m) (eo::ite (eo::is_neg m) 0 ($arith_eval_int_pow_2_rec m)) (int.pow2 m)) -1)))
; define: $bv_to_signed_int
(define $bv_to_signed_int ((m Int :implicit) (b (BitVec m)))
  (eo::define ((_v0 ($bv_bitwidth (eo::typeof b)))) (eo::define ((_v1 (eo::to_z (eo::extract b 0 (eo::add _v0 -2))))) (eo::define ((_v2 (eo::add _v0 -1))) (eo::ite (eo::eq (eo::extract b _v2 _v2) #b1) (eo::add (eo::neg (eo::ite (eo::is_z _v2) (eo::ite (eo::is_neg _v2) 0 ($arith_eval_int_pow_2_rec _v2)) (int.pow2 _v2))) _v1) _v1)))))
; program: $bv_unfold_repeat_rec
(program $bv_unfold_repeat_rec ((m Int) (n Int) (b (BitVec m)))
  :signature ((eo::quote n) (BitVec m)) (BitVec (eo::mul n m))
  (
  (($bv_unfold_repeat_rec 0 b) (eo::to_bin 0 0))
  (($bv_unfold_repeat_rec n b) (eo::cons concat b ($bv_unfold_repeat_rec (eo::add n -1) b)))
  )
)
; define: $bv_unfold_repeat
(define $bv_unfold_repeat ((m Int :implicit) (b (BitVec m)) (n Int))
  (eo::ite (eo::and (eo::is_z n) (eo::not (eo::is_neg n))) ($bv_unfold_repeat_rec n b) (_ (repeat n) b)))
; program: $bv_get_first_const_child
(program $bv_get_first_const_child ((n Int) (f (eo::define ((_v0 (BitVec n))) (-> _v0 (-> _v0 _v0)))) (a (BitVec n)) (b (BitVec n)))
  :signature ((BitVec n)) (BitVec n)
  (
  (($bv_get_first_const_child (_ (f a) b)) (eo::ite (eo::is_bin a) a ($bv_get_first_const_child b)))
  )
)
; define: $bv_bit_set
(define $bv_bit_set ((i Int) (n Int :implicit) (a (BitVec n)))
  (eo::eq (eo::extract a i i) #b1))
; define: $nary_app
(define $nary_app ((U Type :implicit) (b U) (T Type :implicit) (a T) (V Type :implicit) (f (-> T (-> U V))))
  (_ (f a) (_ (f b) (eo::nil f (eo::typeof a)))))
; program: $bv_bitblast_concat
(program $bv_bitblast_concat ((n Int) (m Int) (x Bool) (k Int) (y (BitVec k)) (z (BitVec m)))
  :signature ((BitVec n) (BitVec m)) (BitVec (eo::add n m))
  (
  (($bv_bitblast_concat (_ (@from_bools x) y) z) (eo::cons @from_bools x ($bv_bitblast_concat y z)))
  (($bv_bitblast_concat (eo::to_bin 0 0) z) z)
  )
)
; program: $bv_bitblast_binary_app
(program $bv_bitblast_binary_app ((T Type) (a Bool) (b Bool))
  :signature ((-> T (-> T Bool)) Bool Bool) Bool
  (
  (($bv_bitblast_binary_app and a b) (_ (and a) (_ (and b) true)))
  (($bv_bitblast_binary_app or a b) (_ (or a) (_ (or b) false)))
  (($bv_bitblast_binary_app xor a b) (_ (xor a) b))
  (($bv_bitblast_binary_app = a b) (_ (= a) b))
  )
)
; program: $bv_bitblast_repeat
(program $bv_bitblast_repeat ((b Bool) (n Int))
  :signature (Bool (eo::quote n)) (BitVec n)
  (
  (($bv_bitblast_repeat b 0) (eo::to_bin 0 0))
  (($bv_bitblast_repeat b n) (eo::cons @from_bools b ($bv_bitblast_repeat b (eo::add n -1))))
  )
)
; program: $bv_bitblast_prefix
(program $bv_bitblast_prefix ((n Int) (t (BitVec n)) (b Bool) (l Int) (a (BitVec n)))
  :signature ((eo::quote l) (BitVec n)) (BitVec (eo::ite (eo::gt l n) n l))
  (
  (($bv_bitblast_prefix 0 t) (eo::to_bin 0 0))
  (($bv_bitblast_prefix l (eo::to_bin 0 0)) (eo::to_bin 0 0))
  (($bv_bitblast_prefix l (_ (@from_bools b) a)) (eo::cons @from_bools b ($bv_bitblast_prefix (eo::add l -1) a)))
  )
)
; program: $bv_bitblast_head
(program $bv_bitblast_head ((n Int) (a (BitVec n)) (b Bool))
  :signature ((BitVec n)) Bool
  (
  (($bv_bitblast_head (_ (@from_bools b) a)) b)
  )
)
; program: $bv_bitblast_tail
(program $bv_bitblast_tail ((n Int) (b Bool) (a (BitVec n)))
  :signature ((BitVec n)) (BitVec (eo::add n -1))
  (
  (($bv_bitblast_tail (_ (@from_bools b) a)) a)
  )
)
; program: $bv_bitblast_subsequence
(program $bv_bitblast_subsequence ((n Int) (t (BitVec n)) (b Bool) (l Int) (u Int) (a (BitVec n)))
  :signature ((eo::quote l) (eo::quote u) (BitVec n)) (BitVec (eo::add u (eo::neg l)))
  (
  (($bv_bitblast_subsequence l u (eo::to_bin 0 0)) (eo::to_bin 0 0))
  (($bv_bitblast_subsequence 0 u t) ($bv_bitblast_prefix (eo::add u 1) t))
  (($bv_bitblast_subsequence l u (_ (@from_bools b) a)) ($bv_bitblast_subsequence (eo::add l -1) (eo::add u -1) a))
  )
)
; define: $bv_bitblast_zero
(define $bv_bitblast_zero ((n Int))
  ($bv_bitblast_repeat false n))
; define: $bv_bitblast_sign_bit
(define $bv_bitblast_sign_bit ((n Int :implicit) (a (BitVec n)))
  ($bv_bitblast_head (eo::list_rev @from_bools a)))
; program: $bv_bitblast_apply_unary
(program $bv_bitblast_apply_unary ((n Int) (b1 Bool) (f (-> Bool Bool)) (m Int) (a1 (BitVec m)))
  :signature ((-> Bool Bool) (BitVec n)) (BitVec n)
  (
  (($bv_bitblast_apply_unary f (eo::to_bin 0 0)) (eo::to_bin 0 0))
  (($bv_bitblast_apply_unary f (_ (@from_bools b1) a1)) (eo::cons @from_bools (f b1) ($bv_bitblast_apply_unary f a1)))
  )
)
; program: $bv_bitblast_apply_binary
(program $bv_bitblast_apply_binary ((T Type) (n Int) (b1 Bool) (b2 Bool) (f (-> T (-> T Bool))) (m Int) (a1 (BitVec m)) (a2 (BitVec m)))
  :signature ((-> T (-> T Bool)) (BitVec n) (BitVec n)) (BitVec n)
  (
  (($bv_bitblast_apply_binary f (eo::to_bin 0 0) (eo::to_bin 0 0)) (eo::to_bin 0 0))
  (($bv_bitblast_apply_binary f (_ (@from_bools b1) a1) (_ (@from_bools b2) a2)) (eo::cons @from_bools ($bv_bitblast_binary_app f b1 b2) ($bv_bitblast_apply_binary f a1 a2)))
  )
)
; program: $bv_bitblast_apply_ite
(program $bv_bitblast_apply_ite ((n Int) (b1 Bool) (b2 Bool) (bc Bool) (m Int) (a1 (BitVec m)) (a2 (BitVec m)))
  :signature (Bool (BitVec n) (BitVec n)) (BitVec n)
  (
  (($bv_bitblast_apply_ite bc (eo::to_bin 0 0) (eo::to_bin 0 0)) (eo::to_bin 0 0))
  (($bv_bitblast_apply_ite bc (_ (@from_bools b1) a1) (_ (@from_bools b2) a2)) (eo::cons @from_bools (_ (_ (ite bc) b1) b2) ($bv_bitblast_apply_ite bc a1 a2)))
  )
)
; define: $bv_bitblast_rshift
(define $bv_bitblast_rshift ((amount Int) (n Int :implicit) (a (BitVec n)))
  ($bv_bitblast_concat ($bv_bitblast_subsequence amount (eo::list_len @from_bools a) a) ($bv_bitblast_repeat false amount)))
; define: $bv_bitblast_lshift
(define $bv_bitblast_lshift ((amount Int) (n Int :implicit) (a (BitVec n)))
  ($bv_bitblast_concat ($bv_bitblast_repeat false amount) ($bv_bitblast_subsequence 0 (eo::add -1 (eo::neg amount)) a)))
; program: $bv_mk_bitblast_step_eq_rec
(program $bv_mk_bitblast_step_eq_rec ((n Int) (b1 Bool) (b2 Bool) (nm1 Int) (a1 (BitVec nm1)) (a2 (BitVec nm1)))
  :signature ((BitVec n) (BitVec n)) Bool
  (
  (($bv_mk_bitblast_step_eq_rec (eo::to_bin 0 0) (eo::to_bin 0 0)) true)
  (($bv_mk_bitblast_step_eq_rec (_ (@from_bools b1) a1) (_ (@from_bools b2) a2)) (eo::cons and (_ (= b1) b2) ($bv_mk_bitblast_step_eq_rec a1 a2)))
  )
)
; define: $bv_mk_bitblast_step_eq
(define $bv_mk_bitblast_step_eq ((n Int :implicit) (a2 (BitVec n)) (a1 (BitVec n)))
  ($singleton_elim ($bv_mk_bitblast_step_eq_rec a1 a2)))
; program: $bv_bitblast_ult_rec
(program $bv_bitblast_ult_rec ((n Int) (a1 (BitVec n)) (a2 (BitVec n)) (res Bool) (b1 Bool) (b2 Bool))
  :signature ((BitVec n) (BitVec n) Bool) Bool
  (
  (($bv_bitblast_ult_rec (eo::to_bin 0 0) (eo::to_bin 0 0) res) res)
  (($bv_bitblast_ult_rec (_ (@from_bools b1) a1) (_ (@from_bools b2) a2) res) ($bv_bitblast_ult_rec a1 a2 (_ (or (_ (and (_ (= b1) b2)) (_ (and res) true))) (_ (or (_ (and (not b1)) (_ (and b2) true))) false))))
  )
)
; program: $bv_bitblast_ult
(program $bv_bitblast_ult ((n Int) (orEqual Bool) (a1 (BitVec n)) (a2 (BitVec n)) (b1 Bool) (b2 Bool))
  :signature ((BitVec n) (BitVec n) Bool) Bool
  (
  (($bv_bitblast_ult (_ (@from_bools b1) a1) (_ (@from_bools b2) a2) orEqual) ($bv_bitblast_ult_rec a1 a2 (_ (and (not b1)) (_ (and b2) true))))
  )
)
; program: $bv_bitblast_slt_impl
(program $bv_bitblast_slt_impl ((n Int) (a1 (BitVec n)) (a2 (BitVec n)) (orEqual Bool) (b1 Bool) (b2 Bool))
  :signature ((BitVec n) (BitVec n) Bool) Bool
  (
  (($bv_bitblast_slt_impl (_ (@from_bools b1) (eo::to_bin 0 0)) (_ (@from_bools b2) (eo::to_bin 0 0)) orEqual) (eo::define ((_v0 (_ (and b1) (_ (and (not b2)) true)))) (eo::ite orEqual (_ (or (_ (= b1) b2)) (_ (or _v0) false)) _v0)))
  (($bv_bitblast_slt_impl (_ (@from_bools b1) a1) (_ (@from_bools b2) a2) orEqual) (_ (or (_ (and (_ (= b1) b2)) (_ (and ($bv_bitblast_ult (eo::list_rev @from_bools a1) (eo::list_rev @from_bools a2) orEqual)) true))) (_ (or (_ (and b1) (_ (and (not b2)) true))) false)))
  )
)
; define: $bv_bitblast_slt
(define $bv_bitblast_slt ((orEqual Bool) (n Int :implicit) (y (BitVec n)) (x (BitVec n)))
  ($bv_bitblast_slt_impl (eo::list_rev @from_bools x) (eo::list_rev @from_bools y) orEqual))
; define: $bv_mk_bitblast_step_extract
(define $bv_mk_bitblast_step_extract ((n Int :implicit) (a (BitVec n)) (l Int) (u Int))
  ($bv_bitblast_subsequence l u a))
; program: $bv_mk_bitblast_step_concat
(program $bv_mk_bitblast_step_concat ((n Int) (m Int) (a2 (BitVec m)) (a1 (BitVec n)))
  :signature ((BitVec n)) (BitVec n)
  (
  (($bv_mk_bitblast_step_concat (eo::to_bin 0 0)) (eo::to_bin 0 0))
  (($bv_mk_bitblast_step_concat (_ (concat a1) a2)) ($bv_bitblast_concat ($bv_mk_bitblast_step_concat a2) a1))
  )
)
; program: $bv_mk_bitblast_step_bitwise
(program $bv_mk_bitblast_step_bitwise ((n Int) (T Type) (m Int) (a1 (BitVec m)) (bf (eo::define ((_v0 (BitVec n))) (-> _v0 (-> _v0 _v0)))) (f (-> T (-> T Bool))) (a2 (BitVec m)) (ac (BitVec m)))
  :signature ((eo::define ((_v0 (BitVec n))) (-> _v0 (-> _v0 _v0))) (-> T (-> T Bool)) (BitVec m) (BitVec m)) (BitVec m)
  (
  (($bv_mk_bitblast_step_bitwise bf f (_ (bf a1) a2) ac) ($bv_mk_bitblast_step_bitwise bf f a2 ($bv_bitblast_apply_binary f ac a1)))
  (($bv_mk_bitblast_step_bitwise bf f a2 ac) ac)
  )
)
; program: $bv_ripple_carry_adder_2
(program $bv_ripple_carry_adder_2 ((n Int) (m Int) (a1 (BitVec n)) (a2 (BitVec n)) (b1 Bool) (b2 Bool) (carry Bool) (res (BitVec m)))
  :signature ((BitVec n) (BitVec n) Bool (BitVec m)) (_ (@Pair Bool) (BitVec (eo::add n m)))
  (
  (($bv_ripple_carry_adder_2 (_ (@from_bools b1) a1) (_ (@from_bools b2) a2) carry res) (eo::define ((_v0 (_ (xor b1) b2))) ($bv_ripple_carry_adder_2 a1 a2 (_ (or (_ (and b1) (_ (and b2) true))) (_ (or (_ (and _v0) (_ (and carry) true))) false)) (eo::cons @from_bools (_ (xor _v0) carry) res))))
  (($bv_ripple_carry_adder_2 (eo::to_bin 0 0) (eo::to_bin 0 0) carry res) (_ (@pair carry) (eo::list_rev @from_bools res)))
  )
)
; define: $bv_ripple_carry_adder
(define $bv_ripple_carry_adder ((carry Bool) (n Int :implicit) (a2 (BitVec n)) (a1 (BitVec n)))
  ($pair_second ($bv_ripple_carry_adder_2 a1 a2 carry (eo::to_bin 0 0))))
; program: $bv_mk_bitblast_step_add
(program $bv_mk_bitblast_step_add ((n Int) (a1 (BitVec n)) (a2 (BitVec n)) (ac (BitVec n)))
  :signature ((BitVec n) (BitVec n)) (BitVec n)
  (
  (($bv_mk_bitblast_step_add (_ (bvadd a1) a2) ac) ($bv_mk_bitblast_step_add a2 ($pair_second ($bv_ripple_carry_adder_2 ac a1 false (eo::to_bin 0 0)))))
  (($bv_mk_bitblast_step_add a2 ac) ac)
  )
)
; program: $bv_shift_add_multiplier_rec_step
(program $bv_shift_add_multiplier_rec_step ((n Int) (np Int) (b2 Bool) (br Bool) (b1 Bool) (a2 (BitVec n)) (k Int) (m Int) (ar (BitVec m)) (carry Bool))
  :signature (Bool (BitVec n) Int (BitVec np) Bool) (BitVec np)
  (
  (($bv_shift_add_multiplier_rec_step b1 a2 0 (eo::to_bin 0 0) carry) (eo::to_bin 0 0))
  (($bv_shift_add_multiplier_rec_step b1 (_ (@from_bools b2) a2) 0 (_ (@from_bools br) ar) carry) (eo::define ((_v0 (_ (and b1) (_ (and b2) true)))) (eo::define ((_v1 (_ (xor br) _v0))) (eo::cons @from_bools (_ (xor _v1) carry) ($bv_shift_add_multiplier_rec_step b1 a2 0 ar (_ (or (_ (and br) (_ (and _v0) true))) (_ (or (_ (and _v1) (_ (and carry) true))) false)))))))
  (($bv_shift_add_multiplier_rec_step b1 a2 k (_ (@from_bools br) ar) carry) (eo::cons @from_bools br ($bv_shift_add_multiplier_rec_step b1 a2 (eo::add k -1) ar carry)))
  )
)
; program: $bv_shift_add_multiplier_rec
(program $bv_shift_add_multiplier_rec ((m Int) (n Int) (mm1 Int) (a1 (BitVec mm1)) (b1 Bool) (a2 (BitVec n)) (k Int) (res (BitVec n)))
  :signature ((BitVec m) (BitVec n) Int (BitVec n)) (BitVec n)
  (
  (($bv_shift_add_multiplier_rec (eo::to_bin 0 0) a2 k res) res)
  (($bv_shift_add_multiplier_rec (_ (@from_bools b1) a1) a2 k res) ($bv_shift_add_multiplier_rec a1 a2 (eo::add k 1) ($bv_shift_add_multiplier_rec_step b1 a2 k res false)))
  )
)
; program: $bv_shift_add_multiplier
(program $bv_shift_add_multiplier ((m Int) (n Int) (k Int) (a1 (BitVec k)) (b1 Bool) (a2 (BitVec n)))
  :signature ((BitVec n) (BitVec m)) (BitVec n)
  (
  (($bv_shift_add_multiplier a2 (_ (@from_bools b1) a1)) ($bv_shift_add_multiplier_rec a1 a2 1 ($bv_bitblast_apply_binary and ($bv_bitblast_repeat b1 ($bv_bitwidth (eo::typeof a2))) a2)))
  )
)
; program: $bv_mk_bitblast_step_mul
(program $bv_mk_bitblast_step_mul ((n Int) (a1 (BitVec n)) (a2 (BitVec n)) (ac (BitVec n)))
  :signature ((BitVec n) (BitVec n)) (BitVec n)
  (
  (($bv_mk_bitblast_step_mul (_ (bvmul a1) a2) ac) ($bv_mk_bitblast_step_mul a2 ($bv_shift_add_multiplier ac a1)))
  (($bv_mk_bitblast_step_mul a2 ac) ac)
  )
)
; program: $bv_div_mod_impl
(program $bv_div_mod_impl ((n Int) (sz Int) (zero (BitVec n)) (a1 (BitVec n)) (a2 (BitVec n)))
  :signature ((BitVec n) (BitVec n) (BitVec n) Int) (eo::define ((_v0 (BitVec n))) (_ (@Pair _v0) _v0))
  (
  (($bv_div_mod_impl a1 a2 zero 0) (_ (@pair zero) zero))
  (($bv_div_mod_impl zero a2 zero sz) (_ (@pair zero) zero))
  (($bv_div_mod_impl a1 a2 zero sz) (eo::define ((_v0 ($bv_bitblast_apply_unary not a2))) (eo::define ((_v1 (_ (@from_bools false) (eo::to_bin 0 0)))) (eo::define ((_v2 ($bv_div_mod_impl ($bv_bitblast_concat ($bv_bitblast_subsequence 1 (eo::list_len @from_bools a1) a1) _v1) a2 zero (eo::add sz -1)))) (eo::define ((_v3 ($pair_second ($bv_ripple_carry_adder_2 ($bv_bitblast_concat _v1 ($bv_bitblast_subsequence 0 -2 ($pair_second _v2))) zero (_ (_ (ite (_ (= ($bv_bitblast_head a1)) true)) true) false) (eo::to_bin 0 0))))) (eo::define ((_v4 ($bv_ripple_carry_adder_2 _v3 _v0 true (eo::to_bin 0 0)))) (eo::define ((_v5 (not ($pair_first _v4)))) (eo::define ((_v6 (not ($pair_first ($bv_ripple_carry_adder_2 a1 _v0 true (eo::to_bin 0 0)))))) (eo::define ((_v7 ($bv_bitblast_concat _v1 ($bv_bitblast_subsequence 0 -2 ($pair_first _v2))))) (_ (@pair ($bv_bitblast_apply_ite _v6 zero (eo::cons @from_bools (_ (_ (ite _v5) ($bv_bitblast_head _v7)) true) ($bv_bitblast_tail _v7)))) ($bv_bitblast_apply_ite _v6 a1 ($bv_bitblast_apply_ite _v5 _v3 ($pair_second _v4)))))))))))))
  )
)
; define: $bv_mk_bitblast_step_udiv
(define $bv_mk_bitblast_step_udiv ((n Int :implicit) (a2 (BitVec n)) (a1 (BitVec n)))
  (eo::define ((_v0 ($bv_bitwidth (eo::typeof a1)))) (eo::define ((_v1 ($bv_bitblast_repeat false _v0))) ($bv_bitblast_apply_ite ($singleton_elim ($bv_mk_bitblast_step_eq_rec a2 _v1)) ($bv_bitblast_repeat true _v0) ($pair_first ($bv_div_mod_impl a1 a2 _v1 _v0))))))
; define: $bv_mk_bitblast_step_urem
(define $bv_mk_bitblast_step_urem ((n Int :implicit) (a2 (BitVec n)) (a1 (BitVec n)))
  (eo::define ((_v0 ($bv_bitwidth (eo::typeof a1)))) (eo::define ((_v1 ($bv_bitblast_repeat false _v0))) ($bv_bitblast_apply_ite ($singleton_elim ($bv_mk_bitblast_step_eq_rec a2 _v1)) a1 ($pair_second ($bv_div_mod_impl a1 a2 _v1 _v0))))))
; program: $bv_mk_bitblast_step_ite
(program $bv_mk_bitblast_step_ite ((n Int) (b1 Bool) (b2 Bool) (a1 (BitVec n)) (a2 (BitVec n)) (bc Bool))
  :signature ((BitVec 1) (BitVec n) (BitVec n)) (BitVec n)
  (
  (($bv_mk_bitblast_step_ite (_ (@from_bools bc) (eo::to_bin 0 0)) (_ (@from_bools b1) a1) (_ (@from_bools b2) a2)) (eo::cons @from_bools (_ (and (_ (or (not bc)) (_ (or b1) false))) (_ (and (_ (or bc) (_ (or b2) false))) true)) ($bv_mk_bitblast_step_ite (_ (@from_bools bc) (eo::to_bin 0 0)) a1 a2)))
  (($bv_mk_bitblast_step_ite (_ (@from_bools bc) (eo::to_bin 0 0)) (eo::to_bin 0 0) (eo::to_bin 0 0)) (eo::to_bin 0 0))
  )
)
; program: $bv_const_to_bitlist_rec
(program $bv_const_to_bitlist_rec ((n Int) (c (BitVec n)) (i Int))
  :signature ((BitVec n) (eo::quote i) Int) (BitVec (eo::add n (eo::neg i)))
  (
  (($bv_const_to_bitlist_rec c n n) (eo::to_bin 0 0))
  (($bv_const_to_bitlist_rec c i n) (eo::cons @from_bools (eo::eq (eo::extract c i i) #b1) ($bv_const_to_bitlist_rec c (eo::add i 1) n)))
  )
)
; define: $bv_mk_bitblast_step_const
(define $bv_mk_bitblast_step_const ((n Int :implicit) (a (BitVec n)))
  ($bv_const_to_bitlist_rec a 0 (eo::len a)))
; program: $bv_mk_bitblast_step_shl_rec_step
(program $bv_mk_bitblast_step_shl_rec_step ((n Int) (m Int) (b1c Bool) (b1 Bool) (mm1 Int) (a1 (BitVec mm1)) (a1c (BitVec n)) (i Int) (b2 Bool))
  :signature ((BitVec m) (BitVec n) Int Bool) (BitVec m)
  (
  (($bv_mk_bitblast_step_shl_rec_step (eo::to_bin 0 0) a1c i b2) (eo::to_bin 0 0))
  (($bv_mk_bitblast_step_shl_rec_step (_ (@from_bools b1) a1) (_ (@from_bools b1c) a1c) 0 b2) (eo::cons @from_bools (_ (_ (ite b2) b1c) b1) ($bv_mk_bitblast_step_shl_rec_step a1 a1c 0 b2)))
  (($bv_mk_bitblast_step_shl_rec_step (_ (@from_bools b1) a1) a1c i b2) (eo::cons @from_bools (_ (_ (ite b2) false) b1) ($bv_mk_bitblast_step_shl_rec_step a1 a1c (eo::add i -1) b2)))
  )
)
; program: $bv_mk_bitblast_step_shl_rec
(program $bv_mk_bitblast_step_shl_rec ((m Int) (n Int) (a1 (BitVec n)) (b2 Bool) (a2 (BitVec m)) (s Int) (lsz Int))
  :signature ((BitVec n) (BitVec m) Int Int) (BitVec n)
  (
  (($bv_mk_bitblast_step_shl_rec a1 a2 lsz lsz) a1)
  (($bv_mk_bitblast_step_shl_rec a1 (_ (@from_bools b2) a2) s lsz) ($bv_mk_bitblast_step_shl_rec ($bv_mk_bitblast_step_shl_rec_step a1 a1 (eo::ite (eo::is_z s) (eo::ite (eo::is_neg s) 0 ($arith_eval_int_pow_2_rec s)) (int.pow2 s)) b2) a2 (eo::add s 1) lsz))
  )
)
; define: $bv_mk_bitblast_step_shl
(define $bv_mk_bitblast_step_shl ((n Int :implicit) (a2 (BitVec n)) (a1 (BitVec n)))
  (eo::define ((_v0 ($bv_bitwidth (eo::typeof a1)))) (eo::define ((_v1 (eo::ite (eo::is_neg (eo::neg _v0)) ($arith_eval_int_log_2_rec _v0) (int.log2 _v0)))) (eo::define ((_v2 (eo::to_bin _v0 _v0))) ($bv_bitblast_apply_ite ($bv_bitblast_ult a2 ($bv_const_to_bitlist_rec _v2 0 (eo::len _v2)) false) ($bv_mk_bitblast_step_shl_rec a1 a2 0 (eo::ite (eo::ite (eo::is_z _v0) (eo::ite (eo::is_neg _v0) false ($arith_eval_int_is_pow_2_rec _v0)) (int.ispow2 _v0)) _v1 (eo::add _v1 1))) ($bv_bitblast_repeat false _v0))))))
; program: $bv_mk_bitblast_step_shr_rec_step
(program $bv_mk_bitblast_step_shr_rec_step ((n Int) (m Int) (b1 Bool) (b1c Bool) (mm1 Int) (a1 (BitVec mm1)) (a1c (BitVec n)) (i Int) (b2 Bool) (sbit Bool))
  :signature ((BitVec m) (BitVec n) Int Bool Bool) (BitVec m)
  (
  (($bv_mk_bitblast_step_shr_rec_step (eo::to_bin 0 0) a1c i b2 sbit) (eo::to_bin 0 0))
  (($bv_mk_bitblast_step_shr_rec_step (_ (@from_bools b1) a1) (_ (@from_bools b1c) a1c) 0 b2 sbit) (eo::cons @from_bools (_ (_ (ite (not b2)) b1) b1c) ($bv_mk_bitblast_step_shr_rec_step a1 a1c 0 b2 sbit)))
  (($bv_mk_bitblast_step_shr_rec_step (_ (@from_bools b1) a1) (eo::to_bin 0 0) 0 b2 sbit) (eo::cons @from_bools (_ (_ (ite b2) sbit) b1) ($bv_mk_bitblast_step_shr_rec_step a1 (eo::to_bin 0 0) 0 b2 sbit)))
  (($bv_mk_bitblast_step_shr_rec_step a1 (_ (@from_bools b1c) a1c) i b2 sbit) ($bv_mk_bitblast_step_shr_rec_step a1 a1c (eo::add i -1) b2 sbit))
  )
)
; program: $bv_mk_bitblast_step_shr_rec
(program $bv_mk_bitblast_step_shr_rec ((m Int) (n Int) (a1 (BitVec n)) (b2 Bool) (a2 (BitVec m)) (s Int) (lsz Int) (sbit Bool))
  :signature ((BitVec n) (BitVec m) Int Int Bool) (BitVec n)
  (
  (($bv_mk_bitblast_step_shr_rec a1 a2 lsz lsz sbit) a1)
  (($bv_mk_bitblast_step_shr_rec a1 (_ (@from_bools b2) a2) s lsz sbit) ($bv_mk_bitblast_step_shr_rec ($bv_mk_bitblast_step_shr_rec_step a1 a1 (eo::ite (eo::is_z s) (eo::ite (eo::is_neg s) 0 ($arith_eval_int_pow_2_rec s)) (int.pow2 s)) b2 sbit) a2 (eo::add s 1) lsz sbit))
  )
)
; define: $bv_mk_bitblast_step_shr
(define $bv_mk_bitblast_step_shr ((sbit Bool) (n Int :implicit) (a2 (BitVec n)) (a1 (BitVec n)))
  (eo::define ((_v0 ($bv_bitwidth (eo::typeof a1)))) (eo::define ((_v1 (eo::ite (eo::is_neg (eo::neg _v0)) ($arith_eval_int_log_2_rec _v0) (int.log2 _v0)))) (eo::define ((_v2 (eo::to_bin _v0 _v0))) ($bv_bitblast_apply_ite ($bv_bitblast_ult a2 ($bv_const_to_bitlist_rec _v2 0 (eo::len _v2)) false) ($bv_mk_bitblast_step_shr_rec a1 a2 0 (eo::ite (eo::ite (eo::is_z _v0) (eo::ite (eo::is_neg _v0) false ($arith_eval_int_is_pow_2_rec _v0)) (int.ispow2 _v0)) _v1 (eo::add _v1 1)) sbit) ($bv_bitblast_repeat sbit _v0))))))
; program: $bv_mk_bitblast_step_var_rec
(program $bv_mk_bitblast_step_var_rec ((n Int) (a (BitVec n)) (i Int))
  :signature ((BitVec n) (eo::quote i)) (BitVec (eo::add i 1))
  (
  (($bv_mk_bitblast_step_var_rec a -1) (eo::to_bin 0 0))
  (($bv_mk_bitblast_step_var_rec a i) (eo::cons @from_bools (_ (@bit i) a) ($bv_mk_bitblast_step_var_rec a (eo::add i -1))))
  )
)
; define: $bv_mk_bitblast_step_var
(define $bv_mk_bitblast_step_var ((n Int :implicit) (a (BitVec n)))
  (eo::list_rev @from_bools ($bv_mk_bitblast_step_var_rec a (eo::add ($bv_bitwidth (eo::typeof a)) -1))))
; program: $bv_mk_bitblast_step
(program $bv_mk_bitblast_step ((T Type) (l Int) (u Int) (m Int) (a3 (BitVec m)) (ac (BitVec 1)) (n Int) (a2 (BitVec n)) (a1 (BitVec n)))
  :signature (T) T
  (
  (($bv_mk_bitblast_step (bvnot a1)) ($bv_bitblast_apply_unary not a1))
  (($bv_mk_bitblast_step (_ (= a1) a2)) ($singleton_elim ($bv_mk_bitblast_step_eq_rec a1 a2)))
  (($bv_mk_bitblast_step (_ (bvult a1) a2)) ($bv_bitblast_ult a1 a2 false))
  (($bv_mk_bitblast_step (_ (bvule a1) a2)) ($bv_bitblast_ult a1 a2 true))
  (($bv_mk_bitblast_step (_ (bvslt a1) a2)) ($bv_bitblast_slt_impl (eo::list_rev @from_bools a1) (eo::list_rev @from_bools a2) false))
  (($bv_mk_bitblast_step (_ (bvsle a1) a2)) ($bv_bitblast_slt_impl (eo::list_rev @from_bools a1) (eo::list_rev @from_bools a2) true))
  (($bv_mk_bitblast_step (_ (_ (extract u) l) a1)) ($bv_bitblast_subsequence l u a1))
  (($bv_mk_bitblast_step (_ (concat a1) a3)) ($bv_mk_bitblast_step_concat (_ (concat a1) a3)))
  (($bv_mk_bitblast_step (_ (bvor a1) a2)) ($bv_mk_bitblast_step_bitwise bvor or a2 a1))
  (($bv_mk_bitblast_step (_ (bvand a1) a2)) ($bv_mk_bitblast_step_bitwise bvand and a2 a1))
  (($bv_mk_bitblast_step (_ (bvxor a1) a2)) ($bv_mk_bitblast_step_bitwise bvxor xor a2 a1))
  (($bv_mk_bitblast_step (_ (bvxnor a1) a2)) ($bv_bitblast_apply_binary = a1 a2))
  (($bv_mk_bitblast_step (_ (bvadd a1) a2)) ($bv_mk_bitblast_step_add a2 a1))
  (($bv_mk_bitblast_step (_ (bvmul a1) a2)) ($bv_mk_bitblast_step_mul a2 a1))
  (($bv_mk_bitblast_step (_ (bvudiv a1) a2)) (eo::define ((_v0 ($bv_bitwidth (eo::typeof a1)))) (eo::define ((_v1 ($bv_bitblast_repeat false _v0))) ($bv_bitblast_apply_ite ($singleton_elim ($bv_mk_bitblast_step_eq_rec a2 _v1)) ($bv_bitblast_repeat true _v0) ($pair_first ($bv_div_mod_impl a1 a2 _v1 _v0))))))
  (($bv_mk_bitblast_step (_ (bvurem a1) a2)) (eo::define ((_v0 ($bv_bitwidth (eo::typeof a1)))) (eo::define ((_v1 ($bv_bitblast_repeat false _v0))) ($bv_bitblast_apply_ite ($singleton_elim ($bv_mk_bitblast_step_eq_rec a2 _v1)) a1 ($pair_second ($bv_div_mod_impl a1 a2 _v1 _v0))))))
  (($bv_mk_bitblast_step (_ (bvsub a1) a2)) ($pair_second ($bv_ripple_carry_adder_2 a1 ($bv_bitblast_apply_unary not a2) true (eo::to_bin 0 0))))
  (($bv_mk_bitblast_step (bvneg a1)) ($pair_second ($bv_ripple_carry_adder_2 ($bv_bitblast_apply_unary not a1) ($bv_bitblast_repeat false ($bv_bitwidth (eo::typeof a1))) true (eo::to_bin 0 0))))
  (($bv_mk_bitblast_step (_ (_ (bvite ac) a1) a2)) ($bv_mk_bitblast_step_ite ac a1 a2))
  (($bv_mk_bitblast_step (_ (bvashr a1) a2)) (eo::define ((_v0 ($bv_bitwidth (eo::typeof a1)))) (eo::define ((_v1 ($bv_bitblast_head (eo::list_rev @from_bools a1)))) (eo::define ((_v2 (eo::ite (eo::is_neg (eo::neg _v0)) ($arith_eval_int_log_2_rec _v0) (int.log2 _v0)))) (eo::define ((_v3 (eo::to_bin _v0 _v0))) ($bv_bitblast_apply_ite ($bv_bitblast_ult a2 ($bv_const_to_bitlist_rec _v3 0 (eo::len _v3)) false) ($bv_mk_bitblast_step_shr_rec a1 a2 0 (eo::ite (eo::ite (eo::is_z _v0) (eo::ite (eo::is_neg _v0) false ($arith_eval_int_is_pow_2_rec _v0)) (int.ispow2 _v0)) _v2 (eo::add _v2 1)) _v1) ($bv_bitblast_repeat _v1 _v0)))))))
  (($bv_mk_bitblast_step (_ (bvlshr a1) a2)) (eo::define ((_v0 ($bv_bitwidth (eo::typeof a1)))) (eo::define ((_v1 (eo::ite (eo::is_neg (eo::neg _v0)) ($arith_eval_int_log_2_rec _v0) (int.log2 _v0)))) (eo::define ((_v2 (eo::to_bin _v0 _v0))) ($bv_bitblast_apply_ite ($bv_bitblast_ult a2 ($bv_const_to_bitlist_rec _v2 0 (eo::len _v2)) false) ($bv_mk_bitblast_step_shr_rec a1 a2 0 (eo::ite (eo::ite (eo::is_z _v0) (eo::ite (eo::is_neg _v0) false ($arith_eval_int_is_pow_2_rec _v0)) (int.ispow2 _v0)) _v1 (eo::add _v1 1)) false) ($bv_bitblast_repeat false _v0))))))
  (($bv_mk_bitblast_step (_ (bvshl a1) a2)) (eo::define ((_v0 ($bv_bitwidth (eo::typeof a1)))) (eo::define ((_v1 (eo::ite (eo::is_neg (eo::neg _v0)) ($arith_eval_int_log_2_rec _v0) (int.log2 _v0)))) (eo::define ((_v2 (eo::to_bin _v0 _v0))) ($bv_bitblast_apply_ite ($bv_bitblast_ult a2 ($bv_const_to_bitlist_rec _v2 0 (eo::len _v2)) false) ($bv_mk_bitblast_step_shl_rec a1 a2 0 (eo::ite (eo::ite (eo::is_z _v0) (eo::ite (eo::is_neg _v0) false ($arith_eval_int_is_pow_2_rec _v0)) (int.ispow2 _v0)) _v1 (eo::add _v1 1))) ($bv_bitblast_repeat false _v0))))))
  (($bv_mk_bitblast_step (_ (bvcomp a1) a2)) (_ (@from_bools ($singleton_elim ($bv_mk_bitblast_step_eq_rec a1 a2))) (eo::to_bin 0 0)))
  (($bv_mk_bitblast_step (_ (bvultbv a1) a2)) (_ (@from_bools ($bv_bitblast_ult a1 a2 false)) (eo::to_bin 0 0)))
  (($bv_mk_bitblast_step (_ (bvsltbv a1) a2)) (_ (@from_bools ($bv_bitblast_slt_impl (eo::list_rev @from_bools a1) (eo::list_rev @from_bools a2) false)) (eo::to_bin 0 0)))
  (($bv_mk_bitblast_step (_ (sign_extend n) a1)) ($bv_bitblast_concat a1 ($bv_bitblast_repeat ($bv_bitblast_head (eo::list_rev @from_bools a1)) n)))
  (($bv_mk_bitblast_step a1) (eo::ite (eo::is_bin a1) ($bv_const_to_bitlist_rec a1 0 (eo::len a1)) (eo::list_rev @from_bools ($bv_mk_bitblast_step_var_rec a1 (eo::add ($bv_bitwidth (eo::typeof a1)) -1)))))
  )
)
; program: $bv_smulo_elim_rec
(program $bv_smulo_elim_rec ((n Int) (res (BitVec 1)) (ppc (BitVec 1)) (xa (BitVec n)) (xb (BitVec n)) (i Int) (nm2 Int))
  :signature ((BitVec n) (BitVec n) (BitVec 1) (BitVec 1) Int Int) (BitVec 1)
  (
  (($bv_smulo_elim_rec xa xb ppc res nm2 nm2) res)
  (($bv_smulo_elim_rec xa xb ppc res i nm2) (eo::define ((_v0 (eo::add i 1))) (eo::define ((_v1 (_ (_ (extract _v0) _v0) xb))) (eo::define ((_v2 (eo::add nm2 (eo::neg i)))) (eo::define ((_v3 (_ (bvor ppc) (_ (bvor (_ (_ (extract _v2) _v2) xa)) #b0)))) ($bv_smulo_elim_rec xa xb _v3 (_ (bvor res) (_ (bvor (_ (bvand _v1) (_ (bvand _v3) (eo::nil bvand (eo::typeof _v1))))) #b0)) _v0 nm2))))))
  )
)
; define: $bv_smulo_elim
(define $bv_smulo_elim ((n Int :implicit) (b (BitVec n)) (a (BitVec n)))
  (eo::define ((_v0 (eo::typeof a))) (eo::define ((_v1 ($bv_bitwidth _v0))) (eo::define ((_v2 (eo::add _v1 -2))) (eo::define ((_v3 (eo::add _v1 -1))) (eo::define ((_v4 (_ (extract _v3) _v3))) (eo::define ((_v5 (sign_extend _v3))) (eo::define ((_v6 (_ (bvxor b) (_ (bvxor (_ _v5 (_ _v4 b))) (eo::nil bvxor (eo::typeof b)))))) (eo::define ((_v7 (_ (_ (extract 1) 1) _v6))) (eo::define ((_v8 (_ (bvxor a) (_ (bvxor (_ _v5 (_ _v4 a))) (eo::nil bvxor _v0))))) (eo::define ((_v9 (_ (_ (extract _v2) _v2) _v8))) (eo::define ((_v10 ($bv_smulo_elim_rec _v8 _v6 _v9 (_ (bvand _v7) (_ (bvand _v9) (eo::nil bvand (eo::typeof _v7)))) 1 _v2))) (eo::define ((_v11 (sign_extend 1))) (eo::define ((_v12 (_ _v11 a))) (eo::define ((_v13 (_ (bvmul _v12) (_ (bvmul (_ _v11 b)) (eo::nil bvmul (eo::typeof _v12)))))) (eo::define ((_v14 (_ (_ (extract _v1) _v1) _v13))) (eo::define ((_v15 (_ (bvxor _v14) (_ (bvxor (_ _v4 _v13)) (eo::nil bvxor (eo::typeof _v14)))))) (eo::ite (eo::eq _v1 1) (_ (= (_ (bvand a) (_ (bvand b) (eo::nil bvand _v0)))) #b1) (eo::ite (eo::eq _v1 2) (_ (= _v15) #b1) (_ (= (_ (bvor _v10) (_ (bvor _v15) (eo::nil bvor (eo::typeof _v10))))) #b1))))))))))))))))))))
; program: $bv_umulo_elim_rec
(program $bv_umulo_elim_rec ((n Int) (b (BitVec n)) (uppc (BitVec 1)) (a (BitVec n)) (res (BitVec 1)) (i Int))
  :signature ((BitVec n) (BitVec n) (BitVec 1) (BitVec 1) Int Int) (BitVec 1)
  (
  (($bv_umulo_elim_rec a b uppc res n n) res)
  (($bv_umulo_elim_rec a b uppc res i n) (eo::define ((_v0 (eo::add (eo::neg i) -1))) (eo::define ((_v1 (_ (_ (extract _v0) _v0) a))) (eo::define ((_v2 (_ (_ (extract i) i) b))) (eo::cons bvor (_ (bvand _v2) (_ (bvand uppc) (eo::nil bvand (eo::typeof _v2)))) ($bv_umulo_elim_rec a b (_ (bvor _v1) (_ (bvor uppc) (eo::nil bvor (eo::typeof _v1)))) res (eo::add i 1) n))))))
  )
)
; define: $bv_umulo_elim
(define $bv_umulo_elim ((n Int :implicit) (b (BitVec n)) (a (BitVec n)))
  (eo::define ((_v0 ($bv_bitwidth (eo::typeof a)))) (eo::define ((_v1 (concat #b0))) (eo::define ((_v2 (_ _v1 (_ (concat a) (eo::to_bin 0 0))))) (eo::define ((_v3 (_ (_ (extract _v0) _v0) (_ (bvmul _v2) (_ (bvmul (_ _v1 (_ (concat b) (eo::to_bin 0 0)))) (eo::nil bvmul (eo::typeof _v2))))))) (eo::define ((_v4 (eo::add _v0 -1))) (eo::ite (eo::eq _v0 1) false (_ (= ($bv_umulo_elim_rec a b (_ (_ (extract _v4) _v4) a) (_ (bvor _v3) (eo::nil bvor (eo::typeof _v3))) 1 _v0)) #b1))))))))
; program: $bv_mk_bitwise_slicing_rec
(program $bv_mk_bitwise_slicing_rec ((n Int) (m Int) (k Int) (bn Bool) (start Int) (f (eo::define ((_v0 (BitVec n))) (-> _v0 (-> _v0 _v0)))) (c (BitVec n)) (a (BitVec n)) (bs (BitVec m)) (b Bool) (end Int))
  :signature ((eo::define ((_v0 (BitVec n))) (-> _v0 (-> _v0 _v0))) (BitVec k) (BitVec k) (BitVec m) Bool Int Int) (BitVec k)
  (
  (($bv_mk_bitwise_slicing_rec f c a bs bn start -1) (eo::define ((_v0 (_ (extract start) 0))) (eo::define ((_v1 (_ _v0 c))) (eo::cons concat (_ (f _v1) (_ (f (_ _v0 a)) (eo::nil f (eo::typeof _v1)))) (eo::to_bin 0 0)))))
  (($bv_mk_bitwise_slicing_rec f c a (_ (@from_bools b) bs) bn start end) (eo::define ((_v0 (eo::add end -1))) (eo::define ((_v1 (_ (extract start) (eo::add end 1)))) (eo::define ((_v2 (_ _v1 c))) (eo::ite (eo::eq b bn) ($bv_mk_bitwise_slicing_rec f c a bs b start _v0) (eo::cons concat (_ (f _v2) (_ (f (_ _v1 a)) (eo::nil f (eo::typeof _v2)))) ($bv_mk_bitwise_slicing_rec f c a bs b end _v0)))))))
  )
)
; define: $bv_is_bitwise_slicing_op
(define $bv_is_bitwise_slicing_op ((n Int :implicit) (f (eo::define ((_v0 (BitVec n))) (-> _v0 (-> _v0 _v0)))))
  (eo::or (eo::eq f bvxor) (eo::eq f bvor)))
; program: $bv_mk_bitwise_slicing
(program $bv_mk_bitwise_slicing ((n Int) (m Int) (f (eo::define ((_v0 (BitVec m))) (-> _v0 (-> _v0 _v0)))) (a1 (BitVec n)) (a2 (BitVec n)))
  :signature ((BitVec n)) (BitVec n)
  (
  (($bv_mk_bitwise_slicing (_ (f a1) a2)) (eo::define ((_v0 (_ (f a1) a2))) (eo::define ((_v1 ($bv_get_first_const_child _v0))) (eo::define ((_v2 (eo::len _v1))) (eo::define ((_v3 (eo::add _v2 -1))) ($singleton_elim (eo::requires (eo::or (eo::eq f bvxor) (eo::eq f bvor)) true ($bv_mk_bitwise_slicing_rec f _v1 ($singleton_elim (eo::list_erase f _v0 _v1)) (eo::list_rev @from_bools ($bv_const_to_bitlist_rec _v1 0 _v2)) (eo::eq (eo::extract _v1 _v3 _v3) #b1) _v3 _v3))))))))
  )
)
; declare: RegLan
(declare-const RegLan Type)
; declare: seq.empty
(declare-parameterized-const seq.empty ((T Type :implicit)) (Seq T))
; define: $seq_empty
(define $seq_empty ((U Type))
  (eo::ite (eo::is_eq U (Seq Char)) "" (_ seq.empty U)))
; declare: str.len
(declare-parameterized-const str.len ((T Type :implicit) ($eo_x_1 (Seq T))) Int)
; declare: str.++
(declare-parameterized-const str.++ ((T Type :implicit) ($eo_x_1 (Seq T)) ($eo_x_2 (Seq T))) (Seq T))
; declare: str.substr
(declare-parameterized-const str.substr ((T Type :implicit) ($eo_x_1 (Seq T)) ($eo_x_2 Int) ($eo_x_3 Int)) (Seq T))
; declare: str.contains
(declare-parameterized-const str.contains ((T Type :implicit) ($eo_x_1 (Seq T)) ($eo_x_2 (Seq T))) Bool)
; declare: str.replace
(declare-parameterized-const str.replace ((T Type :implicit) ($eo_x_1 (Seq T)) ($eo_x_2 (Seq T)) ($eo_x_3 (Seq T))) (Seq T))
; declare: str.indexof
(declare-parameterized-const str.indexof ((T Type :implicit) ($eo_x_1 (Seq T)) ($eo_x_2 (Seq T)) ($eo_x_3 Int)) Int)
; declare: str.at
(declare-parameterized-const str.at ((T Type :implicit) ($eo_x_1 (Seq T)) ($eo_x_2 Int)) (Seq T))
; declare: str.prefixof
(declare-parameterized-const str.prefixof ((T Type :implicit) ($eo_x_1 (Seq T)) ($eo_x_2 (Seq T))) Bool)
; declare: str.suffixof
(declare-parameterized-const str.suffixof ((T Type :implicit) ($eo_x_1 (Seq T)) ($eo_x_2 (Seq T))) Bool)
; declare: str.rev
(declare-parameterized-const str.rev ((T Type :implicit) ($eo_x_1 (Seq T))) (Seq T))
; declare: str.unit
(declare-const str.unit (-> Int (Seq Char)))
; declare: str.update
(declare-parameterized-const str.update ((T Type :implicit) ($eo_x_1 (Seq T)) ($eo_x_2 Int) ($eo_x_3 (Seq T))) (Seq T))
; declare: str.to_lower
(declare-const str.to_lower (eo::define ((_v0 (Seq Char))) (-> _v0 _v0)))
; declare: str.to_upper
(declare-const str.to_upper (eo::define ((_v0 (Seq Char))) (-> _v0 _v0)))
; declare: str.to_code
(declare-const str.to_code (-> (Seq Char) Int))
; declare: str.from_code
(declare-const str.from_code (-> Int (Seq Char)))
; declare: str.is_digit
(declare-const str.is_digit (-> (Seq Char) Bool))
; declare: str.to_int
(declare-const str.to_int (-> (Seq Char) Int))
; declare: str.from_int
(declare-const str.from_int (-> Int (Seq Char)))
; declare: str.<
(declare-const str.< (eo::define ((_v0 (Seq Char))) (-> _v0 (-> _v0 Bool))))
; declare: str.<=
(declare-const str.<= (eo::define ((_v0 (Seq Char))) (-> _v0 (-> _v0 Bool))))
; declare: str.replace_all
(declare-parameterized-const str.replace_all ((T Type :implicit) ($eo_x_1 (Seq T)) ($eo_x_2 (Seq T)) ($eo_x_3 (Seq T))) (Seq T))
; declare: str.replace_re
(declare-const str.replace_re (eo::define ((_v0 (Seq Char))) (-> _v0 (-> RegLan (-> _v0 _v0)))))
; declare: str.replace_re_all
(declare-const str.replace_re_all (eo::define ((_v0 (Seq Char))) (-> _v0 (-> RegLan (-> _v0 _v0)))))
; declare: str.indexof_re
(declare-const str.indexof_re (-> (Seq Char) (-> RegLan (-> Int Int))))
; declare: re.allchar
(declare-const re.allchar RegLan)
; declare: re.none
(declare-const re.none RegLan)
; declare: re.all
(declare-const re.all RegLan)
; declare: str.to_re
(declare-const str.to_re (-> (Seq Char) RegLan))
; declare: re.*
(declare-const re.* (-> RegLan RegLan))
; declare: re.+
(declare-const re.+ (-> RegLan RegLan))
; declare: re.opt
(declare-const re.opt (-> RegLan RegLan))
; declare: re.comp
(declare-const re.comp (-> RegLan RegLan))
; declare: re.range
(declare-const re.range (eo::define ((_v0 (Seq Char))) (-> _v0 (-> _v0 RegLan))))
; declare: re.++
(declare-const re.++ (-> RegLan (-> RegLan RegLan)))
; declare: re.inter
(declare-const re.inter (-> RegLan (-> RegLan RegLan)))
; declare: re.union
(declare-const re.union (-> RegLan (-> RegLan RegLan)))
; declare: re.diff
(declare-const re.diff (-> RegLan (-> RegLan RegLan)))
; declare: re.loop
(declare-const re.loop (-> Int (-> Int (-> RegLan RegLan))))
; declare: str.in_re
(declare-const str.in_re (-> (Seq Char) (-> RegLan Bool)))
; declare: seq.unit
(declare-parameterized-const seq.unit ((T Type :implicit) ($eo_x_1 T)) (Seq T))
; declare: seq.nth
(declare-parameterized-const seq.nth ((T Type :implicit) ($eo_x_1 (Seq T)) ($eo_x_2 Int)) (eo::ite (eo::eq T Char) Int T))
; declare: @re_unfold_pos_component
(declare-const @re_unfold_pos_component (Seq Char))
; declare: @strings_deq_diff
(declare-const @strings_deq_diff Int)
; declare: @strings_stoi_result
(declare-const @strings_stoi_result (-> Int Int))
; declare: @strings_stoi_non_digit
(declare-const @strings_stoi_non_digit Int)
; declare: @strings_itos_result
(declare-const @strings_itos_result (-> Int Int))
; declare: @strings_num_occur
(declare-parameterized-const @strings_num_occur ((T Type :implicit) (s (Seq T)) (t (Seq T))) Int)
; declare: @strings_num_occur_re
(declare-const @strings_num_occur_re Int)
; declare: @strings_occur_index
(declare-parameterized-const @strings_occur_index ((T Type :implicit) (s (Seq T)) (t (Seq T)) ($eo_x_1 Int)) Int)
; declare: @strings_occur_index_re
(declare-const @strings_occur_index_re (-> Int Int))
; declare: @strings_occur_len_re
(declare-const @strings_occur_len_re (-> Int Int))
; declare: @strings_replace_all_result
(declare-parameterized-const @strings_replace_all_result ((T Type :implicit) (t (Seq T) :opaque) ($eo_x_1 Int)) (Seq T))
; declare: @re_first_match_pre
(declare-const @re_first_match_pre (Seq Char))
; declare: @re_first_match
(declare-const @re_first_match (Seq Char))
; declare: @re_first_match_post
(declare-const @re_first_match_post (Seq Char))
; declare: @witness_string_length
(declare-parameterized-const @witness_string_length ((T Type) ($eo_x_1 Int) ($eo_x_2 Int)) T)
; declare: forall
(declare-const forall (-> $eo_List (-> Bool Bool)))
; declare: exists
(declare-const exists (-> $eo_List (-> Bool Bool)))
; program: $get_var_list
(program $get_var_list ((Q (-> $eo_List (-> Bool Bool))) (G Bool) (xs $eo_List))
  :signature (Bool) $eo_List
  (
  (($get_var_list (_ (Q xs) G)) xs)
  )
)
; declare: @quantifiers_skolemize
(declare-parameterized-const @quantifiers_skolemize ((F Bool :opaque) (i Int :opaque)) ($assoc_nil_nth_type $eo_List_cons ($get_var_list F) i))
; declare: @witness_inv_condition
(declare-parameterized-const @witness_inv_condition ((F Bool :opaque)) ($assoc_nil_nth_type $eo_List_cons ($get_var_list F) 0))
; program: $substitute
(program $substitute ((S Type) (U Type) (T Type) (f (-> T U)) (a T) (x S) (y S) (z U))
  :signature (S S U) U
  (
  (($substitute x y (f a)) (_ ($substitute x y f) ($substitute x y a)))
  (($substitute x y x) y)
  (($substitute x y z) z)
  )
)
; program: $contains_subterm
(program $contains_subterm ((S Type) (U Type) (T Type) (f (-> T S)) (a T) (x U) (y S))
  :signature (S U) Bool
  (
  (($contains_subterm x x) true)
  (($contains_subterm (f a) x) (eo::ite ($contains_subterm f x) true ($contains_subterm a x)))
  (($contains_subterm x y) false)
  )
)
; program: $contains_subterm_list
(program $contains_subterm_list ((T Type) (U Type) (x U) (xs $eo_List) (t T))
  :signature (T $eo_List) Bool
  (
  (($contains_subterm_list t (_ ($eo_List_cons x) xs)) (eo::ite ($contains_subterm t x) true ($contains_subterm_list t xs)))
  (($contains_subterm_list t $eo_List_nil) false)
  )
)
; program: $contains_aterm_list
(program $contains_aterm_list ((T Type) (S Type) (f (-> T S)) (a T) (xs $eo_List) (U Type) (x U))
  :signature (T $eo_List) Bool
  (
  (($contains_aterm_list (f a) xs) (eo::ite ($contains_aterm_list f xs) true ($contains_aterm_list a xs)))
  (($contains_aterm_list x xs) (eo::not (eo::is_neg (eo::list_find $eo_List_cons xs x))))
  )
)
; program: $substitute_simul
(program $substitute_simul ((S Type) (T Type) (f (-> T S)) (a T) (ss $eo_List) (xs $eo_List) (x S))
  :signature (S $eo_List $eo_List) S
  (
  (($substitute_simul (f a) xs ss) (_ ($substitute_simul f xs ss) ($substitute_simul a xs ss)))
  (($substitute_simul x xs ss) (eo::define ((_v0 (eo::list_find $eo_List_cons xs x))) (eo::ite (eo::is_neg _v0) x ($assoc_nil_nth $eo_List_cons ss _v0))))
  )
)
; program: $beta_reduce_type
(program $beta_reduce_type ((T Type) (x T) (U Type) (xs $eo_List))
  :signature (Type $eo_List) Type
  (
  (($beta_reduce_type (-> T U) (_ ($eo_List_cons x) xs)) ($beta_reduce_type U xs))
  (($beta_reduce_type T $eo_List_nil) T)
  )
)
; program: $beta_reduce
(program $beta_reduce ((U Type) (u U) (T Type) (x T) (S Type) (t S) (xs $eo_List) (f (-> T U)) (a T) (ss $eo_List))
  :signature ((eo::quote u) (eo::quote ss)) ($beta_reduce_type (eo::typeof u) ss)
  (
  (($beta_reduce (_ (_ (lambda (_ ($eo_List_cons x) xs)) t) a) $eo_List_nil) (eo::define ((_v0 ($substitute x a t))) (eo::ite (eo::eq xs $eo_List_nil) _v0 (_ (lambda xs) _v0))))
  (($beta_reduce (_ (lambda xs) t) ss) ($substitute_simul t xs ss))
  (($beta_reduce (f a) ss) ($beta_reduce f (_ ($eo_List_cons a) ss)))
  )
)
; declare: is
(declare-parameterized-const is ((C Type :implicit) ($eo_x_1 C) (D Type :implicit) ($eo_x_2 D)) Bool)
; declare: update
(declare-parameterized-const update ((S Type :implicit) ($eo_x_1 S) (D Type :implicit) ($eo_x_2 D) (T Type :implicit) ($eo_x_3 T)) D)
; declare: UnitTuple
(declare-const UnitTuple Type)
; declare: Tuple
(declare-const Tuple (-> Type (-> Type Type)))
; declare: tuple.unit
(declare-const tuple.unit UnitTuple)
; declare: tuple
(declare-parameterized-const tuple ((T Type :implicit) ($eo_x_1 T) (U Type :implicit) ($eo_x_2 U)) (eo::cons Tuple T U))
; declare: tuple.select
(declare-parameterized-const tuple.select ((i Int) (T Type :implicit) ($eo_x_1 T)) (eo::list_nth Tuple T i))
; declare: tuple.update
(declare-parameterized-const tuple.update ((i Int) (T Type :implicit) ($eo_x_1 T) ($eo_x_2 (eo::list_nth Tuple T i))) T)
; declare: Set
(declare-const Set (-> Type Type))
; declare: set.empty
(declare-parameterized-const set.empty ((T Type :implicit)) (Set T))
; declare: set.singleton
(declare-parameterized-const set.singleton ((T Type :implicit) ($eo_x_1 T)) (Set T))
; declare: set.union
(declare-parameterized-const set.union ((T Type :implicit) ($eo_x_1 (Set T)) ($eo_x_2 (Set T))) (Set T))
; declare: set.inter
(declare-parameterized-const set.inter ((T Type :implicit) ($eo_x_1 (Set T)) ($eo_x_2 (Set T))) (Set T))
; declare: set.minus
(declare-parameterized-const set.minus ((T Type :implicit) ($eo_x_1 (Set T)) ($eo_x_2 (Set T))) (Set T))
; declare: set.member
(declare-parameterized-const set.member ((T Type :implicit) ($eo_x_1 T) ($eo_x_2 (Set T))) Bool)
; declare: set.subset
(declare-parameterized-const set.subset ((T Type :implicit) ($eo_x_1 (Set T)) ($eo_x_2 (Set T))) Bool)
; declare: set.choose
(declare-parameterized-const set.choose ((T Type :implicit) ($eo_x_1 (Set T))) T)
; declare: set.is_empty
(declare-parameterized-const set.is_empty ((T Type :implicit) ($eo_x_1 (Set T))) Bool)
; declare: set.is_singleton
(declare-parameterized-const set.is_singleton ((T Type :implicit) ($eo_x_1 (Set T))) Bool)
; declare: set.insert
(declare-parameterized-const set.insert (($eo_x_1 $eo_List) (T Type :implicit) ($eo_x_2 (Set T))) (Set T))
; declare: @sets_deq_diff
(declare-parameterized-const @sets_deq_diff ((T Type :implicit) (s (Set T) :opaque) (t (Set T) :opaque)) T)
; program: $dt_get_constructors
(program $dt_get_constructors ((U Type) (T1 Type) (T2 Type) (T Type) (DC (-> Type Type)) (D Type))
  :signature (U) $eo_List
  (
  (($dt_get_constructors (_ (Tuple T1) T2)) (_ ($eo_List_cons tuple) $eo_List_nil))
  (($dt_get_constructors UnitTuple) (_ ($eo_List_cons tuple.unit) $eo_List_nil))
  (($dt_get_constructors (DC T)) ($dt_get_constructors DC))
  (($dt_get_constructors D) (eo::dt_constructors D))
  )
)
; define: $dt_inst_cons_of
(define $dt_inst_cons_of ((T Type :implicit) (c T) (D Type))
  ($assoc_nil_nth $eo_List_cons (eo::dt_constructors D) (eo::list_find $eo_List_cons ($dt_get_constructors D) c)))
; program: $tuple_get_selectors_rec
(program $tuple_get_selectors_rec ((T1 Type) (T2 Type) (n Int))
  :signature (Type Int) $eo_List
  (
  (($tuple_get_selectors_rec UnitTuple n) $eo_List_nil)
  (($tuple_get_selectors_rec (_ (Tuple T1) T2) n) (eo::cons $eo_List_cons (tuple.select n) ($tuple_get_selectors_rec T2 (eo::add n 1))))
  )
)
; program: $dt_get_selectors
(program $dt_get_selectors ((T Type) (T1 Type) (T2 Type) (D Type) (c Type))
  :signature (Type T) $eo_List
  (
  (($dt_get_selectors (_ (Tuple T1) T2) tuple) ($tuple_get_selectors_rec (_ (Tuple T1) T2) 0))
  (($dt_get_selectors UnitTuple tuple.unit) $eo_List_nil)
  (($dt_get_selectors D c) (eo::dt_selectors c))
  )
)
; program: $dt_get_selectors_of_app
(program $dt_get_selectors_of_app ((U Type) (T Type) (f (-> U T)) (a U))
  :signature (Type T) $eo_List
  (
  (($dt_get_selectors_of_app T (f a)) ($dt_get_selectors_of_app T f))
  (($dt_get_selectors_of_app T a) ($dt_get_selectors T a))
  )
)
; define: $dt_is_cons
(define $dt_is_cons ((T Type :implicit) (t T))
  (eo::ite (eo::is_eq t tuple) true (eo::is_ok (eo::dt_selectors t))))
; program: $dt_arg_list
(program $dt_arg_list ((T Type) (V Type) (t1 V) (W Type) (t2 W) (t T))
  :signature (T) $eo_List
  (
  (($dt_arg_list (_ (tuple t1) t2)) (eo::cons $eo_List_cons t1 ($dt_arg_list t2)))
  (($dt_arg_list t) ($get_arg_list_rec t $eo_List_nil))
  )
)
; define: $dt_arg_nth
(define $dt_arg_nth ((n Int) (T Type :implicit) (t T))
  ($assoc_nil_nth $eo_List_cons ($dt_arg_list t) n))
; program: $dt_eq_cons
(program $dt_eq_cons ((T Type) (V Type) (U Type) (a U) (W Type) (f (-> U W)) (ct T) (cs V))
  :signature (T V) Bool
  (
  (($dt_eq_cons (f a) cs) ($dt_eq_cons f cs))
  (($dt_eq_cons ct (f a)) ($dt_eq_cons ct f))
  (($dt_eq_cons ct cs) (eo::requires (eo::ite (eo::is_eq ct tuple) true (eo::is_ok (eo::dt_selectors ct))) true (eo::ite (eo::eq ct cs) true (eo::requires (eo::ite (eo::is_eq cs tuple) true (eo::is_ok (eo::dt_selectors cs))) true false))))
  )
)
; program: $tuple_nth
(program $tuple_nth ((T Type) (S Type) (s S) (U Type) (ts U) (n Int))
  :signature (T (eo::quote n)) (eo::list_nth Tuple T n)
  (
  (($tuple_nth (_ (tuple s) ts) 0) s)
  (($tuple_nth (_ (tuple s) ts) n) ($tuple_nth ts (eo::add n -1)))
  )
)
; fwd-decl: $are_distinct_terms_list
(program $are_distinct_terms_list ()
  :signature ($eo_List Type) Bool
)
; define: $are_distinct_terms
(define $are_distinct_terms ((T Type :implicit) (s T) (t T))
  (eo::ite (eo::eq t s) false ($are_distinct_terms_list (_ ($eo_List_cons t) (_ ($eo_List_cons s) $eo_List_nil)) (eo::typeof t))))
; program: $some_pairwise_distinct_term
(program $some_pairwise_distinct_term ((U Type) (s U) (t U) (ts $eo_List) (ss $eo_List))
  :signature ($eo_List $eo_List) Bool
  (
  (($some_pairwise_distinct_term (_ ($eo_List_cons t) ts) (_ ($eo_List_cons s) ss)) (eo::ite (eo::ite (eo::eq t s) false ($are_distinct_terms_list (_ ($eo_List_cons t) (_ ($eo_List_cons s) $eo_List_nil)) (eo::typeof t))) true ($some_pairwise_distinct_term ts ss)))
  (($some_pairwise_distinct_term $eo_List_nil $eo_List_nil) false)
  )
)
; program: $set_is_not_subset
(program $set_is_not_subset ((T Type) (e2 T) (ss (Set T)) (e1 T) (ts (Set T)) (s (Set T)))
  :signature ((Set T) (Set T)) Bool
  (
  (($set_is_not_subset (_ set.empty (Set T)) s) false)
  (($set_is_not_subset (set.singleton e1) (_ set.empty (Set T))) true)
  (($set_is_not_subset (set.singleton e1) (set.singleton e2)) (eo::ite (eo::eq e1 e2) false ($are_distinct_terms_list (_ ($eo_List_cons e1) (_ ($eo_List_cons e2) $eo_List_nil)) (eo::typeof e1))))
  (($set_is_not_subset (set.singleton e1) (_ (set.union (set.singleton e2)) ss)) (eo::ite (eo::ite (eo::eq e1 e2) false ($are_distinct_terms_list (_ ($eo_List_cons e1) (_ ($eo_List_cons e2) $eo_List_nil)) (eo::typeof e1))) ($set_is_not_subset (set.singleton e1) ss) false))
  (($set_is_not_subset (_ (set.union (set.singleton e1)) ts) s) (eo::ite ($set_is_not_subset (set.singleton e1) s) true ($set_is_not_subset ts s)))
  )
)
; program: $seq_distinct_terms
(program $seq_distinct_terms ((T Type) (e2 T) (e1 T) (ts (Seq T)) (ss (Seq T)) (t (Seq T)) (s (Seq T)))
  :signature ((Seq T) (Seq T)) Bool
  (
  (($seq_distinct_terms (seq.unit e1) s) (eo::define ((_v0 (seq.unit e1))) ($seq_distinct_terms (_ (str.++ _v0) (eo::nil str.++ (eo::typeof _v0))) s)))
  (($seq_distinct_terms t (seq.unit e2)) (eo::define ((_v0 (seq.unit e2))) ($seq_distinct_terms t (_ (str.++ _v0) (eo::nil str.++ (eo::typeof _v0))))))
  (($seq_distinct_terms (_ (str.++ (seq.unit e1)) ts) (_ (str.++ (seq.unit e2)) ss)) (eo::ite (eo::ite (eo::eq e1 e2) false ($are_distinct_terms_list (_ ($eo_List_cons e1) (_ ($eo_List_cons e2) $eo_List_nil)) (eo::typeof e1))) true ($seq_distinct_terms ts ss)))
  (($seq_distinct_terms t t) false)
  (($seq_distinct_terms t s) true)
  )
)
; program: $dt_distinct_terms_rec
(program $dt_distinct_terms_rec ((T Type) (V Type) (U Type) (W Type) (f (-> U W)) (a U) (ct T) (l1 $eo_List) (l2 $eo_List) (cs V))
  :signature (T V $eo_List $eo_List) Bool
  (
  (($dt_distinct_terms_rec (f a) cs l1 l2) ($dt_distinct_terms_rec f cs (eo::cons $eo_List_cons a l1) l2))
  (($dt_distinct_terms_rec ct (f a) l1 l2) ($dt_distinct_terms_rec ct f l1 (eo::cons $eo_List_cons a l2)))
  (($dt_distinct_terms_rec ct cs l1 l2) (eo::ite (eo::eq (eo::ite (eo::is_eq ct tuple) true (eo::is_ok (eo::dt_selectors ct))) true) (eo::ite (eo::eq ct cs) ($some_pairwise_distinct_term l1 l2) (eo::eq (eo::ite (eo::is_eq cs tuple) true (eo::is_ok (eo::dt_selectors cs))) true)) false))
  )
)
; define: $dt_distinct_terms
(define $dt_distinct_terms ((T Type :implicit) (s T) (t T))
  ($dt_distinct_terms_rec t s $eo_List_nil $eo_List_nil))
; program: $are_distinct_terms_type
(program $are_distinct_terms_type ((n Int) (U Type) (ss (Set U)) (st (Set U)) (sst (Seq U)) (sss (Seq U)) (T Type) (t T) (s T))
  :signature (T T Type) Bool
  (
  (($are_distinct_terms_type t t T) false)
  (($are_distinct_terms_type t s Int) (eo::and (eo::is_z t) (eo::is_z s)))
  (($are_distinct_terms_type t s Real) (eo::and (eo::is_q t) (eo::is_q s)))
  (($are_distinct_terms_type t s (Seq Char)) (eo::and (eo::is_str t) (eo::is_str s)))
  (($are_distinct_terms_type t s (BitVec n)) (eo::and (eo::is_bin t) (eo::is_bin s)))
  (($are_distinct_terms_type t s Bool) (eo::and (eo::is_bool t) (eo::is_bool s)))
  (($are_distinct_terms_type st ss (Set U)) (eo::or ($set_is_not_subset st ss) ($set_is_not_subset ss st)))
  (($are_distinct_terms_type sst sss (Seq U)) ($seq_distinct_terms sst sss))
  (($are_distinct_terms_type t s T) ($dt_distinct_terms_rec t s $eo_List_nil $eo_List_nil))
  )
)
; program: $are_distinct_terms_list_rec
(program $are_distinct_terms_list_rec ((T Type) (s T) (xs $eo_List) (t T))
  :signature (T $eo_List Type) Bool
  (
  (($are_distinct_terms_list_rec t (_ ($eo_List_cons s) xs) T) (eo::ite ($are_distinct_terms_type t s T) ($are_distinct_terms_list_rec t xs T) false))
  (($are_distinct_terms_list_rec t $eo_List_nil T) true)
  )
)
; program: $are_distinct_terms_list
(program $are_distinct_terms_list ((T Type) (t T) (xs $eo_List))
  :signature ($eo_List Type) Bool
  (
  (($are_distinct_terms_list $eo_List_nil T) true)
  (($are_distinct_terms_list (_ ($eo_List_cons t) xs) T) (eo::ite ($are_distinct_terms_list_rec t xs T) ($are_distinct_terms_list xs T) false))
  )
)
; program: $str_is_empty
(program $str_is_empty ((U Type) (x (Seq U)))
  :signature ((Seq U)) Bool
  (
  (($str_is_empty (_ seq.empty (Seq U))) true)
  (($str_is_empty "") true)
  (($str_is_empty x) false)
  )
)
; program: $seq_element_of_unit
(program $seq_element_of_unit ((U Type) (x U))
  :signature ((Seq U)) U
  (
  (($seq_element_of_unit (seq.unit x)) x)
  )
)
; program: $str_value_len
(program $str_value_len ((T Type) (ss (Seq T)) (e T) (s (Seq T)))
  :signature ((Seq T)) Int
  (
  (($str_value_len (_ (str.++ (seq.unit e)) ss)) (eo::add 1 ($str_value_len ss)))
  (($str_value_len (_ seq.empty (Seq T))) 0)
  (($str_value_len (seq.unit e)) 1)
  (($str_value_len s) (eo::requires (eo::is_str s) true (eo::len s)))
  )
)
; program: $char_type_of
(program $char_type_of ((U Type))
  :signature (Type) Type
  (
  (($char_type_of (Seq U)) U)
  )
)
; define: $str_concat
(define $str_concat ((T Type :implicit) (y (Seq T)) (x (Seq T)))
  (eo::list_concat str.++ x y))
; define: $str_head
(define $str_head ((T Type :implicit) (x (Seq T)))
  (eo::list_nth str.++ x 0))
; define: $str_cons
(define $str_cons ((T Type :implicit) (y (Seq T)) (x (Seq T)))
  (eo::cons str.++ x y))
; define: $str_is_code_point
(define $str_is_code_point ((n Int))
  (eo::ite (eo::is_z n) (eo::ite (eo::ite (eo::eq 196608 n) true (eo::gt 196608 n)) (eo::not (eo::is_neg n)) false) false))
; define: $str_self_if_empty
(define $str_self_if_empty ((T Type :implicit) (t T))
  (eo::define ((_v0 (eo::typeof t))) (eo::requires t (eo::ite (eo::is_eq _v0 (Seq Char)) "" (_ seq.empty _v0)) t)))
; program: $str_fixed_len_re
(program $str_fixed_len_re ((s2 (Seq Char)) (s1 (Seq Char)) (r1 RegLan) (r RegLan))
  :signature (RegLan) Int
  (
  (($str_fixed_len_re (_ (re.++ r) r1)) (eo::add ($str_fixed_len_re r) ($str_fixed_len_re r1)))
  (($str_fixed_len_re re.allchar) 1)
  (($str_fixed_len_re (_ (re.range s1) s2)) 1)
  (($str_fixed_len_re (str.to_re s1)) (eo::len s1))
  (($str_fixed_len_re (_ (re.union r) r1)) (eo::define ((_v0 ($str_fixed_len_re r))) (eo::ite (eo::eq r1 re.none) _v0 (eo::requires ($str_fixed_len_re r1) _v0 _v0))))
  (($str_fixed_len_re (_ (re.inter r) r1)) (eo::define ((_v0 ($str_fixed_len_re r))) (eo::ite (eo::eq r1 re.all) _v0 (eo::requires ($str_fixed_len_re r1) _v0 _v0))))
  )
)
; define: $str_is_char_range
(define $str_is_char_range ((s2 (Seq Char)) (s1 (Seq Char)))
  (eo::and (eo::is_eq (eo::len s1) 1) (eo::is_eq (eo::len s2) 1)))
; program: $str_membership_str
(program $str_membership_str ((r RegLan) (s (Seq Char)))
  :signature (Bool) (Seq Char)
  (
  (($str_membership_str (_ (str.in_re s) r)) s)
  )
)
; program: $str_membership_re
(program $str_membership_re ((s (Seq Char)) (r RegLan))
  :signature (Bool) RegLan
  (
  (($str_membership_re (_ (str.in_re s) r)) r)
  )
)
; declare: @re.null
(declare-const @re.null RegLan)
; program: $str_eval_str_in_re_rec
(program $str_eval_str_in_re_rec ((rr RegLan) (sr (Seq Char)) (s1 (Seq Char)) (s2 (Seq Char)) (s (Seq Char)) (n Int) (r1 RegLan) (r2 RegLan))
  :signature ((Seq Char) Int RegLan RegLan) Bool
  (
  (($str_eval_str_in_re_rec s 0 (_ (re.++ r1) rr) @re.null) ($str_eval_str_in_re_rec s 0 r1 rr))
  (($str_eval_str_in_re_rec s 0 (_ (re.inter r1) rr) @re.null) (eo::ite ($str_eval_str_in_re_rec s 0 r1 @re.null) ($str_eval_str_in_re_rec s 0 rr @re.null) false))
  (($str_eval_str_in_re_rec s 0 (_ (re.union r1) rr) @re.null) (eo::ite ($str_eval_str_in_re_rec s 0 r1 @re.null) true ($str_eval_str_in_re_rec s 0 rr @re.null)))
  (($str_eval_str_in_re_rec s 0 (re.* r1) @re.null) (eo::ite (eo::eq s "") true ($str_eval_str_in_re_rec s 1 r1 (re.* r1))))
  (($str_eval_str_in_re_rec s 0 (str.to_re sr) @re.null) (eo::eq s sr))
  (($str_eval_str_in_re_rec s 0 (_ (re.range s1) s2) @re.null) (eo::define ((_v0 (eo::to_z s))) (eo::define ((_v1 (eo::to_z s2))) (eo::define ((_v2 (eo::to_z s1))) (eo::requires (eo::and (eo::is_eq (eo::len s1) 1) (eo::is_eq (eo::len s2) 1)) true (eo::ite (eo::eq (eo::len s) 1) (eo::and (eo::ite (eo::eq _v0 _v2) true (eo::gt _v0 _v2)) (eo::ite (eo::eq _v1 _v0) true (eo::gt _v1 _v0))) false))))))
  (($str_eval_str_in_re_rec s 0 re.allchar @re.null) (eo::eq (eo::len s) 1))
  (($str_eval_str_in_re_rec s 0 re.all @re.null) true)
  (($str_eval_str_in_re_rec s 0 re.none @re.null) false)
  (($str_eval_str_in_re_rec s 0 (re.comp r1) @re.null) (eo::not ($str_eval_str_in_re_rec s 0 r1 @re.null)))
  (($str_eval_str_in_re_rec s n r1 r2) (eo::define ((_v0 (eo::len s))) (eo::ite (eo::ite ($str_eval_str_in_re_rec (eo::extract s 0 (eo::add n -1)) 0 r1 @re.null) (eo::ite ($str_eval_str_in_re_rec (eo::extract s n _v0) 0 r2 @re.null) true false) false) true (eo::ite (eo::eq n _v0) false ($str_eval_str_in_re_rec s (eo::add n 1) r1 r2)))))
  )
)
; define: $str_eval_str_in_re
(define $str_eval_str_in_re ((r RegLan) (s (Seq Char)))
  (eo::ite (eo::is_str s) ($str_eval_str_in_re_rec s 0 r @re.null) (_ (str.in_re s) r)))
; program: $str_first_match_rec_smallest
(program $str_first_match_rec_smallest ((s (Seq Char)) (r RegLan) (m Int) (lens Int))
  :signature ((Seq Char) RegLan Int Int) Int
  (
  (($str_first_match_rec_smallest s r m lens) (eo::define ((_v0 (eo::extract s 0 (eo::add m -1)))) (eo::ite (eo::ite (eo::is_str _v0) ($str_eval_str_in_re_rec _v0 0 r @re.null) (_ (str.in_re _v0) r)) m (eo::requires (eo::eq m lens) false ($str_first_match_rec_smallest s r (eo::add m 1) lens)))))
  )
)
; program: $str_first_match_rec
(program $str_first_match_rec ((s (Seq Char)) (r RegLan) (rs RegLan) (n Int) (lens Int))
  :signature ((Seq Char) RegLan RegLan Int Int) (_ (@Pair Int) Int)
  (
  (($str_first_match_rec s r rs n lens) (eo::define ((_v0 (eo::add lens -1))) (eo::ite (eo::ite (eo::is_str s) ($str_eval_str_in_re_rec s 0 rs @re.null) (_ (str.in_re s) rs)) (_ (@pair n) (eo::add n ($str_first_match_rec_smallest s r 0 lens))) (eo::ite (eo::eq lens 0) (_ (@pair -1) -1) ($str_first_match_rec (eo::extract s 1 _v0) r rs (eo::add n 1) _v0)))))
  )
)
; define: $str_first_match
(define $str_first_match ((r RegLan) (s (Seq Char)))
  (eo::requires (eo::is_str s) true ($str_first_match_rec s r (_ (re.++ r) (_ (re.++ re.all) (str.to_re ""))) 0 (eo::len s))))
; define: $str_prefix
(define $str_prefix ((n Int) (U Type :implicit) (s (Seq U)))
  (_ (_ (str.substr s) 0) n))
; define: $str_suffix_rem
(define $str_suffix_rem ((n Int) (U Type :implicit) (s (Seq U)))
  (_ (_ (str.substr s) n) (_ (- (str.len s)) n)))
; define: $str_prefix_rem
(define $str_prefix_rem ((n Int) (U Type :implicit) (s (Seq U)))
  (_ (_ (str.substr s) 0) (_ (- (str.len s)) n)))
; define: $str_suffix
(define $str_suffix ((n Int) (U Type :implicit) (s (Seq U)))
  (_ (_ (str.substr s) (_ (- (str.len s)) n)) n))
; program: $str_unify_split
(program $str_unify_split ((U Type) (s (Seq U)) (t (Seq U)))
  :signature ((Seq U) (Seq U) Bool) (Seq U)
  (
  (($str_unify_split t s true) (eo::define ((_v0 (str.len t))) (eo::define ((_v1 (str.len s))) (_ (_ (ite (_ (>= _v0) _v1)) (_ (_ (str.substr t) 0) (_ (- _v0) _v1))) (_ (_ (str.substr s) 0) (_ (- _v1) _v0))))))
  (($str_unify_split t s false) (eo::define ((_v0 (str.len t))) (eo::define ((_v1 (str.len s))) (_ (_ (ite (_ (>= _v0) _v1)) (_ (_ (str.substr t) _v1) (_ (- _v0) _v1))) (_ (_ (str.substr s) _v0) (_ (- _v1) _v0))))))
  )
)
; define: $str_first_ctn_pre
(define $str_first_ctn_pre ((U Type :implicit) (t (Seq U)) (s (Seq U)))
  (_ (_ (str.substr s) 0) (_ (_ (str.indexof s) t) 0)))
; define: $str_first_ctn_post
(define $str_first_ctn_post ((U Type :implicit) (t (Seq U)) (s (Seq U)))
  (eo::define ((_v0 (str.substr s))) (eo::define ((_v1 (_ (+ (str.len (_ @purify (_ (_ _v0 0) (_ (_ (str.indexof s) t) 0))))) (_ (+ (str.len t)) 0)))) (_ (_ _v0 _v1) (_ (- (str.len s)) _v1)))))
; define: $str_rev
(define $str_rev ((U Type :implicit) (t (Seq U)) (rev Bool))
  (eo::ite rev (eo::list_rev str.++ t) t))
; define: $str_re_rev
(define $str_re_rev ((t RegLan) (rev Bool))
  (eo::ite rev (eo::list_rev re.++ t) t))
; program: $str_nary_intro
(program $str_nary_intro ((T Type) (ss (Seq T)) (t (Seq T)))
  :signature ((Seq T)) (Seq T)
  (
  (($str_nary_intro (_ (str.++ t) ss)) (_ (str.++ t) ss))
  (($str_nary_intro t) (eo::define ((_v0 (eo::typeof t))) (eo::define ((_v1 (eo::ite (eo::is_eq _v0 (Seq Char)) "" (_ seq.empty _v0)))) (eo::ite (eo::eq t _v1) t (eo::cons str.++ t _v1)))))
  )
)
; program: $re_nary_intro
(program $re_nary_intro ((ss RegLan) (t RegLan))
  :signature (RegLan) RegLan
  (
  (($re_nary_intro (_ (re.++ t) ss)) (_ (re.++ t) ss))
  (($re_nary_intro (str.to_re "")) (str.to_re ""))
  (($re_nary_intro t) (eo::cons re.++ t (str.to_re "")))
  )
)
; program: $str_nary_elim
(program $str_nary_elim ((T Type) (ss (Seq T)) (t (Seq T)))
  :signature ((Seq T)) (Seq T)
  (
  (($str_nary_elim (_ (str.++ t) ss)) (eo::define ((_v0 (eo::typeof t))) (eo::ite (eo::eq ss (eo::ite (eo::is_eq _v0 (Seq Char)) "" (_ seq.empty _v0))) t (_ (str.++ t) ss))))
  (($str_nary_elim t) (eo::define ((_v0 (eo::typeof t))) (eo::requires t (eo::ite (eo::is_eq _v0 (Seq Char)) "" (_ seq.empty _v0)) t)))
  )
)
; program: $re_nary_elim
(program $re_nary_elim ((ss RegLan) (t RegLan))
  :signature (RegLan) RegLan
  (
  (($re_nary_elim (_ (re.++ t) ss)) (eo::ite (eo::eq ss (str.to_re "")) t (_ (re.++ t) ss)))
  (($re_nary_elim t) t)
  )
)
; define: $str_reduction_pred_case_conv
(define $str_reduction_pred_case_conv ((isLower Bool) (x (Seq Char)) (k (Seq Char)))
  (eo::define ((_v0 (eo::var "@var.str_index" Int))) (eo::define ((_v1 (str.to_code (_ (_ (str.substr x) _v0) 1)))) (eo::define ((_v2 (+ _v1))) (eo::define ((_v3 (<= _v1))) (eo::define ((_v4 (str.len k))) (_ (and (_ (= (str.len x)) _v4)) (_ (and (_ (forall (_ ($eo_List_cons _v0) $eo_List_nil)) (_ (or (not (_ (>= _v0) 0))) (_ (or (not (_ (< _v0) _v4))) (_ (or (_ (= (str.to_code (_ (_ (str.substr k) _v0) 1))) (eo::ite isLower (_ (_ (ite (_ (and (_ (<= 65) _v1)) (_ (and (_ _v3 90)) true))) (_ _v2 (_ (+ 32) 0))) _v1) (_ (_ (ite (_ (and (_ (<= 97) _v1)) (_ (and (_ _v3 122)) true))) (_ _v2 (_ (+ -32) 0))) _v1)))) false))))) true))))))))
; program: $str_reduction_pred
(program $str_reduction_pred ((T Type) (m Int) (U Type) (z (Seq U)) (y (Seq U)) (n Int) (r RegLan) (t (Seq Char)) (s (Seq Char)) (x (Seq U)))
  :signature (T) Bool
  (
  (($str_reduction_pred (_ (str.contains x) y)) (eo::define ((_v0 (str.len y))) (eo::define ((_v1 (eo::var "@var.str_index" Int))) (_ (= (_ @purify (_ (str.contains x) y))) (not (_ (forall (_ ($eo_List_cons _v1) $eo_List_nil)) (_ (or (not (_ (>= _v1) 0))) (_ (or (not (_ (<= _v1) (_ (- (str.len x)) _v0)))) (_ (or (not (_ (= (_ (_ (str.substr x) _v1) _v0)) y))) false)))))))))
  (($str_reduction_pred (_ (_ (str.substr x) n) m)) (eo::define ((_v0 (eo::typeof x))) (eo::define ((_v1 (str.substr x))) (eo::define ((_v2 (_ @purify (_ (_ _v1 n) m)))) (eo::define ((_v3 (_ (+ n) (_ (+ m) 0)))) (eo::define ((_v4 (str.len x))) (eo::define ((_v5 (_ (- _v4) _v3))) (eo::define ((_v6 (_ @purify (_ (_ _v1 _v3) _v5)))) (eo::define ((_v7 (= (str.len _v6)))) (eo::define ((_v8 (_ @purify (_ (_ _v1 0) n)))) (_ (_ (ite (_ (and (_ (>= n) 0)) (_ (and (_ (> _v4) n)) (_ (and (_ (> m) 0)) true)))) (_ (and (_ (= x) (_ (str.++ _v8) (_ (str.++ _v2) (_ (str.++ _v6) (eo::nil str.++ (eo::typeof _v8))))))) (_ (and (_ (= (str.len _v8)) n)) (_ (and (_ (or (_ _v7 _v5)) (_ (or (_ _v7 0)) false))) (_ (and (_ (<= (str.len _v2)) m)) true))))) (_ (= _v2) (eo::ite (eo::is_eq _v0 (Seq Char)) "" (_ seq.empty _v0))))))))))))))
  (($str_reduction_pred (_ (_ (str.indexof x) y) n)) (eo::define ((_v0 (str.len x))) (eo::define ((_v1 (_ (_ (str.substr x) n) (_ (- _v0) n)))) (eo::define ((_v2 (str.substr _v1))) (eo::define ((_v3 (_ @purify (_ (_ _v2 0) (_ (_ (str.indexof _v1) y) 0))))) (eo::define ((_v4 (+ (str.len _v3)))) (eo::define ((_v5 (= (_ @purify (_ (_ (str.indexof x) y) n))))) (eo::define ((_v6 (eo::nil str.++ (eo::typeof _v3)))) (eo::define ((_v7 (str.len y))) (eo::define ((_v8 (str.++ _v3))) (eo::define ((_v9 (_ _v4 (_ (+ _v7) 0)))) (eo::define ((_v10 (eo::typeof x))) (_ (_ (ite (_ (or (not (_ (str.contains _v1) y))) (_ (or (_ (> n) _v0)) (_ (or (_ (> 0) n)) false)))) (_ _v5 -1)) (_ (_ (ite (_ (= y) (eo::ite (eo::is_eq _v10 (Seq Char)) "" (_ seq.empty _v10)))) (_ _v5 n)) (_ (and (_ (= _v1) (_ _v8 (_ (str.++ y) (_ (str.++ (_ @purify (_ (_ _v2 _v9) (_ (- (str.len _v1)) _v9)))) _v6))))) (_ (and (not (_ (str.contains (_ _v8 (_ (str.++ (_ (_ (str.substr y) 0) (_ (- _v7) 1))) _v6))) y))) (_ (and (_ _v5 (_ (+ n) (_ _v4 0)))) true)))))))))))))))))
  (($str_reduction_pred (_ (_ (str.replace x) y) z)) (eo::define ((_v0 (= (_ @purify (_ (_ (str.replace x) y) z))))) (eo::define ((_v1 (str.substr x))) (eo::define ((_v2 (_ @purify (_ (_ _v1 0) (_ (_ (str.indexof x) y) 0))))) (eo::define ((_v3 (eo::nil str.++ (eo::typeof _v2)))) (eo::define ((_v4 (str.len y))) (eo::define ((_v5 (str.++ _v2))) (eo::define ((_v6 (_ (+ (str.len _v2)) (_ (+ _v4) 0)))) (eo::define ((_v7 (_ (str.++ (_ @purify (_ (_ _v1 _v6) (_ (- (str.len x)) _v6)))) _v3))) (eo::define ((_v8 (str.++ z))) (eo::define ((_v9 (eo::typeof y))) (_ (_ (ite (_ (= y) (eo::ite (eo::is_eq _v9 (Seq Char)) "" (_ seq.empty _v9)))) (_ _v0 (_ _v8 (_ (str.++ x) (eo::nil str.++ (eo::typeof z)))))) (_ (_ (ite (_ (str.contains x) y)) (_ (and (_ (= x) (_ _v5 (_ (str.++ y) _v7)))) (_ (and (_ _v0 (_ _v5 (_ _v8 _v7)))) (_ (and (not (_ (str.contains (_ _v5 (_ (str.++ (_ (_ (str.substr y) 0) (_ (- _v4) 1))) _v3))) y))) true)))) (_ _v0 x))))))))))))))
  (($str_reduction_pred (str.from_int n)) (eo::define ((_v0 (_ @purify (str.from_int n)))) (eo::define ((_v1 (eo::var "@var.str_index" Int))) (eo::define ((_v2 (_ @strings_itos_result n))) (eo::define ((_v3 (_ _v2 (_ (+ _v1) (_ (+ 1) 0))))) (eo::define ((_v4 (>= n))) (eo::define ((_v5 (_ (- (str.to_code (_ (_ (str.substr _v0) _v1) 1))) 48))) (eo::define ((_v6 (str.len _v0))) (_ (_ (ite (_ _v4 0)) (_ (and (_ (>= _v6) 1)) (_ (and (_ (= n) (_ _v2 _v6))) (_ (and (_ (= 0) (_ _v2 0))) (_ (and (_ (forall (_ ($eo_List_cons _v1) $eo_List_nil)) (_ (or (not (_ (>= _v1) 0))) (_ (or (not (_ (< _v1) _v6))) (_ (or (_ (and (_ (= _v3) (_ (+ _v5) (_ (+ (_ (* 10) (_ (* (_ _v2 _v1)) 1))) 0)))) (_ (and (_ (and (_ (>= _v5) (_ (_ (ite (_ (and (_ (= _v1) 0)) (_ (and (_ (> _v6) 1)) true))) 1) 0))) (_ (and (_ (< _v5) 10)) true))) (_ (and (_ _v4 _v3)) true)))) false))))) true))))) (_ (= _v0) ""))))))))))
  (($str_reduction_pred (str.to_int s)) (eo::define ((_v0 (eo::var "@var.str_index" Int))) (eo::define ((_v1 (_ @strings_stoi_result s))) (eo::define ((_v2 (_ _v1 (_ (+ _v0) (_ (+ 1) 0))))) (eo::define ((_v3 (_ @purify (str.to_int s)))) (eo::define ((_v4 (str.substr s))) (eo::define ((_v5 (_ (- (str.to_code (_ (_ _v4 _v0) 1))) 48))) (eo::define ((_v6 (str.len s))) (eo::define ((_v7 (= _v3))) (eo::define ((_v8 (_ @strings_stoi_non_digit s))) (eo::define ((_v9 (_ (- (str.to_code (_ (_ _v4 _v8) 1))) 48))) (_ (_ (ite (_ (< _v3) 0)) (_ (and (_ _v7 -1)) (_ (and (_ (or (_ (= s) "")) (_ (or (_ (and (_ (>= _v8) 0)) (_ (and (_ (< _v8) _v6)) (_ (and (_ (or (_ (< _v9) 0)) (_ (or (_ (>= _v9) 10)) false))) true)))) false))) true))) (_ (and (_ _v7 (_ _v1 _v6))) (_ (and (_ (= 0) (_ _v1 0))) (_ (and (_ (> _v6) 0)) (_ (and (_ (forall (_ ($eo_List_cons _v0) $eo_List_nil)) (_ (or (not (_ (>= _v0) 0))) (_ (or (not (_ (< _v0) _v6))) (_ (or (_ (and (_ (= _v2) (_ (+ _v5) (_ (+ (_ (* 10) (_ (* (_ _v1 _v0)) 1))) 0)))) (_ (and (_ (and (_ (>= _v5) 0)) (_ (and (_ (< _v5) 10)) true))) (_ (and (_ (>= _v3) _v2)) true)))) false))))) true))))))))))))))))
  (($str_reduction_pred (_ (seq.nth x) n)) (eo::define ((_v0 (_ (+ n) (_ (+ 1) 0)))) (eo::define ((_v1 (str.len x))) (eo::define ((_v2 (_ (- _v1) _v0))) (eo::define ((_v3 (str.substr x))) (eo::define ((_v4 (_ @purify (_ (_ _v3 _v0) _v2)))) (eo::define ((_v5 (_ @purify (_ (_ _v3 0) n)))) (_ (=> (_ (and (_ (>= n) 0)) (_ (and (_ (> _v1) n)) true))) (_ (and (_ (= x) (_ (str.++ _v5) (_ (str.++ (seq.unit (_ @purify (_ (seq.nth x) n)))) (_ (str.++ _v4) (eo::nil str.++ (eo::typeof _v5))))))) (_ (and (_ (= (str.len _v5)) n)) (_ (and (_ (= (str.len _v4)) _v2)) true)))))))))))
  (($str_reduction_pred (_ (_ (str.update x) n) y)) (eo::define ((_v0 (= (_ @purify (_ (_ (str.update x) n) y))))) (eo::define ((_v1 (str.len x))) (eo::define ((_v2 (- _v1))) (eo::define ((_v3 (eo::ite (eo::is_eq ($str_value_len y) 1) y (_ (_ (str.substr y) 0) (_ _v2 n))))) (eo::define ((_v4 (str.len _v3))) (eo::define ((_v5 (str.substr x))) (eo::define ((_v6 (_ @purify (_ (_ _v5 n) _v4)))) (eo::define ((_v7 (_ @purify (_ (_ _v5 0) n)))) (eo::define ((_v8 (_ (+ n) (_ (+ _v4) 0)))) (eo::define ((_v9 (_ (str.++ (_ @purify (_ (_ _v5 _v8) (_ _v2 _v8)))) (eo::nil str.++ (eo::typeof _v7))))) (eo::define ((_v10 (str.++ _v7))) (_ (_ (ite (_ (and (_ (>= n) 0)) (_ (and (_ (> _v1) n)) true))) (_ (and (_ _v0 (_ _v10 (_ (str.++ _v3) _v9)))) (_ (and (_ (= x) (_ _v10 (_ (str.++ _v6) _v9)))) (_ (and (_ (= (str.len _v7)) n)) (_ (and (_ (= _v4) (str.len _v6))) true))))) (_ _v0 x))))))))))))))
  (($str_reduction_pred (_ (_ (str.replace_all x) y) z)) (eo::define ((_v0 (eo::var "@var.str_index" Int))) (eo::define ((_v1 (_ (@strings_occur_index x) y))) (eo::define ((_v2 (_ _v1 _v0))) (eo::define ((_v3 (_ (str.indexof x) y))) (eo::define ((_v4 (_ _v3 _v2))) (eo::define ((_v5 (_ (+ _v0) (_ (+ 1) 0)))) (eo::define ((_v6 (str.substr x))) (eo::define ((_v7 (_ (_ _v6 _v2) (_ (- _v4) _v2)))) (eo::define ((_v8 (_ (_ (str.replace_all x) y) z))) (eo::define ((_v9 (_ @strings_replace_all_result _v8))) (eo::define ((_v10 (_ (@strings_num_occur x) y))) (eo::define ((_v11 (_ _v1 _v10))) (eo::define ((_v12 (= (_ @purify _v8)))) (eo::define ((_v13 (eo::typeof x))) (_ (_ (ite (_ (= y) (eo::ite (eo::is_eq _v13 (Seq Char)) "" (_ seq.empty _v13)))) (_ _v12 x)) (_ (and (_ (>= _v10) 0)) (_ (and (_ _v12 (_ _v9 0))) (_ (and (_ (= (_ _v9 _v10)) (_ (_ _v6 _v11) (str.len x)))) (_ (and (_ (= (_ _v1 0)) 0)) (_ (and (_ (= (_ _v3 _v11)) -1)) (_ (and (_ (forall (_ ($eo_List_cons _v0) $eo_List_nil)) (_ (or (not (_ (>= _v0) 0))) (_ (or (not (_ (< _v0) _v10))) (_ (or (_ (and (not (_ (= _v4) -1))) (_ (and (_ (= (_ _v9 _v0)) (_ (str.++ _v7) (_ (str.++ z) (_ (str.++ (_ _v9 _v5)) (eo::nil str.++ (eo::typeof _v7))))))) (_ (and (_ (= (_ _v1 _v5)) (_ (+ _v4) (_ (+ (str.len y)) 0)))) true)))) false))))) true))))))))))))))))))))))
  (($str_reduction_pred (_ (_ (str.replace_re s) r) t)) (eo::define ((_v0 (_ (str.++ (_ @re_first_match_post s r)) ""))) (eo::define ((_v1 (_ @re_first_match_pre s r))) (eo::define ((_v2 (str.++ _v1))) (eo::define ((_v3 (= (_ @purify (_ (_ (str.replace_re s) r) t))))) (eo::define ((_v4 (_ @re_first_match s r))) (eo::define ((_v5 (eo::var "@var.str_length" Int))) (eo::define ((_v6 (_ (_ (str.indexof_re s) r) 0))) (_ (_ (ite (_ (= _v6) -1)) (_ _v3 s)) (_ (and (_ (= s) (_ _v2 (_ (str.++ _v4) _v0)))) (_ (and (_ (= (str.len _v1)) _v6)) (_ (and (_ (forall (_ ($eo_List_cons _v5) $eo_List_nil)) (_ (or (not (_ (>= _v5) 0))) (_ (or (not (_ (< _v5) (str.len _v4)))) (_ (or (not (_ (str.in_re (_ (_ (str.substr _v4) 0) _v5)) r))) false))))) (_ (and (_ (str.in_re _v4) r)) (_ (and (_ _v3 (_ _v2 (_ (str.++ t) _v0)))) true))))))))))))))
  (($str_reduction_pred (_ (_ (str.replace_re_all s) r) t)) (eo::define ((_v0 (eo::var "@var.str_index" Int))) (eo::define ((_v1 (_ (+ _v0) (_ (+ 1) 0)))) (eo::define ((_v2 (_ (_ (str.replace_re_all s) r) t))) (eo::define ((_v3 (_ @strings_replace_all_result _v2))) (eo::define ((_v4 (_ @strings_occur_index_re s r))) (eo::define ((_v5 (_ _v4 _v0))) (eo::define ((_v6 (_ (_ @strings_occur_len_re s r) _v1))) (eo::define ((_v7 (_ _v4 _v1))) (eo::define ((_v8 (_ (- _v7) _v6))) (eo::define ((_v9 (str.substr s))) (eo::define ((_v10 (eo::var "@var.str_length" Int))) (eo::define ((_v11 (_ _v9 _v8))) (eo::define ((_v12 (_ (re.diff r) (str.to_re "")))) (eo::define ((_v13 (_ (str.indexof_re s) _v12))) (eo::define ((_v14 (_ @strings_num_occur_re s r))) (eo::define ((_v15 (_ (_ _v9 (_ _v4 _v14)) (str.len s)))) (eo::define ((_v16 (= (_ @purify _v2)))) (_ (_ (ite (_ (= (_ _v13 0)) -1)) (_ _v16 s)) (_ (and (_ (> _v14) 0)) (_ (and (_ _v16 (_ _v3 0))) (_ (and (_ (= (_ _v3 _v14)) _v15)) (_ (and (_ (= (_ _v4 0)) 0)) (_ (and (_ (= (_ (_ (str.indexof_re _v15) _v12) 0)) -1)) (_ (and (_ (forall (_ ($eo_List_cons _v0) $eo_List_nil)) (_ (or (not (_ (>= _v0) 0))) (_ (or (not (_ (< _v0) _v14))) (_ (or (_ (and (_ (> _v6) 0)) (_ (and (_ (= _v7) (_ (+ (_ _v13 _v5)) (_ (+ _v6) 0)))) (_ (and (_ (str.in_re (_ _v11 _v6)) _v12)) (_ (and (_ (forall (_ ($eo_List_cons _v10) $eo_List_nil)) (_ (or (not (_ (> _v10) 0))) (_ (or (not (_ (< _v10) _v6))) (_ (or (not (_ (str.in_re (_ _v11 _v10)) r))) false))))) (_ (and (_ (= (_ _v3 _v0)) (_ (str.++ (_ (_ _v9 _v5) (_ (- _v8) _v5))) (_ (str.++ t) (_ (str.++ (_ _v3 _v1)) ""))))) true)))))) false))))) true)))))))))))))))))))))))))
  (($str_reduction_pred (_ (_ (str.indexof_re s) r) n)) (eo::define ((_v0 (eo::var "@var.str_length" Int))) (eo::define ((_v1 (_ @purify (_ (_ (str.indexof_re s) r) n)))) (eo::define ((_v2 (str.substr s))) (eo::define ((_v3 (str.len s))) (eo::define ((_v4 (- _v3))) (eo::define ((_v5 (<= _v0))) (eo::define ((_v6 (_ ($eo_List_cons _v0) $eo_List_nil))) (eo::define ((_v7 (= _v1))) (eo::define ((_v8 (_ _v7 -1))) (eo::define ((_v9 (eo::var "@var.str_index" Int))) (_ (_ (ite (_ (or (_ (> n) _v3)) (_ (or (_ (> 0) n)) false))) _v8) (_ (_ (ite (_ (str.in_re "") r)) (_ _v7 n)) (_ (and (_ (forall (_ ($eo_List_cons _v9) _v6)) (_ (or (not (_ (>= _v9) n))) (_ (or (not (_ (< _v9) (_ (_ (ite _v8) _v3) _v1)))) (_ (or (not (_ (> _v0) 0))) (_ (or (not (_ _v5 (_ _v4 _v9)))) (_ (or (not (_ (str.in_re (_ (_ _v2 _v9) _v0)) r))) false))))))) (_ (and (_ (or _v8) (_ (or (_ (and (_ (>= _v1) n)) (_ (and (not (_ (forall _v6) (_ (or (not (_ (>= _v0) 0))) (_ (or (not (_ _v5 (_ _v4 _v1)))) (_ (or (not (_ (str.in_re (_ (_ _v2 _v1) _v0)) r))) false)))))) true))) false))) true)))))))))))))))
  (($str_reduction_pred (_ (str.<= s) t)) (eo::define ((_v0 (eo::var "@var.str_index" Int))) (eo::define ((_v1 (str.substr s))) (eo::define ((_v2 (str.to_code (_ (_ _v1 _v0) 1)))) (eo::define ((_v3 (str.substr t))) (eo::define ((_v4 (str.to_code (_ (_ _v3 _v0) 1)))) (eo::define ((_v5 (_ @purify (_ (str.<= s) t)))) (eo::define ((_v6 (<= _v0))) (_ (_ (ite (_ (= s) t)) _v5) (not (_ (forall (_ ($eo_List_cons _v0) $eo_List_nil)) (_ (or (not (_ (>= _v0) 0))) (_ (or (not (_ _v6 (str.len s)))) (_ (or (not (_ _v6 (str.len t)))) (_ (or (not (_ (= (_ (_ _v1 0) _v0)) (_ (_ _v3 0) _v0)))) (_ (or (_ (_ (ite _v5) (_ (>= _v2) _v4)) (_ (>= _v4) _v2))) false))))))))))))))))
  (($str_reduction_pred (str.to_lower s)) (eo::define ((_v0 (eo::var "@var.str_index" Int))) (eo::define ((_v1 (str.to_code (_ (_ (str.substr s) _v0) 1)))) (eo::define ((_v2 (_ @purify (str.to_lower s)))) (eo::define ((_v3 (str.len _v2))) (_ (and (_ (= (str.len s)) _v3)) (_ (and (_ (forall (_ ($eo_List_cons _v0) $eo_List_nil)) (_ (or (not (_ (>= _v0) 0))) (_ (or (not (_ (< _v0) _v3))) (_ (or (_ (= (str.to_code (_ (_ (str.substr _v2) _v0) 1))) (_ (_ (ite (_ (and (_ (<= 65) _v1)) (_ (and (_ (<= _v1) 90)) true))) (_ (+ _v1) (_ (+ 32) 0))) _v1))) false))))) true)))))))
  (($str_reduction_pred (str.to_upper s)) (eo::define ((_v0 (eo::var "@var.str_index" Int))) (eo::define ((_v1 (str.to_code (_ (_ (str.substr s) _v0) 1)))) (eo::define ((_v2 (_ @purify (str.to_upper s)))) (eo::define ((_v3 (str.len _v2))) (_ (and (_ (= (str.len s)) _v3)) (_ (and (_ (forall (_ ($eo_List_cons _v0) $eo_List_nil)) (_ (or (not (_ (>= _v0) 0))) (_ (or (not (_ (< _v0) _v3))) (_ (or (_ (= (str.to_code (_ (_ (str.substr _v2) _v0) 1))) (_ (_ (ite (_ (and (_ (<= 97) _v1)) (_ (and (_ (<= _v1) 122)) true))) (_ (+ _v1) (_ (+ -32) 0))) _v1))) false))))) true)))))))
  (($str_reduction_pred (str.rev x)) (eo::define ((_v0 (eo::var "@var.str_index" Int))) (eo::define ((_v1 (str.len x))) (eo::define ((_v2 (_ @purify (str.rev x)))) (eo::define ((_v3 (str.len _v2))) (_ (and (_ (= _v1) _v3)) (_ (and (_ (forall (_ ($eo_List_cons _v0) $eo_List_nil)) (_ (or (not (_ (>= _v0) 0))) (_ (or (not (_ (< _v0) _v3))) (_ (or (_ (= (_ (_ (str.substr _v2) _v0) 1)) (_ (_ (str.substr x) (_ (- _v1) (_ (+ _v0) (_ (+ 1) 0)))) 1))) false))))) true)))))))
  )
)
; program: $mk_str_eager_reduction
(program $mk_str_eager_reduction ((U Type) (y (Seq U)) (x (Seq U)) (n Int) (s (Seq Char)) (r RegLan))
  :signature (U) Bool
  (
  (($mk_str_eager_reduction (str.from_code n)) (eo::define ((_v0 (_ @purify (str.from_code n)))) (_ (_ (ite (_ (and (_ (<= 0) n)) (_ (and (_ (< n) 196608)) true))) (_ (= n) (str.to_code _v0))) (_ (= _v0) ""))))
  (($mk_str_eager_reduction (str.to_code s)) (eo::define ((_v0 (str.to_code s))) (_ (_ (ite (_ (= (str.len s)) 1)) (_ (and (_ (>= _v0) 0)) (_ (and (_ (< _v0) 196608)) true))) (_ (= _v0) -1))))
  (($mk_str_eager_reduction (str.to_int s)) (_ (>= (str.to_int s)) -1))
  (($mk_str_eager_reduction (_ (str.contains x) y)) (eo::define ((_v0 (= x))) (eo::define ((_v1 (str.substr x))) (eo::define ((_v2 (_ @purify (_ (_ _v1 0) (_ (_ (str.indexof x) y) 0))))) (eo::define ((_v3 (_ (+ (str.len _v2)) (_ (+ (str.len y)) 0)))) (_ (_ (ite (_ (str.contains x) y)) (_ _v0 (_ (str.++ _v2) (_ (str.++ y) (_ (str.++ (_ @purify (_ (_ _v1 _v3) (_ (- (str.len x)) _v3)))) (eo::nil str.++ (eo::typeof _v2))))))) (not (_ _v0 y))))))))
  (($mk_str_eager_reduction (_ (_ (str.indexof x) y) n)) (eo::define ((_v0 (_ (_ (str.indexof x) y) n))) (_ (and (_ (or (_ (= _v0) -1)) (_ (or (_ (>= _v0) n)) false))) (_ (and (_ (<= _v0) (str.len x))) true))))
  (($mk_str_eager_reduction (_ (_ (str.indexof_re s) r) n)) (eo::define ((_v0 (_ (_ (str.indexof_re s) r) n))) (_ (and (_ (or (_ (= _v0) -1)) (_ (or (_ (>= _v0) n)) false))) (_ (and (_ (<= _v0) (str.len s))) true))))
  (($mk_str_eager_reduction (_ (str.in_re s) r)) (_ (=> (_ (str.in_re s) r)) (_ (= (str.len s)) ($str_fixed_len_re r))))
  )
)
; program: $re_unfold_pos_concat_rec
(program $re_unfold_pos_concat_rec ((s (Seq Char)) (r1 RegLan) (t (Seq Char)) (r2 RegLan) (ro RegLan) (i Int))
  :signature ((Seq Char) RegLan RegLan Int) (_ (@Pair (Seq Char)) Bool)
  (
  (($re_unfold_pos_concat_rec t (str.to_re "") ro i) (_ (@pair "") true))
  (($re_unfold_pos_concat_rec t (_ (re.++ (str.to_re s)) r2) ro i) (eo::define ((_v0 ($re_unfold_pos_concat_rec t r2 ro (eo::add i 1)))) (_ (@pair (eo::cons str.++ s ($pair_first _v0))) ($pair_second _v0))))
  (($re_unfold_pos_concat_rec t (_ (re.++ r1) r2) ro i) (eo::define ((_v0 ($re_unfold_pos_concat_rec t r2 ro (eo::add i 1)))) (eo::define ((_v1 (_ @re_unfold_pos_component t ro i))) (_ (@pair (eo::cons str.++ _v1 ($pair_first _v0))) (eo::cons and (_ (str.in_re _v1) r1) ($pair_second _v0))))))
  )
)
; define: $re_unfold_pos_concat
(define $re_unfold_pos_concat ((r RegLan) (t (Seq Char)))
  ($re_unfold_pos_concat_rec t r r 0))
; define: $str_check_length_one
(define $str_check_length_one ((s (Seq Char)))
  (eo::is_eq (eo::len s) 1))
; define: $str_check_len_gt_one
(define $str_check_len_gt_one ((s (Seq Char)))
  (eo::is_eq (eo::is_neg (eo::add 1 (eo::neg (eo::len s)))) true))
; program: $str_flatten_word
(program $str_flatten_word ((U Type) (t (Seq U)))
  :signature ((Seq U)) (Seq U)
  (
  (($str_flatten_word "") "")
  (($str_flatten_word t) (eo::cons str.++ (eo::extract t 0 0) ($str_flatten_word (eo::extract t 1 (eo::len t)))))
  )
)
; program: $str_flatten
(program $str_flatten ((U Type) (tail (Seq U)) (t (Seq U)))
  :signature ((Seq U)) (Seq U)
  (
  (($str_flatten (_ (str.++ t) tail)) (eo::define ((_v0 ($str_flatten tail))) (eo::ite (eo::is_eq (eo::is_neg (eo::add 1 (eo::neg (eo::len t)))) true) (eo::list_concat str.++ ($str_flatten_word t) _v0) (eo::cons str.++ t _v0))))
  (($str_flatten t) (eo::define ((_v0 (eo::typeof t))) (eo::requires t (eo::ite (eo::is_eq _v0 (Seq Char)) "" (_ seq.empty _v0)) t)))
  )
)
; program: $str_collect_acc
(program $str_collect_acc ((U Type) (t (Seq U)) (tail (Seq U)))
  :signature ((Seq U)) (eo::define ((_v0 (Seq U))) (_ (@Pair _v0) _v0))
  (
  (($str_collect_acc (_ (str.++ t) tail)) (eo::define ((_v0 ($str_collect_acc tail))) (eo::define ((_v1 ($pair_second _v0))) (eo::define ((_v2 ($pair_first _v0))) (eo::ite (eo::is_eq (eo::len t) 1) (eo::ite (eo::eq _v2 "") (_ (@pair t) _v1) (_ (@pair (eo::concat t _v2)) _v1)) (_ (@pair "") (_ (str.++ t) tail)))))))
  (($str_collect_acc "") (_ (@pair "") ""))
  )
)
; program: $str_collect
(program $str_collect ((U Type) (s (Seq U)) (t (Seq U)))
  :signature ((Seq U)) (Seq U)
  (
  (($str_collect (_ (str.++ t) s)) (eo::define ((_v0 ($str_collect_acc (_ (str.++ t) s)))) (eo::define ((_v1 ($pair_first _v0))) (eo::ite (eo::eq _v1 "") (eo::cons str.++ t ($str_collect s)) (eo::cons str.++ _v1 ($str_collect ($pair_second _v0)))))))
  (($str_collect t) (eo::define ((_v0 (eo::typeof t))) (eo::requires t (eo::ite (eo::is_eq _v0 (Seq Char)) "" (_ seq.empty _v0)) t)))
  )
)
; program: $str_strip_prefix
(program $str_strip_prefix ((U Type) (t2 (Seq U)) (s2 (Seq U)) (t (Seq U)) (s (Seq U)))
  :signature ((Seq U) (Seq U)) (eo::define ((_v0 (Seq U))) (_ (@Pair _v0) _v0))
  (
  ((eo::define ((_v0 (str.++ t))) ($str_strip_prefix (_ _v0 t2) (_ _v0 s2))) ($str_strip_prefix t2 s2))
  (($str_strip_prefix t s) (_ (@pair t) s))
  )
)
; program: $str_mk_re_loop_elim_rec
(program $str_mk_re_loop_elim_rec ((n Int) (d Int) (r RegLan) (rr RegLan))
  :signature (Int Int RegLan RegLan) RegLan
  (
  (($str_mk_re_loop_elim_rec 0 0 r rr) (eo::cons re.union ($singleton_elim rr) re.none))
  (($str_mk_re_loop_elim_rec 0 d r rr) (eo::cons re.union ($singleton_elim rr) ($str_mk_re_loop_elim_rec 0 (eo::add d -1) r (_ (re.++ r) rr))))
  (($str_mk_re_loop_elim_rec n d r rr) ($str_mk_re_loop_elim_rec (eo::add n -1) d r (_ (re.++ r) rr)))
  )
)
; define: $str_mk_re_loop_elim
(define $str_mk_re_loop_elim ((r RegLan) (d Int) (n Int))
  ($singleton_elim ($str_mk_re_loop_elim_rec n d r (str.to_re ""))))
; program: $str_mk_str_in_re_concat_star_char
(program $str_mk_str_in_re_concat_star_char ((s1 (Seq Char)) (s2 (Seq Char)) (r RegLan))
  :signature ((Seq Char) RegLan) Bool
  (
  (($str_mk_str_in_re_concat_star_char (_ (str.++ s1) s2) r) (eo::cons and (_ (str.in_re s1) r) ($str_mk_str_in_re_concat_star_char s2 r)))
  (($str_mk_str_in_re_concat_star_char "" r) true)
  )
)
; program: $str_mk_str_in_re_sigma_rec
(program $str_mk_str_in_re_sigma_rec ((b Bool) (s (Seq Char)) (r RegLan) (n Int))
  :signature ((Seq Char) RegLan Int Bool) Bool
  (
  (($str_mk_str_in_re_sigma_rec s (str.to_re "") n b) (eo::define ((_v0 (str.len s))) (eo::ite b (_ (= _v0) n) (_ (>= _v0) n))))
  (($str_mk_str_in_re_sigma_rec s (_ (re.++ re.allchar) r) n b) ($str_mk_str_in_re_sigma_rec s r (eo::add n 1) b))
  (($str_mk_str_in_re_sigma_rec s (_ (re.++ (re.* re.allchar)) r) n b) ($str_mk_str_in_re_sigma_rec s r n false))
  )
)
; define: $str_mk_str_in_re_sigma
(define $str_mk_str_in_re_sigma ((r RegLan) (s (Seq Char)))
  ($str_mk_str_in_re_sigma_rec s r 0 true))
; program: $str_mk_str_in_re_sigma_star_rec
(program $str_mk_str_in_re_sigma_star_rec ((s (Seq Char)) (r RegLan) (n Int))
  :signature ((Seq Char) RegLan Int) Bool
  (
  (($str_mk_str_in_re_sigma_star_rec s (str.to_re "") n) (_ (= (_ (mod (str.len s)) n)) 0))
  (($str_mk_str_in_re_sigma_star_rec s (_ (re.++ re.allchar) r) n) ($str_mk_str_in_re_sigma_star_rec s r (eo::add n 1)))
  )
)
; define: $str_mk_str_in_re_sigma_star
(define $str_mk_str_in_re_sigma_star ((r RegLan) (s (Seq Char)))
  ($str_mk_str_in_re_sigma_star_rec s r 0))
; define: $str_to_flat_form
(define $str_to_flat_form ((rev Bool) (U Type :implicit) (s (Seq U)))
  (eo::define ((_v0 ($str_flatten ($str_nary_intro s)))) (eo::ite rev (eo::list_rev str.++ _v0) _v0)))
; define: $str_to_nary_form
(define $str_to_nary_form ((rev Bool) (U Type :implicit) (s (Seq U)))
  (eo::define ((_v0 ($str_nary_intro s))) (eo::ite rev (eo::list_rev str.++ _v0) _v0)))
; program: $re_str_to_flat_form
(program $re_str_to_flat_form ((s (Seq Char)) (r2 RegLan) (rev Bool) (r1 RegLan))
  :signature (Bool RegLan) RegLan
  (
  (($re_str_to_flat_form rev (_ (re.++ (str.to_re s)) r2)) (eo::define ((_v0 ($str_flatten ($str_nary_intro s)))) (eo::cons re.++ (str.to_re (eo::ite rev (eo::list_rev str.++ _v0) _v0)) ($re_str_to_flat_form rev r2))))
  (($re_str_to_flat_form rev (_ (re.++ r1) r2)) (eo::cons re.++ r1 ($re_str_to_flat_form rev r2)))
  (($re_str_to_flat_form rev r1) r1)
  )
)
; define: $re_to_flat_form
(define $re_to_flat_form ((rev Bool) (r RegLan))
  (eo::define ((_v0 ($re_nary_intro r))) ($re_str_to_flat_form rev (eo::ite rev (eo::list_rev re.++ _v0) _v0))))
; define: $str_from_flat_form
(define $str_from_flat_form ((rev Bool) (U Type :implicit) (s (Seq U)))
  ($str_nary_elim ($str_collect (eo::ite rev (eo::list_rev str.++ s) s))))
; define: $str_from_nary_form
(define $str_from_nary_form ((rev Bool) (U Type :implicit) (s (Seq U)))
  ($str_nary_elim (eo::ite rev (eo::list_rev str.++ s) s)))
; program: $re_str_from_flat_form
(program $re_str_from_flat_form ((s (Seq Char)) (r2 RegLan) (rev Bool) (r1 RegLan))
  :signature (Bool RegLan) RegLan
  (
  (($re_str_from_flat_form rev (_ (re.++ (str.to_re s)) r2)) (eo::cons re.++ (str.to_re ($str_nary_elim ($str_collect (eo::ite rev (eo::list_rev str.++ s) s)))) ($re_str_from_flat_form rev r2)))
  (($re_str_from_flat_form rev (_ (re.++ r1) r2)) (eo::cons re.++ r1 ($re_str_from_flat_form rev r2)))
  (($re_str_from_flat_form rev r1) r1)
  )
)
; define: $re_from_flat_form
(define $re_from_flat_form ((rev Bool) (r RegLan))
  (eo::define ((_v0 ($re_str_from_flat_form rev r))) ($re_nary_elim (eo::ite rev (eo::list_rev re.++ _v0) _v0))))
; fwd-decl: $str_re_includes
(program $str_re_includes ()
  :signature (RegLan RegLan) Bool
)
; program: $str_re_includes_lhs_union
(program $str_re_includes_lhs_union ((r2 RegLan) (r1 RegLan) (r3 RegLan))
  :signature (RegLan RegLan) Bool
  (
  (($str_re_includes_lhs_union (_ (re.union r1) r2) r3) (eo::ite ($str_re_includes r1 r3) true ($str_re_includes_lhs_union r2 r3)))
  (($str_re_includes_lhs_union r1 r3) false)
  )
)
; program: $str_re_includes_rhs_inter
(program $str_re_includes_rhs_inter ((r2 RegLan) (r1 RegLan) (r3 RegLan))
  :signature (RegLan RegLan) Bool
  (
  (($str_re_includes_rhs_inter r1 (_ (re.inter r3) r2)) (eo::ite ($str_re_includes r1 r3) true ($str_re_includes_rhs_inter r1 r2)))
  (($str_re_includes_rhs_inter r1 r3) false)
  )
)
; program: $str_maybe_get_star_body
(program $str_maybe_get_star_body ((r RegLan))
  :signature (RegLan) RegLan
  (
  (($str_maybe_get_star_body (re.* r)) r)
  (($str_maybe_get_star_body r) r)
  )
)
; program: $str_re_includes_lhs_star
(program $str_re_includes_lhs_star ((r1 RegLan) (r2 RegLan))
  :signature (RegLan RegLan) Bool
  (
  (($str_re_includes_lhs_star (re.* r1) r2) (eo::ite (eo::eq r1 re.allchar) true ($str_re_includes r1 ($str_maybe_get_star_body r2))))
  (($str_re_includes_lhs_star r1 r2) false)
  )
)
; program: $str_re_includes_is_rec
(program $str_re_includes_is_rec ((r2 RegLan) (r1 RegLan) (r3 RegLan))
  :signature (RegLan RegLan) Bool
  (
  (($str_re_includes_is_rec r1 (_ (re.inter r3) r2)) false)
  (($str_re_includes_is_rec (_ (re.union r1) r2) r3) false)
  (($str_re_includes_is_rec (re.* r1) r3) false)
  (($str_re_includes_is_rec (_ (re.++ r1) r2) r3) true)
  (($str_re_includes_is_rec r3 (_ (re.++ r1) r2)) true)
  (($str_re_includes_is_rec r1 r3) false)
  )
)
; program: $re_is_unbound_wildcard
(program $re_is_unbound_wildcard ((r2 RegLan) (r1 RegLan))
  :signature (RegLan) Bool
  (
  (($re_is_unbound_wildcard (_ (re.++ (re.* re.allchar)) r2)) true)
  (($re_is_unbound_wildcard (_ (re.++ re.allchar) r2)) ($re_is_unbound_wildcard r2))
  (($re_is_unbound_wildcard r1) false)
  )
)
; program: $str_re_includes_rec
(program $str_re_includes_rec ((s1 (Seq Char)) (s2 (Seq Char)) (r4 RegLan) (r2 RegLan) (r1 RegLan) (r3 RegLan))
  :signature (RegLan RegLan) Bool
  (
  (($str_re_includes_rec r1 r1) true)
  (($str_re_includes_rec (_ (re.++ (str.to_re (_ (str.++ s1) s2))) r2) r3) ($str_re_includes_rec (_ (re.++ (str.to_re s1)) (_ (re.++ (str.to_re s2)) r2)) r3))
  (($str_re_includes_rec (_ (re.++ (str.to_re "")) r2) r3) ($str_re_includes_rec r2 r3))
  (($str_re_includes_rec r1 (_ (re.++ (str.to_re (_ (str.++ s1) s2))) r4)) ($str_re_includes_rec r1 (_ (re.++ (str.to_re s1)) (_ (re.++ (str.to_re s2)) r4))))
  (($str_re_includes_rec r1 (_ (re.++ (str.to_re "")) r4)) ($str_re_includes_rec r1 r4))
  (($str_re_includes_rec (_ (re.++ r1) r2) (_ (re.++ r3) r4)) (eo::define ((_v0 (_ (re.++ r1) r2))) (eo::ite (eo::ite ($str_re_includes ($re_nary_elim ($re_str_from_flat_form false r1)) ($re_nary_elim ($re_str_from_flat_form false r3))) ($str_re_includes_rec r2 r4) false) true (eo::ite (eo::ite ($re_is_unbound_wildcard _v0) ($str_re_includes_rec _v0 r4) false) true (eo::ite (eo::ite (eo::eq r1 (re.* re.allchar)) ($str_re_includes_rec r2 (_ (re.++ r3) r4)) false) true false)))))
  (($str_re_includes_rec (_ (re.++ r1) r2) (str.to_re "")) (eo::and (eo::eq r1 (re.* re.allchar)) (eo::eq r2 (str.to_re ""))))
  (($str_re_includes_rec r1 r3) false)
  )
)
; program: $str_re_includes
(program $str_re_includes ((s2 (Seq Char)) (s4 (Seq Char)) (s3 (Seq Char)) (s1 (Seq Char)) (r1 RegLan) (r3 RegLan))
  :signature (RegLan RegLan) Bool
  (
  (($str_re_includes r1 r1) true)
  (($str_re_includes r1 (str.to_re s1)) (eo::ite (eo::is_str s1) ($str_eval_str_in_re_rec s1 0 r1 @re.null) (_ (str.in_re s1) r1)))
  (($str_re_includes (str.to_re s1) r1) false)
  (($str_re_includes (_ (re.range s1) s2) (_ (re.range s3) s4)) (eo::define ((_v0 (eo::to_z s1))) (eo::define ((_v1 (eo::to_z s3))) (eo::define ((_v2 (eo::to_z s4))) (eo::requires (eo::is_neg _v0) false (eo::requires (eo::is_neg (eo::to_z s2)) false (eo::requires (eo::is_neg _v1) false (eo::requires (eo::is_neg _v2) false (eo::and (eo::ite (eo::eq _v2 _v0) true (eo::gt _v2 _v0)) (eo::ite (eo::eq _v1 _v0) true (eo::gt _v1 _v0)))))))))))
  (($str_re_includes r1 r3) (eo::ite (eo::eq ($str_re_includes_lhs_union r1 r3) true) true (eo::ite (eo::eq ($str_re_includes_rhs_inter r1 r3) true) true (eo::ite (eo::eq ($str_re_includes_lhs_star r1 r3) true) true (eo::ite ($str_re_includes_is_rec r1 r3) ($str_re_includes_rec ($re_str_to_flat_form false ($re_nary_intro r1)) ($re_str_to_flat_form false ($re_nary_intro r3))) false)))))
  )
)
; program: $str_arith_entail_simple
(program $str_arith_entail_simple ((T Type) (s (Seq Char)) (n2 T) (n1 T))
  :signature (T) Bool
  (
  (($str_arith_entail_simple (str.len s)) true)
  (($str_arith_entail_simple (_ (+ n1) n2)) (eo::ite ($str_arith_entail_simple n1) ($str_arith_entail_simple n2) false))
  (($str_arith_entail_simple (_ (* n1) n2)) (eo::ite ($str_arith_entail_simple n1) ($str_arith_entail_simple n2) false))
  (($str_arith_entail_simple n1) (eo::not (eo::is_neg n1)))
  )
)
; program: $str_arith_entail_simple_pred
(program $str_arith_entail_simple_pred ((n Int) (m Int))
  :signature (Bool) Bool
  (
  (($str_arith_entail_simple_pred (_ (>= n) m)) ($str_arith_entail_simple ($arith_poly_to_term_rec ($get_arith_poly_norm (_ (- n) m)))))
  (($str_arith_entail_simple_pred (_ (> n) m)) ($str_arith_entail_simple ($arith_poly_to_term_rec ($get_arith_poly_norm (_ (- n) (_ (+ m) (_ (+ 1) 0)))))))
  )
)
; program: $str_arith_entail_is_approx_len
(program $str_arith_entail_is_approx_len ((n2 Int) (r (Seq Char)) (s (Seq Char)) (t (Seq Char)) (n Int) (isUnder Bool) (n1 Int))
  :signature ((Seq Char) Int Bool) Bool
  (
  (($str_arith_entail_is_approx_len (_ (_ (str.substr s) n1) n2) n isUnder) (eo::define ((_v0 (str.len s))) (eo::define ((_v1 (>= _v0))) (eo::define ((_v2 (_ (+ n1) (_ (+ n2) 0)))) (eo::define ((_v3 ($str_arith_entail_simple n1))) (eo::ite (eo::eq n n2) (eo::ite isUnder (eo::and _v3 ($str_arith_entail_simple_pred (_ _v1 _v2))) ($str_arith_entail_simple n2)) (eo::ite (eo::eq n _v0) (eo::not isUnder) (eo::ite (eo::eq n (_ (- _v0) n1)) (eo::ite isUnder (eo::and _v3 ($str_arith_entail_simple_pred (_ (>= _v2) _v0))) ($str_arith_entail_simple_pred (_ _v1 n1))) false))))))))
  (($str_arith_entail_is_approx_len (_ (_ (str.replace s) t) r) n isUnder) (eo::define ((_v0 (str.len t))) (eo::define ((_v1 (str.len s))) (eo::define ((_v2 (str.len r))) (eo::define ((_v3 (>= _v2))) (eo::ite (eo::eq n _v1) (eo::ite isUnder (eo::or ($str_arith_entail_simple_pred (_ _v3 _v0)) ($str_arith_entail_simple_pred (_ _v3 _v1))) ($str_arith_entail_simple_pred (_ (>= _v0) _v2))) (eo::ite (eo::eq n (_ (+ _v1) (_ (+ _v2) 0))) (eo::not isUnder) (eo::ite (eo::eq n (_ (- _v1) _v0)) isUnder false))))))))
  (($str_arith_entail_is_approx_len (str.from_int n1) n isUnder) (eo::define ((_v0 ($str_arith_entail_simple n1))) (eo::define ((_v1 (eo::not isUnder))) (eo::ite (eo::eq n (_ (+ n1) (_ (+ 1) 0))) (eo::and _v1 _v0) (eo::ite (eo::eq n n1) (eo::and _v1 ($str_arith_entail_simple_pred (_ (> n1) 0))) (eo::ite (eo::eq n 1) (eo::and isUnder _v0) false))))))
  )
)
; define: $str_arith_entail_is_approx_indexof
(define $str_arith_entail_is_approx_indexof ((isUnder Bool) (m Int) (n Int) (t (Seq Char)) (s (Seq Char)))
  (eo::define ((_v0 (str.len t))) (eo::define ((_v1 (str.len s))) (eo::define ((_v2 (eo::not isUnder))) (eo::ite (eo::eq m -1) isUnder (eo::ite (eo::eq m _v1) _v2 (eo::ite (eo::eq m (_ (- _v1) _v0)) (eo::and _v2 ($str_arith_entail_simple_pred (_ (>= _v1) _v0))) false)))))))
; define: $str_arith_entail_is_approx_to_int
(define $str_arith_entail_is_approx_to_int ((isUnder Bool) (n Int) (s (Seq Char)))
  (eo::ite (eo::eq n -1) isUnder false))
; program: $str_arith_entail_is_approx
(program $str_arith_entail_is_approx ((t (Seq Char)) (s (Seq Char)) (n2 Int) (n4 Int) (n1 Int) (n3 Int) (n5 Int) (isUnder Bool))
  :signature (Int Int Bool) Bool
  (
  (($str_arith_entail_is_approx n1 n1 isUnder) true)
  (($str_arith_entail_is_approx (str.len s) n1 isUnder) ($str_arith_entail_is_approx_len s n1 isUnder))
  (($str_arith_entail_is_approx (_ (_ (str.indexof s) t) n3) n1 isUnder) (eo::define ((_v0 (str.len t))) (eo::define ((_v1 (str.len s))) (eo::define ((_v2 (eo::not isUnder))) (eo::ite (eo::eq n1 -1) isUnder (eo::ite (eo::eq n1 _v1) _v2 (eo::ite (eo::eq n1 (_ (- _v1) _v0)) (eo::and _v2 ($str_arith_entail_simple_pred (_ (>= _v1) _v0))) false)))))))
  (($str_arith_entail_is_approx (str.to_int s) n1 isUnder) (eo::ite (eo::eq n1 -1) isUnder false))
  (($str_arith_entail_is_approx (_ (+ n1) n2) (_ (+ n3) n4) isUnder) (eo::and ($str_arith_entail_is_approx n1 n3 isUnder) ($str_arith_entail_is_approx n2 n4 isUnder)))
  ((eo::define ((_v0 (* n1))) ($str_arith_entail_is_approx (_ _v0 (_ (* n3) 1)) (_ _v0 (_ (* n5) 1)) isUnder)) (eo::ite (eo::is_neg n1) ($str_arith_entail_is_approx n3 n5 (eo::not isUnder)) ($str_arith_entail_is_approx n3 n5 isUnder)))
  )
)
; program: $str_re_consume_rec
(program $str_re_consume_rec ((s4 (Seq Char)) (s3 (Seq Char)) (s5 (Seq Char)) (r3 RegLan) (s2 (Seq Char)) (r2 RegLan) (b Bool) (rev Bool) (s1 (Seq Char)) (r1 RegLan))
  :signature ((Seq Char) RegLan Bool Bool) Bool
  (
  (($str_re_consume_rec (_ (str.++ s1) s2) (_ (re.++ (str.to_re (_ (str.++ s3) s4))) r2) @result.null rev) (eo::ite (eo::eq s1 s3) ($str_re_consume_rec s2 (_ (re.++ (str.to_re s4)) r2) @result.null rev) (eo::ite (eo::and (eo::is_eq (eo::len s1) 1) (eo::is_eq (eo::len s3) 1)) false (_ (str.in_re (_ (str.++ s1) s2)) (_ (re.++ (str.to_re (_ (str.++ s3) s4))) r2)))))
  (($str_re_consume_rec (_ (str.++ s1) s2) (_ (re.++ (str.to_re "")) r2) @result.null rev) ($str_re_consume_rec (_ (str.++ s1) s2) r2 @result.null rev))
  (($str_re_consume_rec (_ (str.++ s1) s2) (_ (re.++ (_ (re.range s3) s5)) r2) @result.null rev) (eo::define ((_v0 (_ (re.range s3) s5))) (eo::ite (eo::and (eo::is_eq (eo::len s1) 1) (eo::and (eo::is_eq (eo::len s3) 1) (eo::is_eq (eo::len s5) 1))) (eo::ite (eo::ite (eo::is_str s1) ($str_eval_str_in_re_rec s1 0 _v0 @re.null) (_ (str.in_re s1) _v0)) ($str_re_consume_rec s2 r2 @result.null rev) false) (_ (str.in_re (_ (str.++ s1) s2)) (_ (re.++ _v0) r2)))))
  (($str_re_consume_rec (_ (str.++ s1) s2) (_ (re.++ re.allchar) r2) @result.null rev) (eo::ite (eo::is_eq (eo::len s1) 1) ($str_re_consume_rec s2 r2 @result.null rev) (_ (str.in_re (_ (str.++ s1) s2)) (_ (re.++ re.allchar) r2))))
  (($str_re_consume_rec (_ (str.++ s1) s2) (_ (re.++ (re.* r3)) r2) @result.null rev) (eo::define ((_v0 (_ (re.++ (re.* r3)) r2))) (eo::define ((_v1 (_ (str.++ s1) s2))) (eo::define ((_v2 (_ (str.in_re _v1) _v0))) (eo::define ((_v3 ($re_nary_intro r3))) (eo::define ((_v4 ($str_re_consume_rec _v1 ($re_str_to_flat_form rev (eo::ite rev (eo::list_rev re.++ _v3) _v3)) @result.null rev))) (eo::define ((_v5 ($str_membership_str _v4))) (eo::define ((_v6 ($str_re_consume_rec _v1 r2 @result.null rev))) (eo::ite (eo::eq _v4 false) _v6 (eo::ite (eo::eq ($str_membership_re _v4) (str.to_re "")) (eo::ite (eo::is_eq _v6 false) (eo::ite (eo::eq _v1 _v5) _v2 ($str_re_consume_rec _v5 _v0 @result.null rev)) _v2) _v2))))))))))
  (($str_re_consume_rec (_ (str.++ s1) s2) (_ (re.++ r1) r2) @result.null rev) (eo::define ((_v0 (_ (str.++ s1) s2))) (eo::define ((_v1 ($str_re_consume_rec _v0 r1 @result.null rev))) (eo::ite (eo::is_eq _v1 false) false (eo::ite (eo::is_eq ($str_membership_re _v1) (str.to_re "")) ($str_re_consume_rec ($str_membership_str _v1) r2 @result.null rev) (_ (str.in_re _v0) (_ (re.++ r1) r2)))))))
  (($str_re_consume_rec s1 (_ (re.++ (str.to_re "")) r2) @result.null rev) ($str_re_consume_rec s1 r2 @result.null rev))
  (($str_re_consume_rec s1 (_ (re.inter r1) r2) b rev) (eo::define ((_v0 ($re_nary_intro r1))) (eo::define ((_v1 ($str_re_consume_rec s1 ($re_str_to_flat_form rev (eo::ite rev (eo::list_rev re.++ _v0) _v0)) @result.null rev))) (eo::ite (eo::eq _v1 false) false ($str_re_consume_rec s1 r2 ($result_combine _v1 b) rev)))))
  (($str_re_consume_rec s1 re.all @result.null rev) (_ (str.in_re "") (str.to_re "")))
  (($str_re_consume_rec s1 re.all b rev) b)
  (($str_re_consume_rec s1 (_ (re.union r1) r2) b rev) (eo::define ((_v0 ($re_nary_intro r1))) (eo::define ((_v1 ($str_re_consume_rec s1 ($re_str_to_flat_form rev (eo::ite rev (eo::list_rev re.++ _v0) _v0)) @result.null rev))) (eo::ite (eo::eq _v1 false) ($str_re_consume_rec s1 r2 b rev) ($str_re_consume_rec s1 r2 ($result_combine _v1 b) rev)))))
  (($str_re_consume_rec s1 re.none @result.null rev) false)
  (($str_re_consume_rec s1 re.none b rev) b)
  (($str_re_consume_rec s1 r1 @result.null rev) (_ (str.in_re s1) r1))
  )
)
; define: $str_re_consume_process
(define $str_re_consume_process ((oneDir Bool) (r RegLan) (s (Seq Char)))
  (eo::define ((_v0 ($re_str_to_flat_form true (eo::list_rev re.++ ($re_nary_intro r))))) (eo::define ((_v1 (eo::list_rev str.++ ($str_flatten ($str_nary_intro s))))) (eo::define ((_v2 ($str_re_consume_rec _v1 _v0 @result.null true))) (eo::define ((_v3 ($str_membership_re _v2))) (eo::define ((_v4 (eo::and oneDir (eo::not (eo::eq _v3 (str.to_re "")))))) (eo::define ((_v5 ($str_re_consume_rec (eo::list_rev str.++ (eo::ite _v4 _v1 ($str_membership_str _v2))) ($re_str_to_flat_form true (eo::list_rev re.++ ($re_nary_intro (eo::ite _v4 _v0 _v3)))) @result.null false))) (eo::ite (eo::eq _v2 false) false (eo::ite (eo::eq _v5 false) false (_ (str.in_re ($str_nary_elim ($str_collect ($str_membership_str _v5)))) ($re_nary_elim ($re_str_from_flat_form false ($str_membership_re _v5)))))))))))))
; program: $str_re_consume
(program $str_re_consume ((s (Seq Char)) (r RegLan))
  :signature ((Seq Char) RegLan) Bool
  (
  (($str_re_consume s (re.* r)) (eo::define ((_v0 ($re_str_to_flat_form true (eo::list_rev re.++ ($re_nary_intro r))))) (eo::define ((_v1 (eo::list_rev str.++ ($str_flatten ($str_nary_intro s))))) (eo::define ((_v2 ($str_re_consume_rec _v1 _v0 @result.null true))) (eo::define ((_v3 ($str_membership_re _v2))) (eo::define ((_v4 (str.to_re ""))) (eo::define ((_v5 (eo::and true (eo::not (eo::eq _v3 _v4))))) (eo::define ((_v6 ($str_re_consume_rec (eo::list_rev str.++ (eo::ite _v5 _v1 ($str_membership_str _v2))) ($re_str_to_flat_form true (eo::list_rev re.++ ($re_nary_intro (eo::ite _v5 _v0 _v3)))) @result.null false))) (eo::define ((_v7 (eo::ite (eo::eq _v2 false) false (eo::ite (eo::eq _v6 false) false (_ (str.in_re ($str_nary_elim ($str_collect ($str_membership_str _v6)))) ($re_nary_elim ($re_str_from_flat_form false ($str_membership_re _v6)))))))) (eo::ite (eo::eq _v7 false) false (eo::requires ($str_membership_re _v7) _v4 (_ (str.in_re ($str_membership_str _v7)) (re.* r)))))))))))))
  (($str_re_consume s r) (eo::define ((_v0 ($re_str_to_flat_form true (eo::list_rev re.++ ($re_nary_intro r))))) (eo::define ((_v1 (eo::list_rev str.++ ($str_flatten ($str_nary_intro s))))) (eo::define ((_v2 ($str_re_consume_rec _v1 _v0 @result.null true))) (eo::define ((_v3 ($str_membership_re _v2))) (eo::define ((_v4 (eo::and false (eo::not (eo::eq _v3 (str.to_re "")))))) (eo::define ((_v5 ($str_re_consume_rec (eo::list_rev str.++ (eo::ite _v4 _v1 ($str_membership_str _v2))) ($re_str_to_flat_form true (eo::list_rev re.++ ($re_nary_intro (eo::ite _v4 _v0 _v3)))) @result.null false))) (eo::ite (eo::eq _v2 false) false (eo::ite (eo::eq _v5 false) false (_ (str.in_re ($str_nary_elim ($str_collect ($str_membership_str _v5)))) ($re_nary_elim ($re_str_from_flat_form false ($str_membership_re _v5)))))))))))))
  )
)
; program: $str_is_compatible
(program $str_is_compatible ((T Type) (xs1 (Seq T)) (xs2 (Seq T)) (c1 (Seq T)) (c2 (Seq T)))
  :signature ((Seq T) (Seq T)) Bool
  (
  ((eo::define ((_v0 (str.++ c1))) ($str_is_compatible (_ _v0 xs1) (_ _v0 xs2))) ($str_is_compatible xs1 xs2))
  (($str_is_compatible (_ (str.++ c1) xs1) (_ (str.++ c2) xs2)) (eo::requires (eo::ite (eo::eq c1 c2) false ($are_distinct_terms_list (_ ($eo_List_cons c1) (_ ($eo_List_cons c2) $eo_List_nil)) (eo::typeof c1))) true false))
  (($str_is_compatible c1 c2) (eo::or ($str_is_empty c1) ($str_is_empty c2)))
  )
)
; program: $str_overlap_rec
(program $str_overlap_rec ((s1 (Seq Char)) (s (Seq Char)) (t (Seq Char)))
  :signature ((Seq Char) (Seq Char)) Int
  (
  (($str_overlap_rec (_ (str.++ s) s1) t) (eo::ite ($str_is_compatible (_ (str.++ s) s1) t) 0 (eo::add 1 ($str_overlap_rec s1 t))))
  (($str_overlap_rec s t) 0)
  )
)
; define: $str_overlap
(define $str_overlap ((rev Bool) (U Type :implicit) (t (Seq U)) (s (Seq U)))
  (eo::define ((_v0 ($str_flatten ($str_nary_intro t)))) (eo::define ((_v1 ($str_flatten ($str_nary_intro s)))) ($str_overlap_rec (eo::ite rev (eo::list_rev str.++ _v1) _v1) (eo::ite rev (eo::list_rev str.++ _v0) _v0)))))
; define: $str_has_overlap
(define $str_has_overlap ((rev Bool) (U Type :implicit) (t (Seq U)) (s (Seq U)))
  (eo::define ((_v0 ($str_flatten ($str_nary_intro t)))) (eo::define ((_v1 ($str_flatten ($str_nary_intro s)))) (eo::gt ($str_value_len s) ($str_overlap_rec (eo::ite rev (eo::list_rev str.++ _v1) _v1) (eo::ite rev (eo::list_rev str.++ _v0) _v0))))))
; program: $str_from_int_eval_rec
(program $str_from_int_eval_rec ((n Int) (s (Seq Char)))
  :signature (Int (Seq Char)) (Seq Char)
  (
  (($str_from_int_eval_rec n s) (eo::ite (eo::eq n 0) (eo::ite (eo::eq s "") "0" s) ($str_from_int_eval_rec (eo::zdiv n 10) (eo::concat (eo::to_str (eo::add 48 (eo::zmod n 10))) s))))
  )
)
; define: $str_from_int_eval
(define $str_from_int_eval ((n Int))
  (eo::ite (eo::is_z n) (eo::ite (eo::is_neg n) "" ($str_from_int_eval_rec n "")) (str.from_int n)))
; program: $str_to_int_eval_rec
(program $str_to_int_eval_rec ((s2 (Seq Char)) (s1 (Seq Char)) (e Int) (n Int))
  :signature ((Seq Char) Int Int) Int
  (
  (($str_to_int_eval_rec (_ (str.++ s1) s2) e n) (eo::define ((_v0 (eo::add (eo::to_z s1) -48))) (eo::ite (eo::and (eo::gt 10 _v0) (eo::not (eo::is_neg _v0))) ($str_to_int_eval_rec s2 (eo::mul e 10) (eo::add (eo::mul _v0 e) n)) -1)))
  (($str_to_int_eval_rec "" e n) n)
  )
)
; define: $str_to_int_eval
(define $str_to_int_eval ((s (Seq Char)))
  (eo::ite (eo::is_str s) (eo::ite (eo::eq s "") -1 ($str_to_int_eval_rec (eo::list_rev str.++ ($str_flatten ($str_nary_intro s))) 1 0)) (str.to_int s)))
; program: $str_case_conv_rec
(program $str_case_conv_rec ((s1 (Seq Char)) (s2 (Seq Char)) (isLower Bool))
  :signature ((Seq Char) Bool) (Seq Char)
  (
  (($str_case_conv_rec (_ (str.++ s1) s2) true) (eo::define ((_v0 (eo::to_z s1))) (eo::concat (eo::to_str (eo::add _v0 (eo::ite (eo::and (eo::gt 91 _v0) (eo::gt _v0 64)) 32 0))) ($str_case_conv_rec s2 true))))
  (($str_case_conv_rec (_ (str.++ s1) s2) false) (eo::define ((_v0 (eo::to_z s1))) (eo::concat (eo::to_str (eo::add _v0 (eo::ite (eo::and (eo::gt 123 _v0) (eo::gt _v0 96)) -32 0))) ($str_case_conv_rec s2 false))))
  (($str_case_conv_rec "" isLower) "")
  )
)
; define: $str_to_lower_eval
(define $str_to_lower_eval ((s (Seq Char)))
  (eo::ite (eo::is_str s) ($str_case_conv_rec ($str_flatten ($str_nary_intro s)) true) (str.to_lower s)))
; define: $str_to_upper_eval
(define $str_to_upper_eval ((s (Seq Char)))
  (eo::ite (eo::is_str s) ($str_case_conv_rec ($str_flatten ($str_nary_intro s)) false) (str.to_upper s)))
; define: $str_rev_eval
(define $str_rev_eval ((s (Seq Char)))
  (eo::ite (eo::is_str s) ($str_nary_elim ($str_collect (eo::list_rev str.++ ($str_flatten ($str_nary_intro s))))) (str.rev s)))
; program: $str_leq_eval_rec
(program $str_leq_eval_rec ((s2 (Seq Char)) (t2 (Seq Char)) (s1 (Seq Char)) (t1 (Seq Char)))
  :signature ((Seq Char) (Seq Char)) Bool
  (
  (($str_leq_eval_rec (_ (str.++ s1) s2) (_ (str.++ t1) t2)) (eo::ite (eo::eq s1 t1) ($str_leq_eval_rec s2 t2) (eo::gt (eo::to_z t1) (eo::to_z s1))))
  (($str_leq_eval_rec "" t1) true)
  (($str_leq_eval_rec s1 t1) false)
  )
)
; define: $str_leq_eval
(define $str_leq_eval ((t (Seq Char)) (s (Seq Char)))
  (eo::ite (eo::and (eo::is_str s) (eo::is_str t)) ($str_leq_eval_rec ($str_flatten ($str_nary_intro s)) ($str_flatten ($str_nary_intro t))) (_ (str.<= s) t)))
; program: $str_eval_replace_all_rec
(program $str_eval_replace_all_rec ((n Int) (s (Seq Char)) (t (Seq Char)) (lent Int) (u (Seq Char)))
  :signature ((Seq Char) (Seq Char) (Seq Char) Int Int) (Seq Char)
  (
  (($str_eval_replace_all_rec s t u -1 lent) s)
  (($str_eval_replace_all_rec s t u n lent) (eo::define ((_v0 (eo::extract s (eo::add n lent) (eo::len s)))) (eo::concat ($str_eval_replace_all_rec _v0 t u (eo::find _v0 t) lent) u)))
  )
)
; define: $str_eval_replace_all
(define $str_eval_replace_all ((u (Seq Char)) (t (Seq Char)) (s (Seq Char)))
  (eo::ite (eo::and (eo::is_str u) (eo::is_str t)) (eo::ite (eo::eq t "") s ($str_eval_replace_all_rec s t u (eo::find s t) (eo::len t))) (_ (_ (str.replace_all s) t) u)))
; program: $mk_re_concat
(program $mk_re_concat ((Es Bool) (s (Seq Char)) (r RegLan) (s1 (Seq Char)) (r1 RegLan))
  :signature (Bool Bool) Bool
  (
  (($mk_re_concat (_ (and (_ (str.in_re s) r)) Es) (_ (str.in_re s1) r1)) ($mk_re_concat Es (_ (str.in_re (eo::cons str.++ s s1)) (eo::cons re.++ r r1))))
  (($mk_re_concat true (_ (str.in_re s1) r1)) (_ (str.in_re s1) r1))
  )
)
; program: $mk_re_unfold_pos_star
(program $mk_re_unfold_pos_star ((r RegLan) (t (Seq Char)) (k2 (Seq Char)) (M Bool) (k1 (Seq Char)) (k3 (Seq Char)))
  :signature ((Seq Char) RegLan (_ (@Pair (Seq Char)) Bool)) Bool
  (
  (($mk_re_unfold_pos_star t r (_ (@pair (_ (str.++ k1) (_ (str.++ k2) (_ (str.++ k3) "")))) M)) (eo::define ((_v0 (= t))) (_ (or (_ _v0 "")) (_ (or (_ (str.in_re t) r)) (_ (or (_ (and (_ (and (_ _v0 (_ (str.++ k1) (_ (str.++ k2) (_ (str.++ k3) ""))))) M)) (_ (and (not (_ (= k1) ""))) (_ (and (not (_ (= k3) ""))) true)))) false)))))
  )
)
; program: $mk_re_unfold_pos
(program $mk_re_unfold_pos ((t (Seq Char)) (r1 RegLan) (r2 RegLan))
  :signature ((Seq Char) RegLan) Bool
  (
  (($mk_re_unfold_pos t (re.* r1)) (eo::define ((_v0 (re.++ r1))) (eo::define ((_v1 (_ _v0 (_ (re.++ (re.* r1)) (_ _v0 (str.to_re "")))))) ($mk_re_unfold_pos_star t r1 ($re_unfold_pos_concat_rec t _v1 _v1 0)))))
  (($mk_re_unfold_pos t (_ (re.++ r1) r2)) (eo::define ((_v0 (_ (re.++ r1) r2))) (eo::define ((_v1 ($re_unfold_pos_concat_rec t _v0 _v0 0))) (eo::define ((_v2 ($pair_second _v1))) (eo::define ((_v3 (_ (= t) ($pair_first _v1)))) (eo::ite (eo::eq _v2 true) _v3 (eo::cons and _v3 _v2)))))))
  )
)
; program: $mk_re_unfold_neg_concat_fixed
(program $mk_re_unfold_neg_concat_fixed ((rev Bool) (s (Seq Char)) (r1 RegLan) (r2 RegLan))
  :signature ((Seq Char) RegLan Bool) Bool
  (
  (($mk_re_unfold_neg_concat_fixed s (_ (re.++ r1) r2) rev) (eo::define ((_v0 ($str_fixed_len_re r1))) (eo::define ((_v1 (_ (- (str.len s)) _v0))) (eo::define ((_v2 (str.substr s))) (eo::define ((_v3 (_ _v2 0))) (eo::ite rev (_ (or (not (_ (str.in_re (_ (_ _v2 _v1) _v0)) r1))) (_ (or (not (_ (str.in_re (_ _v3 _v1)) ($singleton_elim (eo::ite rev (eo::list_rev re.++ r2) r2))))) false)) (_ (or (not (_ (str.in_re (_ _v3 _v0)) r1))) (_ (or (not (_ (str.in_re (_ (_ _v2 _v0) _v1)) ($singleton_elim r2)))) false))))))))
  )
)
; program: $mk_re_unfold_neg
(program $mk_re_unfold_neg ((r1 RegLan) (t (Seq Char)) (r2 RegLan))
  :signature ((Seq Char) RegLan) Bool
  (
  (($mk_re_unfold_neg t (re.* r1)) (eo::define ((_v0 (eo::var "@var.str_index" Int))) (eo::define ((_v1 (str.len t))) (eo::define ((_v2 (str.substr t))) (_ (and (not (_ (= t) ""))) (_ (and (_ (forall (_ ($eo_List_cons _v0) $eo_List_nil)) (_ (or (_ (<= _v0) 0)) (_ (or (_ (< _v1) _v0)) (_ (or (not (_ (str.in_re (_ (_ _v2 0) _v0)) r1))) (_ (or (not (_ (str.in_re (_ (_ _v2 _v0) (_ (- _v1) _v0))) (re.* r1)))) false)))))) true))))))
  (($mk_re_unfold_neg t (_ (re.++ r1) r2)) (eo::define ((_v0 (eo::var "@var.str_index" Int))) (eo::define ((_v1 (str.len t))) (eo::define ((_v2 (str.substr t))) (_ (forall (_ ($eo_List_cons _v0) $eo_List_nil)) (_ (or (_ (< _v0) 0)) (_ (or (_ (< _v1) _v0)) (_ (or (not (_ (str.in_re (_ (_ _v2 0) _v0)) r1))) (_ (or (not (_ (str.in_re (_ (_ _v2 _v0) (_ (- _v1) _v0))) ($singleton_elim r2)))) false)))))))))
  )
)
; program: $str_mk_ext_deq
(program $str_mk_ext_deq ((T Type) (s (Seq T)) (t (Seq T)) (k Int))
  :signature ((Seq T) (Seq T) Int Type) Bool
  (
  (($str_mk_ext_deq s t k (Seq Char)) (not (_ (= (_ (_ (str.substr s) k) 1)) (_ (_ (str.substr t) k) 1))))
  (($str_mk_ext_deq s t k (Seq T)) (not (_ (= (_ (seq.nth s) k)) (_ (seq.nth t) k))))
  )
)
; program: $str_multiset_overapprox
(program $str_multiset_overapprox ((T Type) (ss (Seq T)) (n Int) (m Int) (t (Seq T)) (r (Seq T)) (s (Seq T)))
  :signature ((Seq T)) $eo_List
  (
  (($str_multiset_overapprox (_ (str.++ s) ss)) (eo::list_concat $eo_List_cons ($str_multiset_overapprox s) ($str_multiset_overapprox ss)))
  (($str_multiset_overapprox (_ (_ (str.substr s) n) m)) ($str_multiset_overapprox s))
  (($str_multiset_overapprox (_ (_ (str.replace s) t) r)) (eo::list_concat $eo_List_cons ($str_multiset_overapprox s) ($str_multiset_overapprox r)))
  (($str_multiset_overapprox s) (eo::define ((_v0 (_ ($eo_List_cons s) $eo_List_nil))) (eo::ite ($str_is_empty s) $eo_List_nil (eo::ite (eo::is_str s) (eo::ite (eo::gt (eo::len s) 1) ($str_multiset_overapprox ($str_flatten_word s)) _v0) _v0))))
  )
)
; program: $str_is_multiset_subset_strict
(program $str_is_multiset_subset_strict ((T Type) (ss (Seq T)) (s (Seq T)) (emp (Seq T)) (xs $eo_List) (nr $eo_List))
  :signature ((Seq T) $eo_List $eo_List) Bool
  (
  (($str_is_multiset_subset_strict (_ (str.++ s) ss) xs nr) (eo::define ((_v0 (eo::list_erase $eo_List_cons xs s))) ($str_is_multiset_subset_strict ss _v0 (eo::ite (eo::eq xs _v0) (_ ($eo_List_cons s) nr) nr))))
  (($str_is_multiset_subset_strict emp xs (_ ($eo_List_cons s) nr)) (eo::ite ($are_distinct_terms_list_rec s xs (eo::typeof s)) true ($str_is_multiset_subset_strict emp xs nr)))
  (($str_is_multiset_subset_strict emp xs nr) false)
  )
)
; define: $str_eval_indexof_re
(define $str_eval_indexof_re ((n Int) (r RegLan) (s (Seq Char)))
  (eo::define ((_v0 (eo::len s))) (eo::define ((_v1 (eo::extract s n _v0))) (eo::define ((_v2 ($pair_first (eo::requires (eo::is_str _v1) true ($str_first_match_rec _v1 r (_ (re.++ r) (_ (re.++ re.all) (str.to_re ""))) 0 (eo::len _v1)))))) (eo::ite (eo::or (eo::gt n _v0) (eo::is_neg n)) -1 (eo::ite (eo::eq _v2 -1) -1 (eo::add n _v2)))))))
; program: $str_eval_replace_re
(program $str_eval_replace_re ((r RegLan) (sp Int) (t (Seq Char)) (ep Int) (s (Seq Char)))
  :signature ((Seq Char) RegLan (Seq Char) (_ (@Pair Int) Int)) (Seq Char)
  (
  (($str_eval_replace_re s r t (_ (@pair -1) -1)) s)
  (($str_eval_replace_re s r t (_ (@pair sp) ep)) (_ (str.++ (eo::extract s 0 (eo::add sp -1))) (_ (str.++ t) (_ (str.++ (eo::extract s ep (eo::len s))) ""))))
  )
)
; program: $str_eval_replace_re_all_rec
(program $str_eval_replace_re_all_rec ((sp Int) (t (Seq Char)) (r RegLan) (ep Int) (s (Seq Char)))
  :signature ((Seq Char) RegLan (Seq Char) (_ (@Pair Int) Int)) (Seq Char)
  (
  (($str_eval_replace_re_all_rec "" r t (_ (@pair -1) -1)) "")
  (($str_eval_replace_re_all_rec s r t (_ (@pair -1) -1)) (eo::cons str.++ s ""))
  (($str_eval_replace_re_all_rec s r t (_ (@pair sp) ep)) (eo::define ((_v0 (eo::extract s ep (eo::len s)))) (eo::cons str.++ (eo::extract s 0 (eo::add sp -1)) (eo::cons str.++ t ($str_eval_replace_re_all_rec _v0 r t (eo::requires (eo::is_str _v0) true ($str_first_match_rec _v0 r (_ (re.++ r) (_ (re.++ re.all) (str.to_re ""))) 0 (eo::len _v0))))))))
  )
)
; define: $str_eval_replace_re_all
(define $str_eval_replace_re_all ((t (Seq Char)) (r RegLan) (s (Seq Char)))
  (eo::define ((_v0 (str.to_re ""))) (eo::define ((_v1 (_ (re.inter r) (_ (re.inter (re.comp _v0)) re.all)))) ($singleton_elim ($str_eval_replace_re_all_rec s _v1 t (eo::requires (eo::is_str s) true ($str_first_match_rec s _v1 (_ (re.++ _v1) (_ (re.++ re.all) _v0)) 0 (eo::len s))))))))
; program: $seq_is_prefix
(program $seq_is_prefix ((T Type) (ss (Seq T)) (es T) (t (Seq T)) (et T) (ts (Seq T)))
  :signature ((Seq T) (Seq T)) Bool
  (
  (($seq_is_prefix t t) true)
  ((eo::define ((_v0 (str.++ t))) ($seq_is_prefix (_ _v0 ts) (_ _v0 ss))) ($seq_is_prefix ts ss))
  (($seq_is_prefix (_ (str.++ (seq.unit et)) ts) (_ (str.++ (seq.unit es)) ss)) (eo::requires (eo::ite (eo::eq et es) false ($are_distinct_terms_list (_ ($eo_List_cons et) (_ ($eo_List_cons es) $eo_List_nil)) (eo::typeof et))) true false))
  (($seq_is_prefix (_ seq.empty (Seq T)) t) true)
  (($seq_is_prefix (_ (str.++ (seq.unit et)) ts) (_ seq.empty (Seq T))) false)
  )
)
; program: $seq_find
(program $seq_find ((T Type) (t (Seq T)) (ts (Seq T)) (s (Seq T)) (n Int))
  :signature ((Seq T) (Seq T) Int) Int
  (
  (($seq_find t t n) n)
  (($seq_find (_ seq.empty (Seq T)) s n) -1)
  (($seq_find (_ (str.++ t) ts) s n) (eo::ite ($seq_is_prefix (_ (str.++ t) ts) s) n ($seq_find ts s (eo::add n 1))))
  )
)
; program: $seq_subsequence
(program $seq_subsequence ((T Type) (t (Seq T)) (e T) (l Int) (u Int) (ts (Seq T)))
  :signature (Int Int (Seq T)) (Seq T)
  (
  (($seq_subsequence l u (_ seq.empty (Seq T))) (_ seq.empty (Seq T)))
  (($seq_subsequence l 0 t) (_ seq.empty (eo::typeof t)))
  (($seq_subsequence 0 u (_ (str.++ (seq.unit e)) ts)) (eo::cons str.++ (seq.unit e) ($seq_subsequence 0 (eo::add u -1) ts)))
  (($seq_subsequence l u (_ (str.++ (seq.unit e)) ts)) ($seq_subsequence (eo::add l -1) (eo::add u -1) ts))
  )
)
; program: $seq_eval_replace_all_rec
(program $seq_eval_replace_all_rec ((T Type) (u (Seq T)) (n Int) (s (Seq T)) (t (Seq T)) (lent Int))
  :signature ((Seq T) (Seq T) (Seq T) Int Int) (Seq T)
  (
  (($seq_eval_replace_all_rec s t u -1 lent) s)
  (($seq_eval_replace_all_rec s t u n lent) (eo::define ((_v0 ($seq_subsequence (eo::add n lent) ($str_value_len s) s))) (eo::list_concat str.++ ($seq_subsequence 0 n s) (eo::list_concat str.++ u ($seq_eval_replace_all_rec _v0 t u ($seq_find _v0 t 0) lent)))))
  )
)
; program: $seq_eval
(program $seq_eval ((T Type) (ts (Seq T)) (m Int) (r (Seq T)) (s (Seq T)) (n Int) (t (Seq T)))
  :signature (T) T
  (
  (($seq_eval (_ (seq.nth t) n)) ($seq_element_of_unit (eo::list_nth str.++ ($str_nary_intro t) n)))
  (($seq_eval (str.len t)) ($str_value_len ($str_nary_intro t)))
  (($seq_eval (_ (str.++ t) ts)) ($str_nary_elim (eo::list_concat str.++ ($str_nary_intro t) ($str_nary_intro ($seq_eval ts)))))
  (($seq_eval (_ (_ (str.substr t) n) m)) ($str_nary_elim ($seq_subsequence n (eo::add n m) ($str_nary_intro t))))
  (($seq_eval (_ (str.contains t) s)) (eo::not (eo::is_neg ($seq_find ($str_nary_intro t) ($str_nary_intro s) 0))))
  (($seq_eval (_ (_ (str.replace t) s) r)) (eo::define ((_v0 ($str_nary_intro t))) (eo::define ((_v1 ($str_nary_intro s))) (eo::define ((_v2 ($seq_find _v0 _v1 0))) (eo::ite (eo::is_neg _v2) t ($str_nary_elim (eo::list_concat str.++ ($seq_subsequence 0 _v2 _v0) (eo::list_concat str.++ ($str_nary_intro r) ($seq_subsequence (eo::add _v2 ($str_value_len _v1)) ($str_value_len _v0) _v0)))))))))
  (($seq_eval (_ (_ (str.replace_all t) s) r)) (eo::define ((_v0 ($str_nary_intro t))) (eo::define ((_v1 ($str_nary_intro s))) (eo::ite (eo::eq ($str_value_len s) 0) t ($str_nary_elim ($seq_eval_replace_all_rec _v0 _v1 ($str_nary_intro r) ($seq_find _v1 _v0 0) ($str_value_len _v0)))))))
  (($seq_eval (_ (_ (str.indexof t) s) n)) (eo::define ((_v0 ($str_nary_intro t))) ($seq_find ($seq_subsequence n ($str_value_len _v0) _v0) ($str_nary_intro s) n)))
  (($seq_eval (_ (str.prefixof t) s)) ($seq_is_prefix ($str_nary_intro t) ($str_nary_intro s)))
  (($seq_eval (_ (str.suffixof t) s)) ($seq_is_prefix (eo::list_rev str.++ ($str_nary_intro t)) (eo::list_rev str.++ ($str_nary_intro s))))
  (($seq_eval (_ (str.at t) n)) ($seq_eval (_ (_ (str.substr t) n) 1)))
  (($seq_eval (str.rev t)) ($str_nary_elim (eo::list_rev str.++ ($str_nary_intro t))))
  (($seq_eval t) t)
  )
)
; program: $set_union_to_list
(program $set_union_to_list ((T Type) (t (Set T)) (e T))
  :signature ((Set T)) $eo_List
  (
  (($set_union_to_list (_ (set.union (set.singleton e)) t)) (eo::cons $eo_List_cons e ($set_union_to_list t)))
  (($set_union_to_list (_ set.empty (Set T))) $eo_List_nil)
  (($set_union_to_list (set.singleton e)) (eo::cons $eo_List_cons e $eo_List_nil))
  )
)
; program: $eval_sets_inter
(program $eval_sets_inter ((T Type) (a T) (as $eo_List) (bs $eo_List))
  :signature ($eo_List $eo_List) $eo_List
  (
  (($eval_sets_inter (_ ($eo_List_cons a) as) bs) (eo::define ((_v0 ($eval_sets_inter as bs))) (eo::ite (eo::is_neg (eo::list_find $eo_List_cons bs a)) (eo::requires ($are_distinct_terms_list_rec a bs (eo::typeof a)) true _v0) (eo::cons $eo_List_cons a _v0))))
  (($eval_sets_inter $eo_List_nil bs) $eo_List_nil)
  )
)
; program: $eval_sets_minus
(program $eval_sets_minus ((T Type) (a T) (as $eo_List) (bs $eo_List))
  :signature ($eo_List $eo_List) $eo_List
  (
  (($eval_sets_minus (_ ($eo_List_cons a) as) bs) (eo::define ((_v0 ($eval_sets_minus as bs))) (eo::ite (eo::is_neg (eo::list_find $eo_List_cons bs a)) (eo::requires ($are_distinct_terms_list_rec a bs (eo::typeof a)) true (eo::cons $eo_List_cons a _v0)) _v0)))
  (($eval_sets_minus $eo_List_nil bs) $eo_List_nil)
  )
)
; program: $eval_sets_op
(program $eval_sets_op ((T Type) (s (Set T)) (t (Set T)))
  :signature ((Set T)) $eo_List
  (
  (($eval_sets_op (_ (set.union s) t)) (eo::list_concat $eo_List_cons ($set_union_to_list s) ($set_union_to_list t)))
  (($eval_sets_op (_ (set.inter s) t)) ($eval_sets_inter ($set_union_to_list s) ($set_union_to_list t)))
  (($eval_sets_op (_ (set.minus s) t)) ($eval_sets_minus ($set_union_to_list s) ($set_union_to_list t)))
  )
)
; program: $set_eval_insert
(program $set_eval_insert ((T Type) (x T) (xs $eo_List) (t (Set T)))
  :signature ($eo_List (Set T)) (Set T)
  (
  (($set_eval_insert (_ ($eo_List_cons x) xs) t) (_ (set.union (set.singleton x)) ($set_eval_insert xs t)))
  (($set_eval_insert $eo_List_nil t) t)
  )
)
; declare: int_to_bv
(declare-parameterized-const int_to_bv ((w Int) ($eo_x_1 Int)) (BitVec w))
; declare: ubv_to_int
(declare-parameterized-const ubv_to_int ((m Int :implicit) ($eo_x_1 (BitVec m))) Int)
; declare: sbv_to_int
(declare-parameterized-const sbv_to_int ((m Int :implicit) ($eo_x_1 (BitVec m))) Int)
; program: $abconv_ubv_to_int_elim
(program $abconv_ubv_to_int_elim ((n Int) (b (BitVec n)) (i Int) (w Int) (p Int))
  :signature ((BitVec n) Int Int Int) Int
  (
  (($abconv_ubv_to_int_elim b w w p) 0)
  (($abconv_ubv_to_int_elim b i w p) (eo::cons + (_ (_ (ite (_ (= (_ (_ (extract i) i) b)) #b1)) p) 0) ($abconv_ubv_to_int_elim b (eo::add i 1) w (eo::mul p 2))))
  )
)
; program: $abconv_int_to_bv_elim
(program $abconv_int_to_bv_elim ((n Int) (w Int) (p Int))
  :signature (Int (eo::quote w) Int) (BitVec w)
  (
  (($abconv_int_to_bv_elim n 0 p) (eo::to_bin 0 0))
  (($abconv_int_to_bv_elim n w p) (eo::define ((_v0 (eo::zdiv p 2))) (eo::cons concat (_ (_ (ite (_ (>= (_ (mod_total n) p)) _v0)) #b1) #b0) ($abconv_int_to_bv_elim n (eo::add w -1) _v0))))
  )
)
; program: $mk_skolems
(program $mk_skolems ((x $eo_List) (xs $eo_List) (F Bool) (i Int))
  :signature ($eo_List Bool Int) $eo_List
  (
  (($mk_skolems (_ ($eo_List_cons x) xs) F i) (eo::cons $eo_List_cons (_ @quantifiers_skolemize F i) ($mk_skolems xs F (eo::add i 1))))
  (($mk_skolems $eo_List_nil F i) $eo_List_nil)
  )
)
; program: $mk_quant_unused_vars_rec
(program $mk_quant_unused_vars_rec ((T Type) (x T) (xs $eo_List) (F Bool))
  :signature ($eo_List Bool) $eo_List
  (
  (($mk_quant_unused_vars_rec $eo_List_nil F) $eo_List_nil)
  (($mk_quant_unused_vars_rec (_ ($eo_List_cons x) xs) F) (eo::define ((_v0 ($mk_quant_unused_vars_rec xs F))) (eo::ite ($contains_subterm F x) (eo::cons $eo_List_cons x (eo::list_erase $eo_List_cons _v0 x)) _v0)))
  )
)
; program: $mk_quant
(program $mk_quant ((Q (-> $eo_List (-> Bool Bool))) (x $eo_List) (F Bool))
  :signature ((-> $eo_List (-> Bool Bool)) $eo_List Bool) Bool
  (
  (($mk_quant Q $eo_List_nil F) F)
  (($mk_quant Q x F) (_ (Q x) F))
  )
)
; program: $mk_quant_merge_prenex
(program $mk_quant_merge_prenex ((x $eo_List) (Q (-> $eo_List (-> Bool Bool))) (y $eo_List) (F Bool))
  :signature ((-> $eo_List (-> Bool Bool)) Bool $eo_List) Bool
  (
  (($mk_quant_merge_prenex Q (_ (Q x) F) y) ($mk_quant_merge_prenex Q F (eo::list_concat $eo_List_cons y x)))
  (($mk_quant_merge_prenex Q F y) (_ (Q y) F))
  )
)
; program: $mk_quant_miniscope_and
(program $mk_quant_miniscope_and ((f Bool) (fs Bool) (x $eo_List))
  :signature ($eo_List Bool) Bool
  (
  (($mk_quant_miniscope_and x (_ (and f) fs)) (eo::cons and (_ (forall x) f) ($mk_quant_miniscope_and x fs)))
  (($mk_quant_miniscope_and x true) true)
  )
)
; program: $is_quant_miniscope_or
(program $is_quant_miniscope_or ((xs $eo_List) (fs Bool) (ys $eo_List) (gs Bool) (x $eo_List) (f Bool) (g Bool))
  :signature ($eo_List Bool Bool) Bool
  (
  ((eo::define ((_v0 (or f))) ($is_quant_miniscope_or x (_ _v0 fs) (_ _v0 gs))) (eo::requires ($contains_aterm_list f x) false ($is_quant_miniscope_or x fs gs)))
  (($is_quant_miniscope_or x (_ (or f) fs) (_ (or (_ (forall $eo_List_nil) f)) gs)) (eo::requires ($contains_aterm_list f x) false ($is_quant_miniscope_or x fs gs)))
  ((eo::define ((_v0 ($eo_List_cons x))) ($is_quant_miniscope_or (_ _v0 xs) (_ (or f) fs) (_ (or (_ (forall (_ _v0 ys)) f)) gs))) (eo::requires ($contains_subterm gs x) false ($is_quant_miniscope_or xs (_ (or f) fs) (_ (or (_ (forall ys) f)) gs))))
  (($is_quant_miniscope_or $eo_List_nil false false) true)
  (($is_quant_miniscope_or x f g) false)
  )
)
; define: $mk_quant_var_elim_eq_subs
(define $mk_quant_var_elim_eq_subs ((F Bool) (T Type :implicit) (t T) (x T))
  (eo::requires ($contains_subterm t x) false ($substitute x t F)))
; program: $mk_quant_var_elim_eq
(program $mk_quant_var_elim_eq ((T Type) (x T) (t T) (F Bool))
  :signature (T Bool) Bool
  (
  (($mk_quant_var_elim_eq x (not (_ (= x) t))) (eo::requires ($contains_subterm t x) false ($substitute x t false)))
  (($mk_quant_var_elim_eq x (_ (or (not (_ (= x) t))) F)) (eo::requires ($contains_subterm t x) false ($substitute x t ($singleton_elim F))))
  )
)
; program: $is_quant_dt_split_conj
(program $is_quant_dt_split_conj ((T Type) (C Type) (ys $eo_List) (U Type) (y U) (zs $eo_List) (W Type) (c (-> U W)) (x T) (cx T) (F Bool) (G Bool))
  :signature (T C $eo_List Bool Bool) Bool
  (
  ((eo::define ((_v0 ($eo_List_cons y))) ($is_quant_dt_split_conj x c (_ _v0 ys) F (_ (forall (_ _v0 zs)) G))) (eo::requires ($contains_subterm zs y) false ($is_quant_dt_split_conj x c ys F (_ (forall zs) G))))
  (($is_quant_dt_split_conj x c $eo_List_nil F (_ (forall (_ ($eo_List_cons y) zs)) G)) (eo::requires ($contains_subterm zs y) false ($is_quant_dt_split_conj x (c y) $eo_List_nil F (_ (forall zs) G))))
  (($is_quant_dt_split_conj x c $eo_List_nil F (_ (forall $eo_List_nil) G)) ($is_quant_dt_split_conj x c $eo_List_nil F G))
  (($is_quant_dt_split_conj x cx $eo_List_nil F G) (eo::eq ($substitute x cx F) G))
  )
)
; program: $is_quant_dt_split
(program $is_quant_dt_split ((T Type) (C Type) (c C) (G Bool) (x T) (cs $eo_List) (ys $eo_List) (F Bool) (g Bool))
  :signature (T $eo_List $eo_List Bool Bool) Bool
  (
  (($is_quant_dt_split x (_ ($eo_List_cons c) cs) ys F (_ (and g) G)) (eo::requires ($is_quant_dt_split_conj x c ys F g) true ($is_quant_dt_split x cs ys F G)))
  (($is_quant_dt_split x $eo_List_nil ys F true) true)
  (($is_quant_dt_split x cs ys F g) ($is_quant_dt_split x cs ys F (_ (and g) true)))
  )
)
; program: $mk_inv_cond_op_disj
(program $mk_inv_cond_op_disj ((n Int) (f (eo::define ((_v0 (BitVec n))) (-> _v0 _v0))) (t (BitVec n)) (w Int))
  :signature ((eo::define ((_v0 (BitVec n))) (-> _v0 _v0)) (BitVec n) Int Int) Bool
  (
  (($mk_inv_cond_op_disj f t w w) (eo::cons or (_ (= (f (eo::to_bin w w))) t) false))
  (($mk_inv_cond_op_disj f t w n) (eo::cons or (_ (= (f (eo::to_bin w n))) t) ($mk_inv_cond_op_disj f t w (eo::add n 1))))
  )
)
; program: $mk_invertibility_condition
(program $mk_invertibility_condition ((n Int) (nil (BitVec n)) (ss (BitVec n)) (s (BitVec n)) (t (BitVec n)) (x (BitVec n)) (k Int) (tk (BitVec k)) (m Int))
  :signature ((BitVec n) Bool) Bool
  (
  (($mk_invertibility_condition x (_ (= (_ (bvmul x) (_ (bvmul s) nil))) t)) (eo::define ((_v0 (bvneg s))) (eo::define ((_v1 (_ (bvor _v0) (_ (bvor s) (eo::nil bvor (eo::typeof _v0)))))) (eo::requires (eo::to_z nil) 1 (_ (= (_ (bvand _v1) (_ (bvand t) (eo::nil bvand (eo::typeof _v1))))) t)))))
  (($mk_invertibility_condition x (_ (= (_ (bvudiv x) s)) t)) (_ (= (_ (bvudiv (_ (bvmul s) (_ (bvmul t) (eo::nil bvmul (eo::typeof s))))) s)) t))
  (($mk_invertibility_condition x (_ (= (_ (bvudiv s) x)) t)) (eo::define ((_v0 (bvudiv s))) (_ (= (_ _v0 (_ _v0 t))) t)))
  (($mk_invertibility_condition x (_ (= (_ (bvurem x) s)) t)) (_ (bvuge (bvnot (bvneg s))) t))
  (($mk_invertibility_condition x (_ (= (_ (bvurem s) x)) t)) (eo::define ((_v0 (bvadd t))) (eo::define ((_v1 (_ (bvsub (_ _v0 (_ _v0 (eo::nil bvadd (eo::typeof t))))) s))) (_ (bvuge (_ (bvand _v1) (_ (bvand s) (eo::nil bvand (eo::typeof _v1))))) t))))
  (($mk_invertibility_condition x (_ (= (_ (bvor x) ss)) t)) (_ (= t) (_ (bvor t) ss)))
  (($mk_invertibility_condition x (_ (= (_ (bvand x) ss)) t)) (_ (= t) (_ (bvand t) ss)))
  (($mk_invertibility_condition x (_ (= (_ (bvashr x) s)) t)) (eo::define ((_v0 ($bv_bitwidth (eo::typeof x)))) (eo::define ((_v1 (eo::to_bin _v0 0))) (eo::define ((_v2 (= t))) (eo::define ((_v3 (_ (bvult s) (eo::to_bin _v0 _v0)))) (_ (and (_ (=> _v3) (_ (= (_ (bvashr (_ (bvshl t) s)) s)) t))) (_ (and (_ (=> (not _v3)) (_ (or (_ _v2 (eo::not _v1))) (_ (or (_ _v2 _v1)) false)))) true)))))))
  (($mk_invertibility_condition x (_ (= (_ (bvashr s) x)) t)) (eo::cons or (_ (= s) t) ($mk_inv_cond_op_disj (bvashr s) t ($bv_bitwidth (eo::typeof x)) 1)))
  (($mk_invertibility_condition x (_ (= (_ (bvshl x) s)) t)) (_ (= (_ (bvshl (_ (bvlshr t) s)) s)) t))
  (($mk_invertibility_condition x (_ (= (_ (bvshl s) x)) t)) (eo::cons or (_ (= s) t) ($mk_inv_cond_op_disj (bvshl s) t ($bv_bitwidth (eo::typeof x)) 1)))
  (($mk_invertibility_condition x (_ (= (_ (bvlshr x) s)) t)) (_ (= (_ (bvlshr (_ (bvshl t) s)) s)) t))
  (($mk_invertibility_condition x (_ (= (_ (bvlshr s) x)) t)) (eo::cons or (_ (= s) t) ($mk_inv_cond_op_disj (bvlshr s) t ($bv_bitwidth (eo::typeof x)) 1)))
  (($mk_invertibility_condition x (_ (= (_ (sign_extend m) x)) tk)) (eo::define ((_v0 (eo::to_bin (eo::add m 1) 0))) (eo::define ((_v1 (eo::add ($bv_bitwidth (eo::typeof tk)) -1))) (eo::define ((_v2 (= (_ (_ (extract _v1) (eo::add _v1 (eo::neg m))) tk)))) (_ (or (_ _v2 _v0)) (_ (or (_ _v2 (eo::not _v0))) false))))))
  )
)
; program: $mk_dt_split
(program $mk_dt_split ((D Type) (T Type) (c T) (xs $eo_List) (x D))
  :signature ($eo_List D) Bool
  (
  (($mk_dt_split $eo_List_nil x) false)
  (($mk_dt_split (_ ($eo_List_cons c) xs) x) (eo::cons or (_ (is c) x) ($mk_dt_split xs x)))
  )
)
; program: $mk_dt_inst_rec
(program $mk_dt_inst_rec ((T Type) (D Type) (tb D) (xs $eo_List) (U Type) (t (-> T U)) (s (-> D T)) (x D))
  :signature ($eo_List D T) D
  (
  (($mk_dt_inst_rec $eo_List_nil x tb) tb)
  (($mk_dt_inst_rec (_ ($eo_List_cons s) xs) x t) ($mk_dt_inst_rec xs x (t (s x))))
  )
)
; program: $mk_dt_inst_tuple_rec
(program $mk_dt_inst_tuple_rec ((D Type) (U Type) (T1 Type) (T2 Type) (x D) (n Int))
  :signature ((eo::quote U) D Int) U
  (
  (($mk_dt_inst_tuple_rec UnitTuple x n) tuple.unit)
  (($mk_dt_inst_tuple_rec (_ (Tuple T1) T2) x n) (eo::cons tuple (_ (tuple.select n) x) ($mk_dt_inst_tuple_rec T2 x (eo::add n 1))))
  )
)
; program: $mk_dt_inst
(program $mk_dt_inst ((C Type) (T1 Type) (T2 Type) (xt (_ (Tuple T1) T2)) (xu UnitTuple) (D Type) (x D) (c C))
  :signature (Type C D) D
  (
  (($mk_dt_inst (_ (Tuple T1) T2) tuple xt) ($mk_dt_inst_tuple_rec (_ (Tuple T1) T2) xt 0))
  (($mk_dt_inst UnitTuple tuple.unit xu) tuple.unit)
  (($mk_dt_inst D c x) ($mk_dt_inst_rec ($dt_get_selectors D c) x ($assoc_nil_nth $eo_List_cons (eo::dt_constructors D) (eo::list_find $eo_List_cons ($dt_get_constructors D) c))))
  )
)
; program: $mk_dt_cons_eq
(program $mk_dt_cons_eq ((T Type) (W Type) (as W) (bs W) (U Type) (f (-> U T)) (g (-> U T)) (a U) (b U) (c T))
  :signature (T T) Bool
  (
  (($mk_dt_cons_eq (_ (tuple a) as) (_ (tuple b) bs)) (eo::cons and (_ (= a) b) ($mk_dt_cons_eq as bs)))
  (($mk_dt_cons_eq (f a) (g b)) (eo::list_concat and ($mk_dt_cons_eq f g) (_ (and (_ (= a) b)) true)))
  (($mk_dt_cons_eq c c) true)
  )
)
; fwd-decl: $dt_find_cycle_list
(program $dt_find_cycle_list ()
  :signature ($eo_List $eo_List) Bool
)
; program: $dt_find_cycle_rec
(program $dt_find_cycle_rec ((T Type) (U Type) (W Type) (f (-> U W)) (a U) (c T) (l $eo_List) (s $eo_List))
  :signature (T $eo_List $eo_List) Bool
  (
  (($dt_find_cycle_rec (f a) s l) ($dt_find_cycle_rec f s (eo::cons $eo_List_cons a l)))
  (($dt_find_cycle_rec c s l) (eo::ite (eo::ite (eo::is_eq c tuple) true (eo::is_ok (eo::dt_selectors c))) ($dt_find_cycle_list l s) false))
  )
)
; define: $dt_find_cycle
(define $dt_find_cycle ((s $eo_List) (T Type :implicit) (t T))
  ($dt_find_cycle_rec t s $eo_List_nil))
; program: $dt_find_cycle_list
(program $dt_find_cycle_list ((U Type) (s U) (t U) (ts $eo_List) (ss $eo_List))
  :signature ($eo_List $eo_List) Bool
  (
  ((eo::define ((_v0 ($eo_List_cons s))) ($dt_find_cycle_list (_ _v0 ts) (_ _v0 $eo_List_nil))) true)
  (($dt_find_cycle_list (_ ($eo_List_cons t) ts) ss) (eo::ite ($dt_find_cycle_rec t ss $eo_List_nil) true ($dt_find_cycle_list ts ss)))
  (($dt_find_cycle_list $eo_List_nil ss) false)
  )
)
; program: $dt_collapse_updater_rhs
(program $dt_collapse_updater_rhs ((T Type) (U Type) (f (-> T U)) (a T) (n Int) (x T))
  :signature (U T Int) U
  (
  (($dt_collapse_updater_rhs (f x) a 0) (f a))
  (($dt_collapse_updater_rhs (f x) a n) (_ ($dt_collapse_updater_rhs f a (eo::add n -1)) x))
  )
)
; program: $tuple_collapse_updater_rhs
(program $tuple_collapse_updater_rhs ((T Type) (U Type) (b T) (W Type) (ts W) (a T) (n Int))
  :signature (U T Int) U
  (
  (($tuple_collapse_updater_rhs (_ (tuple b) ts) a 0) (_ (tuple a) ts))
  (($tuple_collapse_updater_rhs (_ (tuple b) ts) a n) (eo::cons tuple b ($tuple_collapse_updater_rhs ts a (eo::add n -1))))
  (($tuple_collapse_updater_rhs tuple.unit a n) tuple.unit)
  )
)
; program: $mk_dt_collapse_updater_rhs
(program $mk_dt_collapse_updater_rhs ((D Type) (T Type) (s (-> D T)) (t D) (U Type) (a U) (n Int))
  :signature (D) D
  (
  (($mk_dt_collapse_updater_rhs (_ (_ (update s) t) a)) (eo::define ((_v0 (eo::list_find $eo_List_cons ($dt_get_selectors_of_app (eo::typeof t) t) s))) (eo::ite (eo::is_neg _v0) t ($dt_collapse_updater_rhs t a (eo::add -1 _v0)))))
  (($mk_dt_collapse_updater_rhs (_ (_ (tuple.update n) t) a)) ($tuple_collapse_updater_rhs t a n))
  )
)
; program: $dt_updater_elim_rhs
(program $dt_updater_elim_rhs ((X Type) (D Type) (ss $eo_List) (U Type) (W Type) (c (-> U W)) (T Type) (s1 (-> D T)) (s (-> D T)) (t D) (a T) (cd D))
  :signature (D $eo_List X) D
  (
  (($dt_updater_elim_rhs (_ (_ (update s) t) a) (_ ($eo_List_cons s) ss) c) ($dt_updater_elim_rhs (_ (_ (update s) t) a) ss (c a)))
  (($dt_updater_elim_rhs (_ (_ (update s) t) a) (_ ($eo_List_cons s1) ss) c) ($dt_updater_elim_rhs (_ (_ (update s) t) a) ss (c (s1 t))))
  (($dt_updater_elim_rhs (_ (_ (update s) t) a) $eo_List_nil cd) cd)
  )
)
; program: $tuple_updater_elim_rhs
(program $tuple_updater_elim_rhs ((D Type) (T Type) (s (-> D T)) (t D) (ss $eo_List) (n Int) (tu UnitTuple) (a T))
  :signature (D $eo_List) D
  (
  (($tuple_updater_elim_rhs (_ (_ (tuple.update n) t) a) (_ ($eo_List_cons (tuple.select n)) ss)) (eo::cons tuple a ($tuple_updater_elim_rhs (_ (_ (tuple.update n) t) a) ss)))
  (($tuple_updater_elim_rhs (_ (_ (tuple.update n) t) a) (_ ($eo_List_cons s) ss)) (eo::cons tuple (s t) ($tuple_updater_elim_rhs (_ (_ (tuple.update n) t) a) ss)))
  (($tuple_updater_elim_rhs (_ (_ (tuple.update n) tu) a) $eo_List_nil) tuple.unit)
  )
)
; program: $mk_dt_updater_elim_rhs
(program $mk_dt_updater_elim_rhs ((U Type) (D Type) (T Type) (s (-> D T)) (c U) (n Int) (t D) (a T) (ss $eo_List))
  :signature (D U $eo_List) D
  (
  (($mk_dt_updater_elim_rhs (_ (_ (update s) t) a) c ss) (eo::define ((_v0 (eo::typeof t))) ($dt_updater_elim_rhs (_ (_ (update s) t) a) ss ($assoc_nil_nth $eo_List_cons (eo::dt_constructors _v0) (eo::list_find $eo_List_cons ($dt_get_constructors _v0) c)))))
  (($mk_dt_updater_elim_rhs (_ (_ (tuple.update n) t) a) tuple ss) ($tuple_updater_elim_rhs (_ (_ (tuple.update n) t) a) ss))
  )
)
; program: $singleton_elim_aci
(program $singleton_elim_aci ((S Type) (U Type) (x1 U) (x2 U) (f (-> S (-> S S))) (id U) (x U))
  :signature ((-> S (-> S S)) U U) U
  (
  (($singleton_elim_aci f id (_ (f x1) x2)) (eo::ite (eo::eq x2 id) x1 (_ (f x1) x2)))
  (($singleton_elim_aci f id x) x)
  )
)
; program: $get_ai_norm_rec
(program $get_ai_norm_rec ((S Type) (T Type) (x1 T) (x2 T) (f (-> S (-> S S))) (x T) (id T))
  :signature ((-> S (-> S S)) T T) T
  (
  (($get_ai_norm_rec f id (_ (f x1) x2)) (eo::list_setof f (eo::list_concat f ($get_ai_norm_rec f id x1) ($get_ai_norm_rec f id x2))))
  (($get_ai_norm_rec f id id) id)
  (($get_ai_norm_rec f id x) (eo::cons f x id))
  )
)
; program: $get_ai_norm
(program $get_ai_norm ((U Type) (S Type) (f (-> S (-> S S))) (x U) (y U))
  :signature (U) U
  (
  (($get_ai_norm (_ (f x) y)) (eo::define ((_v0 (_ (f x) y))) (eo::define ((_v1 (eo::nil f (eo::typeof _v0)))) ($singleton_elim_aci f _v1 ($get_ai_norm_rec f _v1 _v0)))))
  )
)
; program: $get_a_norm_rec
(program $get_a_norm_rec ((S Type) (T Type) (x1 T) (x2 T) (f (-> S (-> S S))) (x T) (id T))
  :signature ((-> S (-> S S)) T T) T
  (
  (($get_a_norm_rec f id (_ (f x1) x2)) (eo::list_concat f ($get_a_norm_rec f id x1) ($get_a_norm_rec f id x2)))
  (($get_a_norm_rec f id id) id)
  (($get_a_norm_rec f id x) (eo::cons f x id))
  )
)
; program: $get_a_norm
(program $get_a_norm ((U Type) (S Type) (f (-> S (-> S S))) (x U) (y U))
  :signature (U) U
  (
  (($get_a_norm (_ (f x) y)) (eo::define ((_v0 (_ (f x) y))) (eo::define ((_v1 (eo::nil f (eo::typeof _v0)))) ($singleton_elim_aci f _v1 ($get_a_norm_rec f _v1 _v0)))))
  )
)
; declare: @aci_sorted
(declare-parameterized-const @aci_sorted ((U Type :implicit) ($eo_x_1 U) (T Type :implicit) ($eo_x_2 T)) T)
; program: $aci_norm_eq
(program $aci_norm_eq ((U Type) (S Type) (f (-> S (-> S S))) (t U) (s U))
  :signature (U U) Bool
  (
  (($aci_norm_eq t t) true)
  (($aci_norm_eq (_ (@aci_sorted f) t) t) true)
  ((eo::define ((_v0 (@aci_sorted f))) ($aci_norm_eq (_ _v0 t) (_ _v0 s))) (eo::list_meq f t s))
  (($aci_norm_eq t s) false)
  )
)
; define: $is_aci_norm
(define $is_aci_norm ((S Type :implicit) (bn S) (an S) (b S) (a S))
  (eo::ite ($aci_norm_eq an b) true (eo::ite ($aci_norm_eq bn a) true ($aci_norm_eq an bn))))
; declare: @const
(declare-parameterized-const @const ((id Int :opaque) (T Type :opaque)) T)
; define: @var
(define @var ((T Type) (s (Seq Char)))
  (eo::var s T))
; program: $run_evaluate
(program $run_evaluate ((S Type) (bs Bool) (b Bool) (b2 Bool) (ys S) (T Type) (y T) (i2 Int) (x T) (i1 Int) (sys (Seq T)) (sz (Seq T)) (ssz (Seq Char)) (ssy (Seq Char)) (ssx (Seq Char)) (sy (Seq T)) (sx (Seq T)) (m Int) (ybs (BitVec m)) (n Int) (zbs (BitVec n)) (yb (BitVec m)) (xb (BitVec m)) (z S))
  :signature (S) S
  (
  (($run_evaluate (_ (= x) y)) (eo::define ((_v0 ($run_evaluate y))) (eo::define ((_v1 ($run_evaluate x))) (eo::define ((_v2 (eo::eq _v1 _v0))) (eo::ite (eo::and (eo::is_q _v1) (eo::is_q _v0)) _v2 (eo::ite (eo::and (eo::is_z _v1) (eo::is_z _v0)) _v2 (eo::ite (eo::and (eo::is_bin _v1) (eo::is_bin _v0)) _v2 (eo::ite (eo::and (eo::is_str _v1) (eo::is_str _v0)) _v2 (eo::ite (eo::and (eo::is_bool _v1) (eo::is_bool _v0)) _v2 (_ (= _v1) _v0))))))))))
  (($run_evaluate (not b)) (eo::not ($run_evaluate b)))
  (($run_evaluate (_ (_ (ite b) x) y)) (eo::ite ($run_evaluate b) ($run_evaluate x) ($run_evaluate y)))
  (($run_evaluate (_ (or b) bs)) (eo::or ($run_evaluate b) ($run_evaluate bs)))
  (($run_evaluate (_ (=> b) b2)) (eo::or (eo::not ($run_evaluate b)) ($run_evaluate b2)))
  (($run_evaluate (_ (and b) bs)) (eo::and ($run_evaluate b) ($run_evaluate bs)))
  (($run_evaluate (_ (xor b) b2)) (eo::xor ($run_evaluate b) ($run_evaluate b2)))
  (($run_evaluate (_ (< x) z)) (eo::is_neg (eo::add (eo::to_q ($run_evaluate x)) (eo::neg (eo::to_q ($run_evaluate z))))))
  (($run_evaluate (_ (<= x) z)) (eo::define ((_v0 (eo::add (eo::to_q ($run_evaluate x)) (eo::neg (eo::to_q ($run_evaluate z)))))) (eo::or (eo::is_neg _v0) (eo::eq _v0 0/1))))
  (($run_evaluate (_ (> x) z)) (eo::is_neg (eo::add (eo::to_q ($run_evaluate z)) (eo::neg (eo::to_q ($run_evaluate x))))))
  (($run_evaluate (_ (>= x) z)) (eo::define ((_v0 (eo::add (eo::to_q ($run_evaluate z)) (eo::neg (eo::to_q ($run_evaluate x)))))) (eo::or (eo::is_neg _v0) (eo::eq _v0 0/1))))
  (($run_evaluate (_ (+ x) ys)) (eo::define ((_v0 ($run_evaluate ys))) (eo::define ((_v1 ($run_evaluate x))) (eo::define ((_v2 (eo::to_q _v0))) (eo::define ((_v3 (eo::to_q _v1))) (eo::define ((_v4 (eo::add _v3 _v2))) (eo::ite (eo::eq _v1 _v3) _v4 (eo::ite (eo::eq _v0 _v2) _v4 (eo::add _v1 _v0)))))))))
  (($run_evaluate (_ (- x) z)) (eo::define ((_v0 (eo::neg ($run_evaluate z)))) (eo::define ((_v1 ($run_evaluate x))) (eo::define ((_v2 (eo::to_q _v0))) (eo::define ((_v3 (eo::to_q _v1))) (eo::define ((_v4 (eo::add _v3 _v2))) (eo::ite (eo::eq _v1 _v3) _v4 (eo::ite (eo::eq _v0 _v2) _v4 (eo::add _v1 _v0)))))))))
  (($run_evaluate (_ (* x) ys)) (eo::define ((_v0 ($run_evaluate ys))) (eo::define ((_v1 ($run_evaluate x))) (eo::define ((_v2 (eo::to_q _v0))) (eo::define ((_v3 (eo::to_q _v1))) (eo::define ((_v4 (eo::mul _v3 _v2))) (eo::ite (eo::eq _v1 _v3) _v4 (eo::ite (eo::eq _v0 _v2) _v4 (eo::mul _v1 _v0)))))))))
  (($run_evaluate ($eoo_-.2 x)) (eo::neg ($run_evaluate x)))
  (($run_evaluate (_ (/ x) y)) (eo::qdiv (eo::to_q ($run_evaluate x)) (eo::to_q ($run_evaluate y))))
  (($run_evaluate (_ (/_total x) y)) (eo::define ((_v0 (eo::to_q ($run_evaluate y)))) (eo::ite (eo::eq _v0 0/1) 0/1 (eo::qdiv (eo::to_q ($run_evaluate x)) _v0))))
  (($run_evaluate (_ (div i1) i2)) (eo::zdiv ($run_evaluate i1) ($run_evaluate i2)))
  (($run_evaluate (_ (div_total i1) i2)) (eo::define ((_v0 ($run_evaluate i2))) (eo::ite (eo::eq _v0 0) 0 (eo::zdiv ($run_evaluate i1) _v0))))
  (($run_evaluate (_ (mod i1) i2)) (eo::zmod ($run_evaluate i1) ($run_evaluate i2)))
  (($run_evaluate (_ (mod_total i1) i2)) (eo::define ((_v0 ($run_evaluate i2))) (eo::define ((_v1 ($run_evaluate i1))) (eo::ite (eo::eq _v0 0) _v1 (eo::zmod _v1 _v0)))))
  (($run_evaluate (to_real x)) (eo::to_q ($run_evaluate x)))
  (($run_evaluate (to_int x)) (eo::to_z ($run_evaluate x)))
  (($run_evaluate (is_int x)) (eo::define ((_v0 ($run_evaluate x))) (eo::eq (eo::to_q (eo::to_z _v0)) (eo::to_q _v0))))
  (($run_evaluate (abs x)) (eo::define ((_v0 ($run_evaluate x))) (eo::ite (eo::is_neg _v0) (eo::neg _v0) _v0)))
  (($run_evaluate (int.log2 i1)) (eo::define ((_v0 ($run_evaluate i1))) (eo::ite (eo::is_neg (eo::neg _v0)) ($arith_eval_int_log_2_rec _v0) (int.log2 _v0))))
  (($run_evaluate (int.pow2 i1)) (eo::define ((_v0 ($run_evaluate i1))) (eo::ite (eo::is_z _v0) (eo::ite (eo::is_neg _v0) 0 ($arith_eval_int_pow_2_rec _v0)) (int.pow2 _v0))))
  (($run_evaluate (int.ispow2 i1)) (eo::define ((_v0 ($run_evaluate i1))) (eo::ite (eo::is_z _v0) (eo::ite (eo::is_neg _v0) false ($arith_eval_int_is_pow_2_rec _v0)) (int.ispow2 _v0))))
  (($run_evaluate (_ (str.++ sx) sys)) (eo::concat ($run_evaluate sx) ($run_evaluate sys)))
  (($run_evaluate (str.len sx)) (eo::len ($run_evaluate sx)))
  (($run_evaluate (_ (_ (str.substr sx) n) m)) (eo::extract ($run_evaluate sx) ($run_evaluate n) (eo::add -1 ($run_evaluate m))))
  (($run_evaluate (_ (str.at sx) n)) (eo::define ((_v0 ($run_evaluate n))) (eo::extract ($run_evaluate sx) _v0 _v0)))
  (($run_evaluate (_ (str.contains sx) sy)) (eo::not (eo::is_neg (eo::find ($run_evaluate sx) ($run_evaluate sy)))))
  (($run_evaluate (_ (_ (str.replace sx) sy) sz)) (eo::define ((_v0 ($run_evaluate sx))) (eo::define ((_v1 ($run_evaluate sy))) (eo::define ((_v2 (eo::find (eo::to_str _v0) (eo::to_str _v1)))) (eo::ite (eo::is_neg _v2) _v0 (eo::concat (eo::extract _v0 (eo::add _v2 (eo::len _v1)) (eo::len _v0)) ($run_evaluate sz)))))))
  (($run_evaluate (_ (_ (str.replace_all ssx) ssy) ssz)) (eo::ite (eo::and (eo::is_str ssz) (eo::is_str ssy)) (eo::ite (eo::eq ssy "") ssx ($str_eval_replace_all_rec ssx ssy ssz (eo::find ssx ssy) (eo::len ssy))) (_ (_ (str.replace_all ssx) ssy) ssz)))
  (($run_evaluate (_ (str.prefixof sx) sy)) (eo::define ((_v0 ($run_evaluate sx))) (eo::eq _v0 (eo::extract ($run_evaluate sy) 0 (eo::add (eo::len _v0) -1)))))
  (($run_evaluate (_ (str.suffixof sx) sy)) (eo::define ((_v0 ($run_evaluate sy))) (eo::define ((_v1 (eo::len _v0))) (eo::define ((_v2 ($run_evaluate sx))) (eo::eq _v2 (eo::extract _v0 (eo::add _v1 (eo::neg (eo::len _v2))) (eo::add _v1 -1)))))))
  (($run_evaluate (_ (_ (str.indexof sx) sy) n)) (eo::define ((_v0 ($run_evaluate sx))) (eo::define ((_v1 (eo::len _v0))) (eo::define ((_v2 (eo::find (eo::to_str (eo::extract _v0 n _v1)) (eo::to_str ($run_evaluate sy))))) (eo::define ((_v3 ($run_evaluate n))) (eo::ite (eo::is_neg _v3) -1 (eo::ite (eo::gt _v3 _v1) -1 (eo::ite (eo::is_neg _v2) _v2 (eo::add n _v2)))))))))
  (($run_evaluate (str.to_code ssx)) (eo::define ((_v0 ($run_evaluate ssx))) (eo::define ((_v1 (eo::len _v0))) (eo::ite (eo::eq _v1 1) (eo::to_z _v0) (eo::ite (eo::is_z _v1) -1 (str.to_code _v0))))))
  (($run_evaluate (str.from_code n)) (eo::define ((_v0 ($run_evaluate n))) (eo::ite (eo::ite (eo::is_z _v0) (eo::ite (eo::ite (eo::eq 196608 _v0) true (eo::gt 196608 _v0)) (eo::not (eo::is_neg _v0)) false) false) (eo::to_str n) "")))
  (($run_evaluate (str.to_int ssx)) (eo::define ((_v0 ($run_evaluate ssx))) (eo::ite (eo::is_str _v0) (eo::ite (eo::eq _v0 "") -1 ($str_to_int_eval_rec (eo::list_rev str.++ ($str_flatten ($str_nary_intro _v0))) 1 0)) (str.to_int _v0))))
  (($run_evaluate (str.from_int n)) (eo::define ((_v0 ($run_evaluate n))) (eo::ite (eo::is_z _v0) (eo::ite (eo::is_neg _v0) "" ($str_from_int_eval_rec _v0 "")) (str.from_int _v0))))
  (($run_evaluate (_ (str.<= ssx) ssy)) (eo::define ((_v0 ($run_evaluate ssy))) (eo::define ((_v1 ($run_evaluate ssx))) (eo::ite (eo::and (eo::is_str _v1) (eo::is_str _v0)) ($str_leq_eval_rec ($str_flatten ($str_nary_intro _v1)) ($str_flatten ($str_nary_intro _v0))) (_ (str.<= _v1) _v0)))))
  (($run_evaluate (str.to_lower ssx)) (eo::define ((_v0 ($run_evaluate ssx))) (eo::ite (eo::is_str _v0) ($str_case_conv_rec ($str_flatten ($str_nary_intro _v0)) true) (str.to_lower _v0))))
  (($run_evaluate (str.to_upper ssx)) (eo::define ((_v0 ($run_evaluate ssx))) (eo::ite (eo::is_str _v0) ($str_case_conv_rec ($str_flatten ($str_nary_intro _v0)) false) (str.to_upper _v0))))
  (($run_evaluate (str.rev sx)) (eo::define ((_v0 ($run_evaluate sx))) (eo::ite (eo::is_str _v0) ($str_nary_elim ($str_collect (eo::list_rev str.++ ($str_flatten ($str_nary_intro _v0))))) (str.rev _v0))))
  (($run_evaluate (_ (_ (str.update sx) n) sy)) (eo::define ((_v0 ($run_evaluate sx))) (eo::define ((_v1 (eo::len _v0))) (eo::define ((_v2 ($run_evaluate n))) (eo::define ((_v3 ($run_evaluate sy))) (eo::ite (eo::or (eo::gt 0 _v2) (eo::gt _v2 _v1)) _v0 (eo::concat (eo::extract _v0 (eo::add _v2 (eo::len _v3)) _v1) (eo::extract _v3 0 (eo::add (eo::add (eo::neg _v2) _v1) -1)))))))))
  (($run_evaluate (bvnot xb)) (eo::not ($run_evaluate xb)))
  (($run_evaluate (bvneg xb)) (eo::neg ($run_evaluate xb)))
  (($run_evaluate (_ (bvadd xb) ybs)) (eo::add ($run_evaluate xb) ($run_evaluate ybs)))
  (($run_evaluate (_ (bvmul xb) ybs)) (eo::mul ($run_evaluate xb) ($run_evaluate ybs)))
  (($run_evaluate (_ (bvudiv xb) yb)) (eo::define ((_v0 ($run_evaluate yb))) (eo::define ((_v1 ($bv_bitwidth (eo::typeof xb)))) (eo::ite (eo::eq (eo::to_z _v0) 0) (eo::to_bin _v1 (eo::add (eo::ite (eo::is_z _v1) (eo::ite (eo::is_neg _v1) 0 ($arith_eval_int_pow_2_rec _v1)) (int.pow2 _v1)) -1)) (eo::zdiv ($run_evaluate xb) _v0)))))
  (($run_evaluate (_ (bvurem xb) yb)) (eo::define ((_v0 ($run_evaluate yb))) (eo::define ((_v1 ($run_evaluate xb))) (eo::ite (eo::eq (eo::to_z _v0) 0) _v1 (eo::zmod _v1 _v0)))))
  (($run_evaluate (_ (bvand xb) ybs)) (eo::and ($run_evaluate xb) ($run_evaluate ybs)))
  (($run_evaluate (_ (bvor xb) ybs)) (eo::or ($run_evaluate xb) ($run_evaluate ybs)))
  (($run_evaluate (_ (bvxor xb) ybs)) (eo::xor ($run_evaluate xb) ($run_evaluate ybs)))
  (($run_evaluate (_ (concat xb) zbs)) (eo::concat ($run_evaluate xb) ($run_evaluate zbs)))
  (($run_evaluate (_ (bvsub xb) yb)) (eo::add ($run_evaluate xb) (eo::neg ($run_evaluate yb))))
  (($run_evaluate (_ (_ (extract m) n) xb)) (eo::extract ($run_evaluate xb) n m))
  (($run_evaluate (_ (bvult xb) yb)) ($run_evaluate (_ (bvugt yb) xb)))
  (($run_evaluate (_ (bvule xb) yb)) ($run_evaluate (_ (bvuge yb) xb)))
  (($run_evaluate (_ (bvugt xb) yb)) (eo::gt (eo::to_z ($run_evaluate xb)) (eo::to_z ($run_evaluate yb))))
  (($run_evaluate (_ (bvuge xb) yb)) (eo::define ((_v0 ($run_evaluate yb))) (eo::define ((_v1 ($run_evaluate xb))) (eo::or (eo::gt _v1 _v0) (eo::eq _v1 _v0)))))
  (($run_evaluate (_ (bvslt xb) yb)) ($run_evaluate (_ (bvsgt yb) xb)))
  (($run_evaluate (_ (bvsle xb) yb)) ($run_evaluate (_ (bvsge yb) xb)))
  (($run_evaluate (_ (bvsgt xb) yb)) (eo::define ((_v0 ($run_evaluate yb))) (eo::define ((_v1 ($bv_bitwidth (eo::typeof _v0)))) (eo::define ((_v2 (eo::to_z (eo::extract _v0 0 (eo::add _v1 -2))))) (eo::define ((_v3 (eo::add _v1 -1))) (eo::define ((_v4 ($run_evaluate xb))) (eo::define ((_v5 ($bv_bitwidth (eo::typeof _v4)))) (eo::define ((_v6 (eo::to_z (eo::extract _v4 0 (eo::add _v5 -2))))) (eo::define ((_v7 (eo::add _v5 -1))) (eo::gt (eo::ite (eo::eq (eo::extract _v4 _v7 _v7) #b1) (eo::add (eo::neg (eo::ite (eo::is_z _v7) (eo::ite (eo::is_neg _v7) 0 ($arith_eval_int_pow_2_rec _v7)) (int.pow2 _v7))) _v6) _v6) (eo::ite (eo::eq (eo::extract _v0 _v3 _v3) #b1) (eo::add (eo::neg (eo::ite (eo::is_z _v3) (eo::ite (eo::is_neg _v3) 0 ($arith_eval_int_pow_2_rec _v3)) (int.pow2 _v3))) _v2) _v2)))))))))))
  (($run_evaluate (_ (bvsge xb) yb)) (eo::define ((_v0 ($run_evaluate yb))) (eo::define ((_v1 ($bv_bitwidth (eo::typeof _v0)))) (eo::define ((_v2 (eo::to_z (eo::extract _v0 0 (eo::add _v1 -2))))) (eo::define ((_v3 (eo::add _v1 -1))) (eo::define ((_v4 (eo::ite (eo::eq (eo::extract _v0 _v3 _v3) #b1) (eo::add (eo::neg (eo::ite (eo::is_z _v3) (eo::ite (eo::is_neg _v3) 0 ($arith_eval_int_pow_2_rec _v3)) (int.pow2 _v3))) _v2) _v2))) (eo::define ((_v5 ($run_evaluate xb))) (eo::define ((_v6 ($bv_bitwidth (eo::typeof _v5)))) (eo::define ((_v7 (eo::to_z (eo::extract _v5 0 (eo::add _v6 -2))))) (eo::define ((_v8 (eo::add _v6 -1))) (eo::define ((_v9 (eo::ite (eo::eq (eo::extract _v5 _v8 _v8) #b1) (eo::add (eo::neg (eo::ite (eo::is_z _v8) (eo::ite (eo::is_neg _v8) 0 ($arith_eval_int_pow_2_rec _v8)) (int.pow2 _v8))) _v7) _v7))) (eo::or (eo::gt _v9 _v4) (eo::eq _v9 _v4)))))))))))))
  (($run_evaluate (_ (bvshl xb) yb)) (eo::define ((_v0 (eo::to_z ($run_evaluate yb)))) (eo::define ((_v1 ($bv_bitwidth (eo::typeof xb)))) (eo::ite (eo::gt _v0 _v1) (eo::to_bin _v1 0) (eo::to_bin _v1 (eo::mul (eo::to_z ($run_evaluate xb)) (eo::ite (eo::is_z _v0) (eo::ite (eo::is_neg _v0) 0 ($arith_eval_int_pow_2_rec _v0)) (int.pow2 _v0))))))))
  (($run_evaluate (_ (bvlshr xb) yb)) (eo::define ((_v0 (eo::to_z ($run_evaluate yb)))) (eo::define ((_v1 ($bv_bitwidth (eo::typeof xb)))) (eo::ite (eo::gt _v0 _v1) (eo::to_bin _v1 0) (eo::to_bin _v1 (eo::zdiv (eo::to_z ($run_evaluate xb)) (eo::ite (eo::is_z _v0) (eo::ite (eo::is_neg _v0) 0 ($arith_eval_int_pow_2_rec _v0)) (int.pow2 _v0))))))))
  (($run_evaluate (_ (bvashr xb) yb)) (eo::define ((_v0 ($run_evaluate yb))) (eo::define ((_v1 ($run_evaluate xb))) (eo::define ((_v2 (eo::add ($bv_bitwidth (eo::typeof _v1)) -1))) (eo::ite (eo::eq (eo::extract _v1 _v2 _v2) #b0) ($run_evaluate (_ (bvlshr _v1) _v0)) ($run_evaluate (bvnot (_ (bvlshr (bvnot _v1)) _v0))))))))
  (($run_evaluate (_ (repeat n) xb)) (eo::define ((_v0 ($run_evaluate xb))) (eo::define ((_v1 ($run_evaluate n))) ($run_evaluate (eo::ite (eo::and (eo::is_z _v1) (eo::not (eo::is_neg _v1))) ($bv_unfold_repeat_rec _v1 _v0) (_ (repeat _v1) _v0))))))
  (($run_evaluate (_ (sign_extend n) xb)) (eo::define ((_v0 ($run_evaluate xb))) (eo::define ((_v1 (eo::add ($bv_bitwidth (eo::typeof _v0)) -1))) (eo::define ((_v2 (eo::extract _v0 _v1 _v1))) (eo::define ((_v3 ($run_evaluate n))) (eo::concat ($run_evaluate (eo::ite (eo::and (eo::is_z _v3) (eo::not (eo::is_neg _v3))) ($bv_unfold_repeat_rec _v3 _v2) (_ (repeat _v3) _v2))) _v0))))))
  (($run_evaluate (_ (zero_extend n) xb)) (eo::define ((_v0 ($run_evaluate n))) (eo::concat ($run_evaluate (eo::ite (eo::and (eo::is_z _v0) (eo::not (eo::is_neg _v0))) ($bv_unfold_repeat_rec _v0 #b0) (_ (repeat _v0) #b0))) ($run_evaluate xb))))
  (($run_evaluate (_ (@bv n) m)) (eo::to_bin ($run_evaluate m) ($run_evaluate n)))
  (($run_evaluate (@bvsize xb)) ($bv_bitwidth (eo::typeof xb)))
  (($run_evaluate (_ (int_to_bv n) m)) (eo::to_bin ($run_evaluate n) ($run_evaluate m)))
  (($run_evaluate (ubv_to_int xb)) (eo::to_z ($run_evaluate xb)))
  (($run_evaluate (sbv_to_int xb)) (eo::define ((_v0 ($bv_bitwidth (eo::typeof xb)))) (eo::define ((_v1 (eo::to_z ($run_evaluate xb)))) (eo::define ((_v2 (eo::add _v0 -1))) (eo::ite (eo::eq (eo::extract xb _v2 _v2) #b0) _v1 (eo::add _v1 (eo::neg (eo::ite (eo::is_z _v0) (eo::ite (eo::is_neg _v0) 0 ($arith_eval_int_pow_2_rec _v0)) (int.pow2 _v0)))))))))
  (($run_evaluate z) z)
  )
)
; program: $evaluate_list
(program $evaluate_list ((U Type) (t U) (ts $eo_List))
  :signature ($eo_List) $eo_List
  (
  (($evaluate_list (_ ($eo_List_cons t) ts)) (eo::cons $eo_List_cons ($run_evaluate t) ($evaluate_list ts)))
  (($evaluate_list $eo_List_nil) $eo_List_nil)
  )
)
; program: $get_aci_normal_form
(program $get_aci_normal_form ((T Type) (b1 Bool) (b2 Bool) (U Type) (xs1 (Seq U)) (xs2 (Seq U)) (r1 RegLan) (r2 RegLan) (m Int) (xb1 (BitVec m)) (xb2 (BitVec m)) (x T))
  :signature (T) T
  (
  (($get_aci_normal_form (_ (or b1) b2)) (_ (@aci_sorted or) ($get_ai_norm (_ (or b1) b2))))
  (($get_aci_normal_form (_ (and b1) b2)) (_ (@aci_sorted and) ($get_ai_norm (_ (and b1) b2))))
  (($get_aci_normal_form (_ (re.union r1) r2)) (_ (@aci_sorted re.union) ($get_ai_norm (_ (re.union r1) r2))))
  (($get_aci_normal_form (_ (re.inter r1) r2)) (_ (@aci_sorted re.inter) ($get_ai_norm (_ (re.inter r1) r2))))
  (($get_aci_normal_form (_ (bvor xb1) xb2)) (_ (@aci_sorted bvor) ($get_ai_norm (_ (bvor xb1) xb2))))
  (($get_aci_normal_form (_ (bvand xb1) xb2)) (_ (@aci_sorted bvand) ($get_ai_norm (_ (bvand xb1) xb2))))
  (($get_aci_normal_form (_ (bvxor xb1) xb2)) (_ (@aci_sorted bvxor) ($get_a_norm (_ (bvxor xb1) xb2))))
  (($get_aci_normal_form (_ (str.++ xs1) xs2)) ($get_a_norm (_ (str.++ xs1) xs2)))
  (($get_aci_normal_form (_ (re.++ r1) r2)) ($get_a_norm (_ (re.++ r1) r2)))
  (($get_aci_normal_form (_ (concat xb1) xb2)) ($get_a_norm (_ (concat xb1) xb2)))
  (($get_aci_normal_form x) x)
  )
)
; program: $is_absorb_rec
(program $is_absorb_rec ((U Type) (V Type) (W Type) (a U) (f (-> U (-> U U))) (b U) (zero U))
  :signature ((-> U (-> U U)) V W) Bool
  (
  (($is_absorb_rec f zero zero) true)
  (($is_absorb_rec f (_ (f a) b) zero) (eo::ite ($is_absorb_rec f a zero) true ($is_absorb_rec f b zero)))
  (($is_absorb_rec f b zero) false)
  )
)
; program: $get_zero
(program $get_zero ((S Type) (b1 Bool) (b2 Bool) (r1 RegLan) (r2 RegLan) (m Int) (xb2 (BitVec m)) (xb1 (BitVec m)))
  :signature (S) S
  (
  (($get_zero (_ (or b1) b2)) true)
  (($get_zero (_ (and b1) b2)) false)
  (($get_zero (_ (re.union r1) r2)) re.all)
  (($get_zero (_ (re.inter r1) r2)) re.none)
  (($get_zero (_ (re.++ r1) r2)) re.none)
  (($get_zero (_ (bvor xb1) xb2)) (eo::define ((_v0 ($bv_bitwidth (eo::typeof xb1)))) (eo::to_bin _v0 (eo::add (eo::ite (eo::is_z _v0) (eo::ite (eo::is_neg _v0) 0 ($arith_eval_int_pow_2_rec _v0)) (int.pow2 _v0)) -1))))
  (($get_zero (_ (bvand xb1) xb2)) (eo::to_bin ($bv_bitwidth (eo::typeof xb1)) 0))
  )
)
; program: $is_absorb
(program $is_absorb ((T Type) (U Type) (f (-> U (-> U U))) (t1 T) (t2 T) (zero T))
  :signature (T T) Bool
  (
  (($is_absorb (_ (f t1) t2) zero) ($is_absorb_rec f (_ (f t1) t2) zero))
  )
)
; program: $compute_card
(program $compute_card ((n Int))
  :signature (Type) Int
  (
  (($compute_card Bool) 2)
  (($compute_card (BitVec n)) (eo::ite (eo::is_z n) (eo::ite (eo::is_neg n) 0 ($arith_eval_int_pow_2_rec n)) (int.pow2 n)))
  )
)


;;; type checking

; program: $eo_typeof_apply
(program $eo_typeof_apply ((T Type) (U Type))
  :signature (Type Type) Type
  (
  (($eo_typeof_apply (-> T U) T) U)
  )
)

; non-ground type defintions

; program: $eo_typeof_@pair
(program $eo_typeof_@pair ((U Type) (T Type))
  :signature (Type Type) Type
  (
  (($eo_typeof_@pair U T) (_ (@Pair U) T))
  )
)
; program: $eo_typeof_ite
(program $eo_typeof_ite ((A Type))
  :signature (Type Type) Type
  (
  (($eo_typeof_ite Bool A) (-> A A))
  )
)
; program: $eo_typeof_=
(program $eo_typeof_= ((A Type))
  :signature (Type) Type
  (
  (($eo_typeof_= A) (-> A Bool))
  )
)
; program: $eo_typeof_lambda
(program $eo_typeof_lambda ((L $eo_List) (B Type))
  :signature (Type Type) Type
  (
  (($eo_typeof_lambda L B) ($get_lambda_type L B))
  )
)
; program: $eo_typeof_distinct
(program $eo_typeof_distinct ((A Type))
  :signature (Type) Type
  (
  (($eo_typeof_distinct A) (-> A Bool))
  )
)
; program: $eo_typeof_@purify
(program $eo_typeof_@purify ((A Type) (t A))
  :signature (Type Type) Type
  (
  (($eo_typeof_@purify A t) A)
  )
)
; program: $eo_typeof_+
(program $eo_typeof_+ ((T Type) (U Type))
  :signature (Type Type) Type
  (
  (($eo_typeof_+ T U) ($arith_typeunion T U))
  )
)
; program: $eo_typeof_-
(program $eo_typeof_- ((T Type) (U Type))
  :signature (Type Type) Type
  (
  (($eo_typeof_- T U) ($arith_typeunion T U))
  )
)
; program: $eo_typeof_*
(program $eo_typeof_* ((T Type) (U Type))
  :signature (Type Type) Type
  (
  (($eo_typeof_* T U) ($arith_typeunion T U))
  )
)
; program: $eo_typeof_<
(program $eo_typeof_< ((T Type) (U Type))
  :signature (Type Type) Type
  (
  (($eo_typeof_< T U) (eo::requires ($is_arith_type T) true (eo::requires ($is_arith_type U) true Bool)))
  )
)
; program: $eo_typeof_<=
(program $eo_typeof_<= ((T Type) (U Type))
  :signature (Type Type) Type
  (
  (($eo_typeof_<= T U) (eo::requires ($is_arith_type T) true (eo::requires ($is_arith_type U) true Bool)))
  )
)
; program: $eo_typeof_>
(program $eo_typeof_> ((T Type) (U Type))
  :signature (Type Type) Type
  (
  (($eo_typeof_> T U) (eo::requires ($is_arith_type T) true (eo::requires ($is_arith_type U) true Bool)))
  )
)
; program: $eo_typeof_>=
(program $eo_typeof_>= ((T Type) (U Type))
  :signature (Type Type) Type
  (
  (($eo_typeof_>= T U) (eo::requires ($is_arith_type T) true (eo::requires ($is_arith_type U) true Bool)))
  )
)
; program: $eo_typeof_to_real
(program $eo_typeof_to_real ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_to_real T) (eo::requires ($is_arith_type T) true Real))
  )
)
; program: $eo_typeof_to_int
(program $eo_typeof_to_int ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_to_int T) (eo::requires ($is_arith_type T) true Int))
  )
)
; program: $eo_typeof_is_int
(program $eo_typeof_is_int ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_is_int T) (eo::requires ($is_arith_type T) true Bool))
  )
)
; program: $eo_typeof_abs
(program $eo_typeof_abs ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_abs T) (eo::requires ($is_arith_type T) true T))
  )
)
; program: $eo_typeof_^
(program $eo_typeof_^ ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_^ T) (-> T (eo::requires ($is_arith_type T) true T)))
  )
)
; program: $eo_typeof_$eoo_-.2
(program $eo_typeof_$eoo_-.2 ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_$eoo_-.2 T) (eo::requires ($is_arith_type T) true T))
  )
)
; program: $eo_typeof_select
(program $eo_typeof_select ((U Type) (T Type))
  :signature (Type) Type
  (
  (($eo_typeof_select (_ (Array U) T)) (-> U T))
  )
)
; program: $eo_typeof_store
(program $eo_typeof_store ((U Type) (T Type))
  :signature (Type) Type
  (
  (($eo_typeof_store (_ (Array U) T)) (-> U (-> T (_ (Array U) T))))
  )
)
; program: $eo_typeof_@array_deq_diff
(program $eo_typeof_@array_deq_diff ((T Type) (U Type) (a (_ (Array T) U)) (b (_ (Array T) U)))
  :signature (Type Type Type Type) Type
  (
  ((eo::define ((_v0 (_ (Array T) U))) ($eo_typeof_@array_deq_diff _v0 a _v0 b)) T)
  )
)
; program: $eo_typeof_/
(program $eo_typeof_/ ((T Type) (U Type))
  :signature (Type Type) Type
  (
  (($eo_typeof_/ T U) (eo::requires ($is_arith_type T) true (eo::requires ($is_arith_type U) true Real)))
  )
)
; program: $eo_typeof_/_total
(program $eo_typeof_/_total ((T Type) (U Type))
  :signature (Type Type) Type
  (
  (($eo_typeof_/_total T U) (eo::requires ($is_arith_type T) true (eo::requires ($is_arith_type U) true Real)))
  )
)
; program: $eo_typeof_@bvsize
(program $eo_typeof_@bvsize ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_@bvsize (BitVec m)) Int)
  )
)
; program: $eo_typeof_concat
(program $eo_typeof_concat ((n Int) (m Int))
  :signature (Type Type) Type
  (
  (($eo_typeof_concat (BitVec n) (BitVec m)) (BitVec (eo::add n m)))
  )
)
; program: $eo_typeof_extract
(program $eo_typeof_extract ((n Int) (h Int) (l Int))
  :signature (Type Type Type) Type
  (
  (($eo_typeof_extract h l (BitVec n)) (BitVec (eo::requires (eo::gt (eo::add l 1) 0) true (eo::requires (eo::gt n h) true (eo::add 1 (eo::neg l))))))
  )
)
; program: $eo_typeof_repeat
(program $eo_typeof_repeat ((i Int) (n Int))
  :signature (Type Type) Type
  (
  (($eo_typeof_repeat i (BitVec n)) (BitVec (eo::mul i n)))
  )
)
; program: $eo_typeof_bvnot
(program $eo_typeof_bvnot ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvnot (BitVec m)) (BitVec m))
  )
)
; program: $eo_typeof_bvand
(program $eo_typeof_bvand ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvand (BitVec m)) (eo::define ((_v0 (BitVec m))) (-> _v0 _v0)))
  )
)
; program: $eo_typeof_bvor
(program $eo_typeof_bvor ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvor (BitVec m)) (eo::define ((_v0 (BitVec m))) (-> _v0 _v0)))
  )
)
; program: $eo_typeof_bvnand
(program $eo_typeof_bvnand ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvnand (BitVec m)) (eo::define ((_v0 (BitVec m))) (-> _v0 _v0)))
  )
)
; program: $eo_typeof_bvnor
(program $eo_typeof_bvnor ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvnor (BitVec m)) (eo::define ((_v0 (BitVec m))) (-> _v0 _v0)))
  )
)
; program: $eo_typeof_bvxor
(program $eo_typeof_bvxor ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvxor (BitVec m)) (eo::define ((_v0 (BitVec m))) (-> _v0 _v0)))
  )
)
; program: $eo_typeof_bvxnor
(program $eo_typeof_bvxnor ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvxnor (BitVec m)) (eo::define ((_v0 (BitVec m))) (-> _v0 _v0)))
  )
)
; program: $eo_typeof_bvcomp
(program $eo_typeof_bvcomp ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvcomp (BitVec m)) (-> (BitVec m) (BitVec 1)))
  )
)
; program: $eo_typeof_bvneg
(program $eo_typeof_bvneg ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvneg (BitVec m)) (BitVec m))
  )
)
; program: $eo_typeof_bvadd
(program $eo_typeof_bvadd ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvadd (BitVec m)) (eo::define ((_v0 (BitVec m))) (-> _v0 _v0)))
  )
)
; program: $eo_typeof_bvmul
(program $eo_typeof_bvmul ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvmul (BitVec m)) (eo::define ((_v0 (BitVec m))) (-> _v0 _v0)))
  )
)
; program: $eo_typeof_bvudiv
(program $eo_typeof_bvudiv ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvudiv (BitVec m)) (eo::define ((_v0 (BitVec m))) (-> _v0 _v0)))
  )
)
; program: $eo_typeof_bvurem
(program $eo_typeof_bvurem ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvurem (BitVec m)) (eo::define ((_v0 (BitVec m))) (-> _v0 _v0)))
  )
)
; program: $eo_typeof_bvsub
(program $eo_typeof_bvsub ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvsub (BitVec m)) (eo::define ((_v0 (BitVec m))) (-> _v0 _v0)))
  )
)
; program: $eo_typeof_bvsdiv
(program $eo_typeof_bvsdiv ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvsdiv (BitVec m)) (eo::define ((_v0 (BitVec m))) (-> _v0 _v0)))
  )
)
; program: $eo_typeof_bvsrem
(program $eo_typeof_bvsrem ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvsrem (BitVec m)) (eo::define ((_v0 (BitVec m))) (-> _v0 _v0)))
  )
)
; program: $eo_typeof_bvsmod
(program $eo_typeof_bvsmod ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvsmod (BitVec m)) (eo::define ((_v0 (BitVec m))) (-> _v0 _v0)))
  )
)
; program: $eo_typeof_bvult
(program $eo_typeof_bvult ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvult (BitVec m)) (-> (BitVec m) Bool))
  )
)
; program: $eo_typeof_bvule
(program $eo_typeof_bvule ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvule (BitVec m)) (-> (BitVec m) Bool))
  )
)
; program: $eo_typeof_bvugt
(program $eo_typeof_bvugt ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvugt (BitVec m)) (-> (BitVec m) Bool))
  )
)
; program: $eo_typeof_bvuge
(program $eo_typeof_bvuge ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvuge (BitVec m)) (-> (BitVec m) Bool))
  )
)
; program: $eo_typeof_bvslt
(program $eo_typeof_bvslt ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvslt (BitVec m)) (-> (BitVec m) Bool))
  )
)
; program: $eo_typeof_bvsle
(program $eo_typeof_bvsle ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvsle (BitVec m)) (-> (BitVec m) Bool))
  )
)
; program: $eo_typeof_bvsgt
(program $eo_typeof_bvsgt ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvsgt (BitVec m)) (-> (BitVec m) Bool))
  )
)
; program: $eo_typeof_bvsge
(program $eo_typeof_bvsge ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvsge (BitVec m)) (-> (BitVec m) Bool))
  )
)
; program: $eo_typeof_bvshl
(program $eo_typeof_bvshl ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvshl (BitVec m)) (eo::define ((_v0 (BitVec m))) (-> _v0 _v0)))
  )
)
; program: $eo_typeof_bvlshr
(program $eo_typeof_bvlshr ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvlshr (BitVec m)) (eo::define ((_v0 (BitVec m))) (-> _v0 _v0)))
  )
)
; program: $eo_typeof_bvashr
(program $eo_typeof_bvashr ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvashr (BitVec m)) (eo::define ((_v0 (BitVec m))) (-> _v0 _v0)))
  )
)
; program: $eo_typeof_zero_extend
(program $eo_typeof_zero_extend ((m Int) (i Int))
  :signature (Type Type) Type
  (
  (($eo_typeof_zero_extend i (BitVec m)) (BitVec (eo::add m i)))
  )
)
; program: $eo_typeof_sign_extend
(program $eo_typeof_sign_extend ((m Int) (i Int))
  :signature (Type Type) Type
  (
  (($eo_typeof_sign_extend i (BitVec m)) (BitVec (eo::add m i)))
  )
)
; program: $eo_typeof_rotate_left
(program $eo_typeof_rotate_left ((m Int))
  :signature (Type Type) Type
  (
  (($eo_typeof_rotate_left Int (BitVec m)) (BitVec m))
  )
)
; program: $eo_typeof_rotate_right
(program $eo_typeof_rotate_right ((m Int))
  :signature (Type Type) Type
  (
  (($eo_typeof_rotate_right Int (BitVec m)) (BitVec m))
  )
)
; program: $eo_typeof_reduce_and
(program $eo_typeof_reduce_and ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_reduce_and (BitVec m)) (BitVec 1))
  )
)
; program: $eo_typeof_reduce_or
(program $eo_typeof_reduce_or ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_reduce_or (BitVec m)) (BitVec 1))
  )
)
; program: $eo_typeof_reduce_xor
(program $eo_typeof_reduce_xor ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_reduce_xor (BitVec m)) (BitVec 1))
  )
)
; program: $eo_typeof_bvite
(program $eo_typeof_bvite ((T Type))
  :signature (Type Type) Type
  (
  (($eo_typeof_bvite (BitVec 1) T) (-> T T))
  )
)
; program: $eo_typeof_bv1ult
(program $eo_typeof_bv1ult ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bv1ult (BitVec m)) (-> (BitVec m) (BitVec 1)))
  )
)
; program: $eo_typeof_bvuaddo
(program $eo_typeof_bvuaddo ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvuaddo (BitVec m)) (-> (BitVec m) Bool))
  )
)
; program: $eo_typeof_bvnego
(program $eo_typeof_bvnego ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvnego (BitVec m)) Bool)
  )
)
; program: $eo_typeof_bvsaddo
(program $eo_typeof_bvsaddo ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvsaddo (BitVec m)) (-> (BitVec m) Bool))
  )
)
; program: $eo_typeof_bvumulo
(program $eo_typeof_bvumulo ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvumulo (BitVec m)) (-> (BitVec m) Bool))
  )
)
; program: $eo_typeof_bvsmulo
(program $eo_typeof_bvsmulo ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvsmulo (BitVec m)) (-> (BitVec m) Bool))
  )
)
; program: $eo_typeof_bvusubo
(program $eo_typeof_bvusubo ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvusubo (BitVec m)) (-> (BitVec m) Bool))
  )
)
; program: $eo_typeof_bvssubo
(program $eo_typeof_bvssubo ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvssubo (BitVec m)) (-> (BitVec m) Bool))
  )
)
; program: $eo_typeof_bvsdivo
(program $eo_typeof_bvsdivo ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvsdivo (BitVec m)) (-> (BitVec m) Bool))
  )
)
; program: $eo_typeof_bvultbv
(program $eo_typeof_bvultbv ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvultbv (BitVec m)) (-> (BitVec m) (BitVec 1)))
  )
)
; program: $eo_typeof_bvsltbv
(program $eo_typeof_bvsltbv ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvsltbv (BitVec m)) (-> (BitVec m) (BitVec 1)))
  )
)
; program: $eo_typeof_bvredand
(program $eo_typeof_bvredand ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvredand (BitVec m)) (BitVec 1))
  )
)
; program: $eo_typeof_bvredor
(program $eo_typeof_bvredor ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvredor (BitVec m)) (BitVec 1))
  )
)
; program: $eo_typeof_@bit
(program $eo_typeof_@bit ((m Int))
  :signature (Type Type) Type
  (
  (($eo_typeof_@bit Int (BitVec m)) Bool)
  )
)
; program: $eo_typeof_@from_bools
(program $eo_typeof_@from_bools ((n Int))
  :signature (Type Type) Type
  (
  (($eo_typeof_@from_bools Bool (BitVec n)) (BitVec (eo::add 1 n)))
  )
)
; program: $eo_typeof_@bv
(program $eo_typeof_@bv ((value Int) (w Int))
  :signature (Type Type) Type
  (
  (($eo_typeof_@bv value w) (BitVec w))
  )
)
; program: $eo_typeof_@mon
(program $eo_typeof_@mon ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_@mon T) (-> Real @Monomial))
  )
)
; program: $eo_typeof_seq.empty
(program $eo_typeof_seq.empty ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_seq.empty (Seq T)) (Seq T))
  )
)
; program: $eo_typeof_str.len
(program $eo_typeof_str.len ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_str.len (Seq T)) Int)
  )
)
; program: $eo_typeof_str.++
(program $eo_typeof_str.++ ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_str.++ (Seq T)) (eo::define ((_v0 (Seq T))) (-> _v0 _v0)))
  )
)
; program: $eo_typeof_str.substr
(program $eo_typeof_str.substr ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_str.substr (Seq T)) (-> Int (-> Int (Seq T))))
  )
)
; program: $eo_typeof_str.contains
(program $eo_typeof_str.contains ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_str.contains (Seq T)) (-> (Seq T) Bool))
  )
)
; program: $eo_typeof_str.replace
(program $eo_typeof_str.replace ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_str.replace (Seq T)) (eo::define ((_v0 (Seq T))) (-> _v0 (-> _v0 _v0))))
  )
)
; program: $eo_typeof_str.indexof
(program $eo_typeof_str.indexof ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_str.indexof (Seq T)) (-> (Seq T) (-> Int Int)))
  )
)
; program: $eo_typeof_str.at
(program $eo_typeof_str.at ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_str.at (Seq T)) (-> Int (Seq T)))
  )
)
; program: $eo_typeof_str.prefixof
(program $eo_typeof_str.prefixof ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_str.prefixof (Seq T)) (-> (Seq T) Bool))
  )
)
; program: $eo_typeof_str.suffixof
(program $eo_typeof_str.suffixof ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_str.suffixof (Seq T)) (-> (Seq T) Bool))
  )
)
; program: $eo_typeof_str.rev
(program $eo_typeof_str.rev ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_str.rev (Seq T)) (Seq T))
  )
)
; program: $eo_typeof_str.update
(program $eo_typeof_str.update ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_str.update (Seq T)) (eo::define ((_v0 (Seq T))) (-> Int (-> _v0 _v0))))
  )
)
; program: $eo_typeof_str.replace_all
(program $eo_typeof_str.replace_all ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_str.replace_all (Seq T)) (eo::define ((_v0 (Seq T))) (-> _v0 (-> _v0 _v0))))
  )
)
; program: $eo_typeof_seq.unit
(program $eo_typeof_seq.unit ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_seq.unit T) (Seq T))
  )
)
; program: $eo_typeof_seq.nth
(program $eo_typeof_seq.nth ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_seq.nth (Seq T)) (-> Int (eo::ite (eo::eq T Char) Int T)))
  )
)
; program: $eo_typeof_@re_unfold_pos_component
(program $eo_typeof_@re_unfold_pos_component ((s (Seq Char)) (r RegLan) (n Int))
  :signature (Type Type Type) Type
  (
  (($eo_typeof_@re_unfold_pos_component s r n) (Seq Char))
  )
)
; program: $eo_typeof_@strings_deq_diff
(program $eo_typeof_@strings_deq_diff ((T Type) (s (Seq T)) (t (Seq T)))
  :signature (Type Type Type Type) Type
  (
  ((eo::define ((_v0 (Seq T))) ($eo_typeof_@strings_deq_diff _v0 s _v0 t)) Int)
  )
)
; program: $eo_typeof_@strings_stoi_result
(program $eo_typeof_@strings_stoi_result ((s (Seq Char)))
  :signature (Type) Type
  (
  (($eo_typeof_@strings_stoi_result s) (-> Int Int))
  )
)
; program: $eo_typeof_@strings_stoi_non_digit
(program $eo_typeof_@strings_stoi_non_digit ((s (Seq Char)))
  :signature (Type) Type
  (
  (($eo_typeof_@strings_stoi_non_digit s) Int)
  )
)
; program: $eo_typeof_@strings_itos_result
(program $eo_typeof_@strings_itos_result ((n Int))
  :signature (Type) Type
  (
  (($eo_typeof_@strings_itos_result n) (-> Int Int))
  )
)
; program: $eo_typeof_@strings_num_occur
(program $eo_typeof_@strings_num_occur ((T Type) (s (Seq T)) (t (Seq T)))
  :signature (Type Type Type Type) Type
  (
  ((eo::define ((_v0 (Seq T))) ($eo_typeof_@strings_num_occur _v0 s _v0 t)) Int)
  )
)
; program: $eo_typeof_@strings_num_occur_re
(program $eo_typeof_@strings_num_occur_re ((e (Seq Char)) (b RegLan))
  :signature (Type Type) Type
  (
  (($eo_typeof_@strings_num_occur_re e b) Int)
  )
)
; program: $eo_typeof_@strings_occur_index
(program $eo_typeof_@strings_occur_index ((T Type) (s (Seq T)) (t (Seq T)))
  :signature (Type Type Type Type Type) Type
  (
  ((eo::define ((_v0 (Seq T))) ($eo_typeof_@strings_occur_index _v0 s _v0 t Int)) Int)
  )
)
; program: $eo_typeof_@strings_occur_index_re
(program $eo_typeof_@strings_occur_index_re ((s (Seq Char)) (r RegLan))
  :signature (Type Type) Type
  (
  (($eo_typeof_@strings_occur_index_re s r) (-> Int Int))
  )
)
; program: $eo_typeof_@strings_occur_len_re
(program $eo_typeof_@strings_occur_len_re ((s (Seq Char)) (r RegLan))
  :signature (Type Type) Type
  (
  (($eo_typeof_@strings_occur_len_re s r) (-> Int Int))
  )
)
; program: $eo_typeof_@strings_replace_all_result
(program $eo_typeof_@strings_replace_all_result ((T Type) (t (Seq T)))
  :signature (Type Type Type) Type
  (
  (($eo_typeof_@strings_replace_all_result (Seq T) t Int) (Seq T))
  )
)
; program: $eo_typeof_@re_first_match_pre
(program $eo_typeof_@re_first_match_pre ((h (Seq Char)) (e RegLan))
  :signature (Type Type) Type
  (
  (($eo_typeof_@re_first_match_pre h e) (Seq Char))
  )
)
; program: $eo_typeof_@re_first_match
(program $eo_typeof_@re_first_match ((i (Seq Char)) (f RegLan))
  :signature (Type Type) Type
  (
  (($eo_typeof_@re_first_match i f) (Seq Char))
  )
)
; program: $eo_typeof_@re_first_match_post
(program $eo_typeof_@re_first_match_post ((j (Seq Char)) (g RegLan))
  :signature (Type Type) Type
  (
  (($eo_typeof_@re_first_match_post j g) (Seq Char))
  )
)
; program: $eo_typeof_@witness_string_length
(program $eo_typeof_@witness_string_length ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_@witness_string_length T) (-> Int (-> Int T)))
  )
)
; program: $eo_typeof_@quantifiers_skolemize
(program $eo_typeof_@quantifiers_skolemize ((F Bool) (i Int))
  :signature (Type Type) Type
  (
  (($eo_typeof_@quantifiers_skolemize F i) ($assoc_nil_nth_type $eo_List_cons ($get_var_list F) i))
  )
)
; program: $eo_typeof_@witness_inv_condition
(program $eo_typeof_@witness_inv_condition ((F Bool))
  :signature (Type) Type
  (
  (($eo_typeof_@witness_inv_condition F) ($assoc_nil_nth_type $eo_List_cons ($get_var_list F) 0))
  )
)
; program: $eo_typeof_is
(program $eo_typeof_is ((C Type) (D Type))
  :signature (Type Type) Type
  (
  (($eo_typeof_is C D) Bool)
  )
)
; program: $eo_typeof_update
(program $eo_typeof_update ((S Type) (T Type) (D Type))
  :signature (Type Type Type) Type
  (
  (($eo_typeof_update S D T) D)
  )
)
; program: $eo_typeof_tuple
(program $eo_typeof_tuple ((T Type) (U Type))
  :signature (Type Type) Type
  (
  (($eo_typeof_tuple T U) (eo::cons Tuple T U))
  )
)
; program: $eo_typeof_tuple.select
(program $eo_typeof_tuple.select ((T Type) (i Int))
  :signature (Type Type) Type
  (
  (($eo_typeof_tuple.select i T) (eo::list_nth Tuple T i))
  )
)
; program: $eo_typeof_tuple.update
(program $eo_typeof_tuple.update ((i Int) (T Type))
  :signature (Type Type) Type
  (
  (($eo_typeof_tuple.update i T) (-> (eo::list_nth Tuple T i) T))
  )
)
; program: $eo_typeof_set.empty
(program $eo_typeof_set.empty ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_set.empty (Set T)) (Set T))
  )
)
; program: $eo_typeof_set.singleton
(program $eo_typeof_set.singleton ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_set.singleton T) (Set T))
  )
)
; program: $eo_typeof_set.union
(program $eo_typeof_set.union ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_set.union (Set T)) (eo::define ((_v0 (Set T))) (-> _v0 _v0)))
  )
)
; program: $eo_typeof_set.inter
(program $eo_typeof_set.inter ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_set.inter (Set T)) (eo::define ((_v0 (Set T))) (-> _v0 _v0)))
  )
)
; program: $eo_typeof_set.minus
(program $eo_typeof_set.minus ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_set.minus (Set T)) (eo::define ((_v0 (Set T))) (-> _v0 _v0)))
  )
)
; program: $eo_typeof_set.member
(program $eo_typeof_set.member ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_set.member T) (-> (Set T) Bool))
  )
)
; program: $eo_typeof_set.subset
(program $eo_typeof_set.subset ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_set.subset (Set T)) (-> (Set T) Bool))
  )
)
; program: $eo_typeof_set.choose
(program $eo_typeof_set.choose ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_set.choose (Set T)) T)
  )
)
; program: $eo_typeof_set.is_empty
(program $eo_typeof_set.is_empty ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_set.is_empty (Set T)) Bool)
  )
)
; program: $eo_typeof_set.is_singleton
(program $eo_typeof_set.is_singleton ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_set.is_singleton (Set T)) Bool)
  )
)
; program: $eo_typeof_set.insert
(program $eo_typeof_set.insert ((T Type))
  :signature (Type Type) Type
  (
  (($eo_typeof_set.insert $eo_List (Set T)) (Set T))
  )
)
; program: $eo_typeof_@sets_deq_diff
(program $eo_typeof_@sets_deq_diff ((T Type) (s (Set T)) (t (Set T)))
  :signature (Type Type Type Type) Type
  (
  ((eo::define ((_v0 (Set T))) ($eo_typeof_@sets_deq_diff _v0 s _v0 t)) T)
  )
)
; program: $eo_typeof_int_to_bv
(program $eo_typeof_int_to_bv ((w Int))
  :signature (Type) Type
  (
  (($eo_typeof_int_to_bv w) (-> Int (BitVec w)))
  )
)
; program: $eo_typeof_ubv_to_int
(program $eo_typeof_ubv_to_int ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_ubv_to_int (BitVec m)) Int)
  )
)
; program: $eo_typeof_sbv_to_int
(program $eo_typeof_sbv_to_int ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_sbv_to_int (BitVec m)) Int)
  )
)
; program: $eo_typeof_@aci_sorted
(program $eo_typeof_@aci_sorted ((U Type) (T Type))
  :signature (Type Type) Type
  (
  (($eo_typeof_@aci_sorted U T) T)
  )
)
; program: $eo_typeof_@const
(program $eo_typeof_@const ((id Int) (T Type))
  :signature (Type Type) Type
  (
  (($eo_typeof_@const id T) T)
  )
)


; program: $eo_typeof_fun_type
; Calling ($eo_typeof_fun_type Ut Tt) returns the type of (-> U T), 
; given that U has type Ut and T has type Tt. 
(program $eo_typeof_fun_type ()
  :signature (Type Type) Type
  (
  (($eo_typeof_fun_type Type Type) Type)
  )
)

; program: $eo_typeof_main
; This defines the type rules for non-builtin terms. It is used as a subroutine
; of the final $eo_typeof routine, defined in eo_builtin_smt.eo.
(program $eo_typeof_main
  ((T Type) (U Type) (V Type) (W Type) (f (-> U V T)) (x U) (t T)
   (W1 Type) (x1 W1) (W2 Type) (x2 W2) (W3 Type) (x3 W3)) ; assumes functions can be monomorphized with at most 3 arguments
  :signature (T) Type
  (
  (($eo_typeof_main Type)      Type)
  (($eo_typeof_main (-> T U))  ($eo_typeof_fun_type ($eo_typeof T) ($eo_typeof U))) ; requires both children are types
  (($eo_typeof_main Bool)      Type)
  (($eo_typeof_main true)      Bool)
  (($eo_typeof_main false)     Bool)
  ; type-rule: Int
  (($eo_typeof_main Int) Type)
  ; type-rule: Real
  (($eo_typeof_main Real) Type)
  ; type-rule: Char
  (($eo_typeof_main Char) Type)
  ; type-rule: Seq
  (($eo_typeof_main Seq) (-> Type Type))
  ; type-rule: @Pair
  (($eo_typeof_main @Pair) (-> Type (-> Type Type)))
  ; type-rule: @pair
  (($eo_typeof_main (_ (@pair x1) x2)) ($eo_typeof_@pair ($eo_typeof x1) ($eo_typeof x2)))
  ; type-rule: @result.null
  (($eo_typeof_main @result.null) Bool)
  ; type-rule: @result.invalid
  (($eo_typeof_main @result.invalid) Bool)
  ; type-rule: ite
  (($eo_typeof_main (_ (ite x1) x2)) ($eo_typeof_ite ($eo_typeof x1) ($eo_typeof x2)))
  ; type-rule: not
  (($eo_typeof_main not) (-> Bool Bool))
  ; type-rule: or
  (($eo_typeof_main or) (-> Bool (-> Bool Bool)))
  ; type-rule: and
  (($eo_typeof_main and) (-> Bool (-> Bool Bool)))
  ; type-rule: =>
  (($eo_typeof_main =>) (-> Bool (-> Bool Bool)))
  ; type-rule: xor
  (($eo_typeof_main xor) (-> Bool (-> Bool Bool)))
  ; type-rule: =
  (($eo_typeof_main (= x1)) ($eo_typeof_= ($eo_typeof x1)))
  ; type-rule: lambda
  (($eo_typeof_main (_ (lambda x1) x2)) ($eo_typeof_lambda x1 ($eo_typeof x2)))
  ; type-rule: distinct
  (($eo_typeof_main (distinct x1)) ($eo_typeof_distinct ($eo_typeof x1)))
  ; type-rule: @purify
  (($eo_typeof_main (_ @purify x1)) ($eo_typeof_@purify ($eo_typeof x1) x1))
  ; type-rule: +
  (($eo_typeof_main (_ (+ x1) x2)) ($eo_typeof_+ ($eo_typeof x1) ($eo_typeof x2)))
  ; type-rule: -
  (($eo_typeof_main (_ (- x1) x2)) ($eo_typeof_- ($eo_typeof x1) ($eo_typeof x2)))
  ; type-rule: *
  (($eo_typeof_main (_ (* x1) x2)) ($eo_typeof_* ($eo_typeof x1) ($eo_typeof x2)))
  ; type-rule: <
  (($eo_typeof_main (_ (< x1) x2)) ($eo_typeof_< ($eo_typeof x1) ($eo_typeof x2)))
  ; type-rule: <=
  (($eo_typeof_main (_ (<= x1) x2)) ($eo_typeof_<= ($eo_typeof x1) ($eo_typeof x2)))
  ; type-rule: >
  (($eo_typeof_main (_ (> x1) x2)) ($eo_typeof_> ($eo_typeof x1) ($eo_typeof x2)))
  ; type-rule: >=
  (($eo_typeof_main (_ (>= x1) x2)) ($eo_typeof_>= ($eo_typeof x1) ($eo_typeof x2)))
  ; type-rule: to_real
  (($eo_typeof_main (to_real x1)) ($eo_typeof_to_real ($eo_typeof x1)))
  ; type-rule: to_int
  (($eo_typeof_main (to_int x1)) ($eo_typeof_to_int ($eo_typeof x1)))
  ; type-rule: is_int
  (($eo_typeof_main (is_int x1)) ($eo_typeof_is_int ($eo_typeof x1)))
  ; type-rule: abs
  (($eo_typeof_main (abs x1)) ($eo_typeof_abs ($eo_typeof x1)))
  ; type-rule: ^
  (($eo_typeof_main (^ x1)) ($eo_typeof_^ ($eo_typeof x1)))
  ; type-rule: -
  (($eo_typeof_main ($eoo_-.2 x1)) ($eo_typeof_$eoo_-.2 ($eo_typeof x1)))
  ; type-rule: div
  (($eo_typeof_main div) (-> Int (-> Int Int)))
  ; type-rule: mod
  (($eo_typeof_main mod) (-> Int (-> Int Int)))
  ; type-rule: divisible
  (($eo_typeof_main divisible) (-> Int (-> Int Bool)))
  ; type-rule: int.pow2
  (($eo_typeof_main int.pow2) (-> Int Int))
  ; type-rule: int.log2
  (($eo_typeof_main int.log2) (-> Int Int))
  ; type-rule: int.ispow2
  (($eo_typeof_main int.ispow2) (-> Int Bool))
  ; type-rule: div_total
  (($eo_typeof_main div_total) (-> Int (-> Int Int)))
  ; type-rule: mod_total
  (($eo_typeof_main mod_total) (-> Int (-> Int Int)))
  ; type-rule: @int_div_by_zero
  (($eo_typeof_main @int_div_by_zero) (-> Int Int))
  ; type-rule: @mod_by_zero
  (($eo_typeof_main @mod_by_zero) (-> Int Int))
  ; type-rule: Array
  (($eo_typeof_main Array) (-> Type (-> Type Type)))
  ; type-rule: select
  (($eo_typeof_main (select x1)) ($eo_typeof_select ($eo_typeof x1)))
  ; type-rule: store
  (($eo_typeof_main (store x1)) ($eo_typeof_store ($eo_typeof x1)))
  ; type-rule: @array_deq_diff
  (($eo_typeof_main (_ @array_deq_diff x1 x2)) ($eo_typeof_@array_deq_diff ($eo_typeof x1) x1 ($eo_typeof x2) x2))
  ; type-rule: /
  (($eo_typeof_main (_ (/ x1) x2)) ($eo_typeof_/ ($eo_typeof x1) ($eo_typeof x2)))
  ; type-rule: /_total
  (($eo_typeof_main (_ (/_total x1) x2)) ($eo_typeof_/_total ($eo_typeof x1) ($eo_typeof x2)))
  ; type-rule: @div_by_zero
  (($eo_typeof_main @div_by_zero) (-> Real Real))
  ; type-rule: BitVec
  (($eo_typeof_main BitVec) (-> Int Type))
  ; type-rule: @bvsize
  (($eo_typeof_main (@bvsize x1)) ($eo_typeof_@bvsize ($eo_typeof x1)))
  ; type-rule: concat
  (($eo_typeof_main (_ (concat x1) x2)) ($eo_typeof_concat ($eo_typeof x1) ($eo_typeof x2)))
  ; type-rule: extract
  (($eo_typeof_main (_ (_ (extract x1) x2) x3)) ($eo_typeof_extract x1 x2 ($eo_typeof x3)))
  ; type-rule: repeat
  (($eo_typeof_main (_ (repeat x1) x2)) ($eo_typeof_repeat x1 ($eo_typeof x2)))
  ; type-rule: bvnot
  (($eo_typeof_main (bvnot x1)) ($eo_typeof_bvnot ($eo_typeof x1)))
  ; type-rule: bvand
  (($eo_typeof_main (bvand x1)) ($eo_typeof_bvand ($eo_typeof x1)))
  ; type-rule: bvor
  (($eo_typeof_main (bvor x1)) ($eo_typeof_bvor ($eo_typeof x1)))
  ; type-rule: bvnand
  (($eo_typeof_main (bvnand x1)) ($eo_typeof_bvnand ($eo_typeof x1)))
  ; type-rule: bvnor
  (($eo_typeof_main (bvnor x1)) ($eo_typeof_bvnor ($eo_typeof x1)))
  ; type-rule: bvxor
  (($eo_typeof_main (bvxor x1)) ($eo_typeof_bvxor ($eo_typeof x1)))
  ; type-rule: bvxnor
  (($eo_typeof_main (bvxnor x1)) ($eo_typeof_bvxnor ($eo_typeof x1)))
  ; type-rule: bvcomp
  (($eo_typeof_main (bvcomp x1)) ($eo_typeof_bvcomp ($eo_typeof x1)))
  ; type-rule: bvneg
  (($eo_typeof_main (bvneg x1)) ($eo_typeof_bvneg ($eo_typeof x1)))
  ; type-rule: bvadd
  (($eo_typeof_main (bvadd x1)) ($eo_typeof_bvadd ($eo_typeof x1)))
  ; type-rule: bvmul
  (($eo_typeof_main (bvmul x1)) ($eo_typeof_bvmul ($eo_typeof x1)))
  ; type-rule: bvudiv
  (($eo_typeof_main (bvudiv x1)) ($eo_typeof_bvudiv ($eo_typeof x1)))
  ; type-rule: bvurem
  (($eo_typeof_main (bvurem x1)) ($eo_typeof_bvurem ($eo_typeof x1)))
  ; type-rule: bvsub
  (($eo_typeof_main (bvsub x1)) ($eo_typeof_bvsub ($eo_typeof x1)))
  ; type-rule: bvsdiv
  (($eo_typeof_main (bvsdiv x1)) ($eo_typeof_bvsdiv ($eo_typeof x1)))
  ; type-rule: bvsrem
  (($eo_typeof_main (bvsrem x1)) ($eo_typeof_bvsrem ($eo_typeof x1)))
  ; type-rule: bvsmod
  (($eo_typeof_main (bvsmod x1)) ($eo_typeof_bvsmod ($eo_typeof x1)))
  ; type-rule: bvult
  (($eo_typeof_main (bvult x1)) ($eo_typeof_bvult ($eo_typeof x1)))
  ; type-rule: bvule
  (($eo_typeof_main (bvule x1)) ($eo_typeof_bvule ($eo_typeof x1)))
  ; type-rule: bvugt
  (($eo_typeof_main (bvugt x1)) ($eo_typeof_bvugt ($eo_typeof x1)))
  ; type-rule: bvuge
  (($eo_typeof_main (bvuge x1)) ($eo_typeof_bvuge ($eo_typeof x1)))
  ; type-rule: bvslt
  (($eo_typeof_main (bvslt x1)) ($eo_typeof_bvslt ($eo_typeof x1)))
  ; type-rule: bvsle
  (($eo_typeof_main (bvsle x1)) ($eo_typeof_bvsle ($eo_typeof x1)))
  ; type-rule: bvsgt
  (($eo_typeof_main (bvsgt x1)) ($eo_typeof_bvsgt ($eo_typeof x1)))
  ; type-rule: bvsge
  (($eo_typeof_main (bvsge x1)) ($eo_typeof_bvsge ($eo_typeof x1)))
  ; type-rule: bvshl
  (($eo_typeof_main (bvshl x1)) ($eo_typeof_bvshl ($eo_typeof x1)))
  ; type-rule: bvlshr
  (($eo_typeof_main (bvlshr x1)) ($eo_typeof_bvlshr ($eo_typeof x1)))
  ; type-rule: bvashr
  (($eo_typeof_main (bvashr x1)) ($eo_typeof_bvashr ($eo_typeof x1)))
  ; type-rule: zero_extend
  (($eo_typeof_main (_ (zero_extend x1) x2)) ($eo_typeof_zero_extend x1 ($eo_typeof x2)))
  ; type-rule: sign_extend
  (($eo_typeof_main (_ (sign_extend x1) x2)) ($eo_typeof_sign_extend x1 ($eo_typeof x2)))
  ; type-rule: rotate_left
  (($eo_typeof_main (_ (rotate_left x1) x2)) ($eo_typeof_rotate_left ($eo_typeof x1) ($eo_typeof x2)))
  ; type-rule: rotate_right
  (($eo_typeof_main (_ (rotate_right x1) x2)) ($eo_typeof_rotate_right ($eo_typeof x1) ($eo_typeof x2)))
  ; type-rule: reduce_and
  (($eo_typeof_main (reduce_and x1)) ($eo_typeof_reduce_and ($eo_typeof x1)))
  ; type-rule: reduce_or
  (($eo_typeof_main (reduce_or x1)) ($eo_typeof_reduce_or ($eo_typeof x1)))
  ; type-rule: reduce_xor
  (($eo_typeof_main (reduce_xor x1)) ($eo_typeof_reduce_xor ($eo_typeof x1)))
  ; type-rule: bvite
  (($eo_typeof_main (_ (bvite x1) x2)) ($eo_typeof_bvite ($eo_typeof x1) ($eo_typeof x2)))
  ; type-rule: bv1ult
  (($eo_typeof_main (bv1ult x1)) ($eo_typeof_bv1ult ($eo_typeof x1)))
  ; type-rule: bvuaddo
  (($eo_typeof_main (bvuaddo x1)) ($eo_typeof_bvuaddo ($eo_typeof x1)))
  ; type-rule: bvnego
  (($eo_typeof_main (bvnego x1)) ($eo_typeof_bvnego ($eo_typeof x1)))
  ; type-rule: bvsaddo
  (($eo_typeof_main (bvsaddo x1)) ($eo_typeof_bvsaddo ($eo_typeof x1)))
  ; type-rule: bvumulo
  (($eo_typeof_main (bvumulo x1)) ($eo_typeof_bvumulo ($eo_typeof x1)))
  ; type-rule: bvsmulo
  (($eo_typeof_main (bvsmulo x1)) ($eo_typeof_bvsmulo ($eo_typeof x1)))
  ; type-rule: bvusubo
  (($eo_typeof_main (bvusubo x1)) ($eo_typeof_bvusubo ($eo_typeof x1)))
  ; type-rule: bvssubo
  (($eo_typeof_main (bvssubo x1)) ($eo_typeof_bvssubo ($eo_typeof x1)))
  ; type-rule: bvsdivo
  (($eo_typeof_main (bvsdivo x1)) ($eo_typeof_bvsdivo ($eo_typeof x1)))
  ; type-rule: bvultbv
  (($eo_typeof_main (bvultbv x1)) ($eo_typeof_bvultbv ($eo_typeof x1)))
  ; type-rule: bvsltbv
  (($eo_typeof_main (bvsltbv x1)) ($eo_typeof_bvsltbv ($eo_typeof x1)))
  ; type-rule: bvredand
  (($eo_typeof_main (bvredand x1)) ($eo_typeof_bvredand ($eo_typeof x1)))
  ; type-rule: bvredor
  (($eo_typeof_main (bvredor x1)) ($eo_typeof_bvredor ($eo_typeof x1)))
  ; type-rule: @bit
  (($eo_typeof_main (_ (@bit x1) x2)) ($eo_typeof_@bit ($eo_typeof x1) ($eo_typeof x2)))
  ; type-rule: @from_bools
  (($eo_typeof_main (_ (@from_bools x1) x2)) ($eo_typeof_@from_bools ($eo_typeof x1) ($eo_typeof x2)))
  ; type-rule: @bv
  (($eo_typeof_main (_ (@bv x1) x2)) ($eo_typeof_@bv x1 x2))
  ; type-rule: @Monomial
  (($eo_typeof_main @Monomial) Type)
  ; type-rule: @mon
  (($eo_typeof_main (@mon x1)) ($eo_typeof_@mon ($eo_typeof x1)))
  ; type-rule: @Polynomial
  (($eo_typeof_main @Polynomial) Type)
  ; type-rule: @poly.zero
  (($eo_typeof_main @poly.zero) @Polynomial)
  ; type-rule: @poly
  (($eo_typeof_main @poly) (-> @Monomial (-> @Polynomial @Polynomial)))
  ; type-rule: RegLan
  (($eo_typeof_main RegLan) Type)
  ; type-rule: seq.empty
  (($eo_typeof_main (seq.empty x1)) ($eo_typeof_seq.empty x1))
  ; type-rule: str.len
  (($eo_typeof_main (str.len x1)) ($eo_typeof_str.len ($eo_typeof x1)))
  ; type-rule: str.++
  (($eo_typeof_main (str.++ x1)) ($eo_typeof_str.++ ($eo_typeof x1)))
  ; type-rule: str.substr
  (($eo_typeof_main (str.substr x1)) ($eo_typeof_str.substr ($eo_typeof x1)))
  ; type-rule: str.contains
  (($eo_typeof_main (str.contains x1)) ($eo_typeof_str.contains ($eo_typeof x1)))
  ; type-rule: str.replace
  (($eo_typeof_main (str.replace x1)) ($eo_typeof_str.replace ($eo_typeof x1)))
  ; type-rule: str.indexof
  (($eo_typeof_main (str.indexof x1)) ($eo_typeof_str.indexof ($eo_typeof x1)))
  ; type-rule: str.at
  (($eo_typeof_main (str.at x1)) ($eo_typeof_str.at ($eo_typeof x1)))
  ; type-rule: str.prefixof
  (($eo_typeof_main (str.prefixof x1)) ($eo_typeof_str.prefixof ($eo_typeof x1)))
  ; type-rule: str.suffixof
  (($eo_typeof_main (str.suffixof x1)) ($eo_typeof_str.suffixof ($eo_typeof x1)))
  ; type-rule: str.rev
  (($eo_typeof_main (str.rev x1)) ($eo_typeof_str.rev ($eo_typeof x1)))
  ; type-rule: str.unit
  (($eo_typeof_main str.unit) (-> Int (Seq Char)))
  ; type-rule: str.update
  (($eo_typeof_main (str.update x1)) ($eo_typeof_str.update ($eo_typeof x1)))
  ; type-rule: str.to_lower
  (($eo_typeof_main str.to_lower) (eo::define ((_v0 (Seq Char))) (-> _v0 _v0)))
  ; type-rule: str.to_upper
  (($eo_typeof_main str.to_upper) (eo::define ((_v0 (Seq Char))) (-> _v0 _v0)))
  ; type-rule: str.to_code
  (($eo_typeof_main str.to_code) (-> (Seq Char) Int))
  ; type-rule: str.from_code
  (($eo_typeof_main str.from_code) (-> Int (Seq Char)))
  ; type-rule: str.is_digit
  (($eo_typeof_main str.is_digit) (-> (Seq Char) Bool))
  ; type-rule: str.to_int
  (($eo_typeof_main str.to_int) (-> (Seq Char) Int))
  ; type-rule: str.from_int
  (($eo_typeof_main str.from_int) (-> Int (Seq Char)))
  ; type-rule: str.<
  (($eo_typeof_main str.<) (eo::define ((_v0 (Seq Char))) (-> _v0 (-> _v0 Bool))))
  ; type-rule: str.<=
  (($eo_typeof_main str.<=) (eo::define ((_v0 (Seq Char))) (-> _v0 (-> _v0 Bool))))
  ; type-rule: str.replace_all
  (($eo_typeof_main (str.replace_all x1)) ($eo_typeof_str.replace_all ($eo_typeof x1)))
  ; type-rule: str.replace_re
  (($eo_typeof_main str.replace_re) (eo::define ((_v0 (Seq Char))) (-> _v0 (-> RegLan (-> _v0 _v0)))))
  ; type-rule: str.replace_re_all
  (($eo_typeof_main str.replace_re_all) (eo::define ((_v0 (Seq Char))) (-> _v0 (-> RegLan (-> _v0 _v0)))))
  ; type-rule: str.indexof_re
  (($eo_typeof_main str.indexof_re) (-> (Seq Char) (-> RegLan (-> Int Int))))
  ; type-rule: re.allchar
  (($eo_typeof_main re.allchar) RegLan)
  ; type-rule: re.none
  (($eo_typeof_main re.none) RegLan)
  ; type-rule: re.all
  (($eo_typeof_main re.all) RegLan)
  ; type-rule: str.to_re
  (($eo_typeof_main str.to_re) (-> (Seq Char) RegLan))
  ; type-rule: re.*
  (($eo_typeof_main re.*) (-> RegLan RegLan))
  ; type-rule: re.+
  (($eo_typeof_main re.+) (-> RegLan RegLan))
  ; type-rule: re.opt
  (($eo_typeof_main re.opt) (-> RegLan RegLan))
  ; type-rule: re.comp
  (($eo_typeof_main re.comp) (-> RegLan RegLan))
  ; type-rule: re.range
  (($eo_typeof_main re.range) (eo::define ((_v0 (Seq Char))) (-> _v0 (-> _v0 RegLan))))
  ; type-rule: re.++
  (($eo_typeof_main re.++) (-> RegLan (-> RegLan RegLan)))
  ; type-rule: re.inter
  (($eo_typeof_main re.inter) (-> RegLan (-> RegLan RegLan)))
  ; type-rule: re.union
  (($eo_typeof_main re.union) (-> RegLan (-> RegLan RegLan)))
  ; type-rule: re.diff
  (($eo_typeof_main re.diff) (-> RegLan (-> RegLan RegLan)))
  ; type-rule: re.loop
  (($eo_typeof_main re.loop) (-> Int (-> Int (-> RegLan RegLan))))
  ; type-rule: str.in_re
  (($eo_typeof_main str.in_re) (-> (Seq Char) (-> RegLan Bool)))
  ; type-rule: seq.unit
  (($eo_typeof_main (seq.unit x1)) ($eo_typeof_seq.unit ($eo_typeof x1)))
  ; type-rule: seq.nth
  (($eo_typeof_main (seq.nth x1)) ($eo_typeof_seq.nth ($eo_typeof x1)))
  ; type-rule: @re_unfold_pos_component
  (($eo_typeof_main (_ @re_unfold_pos_component x1 x2 x3)) ($eo_typeof_@re_unfold_pos_component x1 x2 x3))
  ; type-rule: @strings_deq_diff
  (($eo_typeof_main (_ @strings_deq_diff x1 x2)) ($eo_typeof_@strings_deq_diff ($eo_typeof x1) x1 ($eo_typeof x2) x2))
  ; type-rule: @strings_stoi_result
  (($eo_typeof_main (_ @strings_stoi_result x1)) ($eo_typeof_@strings_stoi_result x1))
  ; type-rule: @strings_stoi_non_digit
  (($eo_typeof_main (_ @strings_stoi_non_digit x1)) ($eo_typeof_@strings_stoi_non_digit x1))
  ; type-rule: @strings_itos_result
  (($eo_typeof_main (_ @strings_itos_result x1)) ($eo_typeof_@strings_itos_result x1))
  ; type-rule: @strings_num_occur
  (($eo_typeof_main (_ (@strings_num_occur x1) x2)) ($eo_typeof_@strings_num_occur ($eo_typeof x1) x1 ($eo_typeof x2) x2))
  ; type-rule: @strings_num_occur_re
  (($eo_typeof_main (_ @strings_num_occur_re x1 x2)) ($eo_typeof_@strings_num_occur_re x1 x2))
  ; type-rule: @strings_occur_index
  (($eo_typeof_main (_ (_ (@strings_occur_index x1) x2) x3)) ($eo_typeof_@strings_occur_index ($eo_typeof x1) x1 ($eo_typeof x2) x2 ($eo_typeof x3)))
  ; type-rule: @strings_occur_index_re
  (($eo_typeof_main (_ @strings_occur_index_re x1 x2)) ($eo_typeof_@strings_occur_index_re x1 x2))
  ; type-rule: @strings_occur_len_re
  (($eo_typeof_main (_ @strings_occur_len_re x1 x2)) ($eo_typeof_@strings_occur_len_re x1 x2))
  ; type-rule: @strings_replace_all_result
  (($eo_typeof_main (_ (_ @strings_replace_all_result x1) x2)) ($eo_typeof_@strings_replace_all_result ($eo_typeof x1) x1 ($eo_typeof x2)))
  ; type-rule: @re_first_match_pre
  (($eo_typeof_main (_ @re_first_match_pre x1 x2)) ($eo_typeof_@re_first_match_pre x1 x2))
  ; type-rule: @re_first_match
  (($eo_typeof_main (_ @re_first_match x1 x2)) ($eo_typeof_@re_first_match x1 x2))
  ; type-rule: @re_first_match_post
  (($eo_typeof_main (_ @re_first_match_post x1 x2)) ($eo_typeof_@re_first_match_post x1 x2))
  ; type-rule: @witness_string_length
  (($eo_typeof_main (@witness_string_length x1)) ($eo_typeof_@witness_string_length x1))
  ; type-rule: forall
  (($eo_typeof_main forall) (-> $eo_List (-> Bool Bool)))
  ; type-rule: exists
  (($eo_typeof_main exists) (-> $eo_List (-> Bool Bool)))
  ; type-rule: @quantifiers_skolemize
  (($eo_typeof_main (_ @quantifiers_skolemize x1 x2)) ($eo_typeof_@quantifiers_skolemize x1 x2))
  ; type-rule: @witness_inv_condition
  (($eo_typeof_main (_ @witness_inv_condition x1)) ($eo_typeof_@witness_inv_condition x1))
  ; type-rule: is
  (($eo_typeof_main (_ (is x1) x2)) ($eo_typeof_is ($eo_typeof x1) ($eo_typeof x2)))
  ; type-rule: update
  (($eo_typeof_main (_ (_ (update x1) x2) x3)) ($eo_typeof_update ($eo_typeof x1) ($eo_typeof x2) ($eo_typeof x3)))
  ; type-rule: UnitTuple
  (($eo_typeof_main UnitTuple) Type)
  ; type-rule: Tuple
  (($eo_typeof_main Tuple) (-> Type (-> Type Type)))
  ; type-rule: tuple.unit
  (($eo_typeof_main tuple.unit) UnitTuple)
  ; type-rule: tuple
  (($eo_typeof_main (_ (tuple x1) x2)) ($eo_typeof_tuple ($eo_typeof x1) ($eo_typeof x2)))
  ; type-rule: tuple.select
  (($eo_typeof_main (_ (tuple.select x1) x2)) ($eo_typeof_tuple.select x1 ($eo_typeof x2)))
  ; type-rule: tuple.update
  (($eo_typeof_main (_ (tuple.update x1) x2)) ($eo_typeof_tuple.update x1 ($eo_typeof x2)))
  ; type-rule: Set
  (($eo_typeof_main Set) (-> Type Type))
  ; type-rule: set.empty
  (($eo_typeof_main (set.empty x1)) ($eo_typeof_set.empty x1))
  ; type-rule: set.singleton
  (($eo_typeof_main (set.singleton x1)) ($eo_typeof_set.singleton ($eo_typeof x1)))
  ; type-rule: set.union
  (($eo_typeof_main (set.union x1)) ($eo_typeof_set.union ($eo_typeof x1)))
  ; type-rule: set.inter
  (($eo_typeof_main (set.inter x1)) ($eo_typeof_set.inter ($eo_typeof x1)))
  ; type-rule: set.minus
  (($eo_typeof_main (set.minus x1)) ($eo_typeof_set.minus ($eo_typeof x1)))
  ; type-rule: set.member
  (($eo_typeof_main (set.member x1)) ($eo_typeof_set.member ($eo_typeof x1)))
  ; type-rule: set.subset
  (($eo_typeof_main (set.subset x1)) ($eo_typeof_set.subset ($eo_typeof x1)))
  ; type-rule: set.choose
  (($eo_typeof_main (set.choose x1)) ($eo_typeof_set.choose ($eo_typeof x1)))
  ; type-rule: set.is_empty
  (($eo_typeof_main (set.is_empty x1)) ($eo_typeof_set.is_empty ($eo_typeof x1)))
  ; type-rule: set.is_singleton
  (($eo_typeof_main (set.is_singleton x1)) ($eo_typeof_set.is_singleton ($eo_typeof x1)))
  ; type-rule: set.insert
  (($eo_typeof_main (_ (set.insert x1) x2)) ($eo_typeof_set.insert ($eo_typeof x1) ($eo_typeof x2)))
  ; type-rule: @sets_deq_diff
  (($eo_typeof_main (_ @sets_deq_diff x1 x2)) ($eo_typeof_@sets_deq_diff ($eo_typeof x1) x1 ($eo_typeof x2) x2))
  ; type-rule: @re.null
  (($eo_typeof_main @re.null) RegLan)
  ; type-rule: int_to_bv
  (($eo_typeof_main (int_to_bv x1)) ($eo_typeof_int_to_bv x1))
  ; type-rule: ubv_to_int
  (($eo_typeof_main (ubv_to_int x1)) ($eo_typeof_ubv_to_int ($eo_typeof x1)))
  ; type-rule: sbv_to_int
  (($eo_typeof_main (sbv_to_int x1)) ($eo_typeof_sbv_to_int ($eo_typeof x1)))
  ; type-rule: @aci_sorted
  (($eo_typeof_main (_ (@aci_sorted x1) x2)) ($eo_typeof_@aci_sorted ($eo_typeof x1) ($eo_typeof x2)))
  ; type-rule: @const
  (($eo_typeof_main (_ @const x1 x2)) ($eo_typeof_@const x1 x2))

  (($eo_typeof_main (f x))     ($eo_typeof_apply ($eo_typeof f) ($eo_typeof x)))
  )
)

;;; datatype constructors

; program: $eo_dt_constructors
; implements: eo::dt_constructors
(program $eo_dt_constructors
  ((T Type))
  :signature (Type) $eo_List
  (

  (($eo_dt_constructors T) $eo_fail)
  )
)

; program: $eo_dt_selectors
; implements: eo::dt_selectors
(program $eo_dt_selectors ((T Type) (t T))
  :signature (T) $eo_List
  (

  (($eo_dt_selectors t) $eo_fail)
  )
)

;;; eo::nil definitions

; program: $eo_nil_bvand
(program $eo_nil_bvand (($eo_T Type) (m Int))
  :signature ((eo::quote $eo_T)) $eo_T
  (
  (($eo_nil_bvand (BitVec m)) (eo::not (eo::to_bin m 0)))
  )
)
; program: $eo_nil_bvor
(program $eo_nil_bvor (($eo_T Type) (m Int))
  :signature ((eo::quote $eo_T)) $eo_T
  (
  (($eo_nil_bvor (BitVec m)) (eo::to_bin m 0))
  )
)
; program: $eo_nil_bvxor
(program $eo_nil_bvxor (($eo_T Type) (m Int))
  :signature ((eo::quote $eo_T)) $eo_T
  (
  (($eo_nil_bvxor (BitVec m)) (eo::to_bin m 0))
  )
)
; program: $eo_nil_bvadd
(program $eo_nil_bvadd (($eo_T Type) (m Int))
  :signature ((eo::quote $eo_T)) $eo_T
  (
  (($eo_nil_bvadd (BitVec m)) (eo::to_bin m 0))
  )
)
; program: $eo_nil_bvmul
(program $eo_nil_bvmul (($eo_T Type) (m Int))
  :signature ((eo::quote $eo_T)) $eo_T
  (
  (($eo_nil_bvmul (BitVec m)) (eo::to_bin m 1))
  )
)
; program: $eo_nil_str.++
(program $eo_nil_str.++ (($eo_T Type) (T Type))
  :signature ((eo::quote $eo_T)) $eo_T
  (
  (($eo_nil_str.++ (Seq T)) (eo::define ((_v0 (Seq T))) (eo::ite (eo::is_eq _v0 (Seq Char)) "" (_ seq.empty _v0))))
  )
)


; program: $eo_nil
; implements: eo::nil
(program $eo_nil
  ((T Type) (U Type) (V Type) (W Type) (f (-> T U V)))
  :signature ((-> T U V) (eo::quote W)) W
  (
  (($eo_nil or T) false)
  (($eo_nil and T) true)
  (($eo_nil + T) 0)
  (($eo_nil * T) 1)
  (($eo_nil concat T) (eo::to_bin 0 0))
  (($eo_nil bvand T) ($eo_nil_bvand T))
  (($eo_nil bvor T) ($eo_nil_bvor T))
  (($eo_nil bvxor T) ($eo_nil_bvxor T))
  (($eo_nil bvadd T) ($eo_nil_bvadd T))
  (($eo_nil bvmul T) ($eo_nil_bvmul T))
  (($eo_nil @from_bools T) (eo::to_bin 0 0))
  (($eo_nil @poly T) @poly.zero)
  (($eo_nil str.++ T) ($eo_nil_str.++ T))
  (($eo_nil re.++ T) (str.to_re ""))
  (($eo_nil re.inter T) re.all)
  (($eo_nil re.union T) re.none)
  (($eo_nil Tuple T) UnitTuple)
  (($eo_nil tuple T) tuple.unit)

  (($eo_nil f T) $eo_fail)
  )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; model_smt

; A placeholder for asking whether a formula is satisfied by a model.
; This is used to define the verification condition we will write below.
(program $eo_model_sat () :signature (Bool) Bool)

; A placeholder for asking the type of a given term.
; This is used to define the verification condition we will write below.
(program $eo_model_typeof ((T Type)) :signature (T) Bool)

; We will include the definition of $eo_model_sat here.
(echo "include eo_model_sat")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; vc

;; verification conditions

; program: $eor_scope
(program $eor_scope ((F Bool) (G Bool))
  :signature (Bool Bool) Bool
  (
  (($eor_scope G F) (_ (=> F) G))
  )
)
; program: $eovc_scope
(program $eovc_scope ((G Bool) (F Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_scope F G) ($eo_requires_true ($eo_model_sat G) ($eo_requires_false ($eo_model_sat ($eor_scope G F)) true)))
  )
)
(echo "smt-meta $eovc_scope")
; program: $eor_process_scope
(program $eor_process_scope ((F Bool) (C Bool))
  :signature (Bool Bool) Bool
  (
  (($eor_process_scope C F) ($run_process_scope F C))
  )
)
; program: $eovc_process_scope
(program $eovc_process_scope ((C Bool) (F Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_process_scope F C) ($eo_requires_true ($eo_model_sat F) ($eo_requires_false ($eo_model_sat ($eor_process_scope C F)) true)))
  )
)
(echo "smt-meta $eovc_process_scope")
; program: $eor_ite_eq
(program $eor_ite_eq ((T Type) (b Bool) (t1 T) (t2 T))
  :signature (T) Bool
  (
  (($eor_ite_eq (_ (_ (ite b) t1) t2)) (eo::define ((_v0 (ite b))) (eo::define ((_v1 (= (_ (_ _v0 t1) t2)))) (_ (_ _v0 (_ _v1 t1)) (_ _v1 t2)))))
  )
)
; program: $eovc_ite_eq
(program $eovc_ite_eq ((T Type) (b Bool) (t1 T) (t2 T))
  :signature (T T Bool) Bool
  (
  (($eovc_ite_eq t2 t1 b) ($eo_requires_false ($eo_model_sat ($eor_ite_eq (_ (_ (ite b) t1) t2))) true))
  )
)
(echo "smt-meta $eovc_ite_eq")
; program: $eor_split
(program $eor_split ((F Bool))
  :signature (Bool) Bool
  (
  (($eor_split F) (_ (or F) (_ (or (not F)) false)))
  )
)
; program: $eovc_split
(program $eovc_split ((F Bool))
  :signature (Bool) Bool
  (
  (($eovc_split F) ($eo_requires_false ($eo_model_sat ($eor_split F)) true))
  )
)
(echo "smt-meta $eovc_split")
; program: $eor_resolution
(program $eor_resolution ((C1 Bool) (C2 Bool) (pol Bool) (L Bool))
  :signature (Bool Bool Bool Bool) Bool
  (
  (($eor_resolution pol L C1 C2) (eo::define ((_v0 (not L))) (eo::define ((_v1 (eo::ite pol _v0 L))) (eo::define ((_v2 ($to_clause C2))) (eo::define ((_v3 (eo::ite pol L _v0))) (eo::define ((_v4 ($to_clause C1))) ($from_clause (eo::list_concat or (eo::ite (eo::eq _v3 _v4) false (eo::list_erase or _v4 _v3)) (eo::ite (eo::eq _v1 _v2) false (eo::list_erase or _v2 _v1))))))))))
  )
)
; program: $eovc_resolution
(program $eovc_resolution ((pol Bool) (L Bool) (C1 Bool) (C2 Bool))
  :signature (Bool Bool Bool Bool) Bool
  (
  (($eovc_resolution C2 C1 L pol) ($eo_requires_true ($eo_model_sat C1) ($eo_requires_true ($eo_model_sat C2) ($eo_requires_false ($eo_model_sat ($eor_resolution pol L C1 C2)) true))))
  )
)
(echo "smt-meta $eovc_resolution")
; program: $eor_chain_resolution
(program $eor_chain_resolution ((C1 Bool) (C2 Bool) (pols $eo_List) (lits $eo_List))
  :signature ($eo_List $eo_List Bool) Bool
  (
  (($eor_chain_resolution pols lits (_ (and C1) C2)) ($chain_resolve_rec C1 C2 pols lits))
  )
)
; program: $eovc_chain_resolution
(program $eovc_chain_resolution ((pols $eo_List) (lits $eo_List) (C1 Bool) (C2 Bool))
  :signature (Bool Bool $eo_List $eo_List) Bool
  (
  (($eovc_chain_resolution C2 C1 lits pols) (eo::define ((_v0 (_ (and C1) C2))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_chain_resolution pols lits _v0)) true))))
  )
)
(echo "smt-meta $eovc_chain_resolution")
; program: $eor_factoring
(program $eor_factoring ((C Bool))
  :signature (Bool) Bool
  (
  (($eor_factoring C) ($from_clause (eo::list_setof or C)))
  )
)
; program: $eovc_factoring
(program $eovc_factoring ((C Bool))
  :signature (Bool) Bool
  (
  (($eovc_factoring C) ($eo_requires_true ($eo_model_sat C) ($eo_requires_false ($eo_model_sat ($eor_factoring C)) true)))
  )
)
(echo "smt-meta $eovc_factoring")
; program: $eor_reordering
(program $eor_reordering ((C1 Bool) (C2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eor_reordering C2 C1) (eo::requires (eo::list_minclude or C1 C2) true C2))
  )
)
; program: $eovc_reordering
(program $eovc_reordering ((C2 Bool) (C1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_reordering C1 C2) ($eo_requires_true ($eo_model_sat C1) ($eo_requires_false ($eo_model_sat ($eor_reordering C2 C1)) true)))
  )
)
(echo "smt-meta $eovc_reordering")
; program: $eor_eq_resolve
(program $eor_eq_resolve ((F1 Bool) (F2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eor_eq_resolve F1 (_ (= F1) F2)) F2)
  )
)
; program: $eovc_eq_resolve
(program $eovc_eq_resolve ((F1 Bool) (F2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_eq_resolve F2 F1) (eo::define ((_v0 (_ (= F1) F2))) ($eo_requires_true ($eo_model_sat F1) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_eq_resolve F1 _v0)) true)))))
  )
)
(echo "smt-meta $eovc_eq_resolve")
; program: $eor_modus_ponens
(program $eor_modus_ponens ((F1 Bool) (F2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eor_modus_ponens F1 (_ (=> F1) F2)) F2)
  )
)
; program: $eovc_modus_ponens
(program $eovc_modus_ponens ((F1 Bool) (F2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_modus_ponens F2 F1) (eo::define ((_v0 (_ (=> F1) F2))) ($eo_requires_true ($eo_model_sat F1) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_modus_ponens F1 _v0)) true)))))
  )
)
(echo "smt-meta $eovc_modus_ponens")
; program: $eor_not_not_elim
(program $eor_not_not_elim ((F Bool))
  :signature (Bool) Bool
  (
  (($eor_not_not_elim (not (not F))) F)
  )
)
; program: $eovc_not_not_elim
(program $eovc_not_not_elim ((F Bool))
  :signature (Bool) Bool
  (
  (($eovc_not_not_elim F) (eo::define ((_v0 (not (not F)))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_not_not_elim _v0)) true))))
  )
)
(echo "smt-meta $eovc_not_not_elim")
; program: $eor_contra
(program $eor_contra ((F Bool))
  :signature (Bool Bool) Bool
  (
  (($eor_contra F (not F)) false)
  )
)
; program: $eovc_contra
(program $eovc_contra ((F Bool))
  :signature (Bool) Bool
  (
  (($eovc_contra F) (eo::define ((_v0 (not F))) ($eo_requires_true ($eo_model_sat F) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_contra F _v0)) true)))))
  )
)
(echo "smt-meta $eovc_contra")
; program: $eor_and_elim
(program $eor_and_elim ((Fs Bool) (i Int))
  :signature (Int Bool) Bool
  (
  (($eor_and_elim i Fs) (eo::list_nth and Fs i))
  )
)
; program: $eovc_and_elim
(program $eovc_and_elim ((i Int) (Fs Bool))
  :signature (Bool Int) Bool
  (
  (($eovc_and_elim Fs i) ($eo_requires_true ($eo_model_sat Fs) ($eo_requires_false ($eo_model_sat ($eor_and_elim i Fs)) true)))
  )
)
(echo "smt-meta $eovc_and_elim")
; program: $eor_and_intro
(program $eor_and_intro ((F Bool))
  :signature (Bool) Bool
  (
  (($eor_and_intro F) F)
  )
)
; program: $eovc_and_intro
(program $eovc_and_intro ((F Bool))
  :signature (Bool) Bool
  (
  (($eovc_and_intro F) ($eo_requires_true ($eo_model_sat F) ($eo_requires_false ($eo_model_sat ($eor_and_intro F)) true)))
  )
)
(echo "smt-meta $eovc_and_intro")
; program: $eor_not_or_elim
(program $eor_not_or_elim ((Fs Bool) (i Int))
  :signature (Int Bool) Bool
  (
  (($eor_not_or_elim i (not Fs)) (not (eo::list_nth or Fs i)))
  )
)
; program: $eovc_not_or_elim
(program $eovc_not_or_elim ((i Int) (Fs Bool))
  :signature (Bool Int) Bool
  (
  (($eovc_not_or_elim Fs i) (eo::define ((_v0 (not Fs))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_not_or_elim i _v0)) true))))
  )
)
(echo "smt-meta $eovc_not_or_elim")
; program: $eor_implies_elim
(program $eor_implies_elim ((F1 Bool) (F2 Bool))
  :signature (Bool) Bool
  (
  (($eor_implies_elim (_ (=> F1) F2)) (_ (or (not F1)) (_ (or F2) false)))
  )
)
; program: $eovc_implies_elim
(program $eovc_implies_elim ((F1 Bool) (F2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_implies_elim F2 F1) (eo::define ((_v0 (_ (=> F1) F2))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_implies_elim _v0)) true))))
  )
)
(echo "smt-meta $eovc_implies_elim")
; program: $eor_not_implies_elim1
(program $eor_not_implies_elim1 ((F2 Bool) (F1 Bool))
  :signature (Bool) Bool
  (
  (($eor_not_implies_elim1 (not (_ (=> F1) F2))) F1)
  )
)
; program: $eovc_not_implies_elim1
(program $eovc_not_implies_elim1 ((F1 Bool) (F2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_not_implies_elim1 F2 F1) (eo::define ((_v0 (not (_ (=> F1) F2)))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_not_implies_elim1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_not_implies_elim1")
; program: $eor_not_implies_elim2
(program $eor_not_implies_elim2 ((F1 Bool) (F2 Bool))
  :signature (Bool) Bool
  (
  (($eor_not_implies_elim2 (not (_ (=> F1) F2))) (not F2))
  )
)
; program: $eovc_not_implies_elim2
(program $eovc_not_implies_elim2 ((F1 Bool) (F2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_not_implies_elim2 F2 F1) (eo::define ((_v0 (not (_ (=> F1) F2)))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_not_implies_elim2 _v0)) true))))
  )
)
(echo "smt-meta $eovc_not_implies_elim2")
; program: $eor_equiv_elim1
(program $eor_equiv_elim1 ((F1 Bool) (F2 Bool))
  :signature (Bool) Bool
  (
  (($eor_equiv_elim1 (_ (= F1) F2)) (_ (or (not F1)) (_ (or F2) false)))
  )
)
; program: $eovc_equiv_elim1
(program $eovc_equiv_elim1 ((F1 Bool) (F2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_equiv_elim1 F2 F1) (eo::define ((_v0 (_ (= F1) F2))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_equiv_elim1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_equiv_elim1")
; program: $eor_equiv_elim2
(program $eor_equiv_elim2 ((F1 Bool) (F2 Bool))
  :signature (Bool) Bool
  (
  (($eor_equiv_elim2 (_ (= F1) F2)) (_ (or F1) (_ (or (not F2)) false)))
  )
)
; program: $eovc_equiv_elim2
(program $eovc_equiv_elim2 ((F1 Bool) (F2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_equiv_elim2 F2 F1) (eo::define ((_v0 (_ (= F1) F2))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_equiv_elim2 _v0)) true))))
  )
)
(echo "smt-meta $eovc_equiv_elim2")
; program: $eor_not_equiv_elim1
(program $eor_not_equiv_elim1 ((F1 Bool) (F2 Bool))
  :signature (Bool) Bool
  (
  (($eor_not_equiv_elim1 (not (_ (= F1) F2))) (_ (or F1) (_ (or F2) false)))
  )
)
; program: $eovc_not_equiv_elim1
(program $eovc_not_equiv_elim1 ((F1 Bool) (F2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_not_equiv_elim1 F2 F1) (eo::define ((_v0 (not (_ (= F1) F2)))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_not_equiv_elim1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_not_equiv_elim1")
; program: $eor_not_equiv_elim2
(program $eor_not_equiv_elim2 ((F1 Bool) (F2 Bool))
  :signature (Bool) Bool
  (
  (($eor_not_equiv_elim2 (not (_ (= F1) F2))) (_ (or (not F1)) (_ (or (not F2)) false)))
  )
)
; program: $eovc_not_equiv_elim2
(program $eovc_not_equiv_elim2 ((F1 Bool) (F2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_not_equiv_elim2 F2 F1) (eo::define ((_v0 (not (_ (= F1) F2)))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_not_equiv_elim2 _v0)) true))))
  )
)
(echo "smt-meta $eovc_not_equiv_elim2")
; program: $eor_xor_elim1
(program $eor_xor_elim1 ((F1 Bool) (F2 Bool))
  :signature (Bool) Bool
  (
  (($eor_xor_elim1 (_ (xor F1) F2)) (_ (or F1) (_ (or F2) false)))
  )
)
; program: $eovc_xor_elim1
(program $eovc_xor_elim1 ((F1 Bool) (F2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_xor_elim1 F2 F1) (eo::define ((_v0 (_ (xor F1) F2))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_xor_elim1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_xor_elim1")
; program: $eor_xor_elim2
(program $eor_xor_elim2 ((F1 Bool) (F2 Bool))
  :signature (Bool) Bool
  (
  (($eor_xor_elim2 (_ (xor F1) F2)) (_ (or (not F1)) (_ (or (not F2)) false)))
  )
)
; program: $eovc_xor_elim2
(program $eovc_xor_elim2 ((F1 Bool) (F2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_xor_elim2 F2 F1) (eo::define ((_v0 (_ (xor F1) F2))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_xor_elim2 _v0)) true))))
  )
)
(echo "smt-meta $eovc_xor_elim2")
; program: $eor_not_xor_elim1
(program $eor_not_xor_elim1 ((F1 Bool) (F2 Bool))
  :signature (Bool) Bool
  (
  (($eor_not_xor_elim1 (not (_ (xor F1) F2))) (_ (or F1) (_ (or (not F2)) false)))
  )
)
; program: $eovc_not_xor_elim1
(program $eovc_not_xor_elim1 ((F1 Bool) (F2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_not_xor_elim1 F2 F1) (eo::define ((_v0 (not (_ (xor F1) F2)))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_not_xor_elim1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_not_xor_elim1")
; program: $eor_not_xor_elim2
(program $eor_not_xor_elim2 ((F1 Bool) (F2 Bool))
  :signature (Bool) Bool
  (
  (($eor_not_xor_elim2 (not (_ (xor F1) F2))) (_ (or (not F1)) (_ (or F2) false)))
  )
)
; program: $eovc_not_xor_elim2
(program $eovc_not_xor_elim2 ((F1 Bool) (F2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_not_xor_elim2 F2 F1) (eo::define ((_v0 (not (_ (xor F1) F2)))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_not_xor_elim2 _v0)) true))))
  )
)
(echo "smt-meta $eovc_not_xor_elim2")
; program: $eor_ite_elim1
(program $eor_ite_elim1 ((F2 Bool) (C Bool) (F1 Bool))
  :signature (Bool) Bool
  (
  (($eor_ite_elim1 (_ (_ (ite C) F1) F2)) (_ (or (not C)) (_ (or F1) false)))
  )
)
; program: $eovc_ite_elim1
(program $eovc_ite_elim1 ((C Bool) (F1 Bool) (F2 Bool))
  :signature (Bool Bool Bool) Bool
  (
  (($eovc_ite_elim1 F2 F1 C) (eo::define ((_v0 (_ (_ (ite C) F1) F2))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_ite_elim1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_ite_elim1")
; program: $eor_ite_elim2
(program $eor_ite_elim2 ((F1 Bool) (C Bool) (F2 Bool))
  :signature (Bool) Bool
  (
  (($eor_ite_elim2 (_ (_ (ite C) F1) F2)) (_ (or C) (_ (or F2) false)))
  )
)
; program: $eovc_ite_elim2
(program $eovc_ite_elim2 ((C Bool) (F1 Bool) (F2 Bool))
  :signature (Bool Bool Bool) Bool
  (
  (($eovc_ite_elim2 F2 F1 C) (eo::define ((_v0 (_ (_ (ite C) F1) F2))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_ite_elim2 _v0)) true))))
  )
)
(echo "smt-meta $eovc_ite_elim2")
; program: $eor_not_ite_elim1
(program $eor_not_ite_elim1 ((F2 Bool) (C Bool) (F1 Bool))
  :signature (Bool) Bool
  (
  (($eor_not_ite_elim1 (not (_ (_ (ite C) F1) F2))) (_ (or (not C)) (_ (or (not F1)) false)))
  )
)
; program: $eovc_not_ite_elim1
(program $eovc_not_ite_elim1 ((C Bool) (F1 Bool) (F2 Bool))
  :signature (Bool Bool Bool) Bool
  (
  (($eovc_not_ite_elim1 F2 F1 C) (eo::define ((_v0 (not (_ (_ (ite C) F1) F2)))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_not_ite_elim1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_not_ite_elim1")
; program: $eor_not_ite_elim2
(program $eor_not_ite_elim2 ((F1 Bool) (C Bool) (F2 Bool))
  :signature (Bool) Bool
  (
  (($eor_not_ite_elim2 (not (_ (_ (ite C) F1) F2))) (_ (or C) (_ (or (not F2)) false)))
  )
)
; program: $eovc_not_ite_elim2
(program $eovc_not_ite_elim2 ((C Bool) (F1 Bool) (F2 Bool))
  :signature (Bool Bool Bool) Bool
  (
  (($eovc_not_ite_elim2 F2 F1 C) (eo::define ((_v0 (not (_ (_ (ite C) F1) F2)))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_not_ite_elim2 _v0)) true))))
  )
)
(echo "smt-meta $eovc_not_ite_elim2")
; program: $eor_not_and
(program $eor_not_and ((F Bool))
  :signature (Bool) Bool
  (
  (($eor_not_and (not F)) ($lower_not_and F))
  )
)
; program: $eovc_not_and
(program $eovc_not_and ((F Bool))
  :signature (Bool) Bool
  (
  (($eovc_not_and F) (eo::define ((_v0 (not F))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_not_and _v0)) true))))
  )
)
(echo "smt-meta $eovc_not_and")
; program: $eor_cnf_and_pos
(program $eor_cnf_and_pos ((Fs Bool) (i Int))
  :signature (Bool Int) Bool
  (
  (($eor_cnf_and_pos Fs i) (_ (or (not Fs)) (_ (or (eo::list_nth and Fs i)) false)))
  )
)
; program: $eovc_cnf_and_pos
(program $eovc_cnf_and_pos ((Fs Bool) (i Int))
  :signature (Int Bool) Bool
  (
  (($eovc_cnf_and_pos i Fs) ($eo_requires_false ($eo_model_sat ($eor_cnf_and_pos Fs i)) true))
  )
)
(echo "smt-meta $eovc_cnf_and_pos")
; program: $eor_cnf_and_neg
(program $eor_cnf_and_neg ((Fs Bool))
  :signature (Bool) Bool
  (
  (($eor_cnf_and_neg Fs) (eo::cons or Fs ($lower_not_and Fs)))
  )
)
; program: $eovc_cnf_and_neg
(program $eovc_cnf_and_neg ((Fs Bool))
  :signature (Bool) Bool
  (
  (($eovc_cnf_and_neg Fs) ($eo_requires_false ($eo_model_sat ($eor_cnf_and_neg Fs)) true))
  )
)
(echo "smt-meta $eovc_cnf_and_neg")
; program: $eor_cnf_or_pos
(program $eor_cnf_or_pos ((Fs Bool))
  :signature (Bool) Bool
  (
  (($eor_cnf_or_pos Fs) (_ (or (not Fs)) Fs))
  )
)
; program: $eovc_cnf_or_pos
(program $eovc_cnf_or_pos ((Fs Bool))
  :signature (Bool) Bool
  (
  (($eovc_cnf_or_pos Fs) ($eo_requires_false ($eo_model_sat ($eor_cnf_or_pos Fs)) true))
  )
)
(echo "smt-meta $eovc_cnf_or_pos")
; program: $eor_cnf_or_neg
(program $eor_cnf_or_neg ((Fs Bool) (i Int))
  :signature (Bool Int) Bool
  (
  (($eor_cnf_or_neg Fs i) (_ (or Fs) (_ (or (not (eo::list_nth or Fs i))) false)))
  )
)
; program: $eovc_cnf_or_neg
(program $eovc_cnf_or_neg ((Fs Bool) (i Int))
  :signature (Int Bool) Bool
  (
  (($eovc_cnf_or_neg i Fs) ($eo_requires_false ($eo_model_sat ($eor_cnf_or_neg Fs i)) true))
  )
)
(echo "smt-meta $eovc_cnf_or_neg")
; program: $eor_cnf_implies_pos
(program $eor_cnf_implies_pos ((F1 Bool) (F2 Bool))
  :signature (Bool) Bool
  (
  (($eor_cnf_implies_pos (_ (=> F1) F2)) (_ (or (not (_ (=> F1) F2))) (_ (or (not F1)) (_ (or F2) false))))
  )
)
; program: $eovc_cnf_implies_pos
(program $eovc_cnf_implies_pos ((F1 Bool) (F2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_cnf_implies_pos F2 F1) ($eo_requires_false ($eo_model_sat ($eor_cnf_implies_pos (_ (=> F1) F2))) true))
  )
)
(echo "smt-meta $eovc_cnf_implies_pos")
; program: $eor_cnf_implies_neg1
(program $eor_cnf_implies_neg1 ((F2 Bool) (F1 Bool))
  :signature (Bool) Bool
  (
  (($eor_cnf_implies_neg1 (_ (=> F1) F2)) (_ (or (_ (=> F1) F2)) (_ (or F1) false)))
  )
)
; program: $eovc_cnf_implies_neg1
(program $eovc_cnf_implies_neg1 ((F1 Bool) (F2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_cnf_implies_neg1 F2 F1) ($eo_requires_false ($eo_model_sat ($eor_cnf_implies_neg1 (_ (=> F1) F2))) true))
  )
)
(echo "smt-meta $eovc_cnf_implies_neg1")
; program: $eor_cnf_implies_neg2
(program $eor_cnf_implies_neg2 ((F1 Bool) (F2 Bool))
  :signature (Bool) Bool
  (
  (($eor_cnf_implies_neg2 (_ (=> F1) F2)) (_ (or (_ (=> F1) F2)) (_ (or (not F2)) false)))
  )
)
; program: $eovc_cnf_implies_neg2
(program $eovc_cnf_implies_neg2 ((F1 Bool) (F2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_cnf_implies_neg2 F2 F1) ($eo_requires_false ($eo_model_sat ($eor_cnf_implies_neg2 (_ (=> F1) F2))) true))
  )
)
(echo "smt-meta $eovc_cnf_implies_neg2")
; program: $eor_cnf_equiv_pos1
(program $eor_cnf_equiv_pos1 ((F1 Bool) (F2 Bool))
  :signature (Bool) Bool
  (
  (($eor_cnf_equiv_pos1 (_ (= F1) F2)) (_ (or (not (_ (= F1) F2))) (_ (or (not F1)) (_ (or F2) false))))
  )
)
; program: $eovc_cnf_equiv_pos1
(program $eovc_cnf_equiv_pos1 ((F1 Bool) (F2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_cnf_equiv_pos1 F2 F1) ($eo_requires_false ($eo_model_sat ($eor_cnf_equiv_pos1 (_ (= F1) F2))) true))
  )
)
(echo "smt-meta $eovc_cnf_equiv_pos1")
; program: $eor_cnf_equiv_pos2
(program $eor_cnf_equiv_pos2 ((F1 Bool) (F2 Bool))
  :signature (Bool) Bool
  (
  (($eor_cnf_equiv_pos2 (_ (= F1) F2)) (_ (or (not (_ (= F1) F2))) (_ (or F1) (_ (or (not F2)) false))))
  )
)
; program: $eovc_cnf_equiv_pos2
(program $eovc_cnf_equiv_pos2 ((F1 Bool) (F2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_cnf_equiv_pos2 F2 F1) ($eo_requires_false ($eo_model_sat ($eor_cnf_equiv_pos2 (_ (= F1) F2))) true))
  )
)
(echo "smt-meta $eovc_cnf_equiv_pos2")
; program: $eor_cnf_equiv_neg1
(program $eor_cnf_equiv_neg1 ((F1 Bool) (F2 Bool))
  :signature (Bool) Bool
  (
  (($eor_cnf_equiv_neg1 (_ (= F1) F2)) (_ (or (_ (= F1) F2)) (_ (or F1) (_ (or F2) false))))
  )
)
; program: $eovc_cnf_equiv_neg1
(program $eovc_cnf_equiv_neg1 ((F1 Bool) (F2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_cnf_equiv_neg1 F2 F1) ($eo_requires_false ($eo_model_sat ($eor_cnf_equiv_neg1 (_ (= F1) F2))) true))
  )
)
(echo "smt-meta $eovc_cnf_equiv_neg1")
; program: $eor_cnf_equiv_neg2
(program $eor_cnf_equiv_neg2 ((F1 Bool) (F2 Bool))
  :signature (Bool) Bool
  (
  (($eor_cnf_equiv_neg2 (_ (= F1) F2)) (_ (or (_ (= F1) F2)) (_ (or (not F1)) (_ (or (not F2)) false))))
  )
)
; program: $eovc_cnf_equiv_neg2
(program $eovc_cnf_equiv_neg2 ((F1 Bool) (F2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_cnf_equiv_neg2 F2 F1) ($eo_requires_false ($eo_model_sat ($eor_cnf_equiv_neg2 (_ (= F1) F2))) true))
  )
)
(echo "smt-meta $eovc_cnf_equiv_neg2")
; program: $eor_cnf_xor_pos1
(program $eor_cnf_xor_pos1 ((F1 Bool) (F2 Bool))
  :signature (Bool) Bool
  (
  (($eor_cnf_xor_pos1 (_ (xor F1) F2)) (_ (or (not (_ (xor F1) F2))) (_ (or F1) (_ (or F2) false))))
  )
)
; program: $eovc_cnf_xor_pos1
(program $eovc_cnf_xor_pos1 ((F1 Bool) (F2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_cnf_xor_pos1 F2 F1) ($eo_requires_false ($eo_model_sat ($eor_cnf_xor_pos1 (_ (xor F1) F2))) true))
  )
)
(echo "smt-meta $eovc_cnf_xor_pos1")
; program: $eor_cnf_xor_pos2
(program $eor_cnf_xor_pos2 ((F1 Bool) (F2 Bool))
  :signature (Bool) Bool
  (
  (($eor_cnf_xor_pos2 (_ (xor F1) F2)) (_ (or (not (_ (xor F1) F2))) (_ (or (not F1)) (_ (or (not F2)) false))))
  )
)
; program: $eovc_cnf_xor_pos2
(program $eovc_cnf_xor_pos2 ((F1 Bool) (F2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_cnf_xor_pos2 F2 F1) ($eo_requires_false ($eo_model_sat ($eor_cnf_xor_pos2 (_ (xor F1) F2))) true))
  )
)
(echo "smt-meta $eovc_cnf_xor_pos2")
; program: $eor_cnf_xor_neg1
(program $eor_cnf_xor_neg1 ((F1 Bool) (F2 Bool))
  :signature (Bool) Bool
  (
  (($eor_cnf_xor_neg1 (_ (xor F1) F2)) (_ (or (_ (xor F1) F2)) (_ (or (not F1)) (_ (or F2) false))))
  )
)
; program: $eovc_cnf_xor_neg1
(program $eovc_cnf_xor_neg1 ((F1 Bool) (F2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_cnf_xor_neg1 F2 F1) ($eo_requires_false ($eo_model_sat ($eor_cnf_xor_neg1 (_ (xor F1) F2))) true))
  )
)
(echo "smt-meta $eovc_cnf_xor_neg1")
; program: $eor_cnf_xor_neg2
(program $eor_cnf_xor_neg2 ((F1 Bool) (F2 Bool))
  :signature (Bool) Bool
  (
  (($eor_cnf_xor_neg2 (_ (xor F1) F2)) (_ (or (_ (xor F1) F2)) (_ (or F1) (_ (or (not F2)) false))))
  )
)
; program: $eovc_cnf_xor_neg2
(program $eovc_cnf_xor_neg2 ((F1 Bool) (F2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_cnf_xor_neg2 F2 F1) ($eo_requires_false ($eo_model_sat ($eor_cnf_xor_neg2 (_ (xor F1) F2))) true))
  )
)
(echo "smt-meta $eovc_cnf_xor_neg2")
; program: $eor_cnf_ite_pos1
(program $eor_cnf_ite_pos1 ((F2 Bool) (C Bool) (F1 Bool))
  :signature (Bool) Bool
  (
  (($eor_cnf_ite_pos1 (_ (_ (ite C) F1) F2)) (_ (or (not (_ (_ (ite C) F1) F2))) (_ (or (not C)) (_ (or F1) false))))
  )
)
; program: $eovc_cnf_ite_pos1
(program $eovc_cnf_ite_pos1 ((C Bool) (F1 Bool) (F2 Bool))
  :signature (Bool Bool Bool) Bool
  (
  (($eovc_cnf_ite_pos1 F2 F1 C) ($eo_requires_false ($eo_model_sat ($eor_cnf_ite_pos1 (_ (_ (ite C) F1) F2))) true))
  )
)
(echo "smt-meta $eovc_cnf_ite_pos1")
; program: $eor_cnf_ite_pos2
(program $eor_cnf_ite_pos2 ((F1 Bool) (C Bool) (F2 Bool))
  :signature (Bool) Bool
  (
  (($eor_cnf_ite_pos2 (_ (_ (ite C) F1) F2)) (_ (or (not (_ (_ (ite C) F1) F2))) (_ (or C) (_ (or F2) false))))
  )
)
; program: $eovc_cnf_ite_pos2
(program $eovc_cnf_ite_pos2 ((C Bool) (F1 Bool) (F2 Bool))
  :signature (Bool Bool Bool) Bool
  (
  (($eovc_cnf_ite_pos2 F2 F1 C) ($eo_requires_false ($eo_model_sat ($eor_cnf_ite_pos2 (_ (_ (ite C) F1) F2))) true))
  )
)
(echo "smt-meta $eovc_cnf_ite_pos2")
; program: $eor_cnf_ite_pos3
(program $eor_cnf_ite_pos3 ((C Bool) (F1 Bool) (F2 Bool))
  :signature (Bool) Bool
  (
  (($eor_cnf_ite_pos3 (_ (_ (ite C) F1) F2)) (_ (or (not (_ (_ (ite C) F1) F2))) (_ (or F1) (_ (or F2) false))))
  )
)
; program: $eovc_cnf_ite_pos3
(program $eovc_cnf_ite_pos3 ((C Bool) (F1 Bool) (F2 Bool))
  :signature (Bool Bool Bool) Bool
  (
  (($eovc_cnf_ite_pos3 F2 F1 C) ($eo_requires_false ($eo_model_sat ($eor_cnf_ite_pos3 (_ (_ (ite C) F1) F2))) true))
  )
)
(echo "smt-meta $eovc_cnf_ite_pos3")
; program: $eor_cnf_ite_neg1
(program $eor_cnf_ite_neg1 ((F2 Bool) (C Bool) (F1 Bool))
  :signature (Bool) Bool
  (
  (($eor_cnf_ite_neg1 (_ (_ (ite C) F1) F2)) (_ (or (_ (_ (ite C) F1) F2)) (_ (or (not C)) (_ (or (not F1)) false))))
  )
)
; program: $eovc_cnf_ite_neg1
(program $eovc_cnf_ite_neg1 ((C Bool) (F1 Bool) (F2 Bool))
  :signature (Bool Bool Bool) Bool
  (
  (($eovc_cnf_ite_neg1 F2 F1 C) ($eo_requires_false ($eo_model_sat ($eor_cnf_ite_neg1 (_ (_ (ite C) F1) F2))) true))
  )
)
(echo "smt-meta $eovc_cnf_ite_neg1")
; program: $eor_cnf_ite_neg2
(program $eor_cnf_ite_neg2 ((F1 Bool) (C Bool) (F2 Bool))
  :signature (Bool) Bool
  (
  (($eor_cnf_ite_neg2 (_ (_ (ite C) F1) F2)) (_ (or (_ (_ (ite C) F1) F2)) (_ (or C) (_ (or (not F2)) false))))
  )
)
; program: $eovc_cnf_ite_neg2
(program $eovc_cnf_ite_neg2 ((C Bool) (F1 Bool) (F2 Bool))
  :signature (Bool Bool Bool) Bool
  (
  (($eovc_cnf_ite_neg2 F2 F1 C) ($eo_requires_false ($eo_model_sat ($eor_cnf_ite_neg2 (_ (_ (ite C) F1) F2))) true))
  )
)
(echo "smt-meta $eovc_cnf_ite_neg2")
; program: $eor_cnf_ite_neg3
(program $eor_cnf_ite_neg3 ((C Bool) (F1 Bool) (F2 Bool))
  :signature (Bool) Bool
  (
  (($eor_cnf_ite_neg3 (_ (_ (ite C) F1) F2)) (_ (or (_ (_ (ite C) F1) F2)) (_ (or (not F1)) (_ (or (not F2)) false))))
  )
)
; program: $eovc_cnf_ite_neg3
(program $eovc_cnf_ite_neg3 ((C Bool) (F1 Bool) (F2 Bool))
  :signature (Bool Bool Bool) Bool
  (
  (($eovc_cnf_ite_neg3 F2 F1 C) ($eo_requires_false ($eo_model_sat ($eor_cnf_ite_neg3 (_ (_ (ite C) F1) F2))) true))
  )
)
(echo "smt-meta $eovc_cnf_ite_neg3")
; program: $eor_arrays_read_over_write
(program $eor_arrays_read_over_write ((U Type) (T Type) (i T) (e U) (a (_ (Array T) U)) (j T))
  :signature (U Bool) Bool
  (
  (($eor_arrays_read_over_write (_ (select (_ (_ (store a) i) e)) j) (not (_ (= i) j))) (_ (= (_ (select (_ (_ (store a) i) e)) j)) (_ (select a) j)))
  )
)
; program: $eovc_arrays_read_over_write
(program $eovc_arrays_read_over_write ((T Type) (U Type) (a (_ (Array T) U)) (e U) (i T) (j T))
  :signature (T T U (_ (Array T) U)) Bool
  (
  (($eovc_arrays_read_over_write j i e a) (eo::define ((_v0 (not (_ (= i) j)))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_arrays_read_over_write (_ (select (_ (_ (store a) i) e)) j) _v0)) true))))
  )
)
(echo "smt-meta $eovc_arrays_read_over_write")
; program: $eor_arrays_read_over_write_contra
(program $eor_arrays_read_over_write_contra ((U Type) (e U) (T Type) (a (_ (Array T) U)) (j T) (i T))
  :signature (Bool) Bool
  (
  (($eor_arrays_read_over_write_contra (not (_ (= (_ (select (_ (_ (store a) i) e)) j)) (_ (select a) j)))) (_ (= j) i))
  )
)
; program: $eovc_arrays_read_over_write_contra
(program $eovc_arrays_read_over_write_contra ((U Type) (T Type) (i T) (e U) (a (_ (Array T) U)) (j T))
  :signature (T (_ (Array T) U) U T) Bool
  (
  (($eovc_arrays_read_over_write_contra j a e i) (eo::define ((_v0 (not (_ (= (_ (select (_ (_ (store a) i) e)) j)) (_ (select a) j))))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_arrays_read_over_write_contra _v0)) true))))
  )
)
(echo "smt-meta $eovc_arrays_read_over_write_contra")
; program: $eor_arrays_read_over_write_1
(program $eor_arrays_read_over_write_1 ((U Type) (T Type) (a (_ (Array T) U)) (i T) (e U))
  :signature (U) Bool
  (
  (($eor_arrays_read_over_write_1 (_ (select (_ (_ (store a) i) e)) i)) (_ (= (_ (select (_ (_ (store a) i) e)) i)) e))
  )
)
; program: $eovc_arrays_read_over_write_1
(program $eovc_arrays_read_over_write_1 ((T Type) (U Type) (a (_ (Array T) U)) (e U) (i T))
  :signature (T U (_ (Array T) U)) Bool
  (
  (($eovc_arrays_read_over_write_1 i e a) ($eo_requires_false ($eo_model_sat ($eor_arrays_read_over_write_1 (_ (select (_ (_ (store a) i) e)) i))) true))
  )
)
(echo "smt-meta $eovc_arrays_read_over_write_1")
; program: $eor_arrays_ext
(program $eor_arrays_ext ((T Type) (U Type) (a (_ (Array T) U)) (b (_ (Array T) U)))
  :signature (Bool) Bool
  (
  (($eor_arrays_ext (not (_ (= a) b))) (eo::define ((_v0 (_ @array_deq_diff a b))) (not (_ (= (_ (select a) _v0)) (_ (select b) _v0)))))
  )
)
; program: $eovc_arrays_ext
(program $eovc_arrays_ext ((T Type) (U Type) (a (_ (Array T) U)) (b (_ (Array T) U)))
  :signature ((_ (Array T) U) (_ (Array T) U)) Bool
  (
  (($eovc_arrays_ext b a) (eo::define ((_v0 (not (_ (= a) b)))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_arrays_ext _v0)) true))))
  )
)
(echo "smt-meta $eovc_arrays_ext")
; program: $eor_refl
(program $eor_refl ((T Type) (t T))
  :signature (T) Bool
  (
  (($eor_refl t) (_ (= t) t))
  )
)
; program: $eovc_refl
(program $eovc_refl ((T Type) (t T))
  :signature (T) Bool
  (
  (($eovc_refl t) ($eo_requires_false ($eo_model_sat ($eor_refl t)) true))
  )
)
(echo "smt-meta $eovc_refl")
; program: $eor_symm
(program $eor_symm ((F Bool))
  :signature (Bool) Bool
  (
  (($eor_symm F) ($mk_symm F))
  )
)
; program: $eovc_symm
(program $eovc_symm ((F Bool))
  :signature (Bool) Bool
  (
  (($eovc_symm F) ($eo_requires_true ($eo_model_sat F) ($eo_requires_false ($eo_model_sat ($eor_symm F)) true)))
  )
)
(echo "smt-meta $eovc_symm")
; program: $eor_trans
(program $eor_trans ((T Type) (t1 T) (t2 T) (tail Bool))
  :signature (Bool) Bool
  (
  (($eor_trans (_ (and (_ (= t1) t2)) tail)) ($mk_trans t1 t2 tail))
  )
)
; program: $eovc_trans
(program $eovc_trans ((T Type) (t1 T) (t2 T) (tail Bool))
  :signature (Bool T T) Bool
  (
  (($eovc_trans tail t2 t1) (eo::define ((_v0 (_ (and (_ (= t1) t2)) tail))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_trans _v0)) true))))
  )
)
(echo "smt-meta $eovc_trans")
; program: $eor_cong
(program $eor_cong ((U Type) (t U) (E Bool))
  :signature (U Bool) Bool
  (
  (($eor_cong t E) (_ (= t) ($mk_cong_rhs t (eo::list_rev and E))))
  )
)
; program: $eovc_cong
(program $eovc_cong ((U Type) (t U) (E Bool))
  :signature (Bool U) Bool
  (
  (($eovc_cong E t) ($eo_requires_true ($eo_model_sat E) ($eo_requires_false ($eo_model_sat ($eor_cong t E)) true)))
  )
)
(echo "smt-meta $eovc_cong")
; program: $eor_nary_cong
(program $eor_nary_cong ((U Type) (t U) (E Bool))
  :signature (U Bool) Bool
  (
  (($eor_nary_cong t E) (_ (= t) ($mk_nary_cong_rhs t E)))
  )
)
; program: $eovc_nary_cong
(program $eovc_nary_cong ((U Type) (t U) (E Bool))
  :signature (Bool U) Bool
  (
  (($eovc_nary_cong E t) ($eo_requires_true ($eo_model_sat E) ($eo_requires_false ($eo_model_sat ($eor_nary_cong t E)) true)))
  )
)
(echo "smt-meta $eovc_nary_cong")
; program: $eor_true_intro
(program $eor_true_intro ((F Bool))
  :signature (Bool) Bool
  (
  (($eor_true_intro F) (_ (= F) true))
  )
)
; program: $eovc_true_intro
(program $eovc_true_intro ((F Bool))
  :signature (Bool) Bool
  (
  (($eovc_true_intro F) ($eo_requires_true ($eo_model_sat F) ($eo_requires_false ($eo_model_sat ($eor_true_intro F)) true)))
  )
)
(echo "smt-meta $eovc_true_intro")
; program: $eor_true_elim
(program $eor_true_elim ((F Bool))
  :signature (Bool) Bool
  (
  (($eor_true_elim (_ (= F) true)) F)
  )
)
; program: $eovc_true_elim
(program $eovc_true_elim ((F Bool))
  :signature (Bool) Bool
  (
  (($eovc_true_elim F) (eo::define ((_v0 (_ (= F) true))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_true_elim _v0)) true))))
  )
)
(echo "smt-meta $eovc_true_elim")
; program: $eor_false_intro
(program $eor_false_intro ((F Bool))
  :signature (Bool) Bool
  (
  (($eor_false_intro (not F)) (_ (= F) false))
  )
)
; program: $eovc_false_intro
(program $eovc_false_intro ((F Bool))
  :signature (Bool) Bool
  (
  (($eovc_false_intro F) (eo::define ((_v0 (not F))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_false_intro _v0)) true))))
  )
)
(echo "smt-meta $eovc_false_intro")
; program: $eor_false_elim
(program $eor_false_elim ((F Bool))
  :signature (Bool) Bool
  (
  (($eor_false_elim (_ (= F) false)) (not F))
  )
)
; program: $eovc_false_elim
(program $eovc_false_elim ((F Bool))
  :signature (Bool) Bool
  (
  (($eovc_false_elim F) (eo::define ((_v0 (_ (= F) false))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_false_elim _v0)) true))))
  )
)
(echo "smt-meta $eovc_false_elim")
; program: $eor_ho_cong
(program $eor_ho_cong ((T Type) (t1 T) (t2 T) (tail Bool))
  :signature (Bool) Bool
  (
  (($eor_ho_cong (_ (and (_ (= t1) t2)) tail)) ($mk_ho_cong t1 t2 tail))
  )
)
; program: $eovc_ho_cong
(program $eovc_ho_cong ((T Type) (t1 T) (t2 T) (tail Bool))
  :signature (Bool T T) Bool
  (
  (($eovc_ho_cong tail t2 t1) (eo::define ((_v0 (_ (and (_ (= t1) t2)) tail))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_ho_cong _v0)) true))))
  )
)
(echo "smt-meta $eovc_ho_cong")
; program: $eor_distinct-elim
(program $eor_distinct-elim ((b1 Bool) (b2 Bool))
  :signature (Bool) Bool
  (
  (($eor_distinct-elim (_ (= b1) b2)) (eo::requires ($mk_distinct-elim b1) b2 (_ (= b1) b2)))
  )
)
; program: $eovc_distinct-elim
(program $eovc_distinct-elim ((b1 Bool) (b2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_distinct-elim b2 b1) ($eo_requires_false ($eo_model_sat ($eor_distinct-elim (_ (= b1) b2))) true))
  )
)
(echo "smt-meta $eovc_distinct-elim")
; program: $eor_lambda-elim
(program $eor_lambda-elim ((Any Type) (x $eo_List) (T Type) (t T) (U Type) (V Type) (f (-> U V)))
  :signature (Any) Bool
  (
  (($eor_lambda-elim (_ (= (_ (lambda x) t)) f)) (eo::requires ($get_arg_list_rec t $eo_List_nil) x (eo::requires ($is_app f t) true (_ (= (_ (lambda x) t)) f))))
  )
)
; program: $eovc_lambda-elim
(program $eovc_lambda-elim ((U Type) (V Type) (T Type) (x $eo_List) (t T) (f (-> U V)))
  :signature ((-> U V) T $eo_List) Bool
  (
  (($eovc_lambda-elim f t x) ($eo_requires_false ($eo_model_sat ($eor_lambda-elim (_ (= (_ (lambda x) t)) f))) true))
  )
)
(echo "smt-meta $eovc_lambda-elim")
; program: $eor_arith_sum_ub
(program $eor_arith_sum_ub ((F Bool))
  :signature (Bool) Bool
  (
  (($eor_arith_sum_ub F) ($mk_arith_sum_ub (eo::list_rev and F) (_ (= 0) 0)))
  )
)
; program: $eovc_arith_sum_ub
(program $eovc_arith_sum_ub ((F Bool))
  :signature (Bool) Bool
  (
  (($eovc_arith_sum_ub F) ($eo_requires_true ($eo_model_sat F) ($eo_requires_false ($eo_model_sat ($eor_arith_sum_ub F)) true)))
  )
)
(echo "smt-meta $eovc_arith_sum_ub")
; program: $eor_arith_mult_pos
(program $eor_arith_mult_pos ((T Type) (m T) (F Bool))
  :signature (T Bool) Bool
  (
  (($eor_arith_mult_pos m F) (eo::define ((_v0 (eo::typeof m))) (_ (=> (_ (and (_ (> m) (eo::ite (eo::is_eq _v0 Int) 0 (eo::requires _v0 Real 0/1)))) (_ (and F) true))) ($mk_arith_mult_pos m F))))
  )
)
; program: $eovc_arith_mult_pos
(program $eovc_arith_mult_pos ((T Type) (m T) (F Bool))
  :signature (Bool T) Bool
  (
  (($eovc_arith_mult_pos F m) ($eo_requires_false ($eo_model_sat ($eor_arith_mult_pos m F)) true))
  )
)
(echo "smt-meta $eovc_arith_mult_pos")
; program: $eor_arith_mult_neg
(program $eor_arith_mult_neg ((T Type) (m T) (F Bool))
  :signature (T Bool) Bool
  (
  (($eor_arith_mult_neg m F) (eo::define ((_v0 (eo::typeof m))) (_ (=> (_ (and (_ (< m) (eo::ite (eo::is_eq _v0 Int) 0 (eo::requires _v0 Real 0/1)))) (_ (and F) true))) ($mk_arith_mult_neg m F))))
  )
)
; program: $eovc_arith_mult_neg
(program $eovc_arith_mult_neg ((T Type) (m T) (F Bool))
  :signature (Bool T) Bool
  (
  (($eovc_arith_mult_neg F m) ($eo_requires_false ($eo_model_sat ($eor_arith_mult_neg m F)) true))
  )
)
(echo "smt-meta $eovc_arith_mult_neg")
; program: $eor_arith_trichotomy
(program $eor_arith_trichotomy ((F1 Bool) (F2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eor_arith_trichotomy F1 F2) ($mk_arith_trichotomy ($arith_normalize_lit (not F1)) ($arith_normalize_lit (not F2))))
  )
)
; program: $eovc_arith_trichotomy
(program $eovc_arith_trichotomy ((F1 Bool) (F2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_arith_trichotomy F2 F1) ($eo_requires_true ($eo_model_sat F1) ($eo_requires_true ($eo_model_sat F2) ($eo_requires_false ($eo_model_sat ($eor_arith_trichotomy F1 F2)) true))))
  )
)
(echo "smt-meta $eovc_arith_trichotomy")
; program: $eor_int_tight_ub
(program $eor_int_tight_ub ((R Type) (s Int) (t R))
  :signature ((eo::requires ($is_arith_type R) true Bool)) Bool
  (
  (($eor_int_tight_ub (_ (< s) t)) (_ (<= s) ($greatest_int_lt t)))
  )
)
; program: $eovc_int_tight_ub
(program $eovc_int_tight_ub ((R Type) (s Int) (t R))
  :signature (R Int) Bool
  (
  (($eovc_int_tight_ub t s) (eo::define ((_v0 (_ (< s) t))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_int_tight_ub _v0)) true))))
  )
)
(echo "smt-meta $eovc_int_tight_ub")
; program: $eor_int_tight_lb
(program $eor_int_tight_lb ((R Type) (s Int) (t R))
  :signature ((eo::requires ($is_arith_type R) true Bool)) Bool
  (
  (($eor_int_tight_lb (_ (> s) t)) (_ (>= s) ($least_int_gt t)))
  )
)
; program: $eovc_int_tight_lb
(program $eovc_int_tight_lb ((R Type) (s Int) (t R))
  :signature (R Int) Bool
  (
  (($eovc_int_tight_lb t s) (eo::define ((_v0 (_ (> s) t))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_int_tight_lb _v0)) true))))
  )
)
(echo "smt-meta $eovc_int_tight_lb")
; program: $eor_arith_mult_tangent
(program $eor_arith_mult_tangent ((R Type) (S Type) (x R) (a R) (s Bool) (y S) (b S))
  :signature (R S R S Bool) Bool
  (
  (($eor_arith_mult_tangent x y a b s) (eo::define ((_v0 (eo::ite s >= <=))) (eo::define ((_v1 (* b))) (eo::define ((_v2 (* a))) (eo::define ((_v3 (_ (* y) 1))) (eo::define ((_v4 (* x))) (_ (= (_ (_ _v0 (_ _v4 _v3)) (_ (- (_ (+ (_ _v1 (_ _v4 1))) (_ (+ (_ _v2 _v3)) 0))) (_ _v2 (_ _v1 1))))) (_ (or (_ (and (_ (<= x) a)) (_ (and (_ (_ (eo::ite s <= >=) y) b)) true))) (_ (or (_ (and (_ (>= x) a)) (_ (and (_ (_ _v0 y) b)) true))) false)))))))))
  )
)
; program: $eovc_arith_mult_tangent
(program $eovc_arith_mult_tangent ((S Type) (R Type) (x R) (y S) (a R) (b S) (s Bool))
  :signature (Bool S R S R) Bool
  (
  (($eovc_arith_mult_tangent s b a y x) ($eo_requires_false ($eo_model_sat ($eor_arith_mult_tangent x y a b s)) true))
  )
)
(echo "smt-meta $eovc_arith_mult_tangent")
; program: $eor_arith_mult_sign
(program $eor_arith_mult_sign ((T Type) (F Bool) (m T))
  :signature (Bool T) Bool
  (
  (($eor_arith_mult_sign F m) (eo::define ((_v0 (eo::typeof m))) (_ (=> F) (_ (_ (eo::ite ($mk_arith_mult_sign_sgn true F m) > <) m) (eo::ite (eo::is_eq _v0 Int) 0 (eo::requires _v0 Real 0/1))))))
  )
)
; program: $eovc_arith_mult_sign
(program $eovc_arith_mult_sign ((T Type) (F Bool) (m T))
  :signature (T Bool) Bool
  (
  (($eovc_arith_mult_sign m F) ($eo_requires_false ($eo_model_sat ($eor_arith_mult_sign F m)) true))
  )
)
(echo "smt-meta $eovc_arith_mult_sign")
; program: $eor_arith_mult_abs_comparison
(program $eor_arith_mult_abs_comparison ((F Bool))
  :signature (Bool) Bool
  (
  (($eor_arith_mult_abs_comparison F) ($mk_arith_mult_abs_comparison F))
  )
)
; program: $eovc_arith_mult_abs_comparison
(program $eovc_arith_mult_abs_comparison ((F Bool))
  :signature (Bool) Bool
  (
  (($eovc_arith_mult_abs_comparison F) ($eo_requires_true ($eo_model_sat F) ($eo_requires_false ($eo_model_sat ($eor_arith_mult_abs_comparison F)) true)))
  )
)
(echo "smt-meta $eovc_arith_mult_abs_comparison")
; program: $eor_arith_reduction
(program $eor_arith_reduction ((T Type) (t T))
  :signature (T) Bool
  (
  (($eor_arith_reduction t) ($arith_reduction_pred t))
  )
)
; program: $eovc_arith_reduction
(program $eovc_arith_reduction ((T Type) (t T))
  :signature (T) Bool
  (
  (($eovc_arith_reduction t) ($eo_requires_false ($eo_model_sat ($eor_arith_reduction t)) true))
  )
)
(echo "smt-meta $eovc_arith_reduction")
; program: $eor_arith_poly_norm
(program $eor_arith_poly_norm ((U Type) (a U) (b U))
  :signature (Bool) Bool
  (
  (($eor_arith_poly_norm (_ (= a) b)) (eo::requires ($get_arith_poly_norm a) ($get_arith_poly_norm b) (_ (= a) b)))
  )
)
; program: $eovc_arith_poly_norm
(program $eovc_arith_poly_norm ((U Type) (a U) (b U))
  :signature (U U) Bool
  (
  (($eovc_arith_poly_norm b a) ($eo_requires_false ($eo_model_sat ($eor_arith_poly_norm (_ (= a) b))) true))
  )
)
(echo "smt-meta $eovc_arith_poly_norm")
; program: $eor_arith_poly_norm_rel
(program $eor_arith_poly_norm_rel ((U Type) (cx U) (V Type) (cy V) (x U) (y V) (U1 Type) (x1 U1) (U2 Type) (x2 U2) (R1 Type) (R2 Type) (R3 Type) (r (-> R1 (-> R2 R3))) (V1 Type) (y1 V1) (V2 Type) (y2 V2))
  :signature (Bool Bool) Bool
  (
  (($eor_arith_poly_norm_rel (_ (= (_ (r x1) x2)) (_ (r y1) y2)) (_ (= (_ (* cx) (_ (* x) 1))) (_ (* cy) (_ (* y) 1)))) (eo::requires ($is_poly_norm_rel_consts (_ (r cx) cy)) true (eo::requires ($is_eq_maybe_to_real x (_ (- x1) x2)) true (eo::requires ($is_eq_maybe_to_real y (_ (- y1) y2)) true (_ (= (_ (r x1) x2)) (_ (r y1) y2))))))
  )
)
; program: $eovc_arith_poly_norm_rel
(program $eovc_arith_poly_norm_rel ((V Type) (U Type) (V2 Type) (V1 Type) (R1 Type) (R2 Type) (R3 Type) (U2 Type) (U1 Type) (x1 U1) (x2 U2) (r (-> R1 (-> R2 R3))) (y1 V1) (y2 V2) (cx U) (x U) (cy V) (y V))
  :signature (V V U U V2 V1 (-> R1 (-> R2 R3)) U2 U1) Bool
  (
  (($eovc_arith_poly_norm_rel y cy x cx y2 y1 r x2 x1) (eo::define ((_v0 (_ (= (_ (* cx) (_ (* x) 1))) (_ (* cy) (_ (* y) 1))))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_arith_poly_norm_rel (_ (= (_ (r x1) x2)) (_ (r y1) y2)) _v0)) true))))
  )
)
(echo "smt-meta $eovc_arith_poly_norm_rel")
; program: $eor_arith-pow-elim
(program $eor_arith-pow-elim ((Any Type) (T Type) (a T) (n T) (b T))
  :signature (Any) Bool
  (
  (($eor_arith-pow-elim (_ (= (_ (^ a) n)) b)) (eo::define ((_v0 (^ a))) (eo::define ((_v1 (eo::to_z n))) (eo::requires (eo::to_q _v1) (eo::to_q n) (eo::requires ($singleton_elim (eo::ite (eo::and (eo::is_z _v1) (eo::not (eo::is_neg _v1))) ($arith_unfold_pow_rec _v1 a) (_ _v0 _v1))) b (_ (= (_ _v0 n)) b))))))
  )
)
; program: $eovc_arith-pow-elim
(program $eovc_arith-pow-elim ((T Type) (a T) (n T) (b T))
  :signature (T T T) Bool
  (
  (($eovc_arith-pow-elim b n a) ($eo_requires_false ($eo_model_sat ($eor_arith-pow-elim (_ (= (_ (^ a) n)) b))) true))
  )
)
(echo "smt-meta $eovc_arith-pow-elim")
; program: $eor_bv-repeat-elim
(program $eor_bv-repeat-elim ((Any Type) (n Int) (k1 Int) (a (BitVec k1)) (k2 Int) (b (BitVec k2)))
  :signature (Any) Bool
  (
  (($eor_bv-repeat-elim (_ (= (_ (repeat n) a)) b)) (eo::define ((_v0 (_ (repeat n) a))) (eo::requires ($singleton_elim (eo::ite (eo::and (eo::is_z n) (eo::not (eo::is_neg n))) ($bv_unfold_repeat_rec n a) _v0)) b (_ (= _v0) b))))
  )
)
; program: $eovc_bv-repeat-elim
(program $eovc_bv-repeat-elim ((k2 Int) (k1 Int) (n Int) (a (BitVec k1)) (b (BitVec k2)))
  :signature ((BitVec k2) (BitVec k1) Int) Bool
  (
  (($eovc_bv-repeat-elim b a n) ($eo_requires_false ($eo_model_sat ($eor_bv-repeat-elim (_ (= (_ (repeat n) a)) b))) true))
  )
)
(echo "smt-meta $eovc_bv-repeat-elim")
; program: $eor_bv-smulo-elim
(program $eor_bv-smulo-elim ((n Int) (a (BitVec n)) (b (BitVec n)) (c Bool))
  :signature (Bool) Bool
  (
  (($eor_bv-smulo-elim (_ (= (_ (bvsmulo a) b)) c)) (eo::define ((_v0 (eo::typeof a))) (eo::define ((_v1 ($bv_bitwidth _v0))) (eo::define ((_v2 (eo::add _v1 -2))) (eo::define ((_v3 (eo::add _v1 -1))) (eo::define ((_v4 (_ (extract _v3) _v3))) (eo::define ((_v5 (sign_extend _v3))) (eo::define ((_v6 (_ (bvxor b) (_ (bvxor (_ _v5 (_ _v4 b))) (eo::nil bvxor (eo::typeof b)))))) (eo::define ((_v7 (_ (_ (extract 1) 1) _v6))) (eo::define ((_v8 (_ (bvxor a) (_ (bvxor (_ _v5 (_ _v4 a))) (eo::nil bvxor _v0))))) (eo::define ((_v9 (_ (_ (extract _v2) _v2) _v8))) (eo::define ((_v10 ($bv_smulo_elim_rec _v8 _v6 _v9 (_ (bvand _v7) (_ (bvand _v9) (eo::nil bvand (eo::typeof _v7)))) 1 _v2))) (eo::define ((_v11 (sign_extend 1))) (eo::define ((_v12 (_ _v11 a))) (eo::define ((_v13 (_ (bvmul _v12) (_ (bvmul (_ _v11 b)) (eo::nil bvmul (eo::typeof _v12)))))) (eo::define ((_v14 (_ (_ (extract _v1) _v1) _v13))) (eo::define ((_v15 (_ (bvxor _v14) (_ (bvxor (_ _v4 _v13)) (eo::nil bvxor (eo::typeof _v14)))))) (eo::requires (eo::ite (eo::eq _v1 1) (_ (= (_ (bvand a) (_ (bvand b) (eo::nil bvand _v0)))) #b1) (eo::ite (eo::eq _v1 2) (_ (= _v15) #b1) (_ (= (_ (bvor _v10) (_ (bvor _v15) (eo::nil bvor (eo::typeof _v10))))) #b1))) c (_ (= (_ (bvsmulo a) b)) c)))))))))))))))))))
  )
)
; program: $eovc_bv-smulo-elim
(program $eovc_bv-smulo-elim ((n Int) (a (BitVec n)) (b (BitVec n)) (c Bool))
  :signature (Bool (BitVec n) (BitVec n)) Bool
  (
  (($eovc_bv-smulo-elim c b a) ($eo_requires_false ($eo_model_sat ($eor_bv-smulo-elim (_ (= (_ (bvsmulo a) b)) c))) true))
  )
)
(echo "smt-meta $eovc_bv-smulo-elim")
; program: $eor_bv-umulo-elim
(program $eor_bv-umulo-elim ((n Int) (a (BitVec n)) (b (BitVec n)) (c Bool))
  :signature (Bool) Bool
  (
  (($eor_bv-umulo-elim (_ (= (_ (bvumulo a) b)) c)) (eo::define ((_v0 ($bv_bitwidth (eo::typeof a)))) (eo::define ((_v1 (concat #b0))) (eo::define ((_v2 (_ _v1 (_ (concat a) (eo::to_bin 0 0))))) (eo::define ((_v3 (_ (_ (extract _v0) _v0) (_ (bvmul _v2) (_ (bvmul (_ _v1 (_ (concat b) (eo::to_bin 0 0)))) (eo::nil bvmul (eo::typeof _v2))))))) (eo::define ((_v4 (eo::add _v0 -1))) (eo::requires (eo::ite (eo::eq _v0 1) false (_ (= ($bv_umulo_elim_rec a b (_ (_ (extract _v4) _v4) a) (_ (bvor _v3) (eo::nil bvor (eo::typeof _v3))) 1 _v0)) #b1)) c (_ (= (_ (bvumulo a) b)) c))))))))
  )
)
; program: $eovc_bv-umulo-elim
(program $eovc_bv-umulo-elim ((n Int) (a (BitVec n)) (b (BitVec n)) (c Bool))
  :signature (Bool (BitVec n) (BitVec n)) Bool
  (
  (($eovc_bv-umulo-elim c b a) ($eo_requires_false ($eo_model_sat ($eor_bv-umulo-elim (_ (= (_ (bvumulo a) b)) c))) true))
  )
)
(echo "smt-meta $eovc_bv-umulo-elim")
; program: $eor_bv-bitwise-slicing
(program $eor_bv-bitwise-slicing ((n Int) (a (BitVec n)) (b (BitVec n)))
  :signature (Bool) Bool
  (
  (($eor_bv-bitwise-slicing (_ (= a) b)) (eo::requires ($bv_mk_bitwise_slicing a) b (_ (= a) b)))
  )
)
; program: $eovc_bv-bitwise-slicing
(program $eovc_bv-bitwise-slicing ((n Int) (a (BitVec n)) (b (BitVec n)))
  :signature ((BitVec n) (BitVec n)) Bool
  (
  (($eovc_bv-bitwise-slicing b a) ($eo_requires_false ($eo_model_sat ($eor_bv-bitwise-slicing (_ (= a) b))) true))
  )
)
(echo "smt-meta $eovc_bv-bitwise-slicing")
; program: $eor_bv_bitblast_step
(program $eor_bv_bitblast_step ((U Type) (a U) (b U))
  :signature (Bool) Bool
  (
  (($eor_bv_bitblast_step (_ (= a) b)) (eo::requires ($bv_mk_bitblast_step a) b (_ (= a) b)))
  )
)
; program: $eovc_bv_bitblast_step
(program $eovc_bv_bitblast_step ((U Type) (a U) (b U))
  :signature (U U) Bool
  (
  (($eovc_bv_bitblast_step b a) ($eo_requires_false ($eo_model_sat ($eor_bv_bitblast_step (_ (= a) b))) true))
  )
)
(echo "smt-meta $eovc_bv_bitblast_step")
; program: $eor_bv_poly_norm
(program $eor_bv_poly_norm ((n Int) (a (BitVec n)) (b (BitVec n)))
  :signature (Bool) Bool
  (
  (($eor_bv_poly_norm (_ (= a) b)) (eo::define ((_v0 ($bv_bitwidth (eo::typeof a)))) (eo::define ((_v1 (eo::ite (eo::is_z _v0) (eo::ite (eo::is_neg _v0) 0 ($arith_eval_int_pow_2_rec _v0)) (int.pow2 _v0)))) (eo::requires (eo::eq ($poly_mod_coeffs ($get_bv_poly_norm_rec a) _v1) ($poly_mod_coeffs ($get_bv_poly_norm_rec b) _v1)) true (_ (= a) b)))))
  )
)
; program: $eovc_bv_poly_norm
(program $eovc_bv_poly_norm ((n Int) (a (BitVec n)) (b (BitVec n)))
  :signature ((BitVec n) (BitVec n)) Bool
  (
  (($eovc_bv_poly_norm b a) ($eo_requires_false ($eo_model_sat ($eor_bv_poly_norm (_ (= a) b))) true))
  )
)
(echo "smt-meta $eovc_bv_poly_norm")
; program: $eor_bv_poly_norm_eq
(program $eor_bv_poly_norm_eq ((n Int) (one (BitVec n)) (cx (BitVec n)) (cy (BitVec n)) (xb1 (BitVec n)) (xb2 (BitVec n)) (yb1 (BitVec n)) (yb2 (BitVec n)))
  :signature (Bool Bool) Bool
  (
  (($eor_bv_poly_norm_eq (_ (= (_ (= xb1) xb2)) (_ (= yb1) yb2)) (_ (= (_ (bvmul cx) (_ (bvmul (_ (bvsub xb1) xb2)) one))) (_ (bvmul cy) (_ (bvmul (_ (bvsub yb1) yb2)) one)))) (eo::requires (eo::to_z one) 1 (eo::requires (eo::zmod (eo::to_z cx) 2) 1 (eo::requires (eo::zmod (eo::to_z cy) 2) 1 (_ (= (_ (= xb1) xb2)) (_ (= yb1) yb2))))))
  )
)
; program: $eovc_bv_poly_norm_eq
(program $eovc_bv_poly_norm_eq ((n Int) (cx (BitVec n)) (xb1 (BitVec n)) (xb2 (BitVec n)) (cy (BitVec n)) (yb1 (BitVec n)) (yb2 (BitVec n)) (one (BitVec n)))
  :signature ((BitVec n) (BitVec n) (BitVec n) (BitVec n) (BitVec n) (BitVec n) (BitVec n)) Bool
  (
  (($eovc_bv_poly_norm_eq one yb2 yb1 cy xb2 xb1 cx) (eo::define ((_v0 (_ (= (_ (bvmul cx) (_ (bvmul (_ (bvsub xb1) xb2)) one))) (_ (bvmul cy) (_ (bvmul (_ (bvsub yb1) yb2)) one))))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_bv_poly_norm_eq (_ (= (_ (= xb1) xb2)) (_ (= yb1) yb2)) _v0)) true))))
  )
)
(echo "smt-meta $eovc_bv_poly_norm_eq")
; program: $eor_string_length_pos
(program $eor_string_length_pos ((U Type) (s U))
  :signature (U) Bool
  (
  (($eor_string_length_pos s) (eo::define ((_v0 (str.len s))) (eo::define ((_v1 (eo::typeof s))) (_ (or (_ (and (_ (= _v0) 0)) (_ (and (_ (= s) (eo::ite (eo::is_eq _v1 (Seq Char)) "" (_ seq.empty _v1)))) true))) (_ (or (_ (> _v0) 0)) false)))))
  )
)
; program: $eovc_string_length_pos
(program $eovc_string_length_pos ((U Type) (s U))
  :signature (U) Bool
  (
  (($eovc_string_length_pos s) ($eo_requires_false ($eo_model_sat ($eor_string_length_pos s)) true))
  )
)
(echo "smt-meta $eovc_string_length_pos")
; program: $eor_string_length_non_empty
(program $eor_string_length_non_empty ((U Type) (t (Seq U)) (s (Seq U)))
  :signature (Bool) Bool
  (
  (($eor_string_length_non_empty (not (_ (= s) t))) (eo::requires ($str_is_empty t) true (not (_ (= (str.len s)) 0))))
  )
)
; program: $eovc_string_length_non_empty
(program $eovc_string_length_non_empty ((U Type) (s (Seq U)) (t (Seq U)))
  :signature ((Seq U) (Seq U)) Bool
  (
  (($eovc_string_length_non_empty t s) (eo::define ((_v0 (not (_ (= s) t)))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_string_length_non_empty _v0)) true))))
  )
)
(echo "smt-meta $eovc_string_length_non_empty")
; program: $eor_concat_eq
(program $eor_concat_eq ((U Type) (s (Seq U)) (rev Bool) (t (Seq U)))
  :signature (Bool Bool) Bool
  (
  (($eor_concat_eq rev (_ (= s) t)) (eo::define ((_v0 ($str_nary_intro t))) (eo::define ((_v1 ($str_nary_intro s))) (eo::define ((_v2 ($str_strip_prefix (eo::ite rev (eo::list_rev str.++ _v1) _v1) (eo::ite rev (eo::list_rev str.++ _v0) _v0)))) (eo::define ((_v3 ($pair_second _v2))) (eo::define ((_v4 ($pair_first _v2))) (_ (= ($str_nary_elim (eo::ite rev (eo::list_rev str.++ _v4) _v4))) ($str_nary_elim (eo::ite rev (eo::list_rev str.++ _v3) _v3)))))))))
  )
)
; program: $eovc_concat_eq
(program $eovc_concat_eq ((U Type) (rev Bool) (s (Seq U)) (t (Seq U)))
  :signature ((Seq U) (Seq U) Bool) Bool
  (
  (($eovc_concat_eq t s rev) (eo::define ((_v0 (_ (= s) t))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_concat_eq rev _v0)) true))))
  )
)
(echo "smt-meta $eovc_concat_eq")
; program: $eor_concat_unify
(program $eor_concat_unify ((Any Type) (U Type) (s U) (rev Bool) (t U) (s1 U) (t1 U))
  :signature (Bool Bool Any) Bool
  (
  (($eor_concat_unify rev (_ (= s) t) (_ (= (str.len s1)) (str.len t1))) (eo::define ((_v0 ($str_nary_intro t))) (eo::define ((_v1 ($str_nary_intro s))) (eo::requires (eo::list_nth str.++ (eo::ite rev (eo::list_rev str.++ _v1) _v1) 0) s1 (eo::requires (eo::list_nth str.++ (eo::ite rev (eo::list_rev str.++ _v0) _v0) 0) t1 (_ (= s1) t1))))))
  )
)
; program: $eovc_concat_unify
(program $eovc_concat_unify ((U Type) (rev Bool) (s U) (t U) (s1 U) (t1 U))
  :signature (U U U U Bool) Bool
  (
  (($eovc_concat_unify t1 s1 t s rev) (eo::define ((_v0 (_ (= (str.len s1)) (str.len t1)))) (eo::define ((_v1 (_ (= s) t))) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_concat_unify rev _v1 _v0)) true))))))
  )
)
(echo "smt-meta $eovc_concat_unify")
; program: $eor_concat_csplit
(program $eor_concat_csplit ((U Type) (t (Seq U)) (u (Seq U)) (rev Bool) (s (Seq U)))
  :signature (Bool Bool Bool) Bool
  (
  (($eor_concat_csplit rev (_ (= t) s) (not (_ (= (str.len u)) 0))) (eo::define ((_v0 ($str_nary_intro s))) (eo::define ((_v1 (eo::list_nth str.++ (eo::ite rev (eo::list_rev str.++ _v0) _v0) 0))) (eo::define ((_v2 (_ (- (str.len u)) 1))) (eo::define ((_v3 (str.substr u))) (eo::define ((_v4 (str.++ _v1))) (eo::define ((_v5 (_ @purify (_ (_ _v3 0) _v2)))) (eo::requires (eo::is_eq (eo::len _v1) 1) true (_ (= u) (eo::ite rev (_ (str.++ _v5) (_ _v4 (eo::nil str.++ (eo::typeof _v5)))) (_ _v4 (_ (str.++ (_ @purify (_ (_ _v3 1) _v2))) (eo::nil str.++ (eo::typeof _v1))))))))))))))
  )
)
; program: $eovc_concat_csplit
(program $eovc_concat_csplit ((U Type) (rev Bool) (t (Seq U)) (s (Seq U)) (u (Seq U)))
  :signature ((Seq U) (Seq U) (Seq U) Bool) Bool
  (
  (($eovc_concat_csplit u s t rev) (eo::define ((_v0 (not (_ (= (str.len u)) 0)))) (eo::define ((_v1 (_ (= t) s))) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_concat_csplit rev _v1 _v0)) true))))))
  )
)
(echo "smt-meta $eovc_concat_csplit")
; program: $eor_concat_split
(program $eor_concat_split ((U Type) (tc (Seq U)) (sc (Seq U)) (t (Seq U)) (s (Seq U)) (rev Bool))
  :signature (Bool Bool Bool) Bool
  (
  (($eor_concat_split rev (_ (= t) s) (not (_ (= (str.len tc)) (str.len sc)))) (eo::define ((_v0 ($str_nary_intro s))) (eo::define ((_v1 (eo::list_nth str.++ (eo::ite rev (eo::list_rev str.++ _v0) _v0) 0))) (eo::define ((_v2 ($str_nary_intro t))) (eo::define ((_v3 (eo::list_nth str.++ (eo::ite rev (eo::list_rev str.++ _v2) _v2) 0))) (eo::define ((_v4 (_ @purify ($str_unify_split _v3 _v1 rev)))) (eo::define ((_v5 (eo::typeof _v4))) (eo::define ((_v6 (str.++ _v4))) (eo::define ((_v7 (str.++ _v3))) (eo::define ((_v8 (eo::nil str.++ _v5))) (eo::define ((_v9 (str.++ _v1))) (eo::requires _v3 tc (eo::requires _v1 sc (_ (and (_ (or (_ (= _v3) (eo::ite rev (_ _v6 (_ _v9 _v8)) (_ _v9 (_ _v6 (eo::nil str.++ (eo::typeof _v1))))))) (_ (or (_ (= _v1) (eo::ite rev (_ _v6 (_ _v7 _v8)) (_ _v7 (_ _v6 (eo::nil str.++ (eo::typeof _v3))))))) false))) (_ (and (not (_ (= _v4) (eo::ite (eo::is_eq _v5 (Seq Char)) "" (_ seq.empty _v5))))) (_ (and (_ (> (str.len _v4)) 0)) true))))))))))))))))
  )
)
; program: $eovc_concat_split
(program $eovc_concat_split ((U Type) (rev Bool) (t (Seq U)) (s (Seq U)) (tc (Seq U)) (sc (Seq U)))
  :signature ((Seq U) (Seq U) (Seq U) (Seq U) Bool) Bool
  (
  (($eovc_concat_split sc tc s t rev) (eo::define ((_v0 (not (_ (= (str.len tc)) (str.len sc))))) (eo::define ((_v1 (_ (= t) s))) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_concat_split rev _v1 _v0)) true))))))
  )
)
(echo "smt-meta $eovc_concat_split")
; program: $eor_concat_lprop
(program $eor_concat_lprop ((U Type) (tc (Seq U)) (sc (Seq U)) (t (Seq U)) (s (Seq U)) (rev Bool))
  :signature (Bool Bool Bool) Bool
  (
  (($eor_concat_lprop rev (_ (= t) s) (_ (> (str.len tc)) (str.len sc))) (eo::define ((_v0 ($str_nary_intro s))) (eo::define ((_v1 (eo::list_nth str.++ (eo::ite rev (eo::list_rev str.++ _v0) _v0) 0))) (eo::define ((_v2 ($str_nary_intro t))) (eo::define ((_v3 (eo::list_nth str.++ (eo::ite rev (eo::list_rev str.++ _v2) _v2) 0))) (eo::define ((_v4 (_ @purify ($str_unify_split _v3 _v1 rev)))) (eo::define ((_v5 (eo::typeof _v4))) (eo::define ((_v6 (str.++ _v4))) (eo::define ((_v7 (str.++ _v1))) (eo::requires _v3 tc (eo::requires _v1 sc (_ (and (_ (= _v3) (eo::ite rev (_ _v6 (_ _v7 (eo::nil str.++ _v5))) (_ _v7 (_ _v6 (eo::nil str.++ (eo::typeof _v1))))))) (_ (and (not (_ (= _v4) (eo::ite (eo::is_eq _v5 (Seq Char)) "" (_ seq.empty _v5))))) (_ (and (_ (> (str.len _v4)) 0)) true))))))))))))))
  )
)
; program: $eovc_concat_lprop
(program $eovc_concat_lprop ((U Type) (rev Bool) (t (Seq U)) (s (Seq U)) (tc (Seq U)) (sc (Seq U)))
  :signature ((Seq U) (Seq U) (Seq U) (Seq U) Bool) Bool
  (
  (($eovc_concat_lprop sc tc s t rev) (eo::define ((_v0 (_ (> (str.len tc)) (str.len sc)))) (eo::define ((_v1 (_ (= t) s))) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_concat_lprop rev _v1 _v0)) true))))))
  )
)
(echo "smt-meta $eovc_concat_lprop")
; program: $eor_concat_cprop
(program $eor_concat_cprop ((U Type) (tc (Seq U)) (s (Seq U)) (rev Bool) (t (Seq U)))
  :signature (Bool Bool Bool) Bool
  (
  (($eor_concat_cprop rev (_ (= t) s) (not (_ (= (str.len tc)) 0))) (eo::define ((_v0 ($str_nary_intro t))) (eo::define ((_v1 (eo::ite rev (eo::list_rev str.++ _v0) _v0))) (eo::define ((_v2 ($str_flatten ($str_nary_intro (eo::list_nth str.++ _v1 1))))) (eo::define ((_v3 ($str_nary_intro s))) (eo::define ((_v4 (eo::list_nth str.++ (eo::ite rev (eo::list_rev str.++ _v3) _v3) 0))) (eo::define ((_v5 (eo::len _v4))) (eo::define ((_v6 ($str_flatten ($str_nary_intro (eo::ite rev (eo::extract _v4 0 (eo::add _v5 -2)) (eo::extract _v4 1 _v5)))))) (eo::define ((_v7 (eo::add 1 ($str_overlap_rec (eo::ite rev (eo::list_rev str.++ _v6) _v6) (eo::ite rev (eo::list_rev str.++ _v2) _v2))))) (eo::define ((_v8 (str.substr _v4))) (eo::define ((_v9 (_ (_ _v8 0) _v7))) (eo::define ((_v10 (str.len _v9))) (eo::define ((_v11 (- (str.len tc)))) (eo::define ((_v12 (str.substr tc))) (eo::define ((_v13 (_ (_ _v8 (_ (- (str.len _v4)) _v7)) _v7))) (eo::define ((_v14 (_ @purify (_ (_ _v12 0) (_ _v11 (str.len _v13)))))) (eo::requires (eo::list_nth str.++ _v1 0) tc (_ (= tc) (eo::ite rev (_ (str.++ _v14) (_ (str.++ _v13) (eo::nil str.++ (eo::typeof _v14)))) (_ (str.++ _v9) (_ (str.++ (_ @purify (_ (_ _v12 _v10) (_ _v11 _v10)))) (eo::nil str.++ (eo::typeof _v9)))))))))))))))))))))))
  )
)
; program: $eovc_concat_cprop
(program $eovc_concat_cprop ((U Type) (rev Bool) (t (Seq U)) (s (Seq U)) (tc (Seq U)))
  :signature ((Seq U) (Seq U) (Seq U) Bool) Bool
  (
  (($eovc_concat_cprop tc s t rev) (eo::define ((_v0 (not (_ (= (str.len tc)) 0)))) (eo::define ((_v1 (_ (= t) s))) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_concat_cprop rev _v1 _v0)) true))))))
  )
)
(echo "smt-meta $eovc_concat_cprop")
; program: $eor_string_decompose
(program $eor_string_decompose ((b Bool) (U Type) (s (Seq U)) (n Int))
  :signature (Bool Bool) Bool
  (
  (($eor_string_decompose b (_ (>= (str.len s)) n)) (eo::define ((_v0 (str.substr s))) (eo::define ((_v1 (_ _v0 0))) (eo::define ((_v2 (_ @purify (_ _v1 n)))) (eo::define ((_v3 (_ (- (str.len s)) n))) (eo::define ((_v4 (= s))) (eo::define ((_v5 (_ @purify (_ (_ _v0 _v3) n)))) (eo::define ((_v6 (_ @purify (_ _v1 _v3)))) (eo::ite b (_ (and (_ _v4 (_ (str.++ _v6) (_ (str.++ _v5) (eo::nil str.++ (eo::typeof _v6)))))) (_ (and (_ (= (str.len _v5)) n)) true)) (_ (and (_ _v4 (_ (str.++ _v2) (_ (str.++ (_ @purify (_ (_ _v0 n) _v3))) (eo::nil str.++ (eo::typeof _v2)))))) (_ (and (_ (= (str.len _v2)) n)) true)))))))))))
  )
)
; program: $eovc_string_decompose
(program $eovc_string_decompose ((U Type) (b Bool) (s (Seq U)) (n Int))
  :signature (Int (Seq U) Bool) Bool
  (
  (($eovc_string_decompose n s b) (eo::define ((_v0 (_ (>= (str.len s)) n))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_string_decompose b _v0)) true))))
  )
)
(echo "smt-meta $eovc_string_decompose")
; program: $eor_exists_string_length
(program $eor_exists_string_length ((U Type) (id Int) (n Int))
  :signature (Type Int Int) Bool
  (
  (($eor_exists_string_length (Seq U) n id) (eo::requires (eo::gt n -1) true (_ (= (str.len (_ (_ (@witness_string_length (Seq U)) n) id))) n)))
  )
)
; program: $eovc_exists_string_length
(program $eovc_exists_string_length ((U Type) (n Int) (id Int))
  :signature (Int Int Type) Bool
  (
  (($eovc_exists_string_length id n U) ($eo_requires_false ($eo_model_sat ($eor_exists_string_length (Seq U) n id)) true))
  )
)
(echo "smt-meta $eovc_exists_string_length")
; program: $eor_string_code_inj
(program $eor_string_code_inj ((t (Seq Char)) (s (Seq Char)))
  :signature ((Seq Char) (Seq Char)) Bool
  (
  (($eor_string_code_inj t s) (eo::define ((_v0 (= (str.to_code t)))) (_ (or (_ _v0 -1)) (_ (or (not (_ _v0 (str.to_code s)))) (_ (or (_ (= t) s)) false)))))
  )
)
; program: $eovc_string_code_inj
(program $eovc_string_code_inj ((t (Seq Char)) (s (Seq Char)))
  :signature ((Seq Char) (Seq Char)) Bool
  (
  (($eovc_string_code_inj s t) ($eo_requires_false ($eo_model_sat ($eor_string_code_inj t s)) true))
  )
)
(echo "smt-meta $eovc_string_code_inj")
; program: $eor_string_seq_unit_inj
(program $eor_string_seq_unit_inj ((U Type) (a U) (b U))
  :signature (Bool) Bool
  (
  (($eor_string_seq_unit_inj (_ (= (seq.unit a)) (seq.unit b))) (_ (= a) b))
  )
)
; program: $eovc_string_seq_unit_inj
(program $eovc_string_seq_unit_inj ((U Type) (a U) (b U))
  :signature (U U) Bool
  (
  (($eovc_string_seq_unit_inj b a) (eo::define ((_v0 (_ (= (seq.unit a)) (seq.unit b)))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_string_seq_unit_inj _v0)) true))))
  )
)
(echo "smt-meta $eovc_string_seq_unit_inj")
; program: $eor_re_inter
(program $eor_re_inter ((x (Seq Char)) (s RegLan) (t RegLan))
  :signature (Bool Bool) Bool
  (
  ((eo::define ((_v0 (str.in_re x))) ($eor_re_inter (_ _v0 s) (_ _v0 t))) (_ (str.in_re x) (_ (re.inter s) (_ (re.inter t) re.all))))
  )
)
; program: $eovc_re_inter
(program $eovc_re_inter ((s RegLan) (x (Seq Char)) (t RegLan))
  :signature (RegLan (Seq Char) RegLan) Bool
  (
  (($eovc_re_inter t x s) (eo::define ((_v0 (str.in_re x))) (eo::define ((_v1 (_ _v0 t))) (eo::define ((_v2 (_ _v0 s))) ($eo_requires_true ($eo_model_sat _v2) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_false ($eo_model_sat ($eor_re_inter _v2 _v1)) true)))))))
  )
)
(echo "smt-meta $eovc_re_inter")
; program: $eor_re_concat
(program $eor_re_concat ((E Bool))
  :signature (Bool) Bool
  (
  (($eor_re_concat E) ($mk_re_concat (eo::list_rev and E) (_ (str.in_re "") (str.to_re ""))))
  )
)
; program: $eovc_re_concat
(program $eovc_re_concat ((E Bool))
  :signature (Bool) Bool
  (
  (($eovc_re_concat E) ($eo_requires_true ($eo_model_sat E) ($eo_requires_false ($eo_model_sat ($eor_re_concat E)) true)))
  )
)
(echo "smt-meta $eovc_re_concat")
; program: $eor_re_unfold_pos
(program $eor_re_unfold_pos ((t (Seq Char)) (r RegLan))
  :signature (Bool) Bool
  (
  (($eor_re_unfold_pos (_ (str.in_re t) r)) ($mk_re_unfold_pos t r))
  )
)
; program: $eovc_re_unfold_pos
(program $eovc_re_unfold_pos ((t (Seq Char)) (r RegLan))
  :signature (RegLan (Seq Char)) Bool
  (
  (($eovc_re_unfold_pos r t) (eo::define ((_v0 (_ (str.in_re t) r))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_re_unfold_pos _v0)) true))))
  )
)
(echo "smt-meta $eovc_re_unfold_pos")
; program: $eor_re_unfold_neg_concat_fixed
(program $eor_re_unfold_neg_concat_fixed ((s (Seq Char)) (r RegLan) (rev Bool))
  :signature (Bool Bool) Bool
  (
  (($eor_re_unfold_neg_concat_fixed rev (not (_ (str.in_re s) r))) ($mk_re_unfold_neg_concat_fixed s (eo::ite rev (eo::list_rev re.++ r) r) rev))
  )
)
; program: $eovc_re_unfold_neg_concat_fixed
(program $eovc_re_unfold_neg_concat_fixed ((rev Bool) (s (Seq Char)) (r RegLan))
  :signature (RegLan (Seq Char) Bool) Bool
  (
  (($eovc_re_unfold_neg_concat_fixed r s rev) (eo::define ((_v0 (not (_ (str.in_re s) r)))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_re_unfold_neg_concat_fixed rev _v0)) true))))
  )
)
(echo "smt-meta $eovc_re_unfold_neg_concat_fixed")
; program: $eor_re_unfold_neg
(program $eor_re_unfold_neg ((t (Seq Char)) (r RegLan))
  :signature (Bool) Bool
  (
  (($eor_re_unfold_neg (not (_ (str.in_re t) r))) ($mk_re_unfold_neg t r))
  )
)
; program: $eovc_re_unfold_neg
(program $eovc_re_unfold_neg ((t (Seq Char)) (r RegLan))
  :signature (RegLan (Seq Char)) Bool
  (
  (($eovc_re_unfold_neg r t) (eo::define ((_v0 (not (_ (str.in_re t) r)))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_re_unfold_neg _v0)) true))))
  )
)
(echo "smt-meta $eovc_re_unfold_neg")
; program: $eor_string_ext
(program $eor_string_ext ((T Type) (t (Seq T)) (s (Seq T)))
  :signature (Bool) Bool
  (
  (($eor_string_ext (not (_ (= s) t))) (eo::define ((_v0 (str.len s))) (eo::define ((_v1 (_ @strings_deq_diff s t))) (_ (or (not (_ (= _v0) (str.len t)))) (_ (or (_ (and ($str_mk_ext_deq s t _v1 (eo::typeof s))) (_ (and (_ (<= 0) _v1)) (_ (and (_ (< _v1) _v0)) true)))) false)))))
  )
)
; program: $eovc_string_ext
(program $eovc_string_ext ((T Type) (s (Seq T)) (t (Seq T)))
  :signature ((Seq T) (Seq T)) Bool
  (
  (($eovc_string_ext t s) (eo::define ((_v0 (not (_ (= s) t)))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_string_ext _v0)) true))))
  )
)
(echo "smt-meta $eovc_string_ext")
; program: $eor_string_reduction
(program $eor_string_reduction ((U Type) (s U))
  :signature (U) Bool
  (
  (($eor_string_reduction s) (_ (and ($str_reduction_pred s)) (_ (and (_ (= s) (_ @purify s))) true)))
  )
)
; program: $eovc_string_reduction
(program $eovc_string_reduction ((U Type) (s U))
  :signature (U) Bool
  (
  (($eovc_string_reduction s) ($eo_requires_false ($eo_model_sat ($eor_string_reduction s)) true))
  )
)
(echo "smt-meta $eovc_string_reduction")
; program: $eor_string_eager_reduction
(program $eor_string_eager_reduction ((U Type) (s U))
  :signature (U) Bool
  (
  (($eor_string_eager_reduction s) ($mk_str_eager_reduction s))
  )
)
; program: $eovc_string_eager_reduction
(program $eovc_string_eager_reduction ((U Type) (s U))
  :signature (U) Bool
  (
  (($eovc_string_eager_reduction s) ($eo_requires_false ($eo_model_sat ($eor_string_eager_reduction s)) true))
  )
)
(echo "smt-meta $eovc_string_eager_reduction")
; program: $eor_arith-string-pred-entail
(program $eor_arith-string-pred-entail ((n Int))
  :signature (Bool) Bool
  (
  (($eor_arith-string-pred-entail (_ (= (_ (>= n) 0)) true)) (eo::requires ($str_arith_entail_simple n) true (_ (= (_ (>= n) 0)) true)))
  )
)
; program: $eovc_arith-string-pred-entail
(program $eovc_arith-string-pred-entail ((n Int))
  :signature (Int) Bool
  (
  (($eovc_arith-string-pred-entail n) ($eo_requires_false ($eo_model_sat ($eor_arith-string-pred-entail (_ (= (_ (>= n) 0)) true))) true))
  )
)
(echo "smt-meta $eovc_arith-string-pred-entail")
; program: $eor_arith-string-pred-safe-approx
(program $eor_arith-string-pred-safe-approx ((n Int) (m Int))
  :signature (Bool) Bool
  (
  (($eor_arith-string-pred-safe-approx (_ (= (_ (>= n) 0)) (_ (>= m) 0))) (eo::define ((_v0 (_ (>= m) 0))) (eo::requires ($str_arith_entail_is_approx n m true) true (eo::requires ($str_arith_entail_simple_pred _v0) true (_ (= (_ (>= n) 0)) _v0)))))
  )
)
; program: $eovc_arith-string-pred-safe-approx
(program $eovc_arith-string-pred-safe-approx ((n Int) (m Int))
  :signature (Int Int) Bool
  (
  (($eovc_arith-string-pred-safe-approx m n) ($eo_requires_false ($eo_model_sat ($eor_arith-string-pred-safe-approx (_ (= (_ (>= n) 0)) (_ (>= m) 0)))) true))
  )
)
(echo "smt-meta $eovc_arith-string-pred-safe-approx")
; program: $eor_str-in-re-eval
(program $eor_str-in-re-eval ((s (Seq Char)) (r RegLan) (b Bool))
  :signature (Bool) Bool
  (
  (($eor_str-in-re-eval (_ (= (_ (str.in_re s) r)) b)) (eo::define ((_v0 (_ (str.in_re s) r))) (eo::requires (eo::ite (eo::is_str s) ($str_eval_str_in_re_rec s 0 r @re.null) _v0) b (_ (= _v0) b))))
  )
)
; program: $eovc_str-in-re-eval
(program $eovc_str-in-re-eval ((s (Seq Char)) (r RegLan) (b Bool))
  :signature (Bool RegLan (Seq Char)) Bool
  (
  (($eovc_str-in-re-eval b r s) ($eo_requires_false ($eo_model_sat ($eor_str-in-re-eval (_ (= (_ (str.in_re s) r)) b))) true))
  )
)
(echo "smt-meta $eovc_str-in-re-eval")
; program: $eor_str-in-re-consume
(program $eor_str-in-re-consume ((s (Seq Char)) (r RegLan) (b Bool))
  :signature (Bool) Bool
  (
  (($eor_str-in-re-consume (_ (= (_ (str.in_re s) r)) b)) (eo::requires ($str_re_consume s r) b (_ (= (_ (str.in_re s) r)) b)))
  )
)
; program: $eovc_str-in-re-consume
(program $eovc_str-in-re-consume ((s (Seq Char)) (r RegLan) (b Bool))
  :signature (Bool RegLan (Seq Char)) Bool
  (
  (($eovc_str-in-re-consume b r s) ($eo_requires_false ($eo_model_sat ($eor_str-in-re-consume (_ (= (_ (str.in_re s) r)) b))) true))
  )
)
(echo "smt-meta $eovc_str-in-re-consume")
; program: $eor_re-loop-elim
(program $eor_re-loop-elim ((l Int) (u Int) (r1 RegLan) (r2 RegLan))
  :signature (Bool) Bool
  (
  (($eor_re-loop-elim (_ (= (_ (_ (re.loop l) u) r1)) r2)) (eo::define ((_v0 (eo::add (eo::neg l) u))) (eo::requires (eo::is_neg _v0) false (eo::requires ($singleton_elim ($str_mk_re_loop_elim_rec l _v0 r1 (str.to_re ""))) r2 (_ (= (_ (_ (re.loop l) u) r1)) r2)))))
  )
)
; program: $eovc_re-loop-elim
(program $eovc_re-loop-elim ((l Int) (u Int) (r1 RegLan) (r2 RegLan))
  :signature (RegLan RegLan Int Int) Bool
  (
  (($eovc_re-loop-elim r2 r1 u l) ($eo_requires_false ($eo_model_sat ($eor_re-loop-elim (_ (= (_ (_ (re.loop l) u) r1)) r2))) true))
  )
)
(echo "smt-meta $eovc_re-loop-elim")
; program: $eor_re-inter-inclusion
(program $eor_re-inter-inclusion ((r1 RegLan) (r2 RegLan))
  :signature (Bool) Bool
  (
  (($eor_re-inter-inclusion (_ (= (_ (re.inter r1) (_ (re.inter (re.comp r2)) re.all))) re.none)) (eo::requires ($str_re_includes r2 r1) true (_ (= (_ (re.inter r1) (_ (re.inter (re.comp r2)) re.all))) re.none)))
  )
)
; program: $eovc_re-inter-inclusion
(program $eovc_re-inter-inclusion ((r1 RegLan) (r2 RegLan))
  :signature (RegLan RegLan) Bool
  (
  (($eovc_re-inter-inclusion r2 r1) ($eo_requires_false ($eo_model_sat ($eor_re-inter-inclusion (_ (= (_ (re.inter r1) (_ (re.inter (re.comp r2)) re.all))) re.none))) true))
  )
)
(echo "smt-meta $eovc_re-inter-inclusion")
; program: $eor_re-union-inclusion
(program $eor_re-union-inclusion ((r1 RegLan) (r2 RegLan))
  :signature (Bool) Bool
  (
  (($eor_re-union-inclusion (_ (= (_ (re.union r1) (_ (re.union (re.comp r2)) re.none))) (re.* re.allchar))) (eo::requires ($str_re_includes r1 r2) true (_ (= (_ (re.union r1) (_ (re.union (re.comp r2)) re.none))) (re.* re.allchar))))
  )
)
; program: $eovc_re-union-inclusion
(program $eovc_re-union-inclusion ((r1 RegLan) (r2 RegLan))
  :signature (RegLan RegLan) Bool
  (
  (($eovc_re-union-inclusion r2 r1) ($eo_requires_false ($eo_model_sat ($eor_re-union-inclusion (_ (= (_ (re.union r1) (_ (re.union (re.comp r2)) re.none))) (re.* re.allchar)))) true))
  )
)
(echo "smt-meta $eovc_re-union-inclusion")
; program: $eor_str-in-re-concat-star-char
(program $eor_str-in-re-concat-star-char ((s1 (Seq Char)) (s2 (Seq Char)) (r RegLan) (b Bool))
  :signature (Bool) Bool
  (
  (($eor_str-in-re-concat-star-char (_ (= (_ (str.in_re (_ (str.++ s1) s2)) (re.* r))) b)) (eo::define ((_v0 (re.* r))) (eo::define ((_v1 (_ (str.++ s1) s2))) (eo::requires ($str_fixed_len_re r) 1 (eo::requires ($str_mk_str_in_re_concat_star_char _v1 _v0) b (_ (= (_ (str.in_re _v1) _v0)) b))))))
  )
)
; program: $eovc_str-in-re-concat-star-char
(program $eovc_str-in-re-concat-star-char ((s1 (Seq Char)) (s2 (Seq Char)) (r RegLan) (b Bool))
  :signature (Bool RegLan (Seq Char) (Seq Char)) Bool
  (
  (($eovc_str-in-re-concat-star-char b r s2 s1) ($eo_requires_false ($eo_model_sat ($eor_str-in-re-concat-star-char (_ (= (_ (str.in_re (_ (str.++ s1) s2)) (re.* r))) b))) true))
  )
)
(echo "smt-meta $eovc_str-in-re-concat-star-char")
; program: $eor_str-in-re-sigma
(program $eor_str-in-re-sigma ((s (Seq Char)) (r RegLan) (b Bool))
  :signature (Bool) Bool
  (
  (($eor_str-in-re-sigma (_ (= (_ (str.in_re s) r)) b)) (eo::requires ($str_mk_str_in_re_sigma_rec s r 0 true) b (_ (= (_ (str.in_re s) r)) b)))
  )
)
; program: $eovc_str-in-re-sigma
(program $eovc_str-in-re-sigma ((s (Seq Char)) (r RegLan) (b Bool))
  :signature (Bool RegLan (Seq Char)) Bool
  (
  (($eovc_str-in-re-sigma b r s) ($eo_requires_false ($eo_model_sat ($eor_str-in-re-sigma (_ (= (_ (str.in_re s) r)) b))) true))
  )
)
(echo "smt-meta $eovc_str-in-re-sigma")
; program: $eor_str-in-re-sigma-star
(program $eor_str-in-re-sigma-star ((s (Seq Char)) (r RegLan) (b Bool))
  :signature (Bool) Bool
  (
  (($eor_str-in-re-sigma-star (_ (= (_ (str.in_re s) (re.* r))) b)) (eo::requires ($str_mk_str_in_re_sigma_star_rec s r 0) b (_ (= (_ (str.in_re s) (re.* r))) b)))
  )
)
; program: $eovc_str-in-re-sigma-star
(program $eovc_str-in-re-sigma-star ((s (Seq Char)) (r RegLan) (b Bool))
  :signature (Bool RegLan (Seq Char)) Bool
  (
  (($eovc_str-in-re-sigma-star b r s) ($eo_requires_false ($eo_model_sat ($eor_str-in-re-sigma-star (_ (= (_ (str.in_re s) (re.* r))) b))) true))
  )
)
(echo "smt-meta $eovc_str-in-re-sigma-star")
; program: $eor_str-ctn-multiset-subset
(program $eor_str-ctn-multiset-subset ((T Type) (t (Seq T)) (s (Seq T)))
  :signature (Bool) Bool
  (
  (($eor_str-ctn-multiset-subset (_ (= (_ (str.contains t) s)) false)) (eo::requires ($str_is_multiset_subset_strict ($str_flatten ($str_nary_intro s)) ($str_multiset_overapprox t) $eo_List_nil) true (_ (= (_ (str.contains t) s)) false)))
  )
)
; program: $eovc_str-ctn-multiset-subset
(program $eovc_str-ctn-multiset-subset ((T Type) (t (Seq T)) (s (Seq T)))
  :signature ((Seq T) (Seq T)) Bool
  (
  (($eovc_str-ctn-multiset-subset s t) ($eo_requires_false ($eo_model_sat ($eor_str-ctn-multiset-subset (_ (= (_ (str.contains t) s)) false))) true))
  )
)
(echo "smt-meta $eovc_str-ctn-multiset-subset")
; program: $eor_str-overlap-split-ctn
(program $eor_str-overlap-split-ctn ((T Type) (c (Seq T)) (emp (Seq T)) (t (Seq T)) (s (Seq T)) (d (Seq T)))
  :signature (Bool) Bool
  (
  (($eor_str-overlap-split-ctn (_ (= (_ (str.contains (_ (str.++ t) (_ (str.++ c) (_ (str.++ s) emp)))) d)) (_ (or (_ (str.contains t) d)) (_ (or (_ (str.contains s) d)) false)))) (eo::define ((_v0 ($str_flatten ($str_nary_intro c)))) (eo::define ((_v1 ($str_flatten ($str_nary_intro d)))) (eo::requires ($str_is_empty emp) true (eo::requires (eo::gt ($str_value_len c) ($str_overlap_rec _v0 _v1)) false (eo::requires (eo::gt ($str_value_len d) ($str_overlap_rec _v1 _v0)) false (_ (= (_ (str.contains (_ (str.++ t) (_ (str.++ c) (_ (str.++ s) emp)))) d)) (_ (or (_ (str.contains t) d)) (_ (or (_ (str.contains s) d)) false)))))))))
  )
)
; program: $eovc_str-overlap-split-ctn
(program $eovc_str-overlap-split-ctn ((T Type) (c (Seq T)) (emp (Seq T)) (t (Seq T)) (s (Seq T)) (d (Seq T)))
  :signature ((Seq T) (Seq T) (Seq T) (Seq T) (Seq T)) Bool
  (
  (($eovc_str-overlap-split-ctn d s t emp c) ($eo_requires_false ($eo_model_sat ($eor_str-overlap-split-ctn (_ (= (_ (str.contains (_ (str.++ t) (_ (str.++ c) (_ (str.++ s) emp)))) d)) (_ (or (_ (str.contains t) d)) (_ (or (_ (str.contains s) d)) false))))) true))
  )
)
(echo "smt-meta $eovc_str-overlap-split-ctn")
; program: $eor_str-overlap-endpoints-ctn
(program $eor_str-overlap-endpoints-ctn ((T Type) (c1 (Seq T)) (c2 (Seq T)) (s (Seq T)) (d1 (Seq T)) (t (Seq T)) (d2 (Seq T)) (emp (Seq T)))
  :signature (Bool) Bool
  (
  ((eo::define ((_v0 (_ (str.++ d1) (_ (str.++ t) (_ (str.++ d2) emp))))) ($eor_str-overlap-endpoints-ctn (_ (= (_ (str.contains (_ (str.++ c1) (_ (str.++ s) (_ (str.++ c2) emp)))) _v0)) (_ (str.contains s) _v0)))) (eo::define ((_v0 (_ (str.++ d1) (_ (str.++ t) (_ (str.++ d2) emp))))) (eo::requires ($str_is_empty emp) true (eo::requires (eo::gt ($str_value_len c1) ($str_overlap_rec ($str_flatten ($str_nary_intro c1)) ($str_flatten ($str_nary_intro d1)))) false (eo::requires (eo::gt ($str_value_len c2) ($str_overlap_rec (eo::list_rev str.++ ($str_flatten ($str_nary_intro c2))) (eo::list_rev str.++ ($str_flatten ($str_nary_intro d2))))) false (_ (= (_ (str.contains (_ (str.++ c1) (_ (str.++ s) (_ (str.++ c2) emp)))) _v0)) (_ (str.contains s) _v0)))))))
  )
)
; program: $eovc_str-overlap-endpoints-ctn
(program $eovc_str-overlap-endpoints-ctn ((T Type) (c1 (Seq T)) (c2 (Seq T)) (s (Seq T)) (d1 (Seq T)) (t (Seq T)) (d2 (Seq T)) (emp (Seq T)))
  :signature ((Seq T) (Seq T) (Seq T) (Seq T) (Seq T) (Seq T) (Seq T)) Bool
  (
  (($eovc_str-overlap-endpoints-ctn emp d2 t d1 s c2 c1) (eo::define ((_v0 (_ (str.++ d1) (_ (str.++ t) (_ (str.++ d2) emp))))) ($eo_requires_false ($eo_model_sat ($eor_str-overlap-endpoints-ctn (_ (= (_ (str.contains (_ (str.++ c1) (_ (str.++ s) (_ (str.++ c2) emp)))) _v0)) (_ (str.contains s) _v0)))) true)))
  )
)
(echo "smt-meta $eovc_str-overlap-endpoints-ctn")
; program: $eor_str-overlap-endpoints-indexof
(program $eor_str-overlap-endpoints-indexof ((T Type) (c (Seq T)) (s (Seq T)) (t (Seq T)) (d (Seq T)) (emp (Seq T)))
  :signature (Bool) Bool
  (
  ((eo::define ((_v0 (_ (str.++ t) (_ (str.++ d) emp)))) ($eor_str-overlap-endpoints-indexof (_ (= (_ (_ (str.indexof (_ (str.++ s) (_ (str.++ c) emp))) _v0) 0)) (_ (_ (str.indexof s) _v0) 0)))) (eo::define ((_v0 (_ (str.++ t) (_ (str.++ d) emp)))) (eo::requires ($str_is_empty emp) true (eo::requires (eo::gt ($str_value_len c) ($str_overlap_rec (eo::list_rev str.++ ($str_flatten ($str_nary_intro c))) (eo::list_rev str.++ ($str_flatten ($str_nary_intro d))))) false (_ (= (_ (_ (str.indexof (_ (str.++ s) (_ (str.++ c) emp))) _v0) 0)) (_ (_ (str.indexof s) _v0) 0))))))
  )
)
; program: $eovc_str-overlap-endpoints-indexof
(program $eovc_str-overlap-endpoints-indexof ((T Type) (c (Seq T)) (s (Seq T)) (t (Seq T)) (d (Seq T)) (emp (Seq T)))
  :signature ((Seq T) (Seq T) (Seq T) (Seq T) (Seq T)) Bool
  (
  (($eovc_str-overlap-endpoints-indexof emp d t s c) (eo::define ((_v0 (_ (str.++ t) (_ (str.++ d) emp)))) ($eo_requires_false ($eo_model_sat ($eor_str-overlap-endpoints-indexof (_ (= (_ (_ (str.indexof (_ (str.++ s) (_ (str.++ c) emp))) _v0) 0)) (_ (_ (str.indexof s) _v0) 0)))) true)))
  )
)
(echo "smt-meta $eovc_str-overlap-endpoints-indexof")
; program: $eor_str-overlap-endpoints-replace
(program $eor_str-overlap-endpoints-replace ((T Type) (c1 (Seq T)) (s (Seq T)) (d1 (Seq T)) (t (Seq T)) (d2 (Seq T)) (r (Seq T)) (c2 (Seq T)) (emp (Seq T)))
  :signature (Bool) Bool
  (
  ((eo::define ((_v0 (_ (str.++ c2) emp))) (eo::define ((_v1 (_ (str.++ d1) (_ (str.++ t) (_ (str.++ d2) emp))))) (eo::define ((_v2 (str.++ c1))) ($eor_str-overlap-endpoints-replace (_ (= (_ (_ (str.replace (_ _v2 (_ (str.++ s) _v0))) _v1) r)) (_ _v2 (_ (str.++ (_ (_ (str.replace s) _v1) r)) _v0))))))) (eo::define ((_v0 (_ (str.++ c2) emp))) (eo::define ((_v1 (_ (str.++ d1) (_ (str.++ t) (_ (str.++ d2) emp))))) (eo::define ((_v2 (str.++ c1))) (eo::requires ($str_is_empty emp) true (eo::requires (eo::gt ($str_value_len c1) ($str_overlap_rec ($str_flatten ($str_nary_intro c1)) ($str_flatten ($str_nary_intro d1)))) false (eo::requires (eo::gt ($str_value_len c2) ($str_overlap_rec (eo::list_rev str.++ ($str_flatten ($str_nary_intro c2))) (eo::list_rev str.++ ($str_flatten ($str_nary_intro d2))))) false (_ (= (_ (_ (str.replace (_ _v2 (_ (str.++ s) _v0))) _v1) r)) (_ _v2 (_ (str.++ (_ (_ (str.replace s) _v1) r)) _v0))))))))))
  )
)
; program: $eovc_str-overlap-endpoints-replace
(program $eovc_str-overlap-endpoints-replace ((T Type) (c1 (Seq T)) (s (Seq T)) (d1 (Seq T)) (t (Seq T)) (d2 (Seq T)) (r (Seq T)) (c2 (Seq T)) (emp (Seq T)))
  :signature ((Seq T) (Seq T) (Seq T) (Seq T) (Seq T) (Seq T) (Seq T) (Seq T)) Bool
  (
  (($eovc_str-overlap-endpoints-replace emp c2 r d2 t d1 s c1) (eo::define ((_v0 (_ (str.++ c2) emp))) (eo::define ((_v1 (_ (str.++ d1) (_ (str.++ t) (_ (str.++ d2) emp))))) (eo::define ((_v2 (str.++ c1))) ($eo_requires_false ($eo_model_sat ($eor_str-overlap-endpoints-replace (_ (= (_ (_ (str.replace (_ _v2 (_ (str.++ s) _v0))) _v1) r)) (_ _v2 (_ (str.++ (_ (_ (str.replace s) _v1) r)) _v0))))) true)))))
  )
)
(echo "smt-meta $eovc_str-overlap-endpoints-replace")
; program: $eor_str-indexof-re-eval
(program $eor_str-indexof-re-eval ((s (Seq Char)) (r RegLan) (n Int) (m Int))
  :signature (Bool) Bool
  (
  (($eor_str-indexof-re-eval (_ (= (_ (_ (str.indexof_re s) r) n)) m)) (eo::define ((_v0 (eo::len s))) (eo::define ((_v1 (eo::extract s n _v0))) (eo::define ((_v2 ($pair_first (eo::requires (eo::is_str _v1) true ($str_first_match_rec _v1 r (_ (re.++ r) (_ (re.++ re.all) (str.to_re ""))) 0 (eo::len _v1)))))) (eo::requires (eo::ite (eo::or (eo::gt n _v0) (eo::is_neg n)) -1 (eo::ite (eo::eq _v2 -1) -1 (eo::add n _v2))) m (_ (= (_ (_ (str.indexof_re s) r) n)) m))))))
  )
)
; program: $eovc_str-indexof-re-eval
(program $eovc_str-indexof-re-eval ((s (Seq Char)) (r RegLan) (n Int) (m Int))
  :signature (Int Int RegLan (Seq Char)) Bool
  (
  (($eovc_str-indexof-re-eval m n r s) ($eo_requires_false ($eo_model_sat ($eor_str-indexof-re-eval (_ (= (_ (_ (str.indexof_re s) r) n)) m))) true))
  )
)
(echo "smt-meta $eovc_str-indexof-re-eval")
; program: $eor_str-replace-re-eval
(program $eor_str-replace-re-eval ((s (Seq Char)) (r RegLan) (t (Seq Char)) (u (Seq Char)))
  :signature (Bool) Bool
  (
  (($eor_str-replace-re-eval (_ (= (_ (_ (str.replace_re s) r) t)) u)) (eo::requires ($str_eval_replace_re s r t (eo::requires (eo::is_str s) true ($str_first_match_rec s r (_ (re.++ r) (_ (re.++ re.all) (str.to_re ""))) 0 (eo::len s)))) u (_ (= (_ (_ (str.replace_re s) r) t)) u)))
  )
)
; program: $eovc_str-replace-re-eval
(program $eovc_str-replace-re-eval ((s (Seq Char)) (r RegLan) (t (Seq Char)) (u (Seq Char)))
  :signature ((Seq Char) (Seq Char) RegLan (Seq Char)) Bool
  (
  (($eovc_str-replace-re-eval u t r s) ($eo_requires_false ($eo_model_sat ($eor_str-replace-re-eval (_ (= (_ (_ (str.replace_re s) r) t)) u))) true))
  )
)
(echo "smt-meta $eovc_str-replace-re-eval")
; program: $eor_str-replace-re-all-eval
(program $eor_str-replace-re-all-eval ((s (Seq Char)) (r RegLan) (t (Seq Char)) (u (Seq Char)))
  :signature (Bool) Bool
  (
  (($eor_str-replace-re-all-eval (_ (= (_ (_ (str.replace_re_all s) r) t)) u)) (eo::define ((_v0 (str.to_re ""))) (eo::define ((_v1 (_ (re.inter r) (_ (re.inter (re.comp _v0)) re.all)))) (eo::requires ($singleton_elim ($str_eval_replace_re_all_rec s _v1 t (eo::requires (eo::is_str s) true ($str_first_match_rec s _v1 (_ (re.++ _v1) (_ (re.++ re.all) _v0)) 0 (eo::len s))))) u (_ (= (_ (_ (str.replace_re_all s) r) t)) u)))))
  )
)
; program: $eovc_str-replace-re-all-eval
(program $eovc_str-replace-re-all-eval ((s (Seq Char)) (r RegLan) (t (Seq Char)) (u (Seq Char)))
  :signature ((Seq Char) (Seq Char) RegLan (Seq Char)) Bool
  (
  (($eovc_str-replace-re-all-eval u t r s) ($eo_requires_false ($eo_model_sat ($eor_str-replace-re-all-eval (_ (= (_ (_ (str.replace_re_all s) r) t)) u))) true))
  )
)
(echo "smt-meta $eovc_str-replace-re-all-eval")
; program: $eor_seq-eval-op
(program $eor_seq-eval-op ((T Type) (t T) (u T))
  :signature (Bool) Bool
  (
  (($eor_seq-eval-op (_ (= t) u)) (eo::requires ($seq_eval t) u (_ (= t) u)))
  )
)
; program: $eovc_seq-eval-op
(program $eovc_seq-eval-op ((T Type) (t T) (u T))
  :signature (T T) Bool
  (
  (($eovc_seq-eval-op u t) ($eo_requires_false ($eo_model_sat ($eor_seq-eval-op (_ (= t) u))) true))
  )
)
(echo "smt-meta $eovc_seq-eval-op")
; program: $eor_sets_singleton_inj
(program $eor_sets_singleton_inj ((T Type) (a T) (b T))
  :signature (Bool) Bool
  (
  (($eor_sets_singleton_inj (_ (= (set.singleton a)) (set.singleton b))) (_ (= a) b))
  )
)
; program: $eovc_sets_singleton_inj
(program $eovc_sets_singleton_inj ((T Type) (a T) (b T))
  :signature (T T) Bool
  (
  (($eovc_sets_singleton_inj b a) (eo::define ((_v0 (_ (= (set.singleton a)) (set.singleton b)))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_sets_singleton_inj _v0)) true))))
  )
)
(echo "smt-meta $eovc_sets_singleton_inj")
; program: $eor_sets_ext
(program $eor_sets_ext ((T Type) (a (Set T)) (b (Set T)))
  :signature (Bool) Bool
  (
  (($eor_sets_ext (not (_ (= a) b))) (eo::define ((_v0 (set.member (_ @sets_deq_diff a b)))) (not (_ (= (_ _v0 a)) (_ _v0 b)))))
  )
)
; program: $eovc_sets_ext
(program $eovc_sets_ext ((T Type) (a (Set T)) (b (Set T)))
  :signature ((Set T) (Set T)) Bool
  (
  (($eovc_sets_ext b a) (eo::define ((_v0 (not (_ (= a) b)))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_sets_ext _v0)) true))))
  )
)
(echo "smt-meta $eovc_sets_ext")
; program: $eor_sets-eval-op
(program $eor_sets-eval-op ((T Type) (a (Set T)) (b (Set T)))
  :signature (Bool) Bool
  (
  (($eor_sets-eval-op (_ (= a) b)) (eo::requires (eo::list_meq $eo_List_cons (eo::list_setof $eo_List_cons ($eval_sets_op a)) ($set_union_to_list b)) true (_ (= a) b)))
  )
)
; program: $eovc_sets-eval-op
(program $eovc_sets-eval-op ((T Type) (a (Set T)) (b (Set T)))
  :signature ((Set T) (Set T)) Bool
  (
  (($eovc_sets-eval-op b a) ($eo_requires_false ($eo_model_sat ($eor_sets-eval-op (_ (= a) b))) true))
  )
)
(echo "smt-meta $eovc_sets-eval-op")
; program: $eor_sets-insert-elim
(program $eor_sets-insert-elim ((es $eo_List) (T Type) (s (Set T)) (t (Set T)))
  :signature (Bool) Bool
  (
  (($eor_sets-insert-elim (_ (= (_ (set.insert es) s)) t)) (eo::requires ($set_eval_insert es s) t (_ (= (_ (set.insert es) s)) t)))
  )
)
; program: $eovc_sets-insert-elim
(program $eovc_sets-insert-elim ((T Type) (es $eo_List) (s (Set T)) (t (Set T)))
  :signature ((Set T) (Set T) $eo_List) Bool
  (
  (($eovc_sets-insert-elim t s es) ($eo_requires_false ($eo_model_sat ($eor_sets-insert-elim (_ (= (_ (set.insert es) s)) t))) true))
  )
)
(echo "smt-meta $eovc_sets-insert-elim")
; program: $eor_ubv-to-int-elim
(program $eor_ubv-to-int-elim ((n Int) (b (BitVec n)) (m Int))
  :signature (Bool) Bool
  (
  (($eor_ubv-to-int-elim (_ (= (ubv_to_int b)) m)) (eo::requires ($singleton_elim ($abconv_ubv_to_int_elim b 0 ($bv_bitwidth (eo::typeof b)) 1)) m (_ (= (ubv_to_int b)) m)))
  )
)
; program: $eovc_ubv-to-int-elim
(program $eovc_ubv-to-int-elim ((n Int) (b (BitVec n)) (m Int))
  :signature (Int (BitVec n)) Bool
  (
  (($eovc_ubv-to-int-elim m b) ($eo_requires_false ($eo_model_sat ($eor_ubv-to-int-elim (_ (= (ubv_to_int b)) m))) true))
  )
)
(echo "smt-meta $eovc_ubv-to-int-elim")
; program: $eor_int-to-bv-elim
(program $eor_int-to-bv-elim ((w Int) (n Int) (b (BitVec w)))
  :signature (Bool) Bool
  (
  (($eor_int-to-bv-elim (_ (= (_ (int_to_bv w) n)) b)) (eo::requires ($singleton_elim ($abconv_int_to_bv_elim n w (eo::ite (eo::is_z w) (eo::ite (eo::is_neg w) 0 ($arith_eval_int_pow_2_rec w)) (int.pow2 w)))) b (_ (= (_ (int_to_bv w) n)) b)))
  )
)
; program: $eovc_int-to-bv-elim
(program $eovc_int-to-bv-elim ((w Int) (n Int) (b (BitVec w)))
  :signature ((BitVec w) Int Int) Bool
  (
  (($eovc_int-to-bv-elim b n w) ($eo_requires_false ($eo_model_sat ($eor_int-to-bv-elim (_ (= (_ (int_to_bv w) n)) b))) true))
  )
)
(echo "smt-meta $eovc_int-to-bv-elim")
; program: $eor_instantiate
(program $eor_instantiate ((F Bool) (xs $eo_List) (ts $eo_List))
  :signature ($eo_List Bool) Bool
  (
  (($eor_instantiate ts (_ (forall xs) F)) ($substitute_simul F xs ts))
  )
)
; program: $eovc_instantiate
(program $eovc_instantiate ((ts $eo_List) (xs $eo_List) (F Bool))
  :signature (Bool $eo_List $eo_List) Bool
  (
  (($eovc_instantiate F xs ts) (eo::define ((_v0 (_ (forall xs) F))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_instantiate ts _v0)) true))))
  )
)
(echo "smt-meta $eovc_instantiate")
; program: $eor_skolemize
(program $eor_skolemize ((x $eo_List) (G Bool))
  :signature (Bool) Bool
  (
  (($eor_skolemize (not (_ (forall x) G))) ($substitute_simul (not G) x ($mk_skolems x (_ (forall x) G) 0)))
  )
)
; program: $eovc_skolemize
(program $eovc_skolemize ((x $eo_List) (G Bool))
  :signature (Bool $eo_List) Bool
  (
  (($eovc_skolemize G x) (eo::define ((_v0 (not (_ (forall x) G)))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_skolemize _v0)) true))))
  )
)
(echo "smt-meta $eovc_skolemize")
; program: $eor_skolem_intro
(program $eor_skolem_intro ((T Type) (x T))
  :signature (T) Bool
  (
  (($eor_skolem_intro (_ @purify x)) (_ (= (_ @purify x)) x))
  )
)
; program: $eovc_skolem_intro
(program $eovc_skolem_intro ((T Type) (x T))
  :signature (T) Bool
  (
  (($eovc_skolem_intro x) ($eo_requires_false ($eo_model_sat ($eor_skolem_intro (_ @purify x))) true))
  )
)
(echo "smt-meta $eovc_skolem_intro")
; program: $eor_alpha_equiv
(program $eor_alpha_equiv ((T Type) (t T) (vs $eo_List) (ts $eo_List))
  :signature (T $eo_List $eo_List) Bool
  (
  (($eor_alpha_equiv t vs ts) (eo::requires ($contains_aterm_list t ts) false (_ (= t) ($substitute_simul t vs ts))))
  )
)
; program: $eovc_alpha_equiv
(program $eovc_alpha_equiv ((T Type) (t T) (vs $eo_List) (ts $eo_List))
  :signature ($eo_List $eo_List T) Bool
  (
  (($eovc_alpha_equiv ts vs t) ($eo_requires_false ($eo_model_sat ($eor_alpha_equiv t vs ts)) true))
  )
)
(echo "smt-meta $eovc_alpha_equiv")
; program: $eor_beta-reduce
(program $eor_beta-reduce ((T Type) (a T) (b T))
  :signature (Bool) Bool
  (
  (($eor_beta-reduce (_ (= a) b)) (eo::requires ($beta_reduce a $eo_List_nil) b (_ (= a) b)))
  )
)
; program: $eovc_beta-reduce
(program $eovc_beta-reduce ((T Type) (a T) (b T))
  :signature (T T) Bool
  (
  (($eovc_beta-reduce b a) ($eo_requires_false ($eo_model_sat ($eor_beta-reduce (_ (= a) b))) true))
  )
)
(echo "smt-meta $eovc_beta-reduce")
; program: $eor_quant_var_reordering
(program $eor_quant_var_reordering ((x $eo_List) (y $eo_List) (F Bool))
  :signature (Bool) Bool
  (
  (($eor_quant_var_reordering (_ (= (_ (forall x) F)) (_ (forall y) F))) (eo::requires (eo::list_meq $eo_List_cons x y) true (_ (= (_ (forall x) F)) (_ (forall y) F))))
  )
)
; program: $eovc_quant_var_reordering
(program $eovc_quant_var_reordering ((x $eo_List) (y $eo_List) (F Bool))
  :signature (Bool $eo_List $eo_List) Bool
  (
  (($eovc_quant_var_reordering F y x) ($eo_requires_false ($eo_model_sat ($eor_quant_var_reordering (_ (= (_ (forall x) F)) (_ (forall y) F)))) true))
  )
)
(echo "smt-meta $eovc_quant_var_reordering")
; program: $eor_exists-elim
(program $eor_exists-elim ((x $eo_List) (F Bool))
  :signature (Bool) Bool
  (
  (($eor_exists-elim (_ (= (_ (exists x) F)) (not (_ (forall x) (not F))))) (_ (= (_ (exists x) F)) (not (_ (forall x) (not F)))))
  )
)
; program: $eovc_exists-elim
(program $eovc_exists-elim ((x $eo_List) (F Bool))
  :signature (Bool $eo_List) Bool
  (
  (($eovc_exists-elim F x) ($eo_requires_false ($eo_model_sat ($eor_exists-elim (_ (= (_ (exists x) F)) (not (_ (forall x) (not F)))))) true))
  )
)
(echo "smt-meta $eovc_exists-elim")
; program: $eor_quant-unused-vars
(program $eor_quant-unused-vars ((Q (-> $eo_List (-> Bool Bool))) (x $eo_List) (F Bool) (G Bool))
  :signature (Bool) Bool
  (
  (($eor_quant-unused-vars (_ (= (_ (Q x) F)) G)) (eo::requires ($mk_quant Q ($mk_quant_unused_vars_rec x F) F) G (_ (= (_ (Q x) F)) G)))
  )
)
; program: $eovc_quant-unused-vars
(program $eovc_quant-unused-vars ((Q (-> $eo_List (-> Bool Bool))) (x $eo_List) (F Bool) (G Bool))
  :signature (Bool Bool $eo_List (-> $eo_List (-> Bool Bool))) Bool
  (
  (($eovc_quant-unused-vars G F x Q) ($eo_requires_false ($eo_model_sat ($eor_quant-unused-vars (_ (= (_ (Q x) F)) G))) true))
  )
)
(echo "smt-meta $eovc_quant-unused-vars")
; program: $eor_quant-merge-prenex
(program $eor_quant-merge-prenex ((Q (-> $eo_List (-> Bool Bool))) (x $eo_List) (F Bool) (G Bool))
  :signature (Bool) Bool
  (
  (($eor_quant-merge-prenex (_ (= (_ (Q x) F)) G)) (eo::define ((_v0 (_ (Q x) F))) (eo::requires (eo::or (eo::eq Q forall) (eo::eq Q exists)) true (eo::requires ($mk_quant_merge_prenex Q _v0 $eo_List_nil) G (_ (= _v0) G)))))
  )
)
; program: $eovc_quant-merge-prenex
(program $eovc_quant-merge-prenex ((Q (-> $eo_List (-> Bool Bool))) (x $eo_List) (F Bool) (G Bool))
  :signature (Bool Bool $eo_List (-> $eo_List (-> Bool Bool))) Bool
  (
  (($eovc_quant-merge-prenex G F x Q) ($eo_requires_false ($eo_model_sat ($eor_quant-merge-prenex (_ (= (_ (Q x) F)) G))) true))
  )
)
(echo "smt-meta $eovc_quant-merge-prenex")
; program: $eor_quant-miniscope-and
(program $eor_quant-miniscope-and ((x $eo_List) (F Bool) (G Bool))
  :signature (Bool) Bool
  (
  (($eor_quant-miniscope-and (_ (= (_ (forall x) F)) G)) (eo::requires ($mk_quant_miniscope_and x F) G (_ (= (_ (forall x) F)) G)))
  )
)
; program: $eovc_quant-miniscope-and
(program $eovc_quant-miniscope-and ((x $eo_List) (F Bool) (G Bool))
  :signature (Bool Bool $eo_List) Bool
  (
  (($eovc_quant-miniscope-and G F x) ($eo_requires_false ($eo_model_sat ($eor_quant-miniscope-and (_ (= (_ (forall x) F)) G))) true))
  )
)
(echo "smt-meta $eovc_quant-miniscope-and")
; program: $eor_quant-miniscope-or
(program $eor_quant-miniscope-or ((x $eo_List) (F Bool) (G Bool))
  :signature (Bool) Bool
  (
  (($eor_quant-miniscope-or (_ (= (_ (forall x) F)) G)) (eo::requires ($is_quant_miniscope_or x F G) true (_ (= (_ (forall x) F)) G)))
  )
)
; program: $eovc_quant-miniscope-or
(program $eovc_quant-miniscope-or ((x $eo_List) (F Bool) (G Bool))
  :signature (Bool Bool $eo_List) Bool
  (
  (($eovc_quant-miniscope-or G F x) ($eo_requires_false ($eo_model_sat ($eor_quant-miniscope-or (_ (= (_ (forall x) F)) G))) true))
  )
)
(echo "smt-meta $eovc_quant-miniscope-or")
; program: $eor_quant-miniscope-ite
(program $eor_quant-miniscope-ite ((A Bool) (F1 Bool) (x $eo_List) (F2 Bool))
  :signature (Bool) Bool
  (
  ((eo::define ((_v0 (forall x))) (eo::define ((_v1 (ite A))) ($eor_quant-miniscope-ite (_ (= (_ _v0 (_ (_ _v1 F1) F2))) (_ (_ _v1 (_ _v0 F1)) (_ _v0 F2)))))) (eo::define ((_v0 (forall x))) (eo::define ((_v1 (ite A))) (eo::requires ($contains_aterm_list A x) false (_ (= (_ _v0 (_ (_ _v1 F1) F2))) (_ (_ _v1 (_ _v0 F1)) (_ _v0 F2)))))))
  )
)
; program: $eovc_quant-miniscope-ite
(program $eovc_quant-miniscope-ite ((A Bool) (F1 Bool) (x $eo_List) (F2 Bool))
  :signature (Bool $eo_List Bool Bool) Bool
  (
  (($eovc_quant-miniscope-ite F2 x F1 A) (eo::define ((_v0 (forall x))) (eo::define ((_v1 (ite A))) ($eo_requires_false ($eo_model_sat ($eor_quant-miniscope-ite (_ (= (_ _v0 (_ (_ _v1 F1) F2))) (_ (_ _v1 (_ _v0 F1)) (_ _v0 F2))))) true))))
  )
)
(echo "smt-meta $eovc_quant-miniscope-ite")
; program: $eor_quant-var-elim-eq
(program $eor_quant-var-elim-eq ((T Type) (x T) (F Bool) (G Bool))
  :signature (Bool) Bool
  (
  (($eor_quant-var-elim-eq (_ (= (_ (forall (_ ($eo_List_cons x) $eo_List_nil)) F)) G)) (eo::requires ($mk_quant_var_elim_eq x F) G (_ (= (_ (forall (_ ($eo_List_cons x) $eo_List_nil)) F)) G)))
  )
)
; program: $eovc_quant-var-elim-eq
(program $eovc_quant-var-elim-eq ((T Type) (x T) (F Bool) (G Bool))
  :signature (Bool Bool T) Bool
  (
  (($eovc_quant-var-elim-eq G F x) ($eo_requires_false ($eo_model_sat ($eor_quant-var-elim-eq (_ (= (_ (forall (_ ($eo_List_cons x) $eo_List_nil)) F)) G))) true))
  )
)
(echo "smt-meta $eovc_quant-var-elim-eq")
; program: $eor_quant-dt-split
(program $eor_quant-dt-split ((T Type) (x T) (ys $eo_List) (F Bool) (G Bool))
  :signature (Bool) Bool
  (
  (($eor_quant-dt-split (_ (= (_ (forall (_ ($eo_List_cons x) ys)) F)) G)) (eo::requires ($is_quant_dt_split x ($dt_get_constructors (eo::typeof x)) ys F G) true (_ (= (_ (forall (_ ($eo_List_cons x) ys)) F)) G)))
  )
)
; program: $eovc_quant-dt-split
(program $eovc_quant-dt-split ((T Type) (x T) (ys $eo_List) (F Bool) (G Bool))
  :signature (Bool Bool $eo_List T) Bool
  (
  (($eovc_quant-dt-split G F ys x) ($eo_requires_false ($eo_model_sat ($eor_quant-dt-split (_ (= (_ (forall (_ ($eo_List_cons x) ys)) F)) G))) true))
  )
)
(echo "smt-meta $eovc_quant-dt-split")
; program: $eor_exists_inv_condition
(program $eor_exists_inv_condition ((n Int) (x (BitVec n)) (R Bool))
  :signature (Bool) Bool
  (
  (($eor_exists_inv_condition (_ (exists (_ ($eo_List_cons x) $eo_List_nil)) R)) (_ (=> ($mk_invertibility_condition x R)) ($substitute x (_ @witness_inv_condition (_ (exists (_ ($eo_List_cons x) $eo_List_nil)) R)) R)))
  )
)
; program: $eovc_exists_inv_condition
(program $eovc_exists_inv_condition ((n Int) (x (BitVec n)) (R Bool))
  :signature (Bool (BitVec n)) Bool
  (
  (($eovc_exists_inv_condition R x) ($eo_requires_false ($eo_model_sat ($eor_exists_inv_condition (_ (exists (_ ($eo_List_cons x) $eo_List_nil)) R))) true))
  )
)
(echo "smt-meta $eovc_exists_inv_condition")
; program: $eor_dt_split
(program $eor_dt_split ((D Type) (x D))
  :signature (D) Bool
  (
  (($eor_dt_split x) ($singleton_elim ($mk_dt_split ($dt_get_constructors (eo::typeof x)) x)))
  )
)
; program: $eovc_dt_split
(program $eovc_dt_split ((D Type) (x D))
  :signature (D) Bool
  (
  (($eovc_dt_split x) ($eo_requires_false ($eo_model_sat ($eor_dt_split x)) true))
  )
)
(echo "smt-meta $eovc_dt_split")
; program: $eor_dt-inst
(program $eor_dt-inst ((T Type) (c T) (D Type) (x D) (t D))
  :signature (Bool) Bool
  (
  (($eor_dt-inst (_ (= (_ (is c) x)) (_ (= x) t))) (eo::requires ($mk_dt_inst (eo::typeof x) c x) t (_ (= (_ (is c) x)) (_ (= x) t))))
  )
)
; program: $eovc_dt-inst
(program $eovc_dt-inst ((D Type) (T Type) (c T) (x D) (t D))
  :signature (D D T) Bool
  (
  (($eovc_dt-inst t x c) ($eo_requires_false ($eo_model_sat ($eor_dt-inst (_ (= (_ (is c) x)) (_ (= x) t)))) true))
  )
)
(echo "smt-meta $eovc_dt-inst")
; program: $eor_dt-collapse-selector
(program $eor_dt-collapse-selector ((S1 Type) (S2 Type) (s (-> S1 S2)) (D Type) (t D) (T Type) (ti T))
  :signature (Bool) Bool
  (
  (($eor_dt-collapse-selector (_ (= (s t)) ti)) (eo::requires ($assoc_nil_nth $eo_List_cons ($dt_arg_list t) (eo::list_find $eo_List_cons ($dt_get_selectors_of_app (eo::typeof t) t) s)) ti (_ (= (s t)) ti)))
  )
)
; program: $eovc_dt-collapse-selector
(program $eovc_dt-collapse-selector ((T Type) (D Type) (S1 Type) (S2 Type) (s (-> S1 S2)) (t D) (ti T))
  :signature (T D (-> S1 S2)) Bool
  (
  (($eovc_dt-collapse-selector ti t s) ($eo_requires_false ($eo_model_sat ($eor_dt-collapse-selector (_ (= (s t)) ti))) true))
  )
)
(echo "smt-meta $eovc_dt-collapse-selector")
; program: $eor_dt-collapse-tester
(program $eor_dt-collapse-tester ((T Type) (c T) (D Type) (t D) (b Bool))
  :signature (Bool) Bool
  (
  (($eor_dt-collapse-tester (_ (= (_ (is c) t)) b)) (eo::requires ($dt_eq_cons c t) b (_ (= (_ (is c) t)) b)))
  )
)
; program: $eovc_dt-collapse-tester
(program $eovc_dt-collapse-tester ((D Type) (T Type) (c T) (t D) (b Bool))
  :signature (Bool D T) Bool
  (
  (($eovc_dt-collapse-tester b t c) ($eo_requires_false ($eo_model_sat ($eor_dt-collapse-tester (_ (= (_ (is c) t)) b))) true))
  )
)
(echo "smt-meta $eovc_dt-collapse-tester")
; program: $eor_dt-collapse-tester-singleton
(program $eor_dt-collapse-tester-singleton ((T Type) (c T) (D Type) (t D))
  :signature (Bool) Bool
  (
  (($eor_dt-collapse-tester-singleton (_ (= (_ (is c) t)) true)) (eo::requires (eo::list_len $eo_List_cons ($dt_get_constructors (eo::typeof t))) 1 (_ (= (_ (is c) t)) true)))
  )
)
; program: $eovc_dt-collapse-tester-singleton
(program $eovc_dt-collapse-tester-singleton ((D Type) (T Type) (c T) (t D))
  :signature (D T) Bool
  (
  (($eovc_dt-collapse-tester-singleton t c) ($eo_requires_false ($eo_model_sat ($eor_dt-collapse-tester-singleton (_ (= (_ (is c) t)) true))) true))
  )
)
(echo "smt-meta $eovc_dt-collapse-tester-singleton")
; program: $eor_dt-cons-eq
(program $eor_dt-cons-eq ((D Type) (t D) (s D) (B Bool))
  :signature (Bool) Bool
  (
  (($eor_dt-cons-eq (_ (= (_ (= t) s)) B)) (eo::requires ($singleton_elim ($mk_dt_cons_eq t s)) B (_ (= (_ (= t) s)) B)))
  )
)
; program: $eovc_dt-cons-eq
(program $eovc_dt-cons-eq ((D Type) (t D) (s D) (B Bool))
  :signature (Bool D D) Bool
  (
  (($eovc_dt-cons-eq B s t) ($eo_requires_false ($eo_model_sat ($eor_dt-cons-eq (_ (= (_ (= t) s)) B))) true))
  )
)
(echo "smt-meta $eovc_dt-cons-eq")
; program: $eor_dt-cons-eq-clash
(program $eor_dt-cons-eq-clash ((D Type) (t D) (s D))
  :signature (Bool) Bool
  (
  (($eor_dt-cons-eq-clash (_ (= (_ (= t) s)) false)) (eo::requires (eo::ite (eo::eq t s) false ($are_distinct_terms_list (_ ($eo_List_cons t) (_ ($eo_List_cons s) $eo_List_nil)) (eo::typeof t))) true (_ (= (_ (= t) s)) false)))
  )
)
; program: $eovc_dt-cons-eq-clash
(program $eovc_dt-cons-eq-clash ((D Type) (t D) (s D))
  :signature (D D) Bool
  (
  (($eovc_dt-cons-eq-clash s t) ($eo_requires_false ($eo_model_sat ($eor_dt-cons-eq-clash (_ (= (_ (= t) s)) false))) true))
  )
)
(echo "smt-meta $eovc_dt-cons-eq-clash")
; program: $eor_dt-cycle
(program $eor_dt-cycle ((D Type) (s D) (t D))
  :signature (Bool) Bool
  (
  (($eor_dt-cycle (_ (= (_ (= s) t)) false)) (eo::requires ($dt_find_cycle_rec t (_ ($eo_List_cons s) $eo_List_nil) $eo_List_nil) true (_ (= (_ (= s) t)) false)))
  )
)
; program: $eovc_dt-cycle
(program $eovc_dt-cycle ((D Type) (s D) (t D))
  :signature (D D) Bool
  (
  (($eovc_dt-cycle t s) ($eo_requires_false ($eo_model_sat ($eor_dt-cycle (_ (= (_ (= s) t)) false))) true))
  )
)
(echo "smt-meta $eovc_dt-cycle")
; program: $eor_dt-collapse-updater
(program $eor_dt-collapse-updater ((D Type) (t D) (s D))
  :signature (Bool) Bool
  (
  (($eor_dt-collapse-updater (_ (= t) s)) (eo::requires ($mk_dt_collapse_updater_rhs t) s (_ (= t) s)))
  )
)
; program: $eovc_dt-collapse-updater
(program $eovc_dt-collapse-updater ((D Type) (t D) (s D))
  :signature (D D) Bool
  (
  (($eovc_dt-collapse-updater s t) ($eo_requires_false ($eo_model_sat ($eor_dt-collapse-updater (_ (= t) s))) true))
  )
)
(echo "smt-meta $eovc_dt-collapse-updater")
; program: $eor_dt-updater-elim
(program $eor_dt-updater-elim ((U1 Type) (U2 Type) (U3 Type) (U4 Type) (u (-> U1 (-> U2 (-> U3 U4)))) (S Type) (s S) (T Type) (a T) (C Type) (c C) (D Type) (tu D) (t D))
  :signature (Bool) Bool
  (
  (($eor_dt-updater-elim (_ (= (_ (_ (u s) t) a)) (_ (_ (ite (_ (is c) t)) tu) t))) (eo::define ((_v0 (_ (_ (u s) t) a))) (eo::requires ($mk_dt_updater_elim_rhs _v0 c ($dt_get_selectors (eo::typeof t) c)) tu (_ (= _v0) (_ (_ (ite (_ (is c) t)) tu) t)))))
  )
)
; program: $eovc_dt-updater-elim
(program $eovc_dt-updater-elim ((D Type) (C Type) (T Type) (S Type) (U1 Type) (U2 Type) (U3 Type) (U4 Type) (u (-> U1 (-> U2 (-> U3 U4)))) (s S) (a T) (c C) (tu D) (t D))
  :signature (D D C T S (-> U1 (-> U2 (-> U3 U4)))) Bool
  (
  (($eovc_dt-updater-elim t tu c a s u) ($eo_requires_false ($eo_model_sat ($eor_dt-updater-elim (_ (= (_ (_ (u s) t) a)) (_ (_ (ite (_ (is c) t)) tu) t)))) true))
  )
)
(echo "smt-meta $eovc_dt-updater-elim")
; program: $eor_arith-div-total-zero-real
(program $eor_arith-div-total-zero-real ((@T0 Type) (t1 @T0))
  :signature (@T0) Bool
  (
  (($eor_arith-div-total-zero-real t1) (_ (= (_ (/_total t1) 0/1)) 0/1))
  )
)
; program: $eovc_arith-div-total-zero-real
(program $eovc_arith-div-total-zero-real ((@T0 Type) (t1 @T0))
  :signature (@T0) Bool
  (
  (($eovc_arith-div-total-zero-real t1) ($eo_requires_false ($eo_model_sat ($eor_arith-div-total-zero-real t1)) true))
  )
)
(echo "smt-meta $eovc_arith-div-total-zero-real")
; program: $eor_arith-div-total-zero-int
(program $eor_arith-div-total-zero-int ((@T0 Type) (t1 @T0))
  :signature (@T0) Bool
  (
  (($eor_arith-div-total-zero-int t1) (_ (= (_ (/_total t1) 0)) 0/1))
  )
)
; program: $eovc_arith-div-total-zero-int
(program $eovc_arith-div-total-zero-int ((@T0 Type) (t1 @T0))
  :signature (@T0) Bool
  (
  (($eovc_arith-div-total-zero-int t1) ($eo_requires_false ($eo_model_sat ($eor_arith-div-total-zero-int t1)) true))
  )
)
(echo "smt-meta $eovc_arith-div-total-zero-int")
; program: $eor_arith-int-div-total
(program $eor_arith-int-div-total ((t1 Int) (s1 Int))
  :signature (Int Int Bool) Bool
  (
  (($eor_arith-int-div-total t1 s1 (_ (= (_ (= s1) 0)) false)) (_ (= (_ (div t1) s1)) (_ (div_total t1) s1)))
  )
)
; program: $eovc_arith-int-div-total
(program $eovc_arith-int-div-total ((t1 Int) (s1 Int))
  :signature (Int Int) Bool
  (
  (($eovc_arith-int-div-total s1 t1) (eo::define ((_v0 (_ (= (_ (= s1) 0)) false))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_arith-int-div-total t1 s1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_arith-int-div-total")
; program: $eor_arith-int-div-total-one
(program $eor_arith-int-div-total-one ((t1 Int))
  :signature (Int) Bool
  (
  (($eor_arith-int-div-total-one t1) (_ (= (_ (div_total t1) 1)) t1))
  )
)
; program: $eovc_arith-int-div-total-one
(program $eovc_arith-int-div-total-one ((t1 Int))
  :signature (Int) Bool
  (
  (($eovc_arith-int-div-total-one t1) ($eo_requires_false ($eo_model_sat ($eor_arith-int-div-total-one t1)) true))
  )
)
(echo "smt-meta $eovc_arith-int-div-total-one")
; program: $eor_arith-int-div-total-zero
(program $eor_arith-int-div-total-zero ((t1 Int))
  :signature (Int) Bool
  (
  (($eor_arith-int-div-total-zero t1) (_ (= (_ (div_total t1) 0)) 0))
  )
)
; program: $eovc_arith-int-div-total-zero
(program $eovc_arith-int-div-total-zero ((t1 Int))
  :signature (Int) Bool
  (
  (($eovc_arith-int-div-total-zero t1) ($eo_requires_false ($eo_model_sat ($eor_arith-int-div-total-zero t1)) true))
  )
)
(echo "smt-meta $eovc_arith-int-div-total-zero")
; program: $eor_arith-int-div-total-neg
(program $eor_arith-int-div-total-neg ((t1 Int) (s1 Int))
  :signature (Int Int Bool) Bool
  (
  (($eor_arith-int-div-total-neg t1 s1 (_ (= (_ (< s1) 0)) true)) (eo::define ((_v0 (div_total t1))) (_ (= (_ _v0 s1)) ($eoo_-.2 (_ _v0 ($eoo_-.2 s1))))))
  )
)
; program: $eovc_arith-int-div-total-neg
(program $eovc_arith-int-div-total-neg ((t1 Int) (s1 Int))
  :signature (Int Int) Bool
  (
  (($eovc_arith-int-div-total-neg s1 t1) (eo::define ((_v0 (_ (= (_ (< s1) 0)) true))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_arith-int-div-total-neg t1 s1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_arith-int-div-total-neg")
; program: $eor_arith-int-mod-total
(program $eor_arith-int-mod-total ((t1 Int) (s1 Int))
  :signature (Int Int Bool) Bool
  (
  (($eor_arith-int-mod-total t1 s1 (_ (= (_ (= s1) 0)) false)) (_ (= (_ (mod t1) s1)) (_ (mod_total t1) s1)))
  )
)
; program: $eovc_arith-int-mod-total
(program $eovc_arith-int-mod-total ((t1 Int) (s1 Int))
  :signature (Int Int) Bool
  (
  (($eovc_arith-int-mod-total s1 t1) (eo::define ((_v0 (_ (= (_ (= s1) 0)) false))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_arith-int-mod-total t1 s1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_arith-int-mod-total")
; program: $eor_arith-int-mod-total-one
(program $eor_arith-int-mod-total-one ((t1 Int))
  :signature (Int) Bool
  (
  (($eor_arith-int-mod-total-one t1) (_ (= (_ (mod_total t1) 1)) 0))
  )
)
; program: $eovc_arith-int-mod-total-one
(program $eovc_arith-int-mod-total-one ((t1 Int))
  :signature (Int) Bool
  (
  (($eovc_arith-int-mod-total-one t1) ($eo_requires_false ($eo_model_sat ($eor_arith-int-mod-total-one t1)) true))
  )
)
(echo "smt-meta $eovc_arith-int-mod-total-one")
; program: $eor_arith-int-mod-total-zero
(program $eor_arith-int-mod-total-zero ((t1 Int))
  :signature (Int) Bool
  (
  (($eor_arith-int-mod-total-zero t1) (_ (= (_ (mod_total t1) 0)) t1))
  )
)
; program: $eovc_arith-int-mod-total-zero
(program $eovc_arith-int-mod-total-zero ((t1 Int))
  :signature (Int) Bool
  (
  (($eovc_arith-int-mod-total-zero t1) ($eo_requires_false ($eo_model_sat ($eor_arith-int-mod-total-zero t1)) true))
  )
)
(echo "smt-meta $eovc_arith-int-mod-total-zero")
; program: $eor_arith-int-mod-total-neg
(program $eor_arith-int-mod-total-neg ((t1 Int) (s1 Int))
  :signature (Int Int Bool) Bool
  (
  (($eor_arith-int-mod-total-neg t1 s1 (_ (= (_ (< s1) 0)) true)) (eo::define ((_v0 (mod_total t1))) (_ (= (_ _v0 s1)) (_ _v0 ($eoo_-.2 s1)))))
  )
)
; program: $eovc_arith-int-mod-total-neg
(program $eovc_arith-int-mod-total-neg ((t1 Int) (s1 Int))
  :signature (Int Int) Bool
  (
  (($eovc_arith-int-mod-total-neg s1 t1) (eo::define ((_v0 (_ (= (_ (< s1) 0)) true))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_arith-int-mod-total-neg t1 s1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_arith-int-mod-total-neg")
; program: $eor_arith-elim-gt
(program $eor_arith-elim-gt ((@T0 Type) (@T1 Type) (s1 @T1) (t1 @T0))
  :signature (@T0 @T1) Bool
  (
  (($eor_arith-elim-gt t1 s1) (_ (= (_ (> t1) s1)) (not (_ (>= s1) t1))))
  )
)
; program: $eovc_arith-elim-gt
(program $eovc_arith-elim-gt ((@T1 Type) (@T0 Type) (t1 @T0) (s1 @T1))
  :signature (@T1 @T0) Bool
  (
  (($eovc_arith-elim-gt s1 t1) ($eo_requires_false ($eo_model_sat ($eor_arith-elim-gt t1 s1)) true))
  )
)
(echo "smt-meta $eovc_arith-elim-gt")
; program: $eor_arith-elim-lt
(program $eor_arith-elim-lt ((@T0 Type) (@T1 Type) (t1 @T0) (s1 @T1))
  :signature (@T0 @T1) Bool
  (
  (($eor_arith-elim-lt t1 s1) (_ (= (_ (< t1) s1)) (not (_ (>= t1) s1))))
  )
)
; program: $eovc_arith-elim-lt
(program $eovc_arith-elim-lt ((@T1 Type) (@T0 Type) (t1 @T0) (s1 @T1))
  :signature (@T1 @T0) Bool
  (
  (($eovc_arith-elim-lt s1 t1) ($eo_requires_false ($eo_model_sat ($eor_arith-elim-lt t1 s1)) true))
  )
)
(echo "smt-meta $eovc_arith-elim-lt")
; program: $eor_arith-elim-int-gt
(program $eor_arith-elim-int-gt ((t1 Int) (s1 Int))
  :signature (Int Int) Bool
  (
  (($eor_arith-elim-int-gt t1 s1) (_ (= (_ (> t1) s1)) (_ (>= t1) (_ (+ s1) (_ (+ 1) 0)))))
  )
)
; program: $eovc_arith-elim-int-gt
(program $eovc_arith-elim-int-gt ((t1 Int) (s1 Int))
  :signature (Int Int) Bool
  (
  (($eovc_arith-elim-int-gt s1 t1) ($eo_requires_false ($eo_model_sat ($eor_arith-elim-int-gt t1 s1)) true))
  )
)
(echo "smt-meta $eovc_arith-elim-int-gt")
; program: $eor_arith-elim-int-lt
(program $eor_arith-elim-int-lt ((s1 Int) (t1 Int))
  :signature (Int Int) Bool
  (
  (($eor_arith-elim-int-lt t1 s1) (_ (= (_ (< t1) s1)) (_ (>= s1) (_ (+ t1) (_ (+ 1) 0)))))
  )
)
; program: $eovc_arith-elim-int-lt
(program $eovc_arith-elim-int-lt ((t1 Int) (s1 Int))
  :signature (Int Int) Bool
  (
  (($eovc_arith-elim-int-lt s1 t1) ($eo_requires_false ($eo_model_sat ($eor_arith-elim-int-lt t1 s1)) true))
  )
)
(echo "smt-meta $eovc_arith-elim-int-lt")
; program: $eor_arith-elim-leq
(program $eor_arith-elim-leq ((@T0 Type) (@T1 Type) (s1 @T1) (t1 @T0))
  :signature (@T0 @T1) Bool
  (
  (($eor_arith-elim-leq t1 s1) (_ (= (_ (<= t1) s1)) (_ (>= s1) t1)))
  )
)
; program: $eovc_arith-elim-leq
(program $eovc_arith-elim-leq ((@T1 Type) (@T0 Type) (t1 @T0) (s1 @T1))
  :signature (@T1 @T0) Bool
  (
  (($eovc_arith-elim-leq s1 t1) ($eo_requires_false ($eo_model_sat ($eor_arith-elim-leq t1 s1)) true))
  )
)
(echo "smt-meta $eovc_arith-elim-leq")
; program: $eor_arith-leq-norm
(program $eor_arith-leq-norm ((t1 Int) (s1 Int))
  :signature (Int Int) Bool
  (
  (($eor_arith-leq-norm t1 s1) (_ (= (_ (<= t1) s1)) (not (_ (>= t1) (_ (+ s1) (_ (+ 1) 0))))))
  )
)
; program: $eovc_arith-leq-norm
(program $eovc_arith-leq-norm ((t1 Int) (s1 Int))
  :signature (Int Int) Bool
  (
  (($eovc_arith-leq-norm s1 t1) ($eo_requires_false ($eo_model_sat ($eor_arith-leq-norm t1 s1)) true))
  )
)
(echo "smt-meta $eovc_arith-leq-norm")
; program: $eor_arith-geq-tighten
(program $eor_arith-geq-tighten ((s1 Int) (t1 Int))
  :signature (Int Int) Bool
  (
  (($eor_arith-geq-tighten t1 s1) (_ (= (not (_ (>= t1) s1))) (_ (>= s1) (_ (+ t1) (_ (+ 1) 0)))))
  )
)
; program: $eovc_arith-geq-tighten
(program $eovc_arith-geq-tighten ((t1 Int) (s1 Int))
  :signature (Int Int) Bool
  (
  (($eovc_arith-geq-tighten s1 t1) ($eo_requires_false ($eo_model_sat ($eor_arith-geq-tighten t1 s1)) true))
  )
)
(echo "smt-meta $eovc_arith-geq-tighten")
; program: $eor_arith-geq-norm1-int
(program $eor_arith-geq-norm1-int ((t1 Int) (s1 Int))
  :signature (Int Int) Bool
  (
  (($eor_arith-geq-norm1-int t1 s1) (_ (= (_ (>= t1) s1)) (_ (>= (_ (- t1) s1)) 0)))
  )
)
; program: $eovc_arith-geq-norm1-int
(program $eovc_arith-geq-norm1-int ((t1 Int) (s1 Int))
  :signature (Int Int) Bool
  (
  (($eovc_arith-geq-norm1-int s1 t1) ($eo_requires_false ($eo_model_sat ($eor_arith-geq-norm1-int t1 s1)) true))
  )
)
(echo "smt-meta $eovc_arith-geq-norm1-int")
; program: $eor_arith-geq-norm1-real
(program $eor_arith-geq-norm1-real ((t1 Real) (s1 Real))
  :signature (Real Real) Bool
  (
  (($eor_arith-geq-norm1-real t1 s1) (_ (= (_ (>= t1) s1)) (_ (>= (_ (- t1) s1)) 0/1)))
  )
)
; program: $eovc_arith-geq-norm1-real
(program $eovc_arith-geq-norm1-real ((t1 Real) (s1 Real))
  :signature (Real Real) Bool
  (
  (($eovc_arith-geq-norm1-real s1 t1) ($eo_requires_false ($eo_model_sat ($eor_arith-geq-norm1-real t1 s1)) true))
  )
)
(echo "smt-meta $eovc_arith-geq-norm1-real")
; program: $eor_arith-eq-elim-real
(program $eor_arith-eq-elim-real ((t1 Real) (s1 Real))
  :signature (Real Real) Bool
  (
  (($eor_arith-eq-elim-real t1 s1) (_ (= (_ (= t1) s1)) (_ (and (_ (>= t1) s1)) (_ (and (_ (<= t1) s1)) true))))
  )
)
; program: $eovc_arith-eq-elim-real
(program $eovc_arith-eq-elim-real ((t1 Real) (s1 Real))
  :signature (Real Real) Bool
  (
  (($eovc_arith-eq-elim-real s1 t1) ($eo_requires_false ($eo_model_sat ($eor_arith-eq-elim-real t1 s1)) true))
  )
)
(echo "smt-meta $eovc_arith-eq-elim-real")
; program: $eor_arith-eq-elim-int
(program $eor_arith-eq-elim-int ((t1 Int) (s1 Int))
  :signature (Int Int) Bool
  (
  (($eor_arith-eq-elim-int t1 s1) (_ (= (_ (= t1) s1)) (_ (and (_ (>= t1) s1)) (_ (and (_ (<= t1) s1)) true))))
  )
)
; program: $eovc_arith-eq-elim-int
(program $eovc_arith-eq-elim-int ((t1 Int) (s1 Int))
  :signature (Int Int) Bool
  (
  (($eovc_arith-eq-elim-int s1 t1) ($eo_requires_false ($eo_model_sat ($eor_arith-eq-elim-int t1 s1)) true))
  )
)
(echo "smt-meta $eovc_arith-eq-elim-int")
; program: $eor_arith-to-int-elim
(program $eor_arith-to-int-elim ((x1 Int))
  :signature (Int) Bool
  (
  (($eor_arith-to-int-elim x1) (_ (= (to_int x1)) x1))
  )
)
; program: $eovc_arith-to-int-elim
(program $eovc_arith-to-int-elim ((x1 Int))
  :signature (Int) Bool
  (
  (($eovc_arith-to-int-elim x1) ($eo_requires_false ($eo_model_sat ($eor_arith-to-int-elim x1)) true))
  )
)
(echo "smt-meta $eovc_arith-to-int-elim")
; program: $eor_arith-to-int-elim-to-real
(program $eor_arith-to-int-elim-to-real ((@T0 Type) (x1 @T0))
  :signature (@T0) Bool
  (
  (($eor_arith-to-int-elim-to-real x1) (_ (= (to_int (to_real x1))) (to_int x1)))
  )
)
; program: $eovc_arith-to-int-elim-to-real
(program $eovc_arith-to-int-elim-to-real ((@T0 Type) (x1 @T0))
  :signature (@T0) Bool
  (
  (($eovc_arith-to-int-elim-to-real x1) ($eo_requires_false ($eo_model_sat ($eor_arith-to-int-elim-to-real x1)) true))
  )
)
(echo "smt-meta $eovc_arith-to-int-elim-to-real")
; program: $eor_arith-div-elim-to-real1
(program $eor_arith-div-elim-to-real1 ((@T0 Type) (@T1 Type) (x1 @T0) (y1 @T1))
  :signature (@T0 @T1) Bool
  (
  (($eor_arith-div-elim-to-real1 x1 y1) (_ (= (_ (/ (to_real x1)) y1)) (_ (/ x1) y1)))
  )
)
; program: $eovc_arith-div-elim-to-real1
(program $eovc_arith-div-elim-to-real1 ((@T1 Type) (@T0 Type) (x1 @T0) (y1 @T1))
  :signature (@T1 @T0) Bool
  (
  (($eovc_arith-div-elim-to-real1 y1 x1) ($eo_requires_false ($eo_model_sat ($eor_arith-div-elim-to-real1 x1 y1)) true))
  )
)
(echo "smt-meta $eovc_arith-div-elim-to-real1")
; program: $eor_arith-div-elim-to-real2
(program $eor_arith-div-elim-to-real2 ((@T0 Type) (@T1 Type) (x1 @T0) (y1 @T1))
  :signature (@T0 @T1) Bool
  (
  (($eor_arith-div-elim-to-real2 x1 y1) (eo::define ((_v0 (/ x1))) (_ (= (_ _v0 (to_real y1))) (_ _v0 y1))))
  )
)
; program: $eovc_arith-div-elim-to-real2
(program $eovc_arith-div-elim-to-real2 ((@T1 Type) (@T0 Type) (x1 @T0) (y1 @T1))
  :signature (@T1 @T0) Bool
  (
  (($eovc_arith-div-elim-to-real2 y1 x1) ($eo_requires_false ($eo_model_sat ($eor_arith-div-elim-to-real2 x1 y1)) true))
  )
)
(echo "smt-meta $eovc_arith-div-elim-to-real2")
; program: $eor_arith-mod-over-mod
(program $eor_arith-mod-over-mod ((ts1 Int) (r1 Int) (ss1 Int) (c1 Int))
  :signature (Int Int Int Int Bool) Bool
  (
  (($eor_arith-mod-over-mod c1 ts1 r1 ss1 (_ (= (_ (= c1) 0)) false)) (_ (= (_ (mod_total (eo::list_concat + ts1 (_ (+ (_ (mod_total r1) c1)) ss1))) c1)) (_ (mod_total ($singleton_elim (eo::list_concat + ts1 (_ (+ r1) ss1)))) c1)))
  )
)
; program: $eovc_arith-mod-over-mod
(program $eovc_arith-mod-over-mod ((ts1 Int) (r1 Int) (ss1 Int) (c1 Int))
  :signature (Int Int Int Int) Bool
  (
  (($eovc_arith-mod-over-mod c1 ss1 r1 ts1) (eo::define ((_v0 (_ (= (_ (= c1) 0)) false))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_arith-mod-over-mod c1 ts1 r1 ss1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_arith-mod-over-mod")
; program: $eor_arith-int-eq-conflict
(program $eor_arith-int-eq-conflict ((t1 Int) (c1 Real))
  :signature (Int Real Bool) Bool
  (
  (($eor_arith-int-eq-conflict t1 c1 (_ (= (_ (= (to_real (to_int c1))) c1)) false)) (_ (= (_ (= (to_real t1)) c1)) false))
  )
)
; program: $eovc_arith-int-eq-conflict
(program $eovc_arith-int-eq-conflict ((t1 Int) (c1 Real))
  :signature (Real Int) Bool
  (
  (($eovc_arith-int-eq-conflict c1 t1) (eo::define ((_v0 (_ (= (_ (= (to_real (to_int c1))) c1)) false))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_arith-int-eq-conflict t1 c1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_arith-int-eq-conflict")
; program: $eor_arith-int-geq-tighten
(program $eor_arith-int-geq-tighten ((c1 Real) (t1 Int) (cc1 Int))
  :signature (Int Real Int Bool Bool) Bool
  (
  ((eo::define ((_v0 (to_int c1))) ($eor_arith-int-geq-tighten t1 c1 cc1 (_ (= (_ (= (to_real _v0)) c1)) false) (_ (= cc1) (_ (+ _v0) (_ (+ 1) 0))))) (_ (= (_ (>= (to_real t1)) c1)) (_ (>= t1) cc1)))
  )
)
; program: $eovc_arith-int-geq-tighten
(program $eovc_arith-int-geq-tighten ((t1 Int) (cc1 Int) (c1 Real))
  :signature (Real Int Int) Bool
  (
  (($eovc_arith-int-geq-tighten c1 cc1 t1) (eo::define ((_v0 (to_int c1))) (eo::define ((_v1 (_ (= cc1) (_ (+ _v0) (_ (+ 1) 0))))) (eo::define ((_v2 (_ (= (_ (= (to_real _v0)) c1)) false))) ($eo_requires_true ($eo_model_sat _v2) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_false ($eo_model_sat ($eor_arith-int-geq-tighten t1 c1 cc1 _v2 _v1)) true)))))))
  )
)
(echo "smt-meta $eovc_arith-int-geq-tighten")
; program: $eor_arith-divisible-elim
(program $eor_arith-divisible-elim ((t1 Int) (n1 Int))
  :signature (Int Int Bool) Bool
  (
  (($eor_arith-divisible-elim n1 t1 (_ (= (_ (= n1) 0)) false)) (_ (= (_ (divisible n1) t1)) (_ (= (_ (mod_total t1) n1)) 0)))
  )
)
; program: $eovc_arith-divisible-elim
(program $eovc_arith-divisible-elim ((t1 Int) (n1 Int))
  :signature (Int Int) Bool
  (
  (($eovc_arith-divisible-elim n1 t1) (eo::define ((_v0 (_ (= (_ (= n1) 0)) false))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_arith-divisible-elim n1 t1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_arith-divisible-elim")
; program: $eor_arith-abs-eq
(program $eor_arith-abs-eq ((@T0 Type) (@T1 Type) (x1 @T0) (y1 @T1))
  :signature (@T0 @T1) Bool
  (
  (($eor_arith-abs-eq x1 y1) (eo::define ((_v0 (= x1))) (_ (= (_ (= (abs x1)) (abs y1))) (_ (or (_ _v0 y1)) (_ (or (_ _v0 ($eoo_-.2 y1))) false)))))
  )
)
; program: $eovc_arith-abs-eq
(program $eovc_arith-abs-eq ((@T1 Type) (@T0 Type) (x1 @T0) (y1 @T1))
  :signature (@T1 @T0) Bool
  (
  (($eovc_arith-abs-eq y1 x1) ($eo_requires_false ($eo_model_sat ($eor_arith-abs-eq x1 y1)) true))
  )
)
(echo "smt-meta $eovc_arith-abs-eq")
; program: $eor_arith-abs-int-gt
(program $eor_arith-abs-int-gt ((x1 Int) (y1 Int))
  :signature (Int Int) Bool
  (
  (($eor_arith-abs-int-gt x1 y1) (eo::define ((_v0 ($eoo_-.2 y1))) (eo::define ((_v1 (> ($eoo_-.2 x1)))) (eo::define ((_v2 (ite (_ (>= y1) 0)))) (eo::define ((_v3 (> x1))) (_ (= (_ (> (abs x1)) (abs y1))) (_ (_ (ite (_ (>= x1) 0)) (_ (_ _v2 (_ _v3 y1)) (_ _v3 _v0))) (_ (_ _v2 (_ _v1 y1)) (_ _v1 _v0)))))))))
  )
)
; program: $eovc_arith-abs-int-gt
(program $eovc_arith-abs-int-gt ((x1 Int) (y1 Int))
  :signature (Int Int) Bool
  (
  (($eovc_arith-abs-int-gt y1 x1) ($eo_requires_false ($eo_model_sat ($eor_arith-abs-int-gt x1 y1)) true))
  )
)
(echo "smt-meta $eovc_arith-abs-int-gt")
; program: $eor_arith-abs-real-gt
(program $eor_arith-abs-real-gt ((x1 Real) (y1 Real))
  :signature (Real Real) Bool
  (
  (($eor_arith-abs-real-gt x1 y1) (eo::define ((_v0 ($eoo_-.2 y1))) (eo::define ((_v1 (> ($eoo_-.2 x1)))) (eo::define ((_v2 (ite (_ (>= y1) 0/1)))) (eo::define ((_v3 (> x1))) (_ (= (_ (> (abs x1)) (abs y1))) (_ (_ (ite (_ (>= x1) 0/1)) (_ (_ _v2 (_ _v3 y1)) (_ _v3 _v0))) (_ (_ _v2 (_ _v1 y1)) (_ _v1 _v0)))))))))
  )
)
; program: $eovc_arith-abs-real-gt
(program $eovc_arith-abs-real-gt ((x1 Real) (y1 Real))
  :signature (Real Real) Bool
  (
  (($eovc_arith-abs-real-gt y1 x1) ($eo_requires_false ($eo_model_sat ($eor_arith-abs-real-gt x1 y1)) true))
  )
)
(echo "smt-meta $eovc_arith-abs-real-gt")
; program: $eor_arith-geq-ite-lift
(program $eor_arith-geq-ite-lift ((@T0 Type) (@T1 Type) (@T2 Type) (C1 Bool) (t1 @T0) (s1 @T1) (r1 @T2))
  :signature (Bool @T0 @T1 @T2) Bool
  (
  (($eor_arith-geq-ite-lift C1 t1 s1 r1) (eo::define ((_v0 (ite C1))) (_ (= (_ (>= (_ (_ _v0 t1) s1)) r1)) (_ (_ _v0 (_ (>= t1) r1)) (_ (>= s1) r1)))))
  )
)
; program: $eovc_arith-geq-ite-lift
(program $eovc_arith-geq-ite-lift ((@T2 Type) (@T1 Type) (@T0 Type) (C1 Bool) (t1 @T0) (s1 @T1) (r1 @T2))
  :signature (@T2 @T1 @T0 Bool) Bool
  (
  (($eovc_arith-geq-ite-lift r1 s1 t1 C1) ($eo_requires_false ($eo_model_sat ($eor_arith-geq-ite-lift C1 t1 s1 r1)) true))
  )
)
(echo "smt-meta $eovc_arith-geq-ite-lift")
; program: $eor_arith-leq-ite-lift
(program $eor_arith-leq-ite-lift ((@T0 Type) (@T1 Type) (@T2 Type) (C1 Bool) (t1 @T0) (s1 @T1) (r1 @T2))
  :signature (Bool @T0 @T1 @T2) Bool
  (
  (($eor_arith-leq-ite-lift C1 t1 s1 r1) (eo::define ((_v0 (ite C1))) (_ (= (_ (<= (_ (_ _v0 t1) s1)) r1)) (_ (_ _v0 (_ (<= t1) r1)) (_ (<= s1) r1)))))
  )
)
; program: $eovc_arith-leq-ite-lift
(program $eovc_arith-leq-ite-lift ((@T2 Type) (@T1 Type) (@T0 Type) (C1 Bool) (t1 @T0) (s1 @T1) (r1 @T2))
  :signature (@T2 @T1 @T0 Bool) Bool
  (
  (($eovc_arith-leq-ite-lift r1 s1 t1 C1) ($eo_requires_false ($eo_model_sat ($eor_arith-leq-ite-lift C1 t1 s1 r1)) true))
  )
)
(echo "smt-meta $eovc_arith-leq-ite-lift")
; program: $eor_arith-min-lt1
(program $eor_arith-min-lt1 ((@T0 Type) (@T1 Type) (s1 @T1) (t1 @T0))
  :signature (@T0 @T1) Bool
  (
  (($eor_arith-min-lt1 t1 s1) (_ (= (_ (<= (_ (_ (ite (_ (< t1) s1)) t1) s1)) t1)) true))
  )
)
; program: $eovc_arith-min-lt1
(program $eovc_arith-min-lt1 ((@T1 Type) (@T0 Type) (t1 @T0) (s1 @T1))
  :signature (@T1 @T0) Bool
  (
  (($eovc_arith-min-lt1 s1 t1) ($eo_requires_false ($eo_model_sat ($eor_arith-min-lt1 t1 s1)) true))
  )
)
(echo "smt-meta $eovc_arith-min-lt1")
; program: $eor_arith-min-lt2
(program $eor_arith-min-lt2 ((@T0 Type) (@T1 Type) (t1 @T0) (s1 @T1))
  :signature (@T0 @T1) Bool
  (
  (($eor_arith-min-lt2 t1 s1) (_ (= (_ (<= (_ (_ (ite (_ (< t1) s1)) t1) s1)) s1)) true))
  )
)
; program: $eovc_arith-min-lt2
(program $eovc_arith-min-lt2 ((@T1 Type) (@T0 Type) (t1 @T0) (s1 @T1))
  :signature (@T1 @T0) Bool
  (
  (($eovc_arith-min-lt2 s1 t1) ($eo_requires_false ($eo_model_sat ($eor_arith-min-lt2 t1 s1)) true))
  )
)
(echo "smt-meta $eovc_arith-min-lt2")
; program: $eor_arith-max-geq1
(program $eor_arith-max-geq1 ((@T0 Type) (@T1 Type) (s1 @T1) (t1 @T0))
  :signature (@T0 @T1) Bool
  (
  (($eor_arith-max-geq1 t1 s1) (_ (= (_ (>= (_ (_ (ite (_ (>= t1) s1)) t1) s1)) t1)) true))
  )
)
; program: $eovc_arith-max-geq1
(program $eovc_arith-max-geq1 ((@T1 Type) (@T0 Type) (t1 @T0) (s1 @T1))
  :signature (@T1 @T0) Bool
  (
  (($eovc_arith-max-geq1 s1 t1) ($eo_requires_false ($eo_model_sat ($eor_arith-max-geq1 t1 s1)) true))
  )
)
(echo "smt-meta $eovc_arith-max-geq1")
; program: $eor_arith-max-geq2
(program $eor_arith-max-geq2 ((@T0 Type) (@T1 Type) (t1 @T0) (s1 @T1))
  :signature (@T0 @T1) Bool
  (
  (($eor_arith-max-geq2 t1 s1) (_ (= (_ (>= (_ (_ (ite (_ (>= t1) s1)) t1) s1)) s1)) true))
  )
)
; program: $eovc_arith-max-geq2
(program $eovc_arith-max-geq2 ((@T1 Type) (@T0 Type) (t1 @T0) (s1 @T1))
  :signature (@T1 @T0) Bool
  (
  (($eovc_arith-max-geq2 s1 t1) ($eo_requires_false ($eo_model_sat ($eor_arith-max-geq2 t1 s1)) true))
  )
)
(echo "smt-meta $eovc_arith-max-geq2")
; program: $eor_array-read-over-write
(program $eor_array-read-over-write ((@T0 Type) (@T1 Type) (@T2 Type) (@T3 Type) (t1 (_ (Array @T0) @T1)) (i1 @T2) (e1 @T3))
  :signature ((_ (Array @T0) @T1) @T2 @T3) Bool
  (
  (($eor_array-read-over-write t1 i1 e1) (_ (= (_ (select (_ (_ (store t1) i1) e1)) i1)) e1))
  )
)
; program: $eovc_array-read-over-write
(program $eovc_array-read-over-write ((@T3 Type) (@T2 Type) (@T0 Type) (@T1 Type) (t1 (_ (Array @T0) @T1)) (i1 @T2) (e1 @T3))
  :signature (@T3 @T2 (_ (Array @T0) @T1)) Bool
  (
  (($eovc_array-read-over-write e1 i1 t1) ($eo_requires_false ($eo_model_sat ($eor_array-read-over-write t1 i1 e1)) true))
  )
)
(echo "smt-meta $eovc_array-read-over-write")
; program: $eor_array-read-over-write2
(program $eor_array-read-over-write2 ((@T0 Type) (@T1 Type) (@T2 Type) (@T3 Type) (@T4 Type) (i1 @T2) (e1 @T4) (t1 (_ (Array @T0) @T1)) (j1 @T3))
  :signature ((_ (Array @T0) @T1) @T2 @T3 @T4 Bool) Bool
  (
  (($eor_array-read-over-write2 t1 i1 j1 e1 (_ (= (_ (= i1) j1)) false)) (_ (= (_ (select (_ (_ (store t1) i1) e1)) j1)) (_ (select t1) j1)))
  )
)
; program: $eovc_array-read-over-write2
(program $eovc_array-read-over-write2 ((@T3 Type) (@T2 Type) (@T4 Type) (@T0 Type) (@T1 Type) (t1 (_ (Array @T0) @T1)) (e1 @T4) (i1 @T2) (j1 @T3))
  :signature (@T3 @T2 @T4 (_ (Array @T0) @T1)) Bool
  (
  (($eovc_array-read-over-write2 j1 i1 e1 t1) (eo::define ((_v0 (_ (= (_ (= i1) j1)) false))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_array-read-over-write2 t1 i1 j1 e1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_array-read-over-write2")
; program: $eor_array-store-overwrite
(program $eor_array-store-overwrite ((@T0 Type) (@T1 Type) (@T2 Type) (@T3 Type) (@T4 Type) (e1 @T3) (t1 (_ (Array @T0) @T1)) (i1 @T2) (f1 @T4))
  :signature ((_ (Array @T0) @T1) @T2 @T3 @T4) Bool
  (
  (($eor_array-store-overwrite t1 i1 e1 f1) (eo::define ((_v0 (_ (store t1) i1))) (_ (= (_ (_ (store (_ _v0 e1)) i1) f1)) (_ _v0 f1))))
  )
)
; program: $eovc_array-store-overwrite
(program $eovc_array-store-overwrite ((@T4 Type) (@T3 Type) (@T2 Type) (@T0 Type) (@T1 Type) (t1 (_ (Array @T0) @T1)) (i1 @T2) (e1 @T3) (f1 @T4))
  :signature (@T4 @T3 @T2 (_ (Array @T0) @T1)) Bool
  (
  (($eovc_array-store-overwrite f1 e1 i1 t1) ($eo_requires_false ($eo_model_sat ($eor_array-store-overwrite t1 i1 e1 f1)) true))
  )
)
(echo "smt-meta $eovc_array-store-overwrite")
; program: $eor_array-store-self
(program $eor_array-store-self ((@T0 Type) (@T1 Type) (@T2 Type) (i1 @T2) (t1 (_ (Array @T0) @T1)))
  :signature ((_ (Array @T0) @T1) @T2) Bool
  (
  (($eor_array-store-self t1 i1) (_ (= (_ (_ (store t1) i1) (_ (select t1) i1))) t1))
  )
)
; program: $eovc_array-store-self
(program $eovc_array-store-self ((@T2 Type) (@T0 Type) (@T1 Type) (t1 (_ (Array @T0) @T1)) (i1 @T2))
  :signature (@T2 (_ (Array @T0) @T1)) Bool
  (
  (($eovc_array-store-self i1 t1) ($eo_requires_false ($eo_model_sat ($eor_array-store-self t1 i1)) true))
  )
)
(echo "smt-meta $eovc_array-store-self")
; program: $eor_array-read-over-write-split
(program $eor_array-read-over-write-split ((@T0 Type) (@T1 Type) (@T2 Type) (@T3 Type) (@T4 Type) (j1 @T4) (e1 @T3) (t1 (_ (Array @T0) @T1)) (i1 @T2))
  :signature ((_ (Array @T0) @T1) @T2 @T3 @T4) Bool
  (
  (($eor_array-read-over-write-split t1 i1 e1 j1) (_ (= (_ (select (_ (_ (store t1) j1) e1)) i1)) (_ (_ (ite (_ (= i1) j1)) e1) (_ (select t1) i1))))
  )
)
; program: $eovc_array-read-over-write-split
(program $eovc_array-read-over-write-split ((@T4 Type) (@T3 Type) (@T2 Type) (@T0 Type) (@T1 Type) (t1 (_ (Array @T0) @T1)) (i1 @T2) (e1 @T3) (j1 @T4))
  :signature (@T4 @T3 @T2 (_ (Array @T0) @T1)) Bool
  (
  (($eovc_array-read-over-write-split j1 e1 i1 t1) ($eo_requires_false ($eo_model_sat ($eor_array-read-over-write-split t1 i1 e1 j1)) true))
  )
)
(echo "smt-meta $eovc_array-read-over-write-split")
; program: $eor_array-store-swap
(program $eor_array-store-swap ((@T0 Type) (@T1 Type) (@T2 Type) (@T3 Type) (@T4 Type) (@T5 Type) (t1 (_ (Array @T0) @T1)) (j1 @T3) (f1 @T5) (i1 @T2) (e1 @T4))
  :signature ((_ (Array @T0) @T1) @T2 @T3 @T4 @T5 Bool) Bool
  (
  (($eor_array-store-swap t1 i1 j1 e1 f1 (_ (= (_ (= i1) j1)) false)) (eo::define ((_v0 (store t1))) (_ (= (_ (_ (store (_ (_ _v0 i1) e1)) j1) f1)) (_ (_ (store (_ (_ _v0 j1) f1)) i1) e1))))
  )
)
; program: $eovc_array-store-swap
(program $eovc_array-store-swap ((@T3 Type) (@T2 Type) (@T5 Type) (@T4 Type) (@T0 Type) (@T1 Type) (t1 (_ (Array @T0) @T1)) (e1 @T4) (f1 @T5) (i1 @T2) (j1 @T3))
  :signature (@T3 @T2 @T5 @T4 (_ (Array @T0) @T1)) Bool
  (
  (($eovc_array-store-swap j1 i1 f1 e1 t1) (eo::define ((_v0 (_ (= (_ (= i1) j1)) false))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_array-store-swap t1 i1 j1 e1 f1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_array-store-swap")
; program: $eor_bool-double-not-elim
(program $eor_bool-double-not-elim ((t1 Bool))
  :signature (Bool) Bool
  (
  (($eor_bool-double-not-elim t1) (_ (= (not (not t1))) t1))
  )
)
; program: $eovc_bool-double-not-elim
(program $eovc_bool-double-not-elim ((t1 Bool))
  :signature (Bool) Bool
  (
  (($eovc_bool-double-not-elim t1) ($eo_requires_false ($eo_model_sat ($eor_bool-double-not-elim t1)) true))
  )
)
(echo "smt-meta $eovc_bool-double-not-elim")
; program: $eor_bool-not-true
(program $eor_bool-not-true ((t1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eor_bool-not-true t1 (_ (= t1) false)) (_ (= (not t1)) true))
  )
)
; program: $eovc_bool-not-true
(program $eovc_bool-not-true ((t1 Bool))
  :signature (Bool) Bool
  (
  (($eovc_bool-not-true t1) (eo::define ((_v0 (_ (= t1) false))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_bool-not-true t1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_bool-not-true")
; program: $eor_bool-not-false
(program $eor_bool-not-false ((t1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eor_bool-not-false t1 (_ (= t1) true)) (_ (= (not t1)) false))
  )
)
; program: $eovc_bool-not-false
(program $eovc_bool-not-false ((t1 Bool))
  :signature (Bool) Bool
  (
  (($eovc_bool-not-false t1) (eo::define ((_v0 (_ (= t1) true))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_bool-not-false t1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_bool-not-false")
; program: $eor_bool-eq-true
(program $eor_bool-eq-true ((t1 Bool))
  :signature (Bool) Bool
  (
  (($eor_bool-eq-true t1) (_ (= (_ (= t1) true)) t1))
  )
)
; program: $eovc_bool-eq-true
(program $eovc_bool-eq-true ((t1 Bool))
  :signature (Bool) Bool
  (
  (($eovc_bool-eq-true t1) ($eo_requires_false ($eo_model_sat ($eor_bool-eq-true t1)) true))
  )
)
(echo "smt-meta $eovc_bool-eq-true")
; program: $eor_bool-eq-false
(program $eor_bool-eq-false ((t1 Bool))
  :signature (Bool) Bool
  (
  (($eor_bool-eq-false t1) (_ (= (_ (= t1) false)) (not t1)))
  )
)
; program: $eovc_bool-eq-false
(program $eovc_bool-eq-false ((t1 Bool))
  :signature (Bool) Bool
  (
  (($eovc_bool-eq-false t1) ($eo_requires_false ($eo_model_sat ($eor_bool-eq-false t1)) true))
  )
)
(echo "smt-meta $eovc_bool-eq-false")
; program: $eor_bool-eq-nrefl
(program $eor_bool-eq-nrefl ((x1 Bool))
  :signature (Bool) Bool
  (
  (($eor_bool-eq-nrefl x1) (_ (= (_ (= x1) (not x1))) false))
  )
)
; program: $eovc_bool-eq-nrefl
(program $eovc_bool-eq-nrefl ((x1 Bool))
  :signature (Bool) Bool
  (
  (($eovc_bool-eq-nrefl x1) ($eo_requires_false ($eo_model_sat ($eor_bool-eq-nrefl x1)) true))
  )
)
(echo "smt-meta $eovc_bool-eq-nrefl")
; program: $eor_bool-impl-false1
(program $eor_bool-impl-false1 ((t1 Bool))
  :signature (Bool) Bool
  (
  (($eor_bool-impl-false1 t1) (_ (= (_ (=> t1) false)) (not t1)))
  )
)
; program: $eovc_bool-impl-false1
(program $eovc_bool-impl-false1 ((t1 Bool))
  :signature (Bool) Bool
  (
  (($eovc_bool-impl-false1 t1) ($eo_requires_false ($eo_model_sat ($eor_bool-impl-false1 t1)) true))
  )
)
(echo "smt-meta $eovc_bool-impl-false1")
; program: $eor_bool-impl-false2
(program $eor_bool-impl-false2 ((t1 Bool))
  :signature (Bool) Bool
  (
  (($eor_bool-impl-false2 t1) (_ (= (_ (=> false) t1)) true))
  )
)
; program: $eovc_bool-impl-false2
(program $eovc_bool-impl-false2 ((t1 Bool))
  :signature (Bool) Bool
  (
  (($eovc_bool-impl-false2 t1) ($eo_requires_false ($eo_model_sat ($eor_bool-impl-false2 t1)) true))
  )
)
(echo "smt-meta $eovc_bool-impl-false2")
; program: $eor_bool-impl-true1
(program $eor_bool-impl-true1 ((t1 Bool))
  :signature (Bool) Bool
  (
  (($eor_bool-impl-true1 t1) (_ (= (_ (=> t1) true)) true))
  )
)
; program: $eovc_bool-impl-true1
(program $eovc_bool-impl-true1 ((t1 Bool))
  :signature (Bool) Bool
  (
  (($eovc_bool-impl-true1 t1) ($eo_requires_false ($eo_model_sat ($eor_bool-impl-true1 t1)) true))
  )
)
(echo "smt-meta $eovc_bool-impl-true1")
; program: $eor_bool-impl-true2
(program $eor_bool-impl-true2 ((t1 Bool))
  :signature (Bool) Bool
  (
  (($eor_bool-impl-true2 t1) (_ (= (_ (=> true) t1)) t1))
  )
)
; program: $eovc_bool-impl-true2
(program $eovc_bool-impl-true2 ((t1 Bool))
  :signature (Bool) Bool
  (
  (($eovc_bool-impl-true2 t1) ($eo_requires_false ($eo_model_sat ($eor_bool-impl-true2 t1)) true))
  )
)
(echo "smt-meta $eovc_bool-impl-true2")
; program: $eor_bool-impl-elim
(program $eor_bool-impl-elim ((t1 Bool) (s1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eor_bool-impl-elim t1 s1) (_ (= (_ (=> t1) s1)) (_ (or (not t1)) (_ (or s1) false))))
  )
)
; program: $eovc_bool-impl-elim
(program $eovc_bool-impl-elim ((t1 Bool) (s1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_bool-impl-elim s1 t1) ($eo_requires_false ($eo_model_sat ($eor_bool-impl-elim t1 s1)) true))
  )
)
(echo "smt-meta $eovc_bool-impl-elim")
; program: $eor_bool-dual-impl-eq
(program $eor_bool-dual-impl-eq ((t1 Bool) (s1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eor_bool-dual-impl-eq t1 s1) (_ (= (_ (and (_ (=> t1) s1)) (_ (and (_ (=> s1) t1)) true))) (_ (= t1) s1)))
  )
)
; program: $eovc_bool-dual-impl-eq
(program $eovc_bool-dual-impl-eq ((t1 Bool) (s1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_bool-dual-impl-eq s1 t1) ($eo_requires_false ($eo_model_sat ($eor_bool-dual-impl-eq t1 s1)) true))
  )
)
(echo "smt-meta $eovc_bool-dual-impl-eq")
; program: $eor_bool-and-conf
(program $eor_bool-and-conf ((xs1 Bool) (ys1 Bool) (w1 Bool) (zs1 Bool))
  :signature (Bool Bool Bool Bool) Bool
  (
  (($eor_bool-and-conf xs1 w1 ys1 zs1) (_ (= (eo::list_concat and xs1 (_ (and w1) (eo::list_concat and ys1 (_ (and (not w1)) zs1))))) false))
  )
)
; program: $eovc_bool-and-conf
(program $eovc_bool-and-conf ((xs1 Bool) (w1 Bool) (ys1 Bool) (zs1 Bool))
  :signature (Bool Bool Bool Bool) Bool
  (
  (($eovc_bool-and-conf zs1 ys1 w1 xs1) ($eo_requires_false ($eo_model_sat ($eor_bool-and-conf xs1 w1 ys1 zs1)) true))
  )
)
(echo "smt-meta $eovc_bool-and-conf")
; program: $eor_bool-and-conf2
(program $eor_bool-and-conf2 ((xs1 Bool) (ys1 Bool) (w1 Bool) (zs1 Bool))
  :signature (Bool Bool Bool Bool) Bool
  (
  (($eor_bool-and-conf2 xs1 w1 ys1 zs1) (_ (= (eo::list_concat and xs1 (_ (and (not w1)) (eo::list_concat and ys1 (_ (and w1) zs1))))) false))
  )
)
; program: $eovc_bool-and-conf2
(program $eovc_bool-and-conf2 ((xs1 Bool) (w1 Bool) (ys1 Bool) (zs1 Bool))
  :signature (Bool Bool Bool Bool) Bool
  (
  (($eovc_bool-and-conf2 zs1 ys1 w1 xs1) ($eo_requires_false ($eo_model_sat ($eor_bool-and-conf2 xs1 w1 ys1 zs1)) true))
  )
)
(echo "smt-meta $eovc_bool-and-conf2")
; program: $eor_bool-or-taut
(program $eor_bool-or-taut ((xs1 Bool) (ys1 Bool) (w1 Bool) (zs1 Bool))
  :signature (Bool Bool Bool Bool) Bool
  (
  (($eor_bool-or-taut xs1 w1 ys1 zs1) (_ (= (eo::list_concat or xs1 (_ (or w1) (eo::list_concat or ys1 (_ (or (not w1)) zs1))))) true))
  )
)
; program: $eovc_bool-or-taut
(program $eovc_bool-or-taut ((xs1 Bool) (w1 Bool) (ys1 Bool) (zs1 Bool))
  :signature (Bool Bool Bool Bool) Bool
  (
  (($eovc_bool-or-taut zs1 ys1 w1 xs1) ($eo_requires_false ($eo_model_sat ($eor_bool-or-taut xs1 w1 ys1 zs1)) true))
  )
)
(echo "smt-meta $eovc_bool-or-taut")
; program: $eor_bool-or-taut2
(program $eor_bool-or-taut2 ((xs1 Bool) (ys1 Bool) (w1 Bool) (zs1 Bool))
  :signature (Bool Bool Bool Bool) Bool
  (
  (($eor_bool-or-taut2 xs1 w1 ys1 zs1) (_ (= (eo::list_concat or xs1 (_ (or (not w1)) (eo::list_concat or ys1 (_ (or w1) zs1))))) true))
  )
)
; program: $eovc_bool-or-taut2
(program $eovc_bool-or-taut2 ((xs1 Bool) (w1 Bool) (ys1 Bool) (zs1 Bool))
  :signature (Bool Bool Bool Bool) Bool
  (
  (($eovc_bool-or-taut2 zs1 ys1 w1 xs1) ($eo_requires_false ($eo_model_sat ($eor_bool-or-taut2 xs1 w1 ys1 zs1)) true))
  )
)
(echo "smt-meta $eovc_bool-or-taut2")
; program: $eor_bool-or-de-morgan
(program $eor_bool-or-de-morgan ((x1 Bool) (y1 Bool) (zs1 Bool))
  :signature (Bool Bool Bool) Bool
  (
  (($eor_bool-or-de-morgan x1 y1 zs1) (eo::define ((_v0 (_ (or y1) zs1))) (_ (= (not (_ (or x1) _v0))) (_ (and (not x1)) (_ (and (not ($singleton_elim _v0))) true)))))
  )
)
; program: $eovc_bool-or-de-morgan
(program $eovc_bool-or-de-morgan ((x1 Bool) (y1 Bool) (zs1 Bool))
  :signature (Bool Bool Bool) Bool
  (
  (($eovc_bool-or-de-morgan zs1 y1 x1) ($eo_requires_false ($eo_model_sat ($eor_bool-or-de-morgan x1 y1 zs1)) true))
  )
)
(echo "smt-meta $eovc_bool-or-de-morgan")
; program: $eor_bool-implies-de-morgan
(program $eor_bool-implies-de-morgan ((x1 Bool) (y1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eor_bool-implies-de-morgan x1 y1) (_ (= (not (_ (=> x1) y1))) (_ (and x1) (_ (and (not y1)) true))))
  )
)
; program: $eovc_bool-implies-de-morgan
(program $eovc_bool-implies-de-morgan ((x1 Bool) (y1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_bool-implies-de-morgan y1 x1) ($eo_requires_false ($eo_model_sat ($eor_bool-implies-de-morgan x1 y1)) true))
  )
)
(echo "smt-meta $eovc_bool-implies-de-morgan")
; program: $eor_bool-and-de-morgan
(program $eor_bool-and-de-morgan ((x1 Bool) (y1 Bool) (zs1 Bool))
  :signature (Bool Bool Bool) Bool
  (
  (($eor_bool-and-de-morgan x1 y1 zs1) (eo::define ((_v0 (_ (and y1) zs1))) (_ (= (not (_ (and x1) _v0))) (_ (or (not x1)) (_ (or (not ($singleton_elim _v0))) false)))))
  )
)
; program: $eovc_bool-and-de-morgan
(program $eovc_bool-and-de-morgan ((x1 Bool) (y1 Bool) (zs1 Bool))
  :signature (Bool Bool Bool) Bool
  (
  (($eovc_bool-and-de-morgan zs1 y1 x1) ($eo_requires_false ($eo_model_sat ($eor_bool-and-de-morgan x1 y1 zs1)) true))
  )
)
(echo "smt-meta $eovc_bool-and-de-morgan")
; program: $eor_bool-or-and-distrib
(program $eor_bool-or-and-distrib ((y1 Bool) (y2 Bool) (ys1 Bool) (z1 Bool) (zs1 Bool))
  :signature (Bool Bool Bool Bool Bool) Bool
  (
  (($eor_bool-or-and-distrib y1 y2 ys1 z1 zs1) (eo::define ((_v0 (_ (or z1) zs1))) (eo::define ((_v1 (_ (and y2) ys1))) (_ (= (_ (or (_ (and y1) _v1)) _v0)) (_ (and (_ (or y1) _v0)) (_ (and (_ (or ($singleton_elim _v1)) _v0)) true))))))
  )
)
; program: $eovc_bool-or-and-distrib
(program $eovc_bool-or-and-distrib ((y1 Bool) (y2 Bool) (ys1 Bool) (z1 Bool) (zs1 Bool))
  :signature (Bool Bool Bool Bool Bool) Bool
  (
  (($eovc_bool-or-and-distrib zs1 z1 ys1 y2 y1) ($eo_requires_false ($eo_model_sat ($eor_bool-or-and-distrib y1 y2 ys1 z1 zs1)) true))
  )
)
(echo "smt-meta $eovc_bool-or-and-distrib")
; program: $eor_bool-implies-or-distrib
(program $eor_bool-implies-or-distrib ((y1 Bool) (y2 Bool) (ys1 Bool) (z1 Bool))
  :signature (Bool Bool Bool Bool) Bool
  (
  (($eor_bool-implies-or-distrib y1 y2 ys1 z1) (eo::define ((_v0 (_ (or y2) ys1))) (_ (= (_ (=> (_ (or y1) _v0)) z1)) (_ (and (_ (=> y1) z1)) (_ (and (_ (=> ($singleton_elim _v0)) z1)) true)))))
  )
)
; program: $eovc_bool-implies-or-distrib
(program $eovc_bool-implies-or-distrib ((y1 Bool) (y2 Bool) (ys1 Bool) (z1 Bool))
  :signature (Bool Bool Bool Bool) Bool
  (
  (($eovc_bool-implies-or-distrib z1 ys1 y2 y1) ($eo_requires_false ($eo_model_sat ($eor_bool-implies-or-distrib y1 y2 ys1 z1)) true))
  )
)
(echo "smt-meta $eovc_bool-implies-or-distrib")
; program: $eor_bool-xor-refl
(program $eor_bool-xor-refl ((x1 Bool))
  :signature (Bool) Bool
  (
  (($eor_bool-xor-refl x1) (_ (= (_ (xor x1) x1)) false))
  )
)
; program: $eovc_bool-xor-refl
(program $eovc_bool-xor-refl ((x1 Bool))
  :signature (Bool) Bool
  (
  (($eovc_bool-xor-refl x1) ($eo_requires_false ($eo_model_sat ($eor_bool-xor-refl x1)) true))
  )
)
(echo "smt-meta $eovc_bool-xor-refl")
; program: $eor_bool-xor-nrefl
(program $eor_bool-xor-nrefl ((x1 Bool))
  :signature (Bool) Bool
  (
  (($eor_bool-xor-nrefl x1) (_ (= (_ (xor x1) (not x1))) true))
  )
)
; program: $eovc_bool-xor-nrefl
(program $eovc_bool-xor-nrefl ((x1 Bool))
  :signature (Bool) Bool
  (
  (($eovc_bool-xor-nrefl x1) ($eo_requires_false ($eo_model_sat ($eor_bool-xor-nrefl x1)) true))
  )
)
(echo "smt-meta $eovc_bool-xor-nrefl")
; program: $eor_bool-xor-false
(program $eor_bool-xor-false ((x1 Bool))
  :signature (Bool) Bool
  (
  (($eor_bool-xor-false x1) (_ (= (_ (xor x1) false)) x1))
  )
)
; program: $eovc_bool-xor-false
(program $eovc_bool-xor-false ((x1 Bool))
  :signature (Bool) Bool
  (
  (($eovc_bool-xor-false x1) ($eo_requires_false ($eo_model_sat ($eor_bool-xor-false x1)) true))
  )
)
(echo "smt-meta $eovc_bool-xor-false")
; program: $eor_bool-xor-true
(program $eor_bool-xor-true ((x1 Bool))
  :signature (Bool) Bool
  (
  (($eor_bool-xor-true x1) (_ (= (_ (xor x1) true)) (not x1)))
  )
)
; program: $eovc_bool-xor-true
(program $eovc_bool-xor-true ((x1 Bool))
  :signature (Bool) Bool
  (
  (($eovc_bool-xor-true x1) ($eo_requires_false ($eo_model_sat ($eor_bool-xor-true x1)) true))
  )
)
(echo "smt-meta $eovc_bool-xor-true")
; program: $eor_bool-xor-comm
(program $eor_bool-xor-comm ((y1 Bool) (x1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eor_bool-xor-comm x1 y1) (_ (= (_ (xor x1) y1)) (_ (xor y1) x1)))
  )
)
; program: $eovc_bool-xor-comm
(program $eovc_bool-xor-comm ((x1 Bool) (y1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_bool-xor-comm y1 x1) ($eo_requires_false ($eo_model_sat ($eor_bool-xor-comm x1 y1)) true))
  )
)
(echo "smt-meta $eovc_bool-xor-comm")
; program: $eor_bool-xor-elim
(program $eor_bool-xor-elim ((x1 Bool) (y1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eor_bool-xor-elim x1 y1) (_ (= (_ (xor x1) y1)) (_ (= (not x1)) y1)))
  )
)
; program: $eovc_bool-xor-elim
(program $eovc_bool-xor-elim ((x1 Bool) (y1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_bool-xor-elim y1 x1) ($eo_requires_false ($eo_model_sat ($eor_bool-xor-elim x1 y1)) true))
  )
)
(echo "smt-meta $eovc_bool-xor-elim")
; program: $eor_bool-not-xor-elim
(program $eor_bool-not-xor-elim ((x1 Bool) (y1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eor_bool-not-xor-elim x1 y1) (_ (= (not (_ (xor x1) y1))) (_ (= x1) y1)))
  )
)
; program: $eovc_bool-not-xor-elim
(program $eovc_bool-not-xor-elim ((x1 Bool) (y1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_bool-not-xor-elim y1 x1) ($eo_requires_false ($eo_model_sat ($eor_bool-not-xor-elim x1 y1)) true))
  )
)
(echo "smt-meta $eovc_bool-not-xor-elim")
; program: $eor_bool-not-eq-elim1
(program $eor_bool-not-eq-elim1 ((x1 Bool) (y1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eor_bool-not-eq-elim1 x1 y1) (_ (= (not (_ (= x1) y1))) (_ (= (not x1)) y1)))
  )
)
; program: $eovc_bool-not-eq-elim1
(program $eovc_bool-not-eq-elim1 ((x1 Bool) (y1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_bool-not-eq-elim1 y1 x1) ($eo_requires_false ($eo_model_sat ($eor_bool-not-eq-elim1 x1 y1)) true))
  )
)
(echo "smt-meta $eovc_bool-not-eq-elim1")
; program: $eor_bool-not-eq-elim2
(program $eor_bool-not-eq-elim2 ((x1 Bool) (y1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eor_bool-not-eq-elim2 x1 y1) (eo::define ((_v0 (= x1))) (_ (= (not (_ _v0 y1))) (_ _v0 (not y1)))))
  )
)
; program: $eovc_bool-not-eq-elim2
(program $eovc_bool-not-eq-elim2 ((x1 Bool) (y1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_bool-not-eq-elim2 y1 x1) ($eo_requires_false ($eo_model_sat ($eor_bool-not-eq-elim2 x1 y1)) true))
  )
)
(echo "smt-meta $eovc_bool-not-eq-elim2")
; program: $eor_ite-neg-branch
(program $eor_ite-neg-branch ((y1 Bool) (c1 Bool) (x1 Bool))
  :signature (Bool Bool Bool Bool) Bool
  (
  (($eor_ite-neg-branch c1 x1 y1 (_ (= (not y1)) x1)) (_ (= (_ (_ (ite c1) x1) y1)) (_ (= c1) x1)))
  )
)
; program: $eovc_ite-neg-branch
(program $eovc_ite-neg-branch ((c1 Bool) (y1 Bool) (x1 Bool))
  :signature (Bool Bool Bool) Bool
  (
  (($eovc_ite-neg-branch x1 y1 c1) (eo::define ((_v0 (_ (= (not y1)) x1))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_ite-neg-branch c1 x1 y1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_ite-neg-branch")
; program: $eor_ite-then-true
(program $eor_ite-then-true ((c1 Bool) (x1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eor_ite-then-true c1 x1) (_ (= (_ (_ (ite c1) true) x1)) (_ (or c1) (_ (or x1) false))))
  )
)
; program: $eovc_ite-then-true
(program $eovc_ite-then-true ((c1 Bool) (x1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_ite-then-true x1 c1) ($eo_requires_false ($eo_model_sat ($eor_ite-then-true c1 x1)) true))
  )
)
(echo "smt-meta $eovc_ite-then-true")
; program: $eor_ite-else-false
(program $eor_ite-else-false ((c1 Bool) (x1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eor_ite-else-false c1 x1) (_ (= (_ (_ (ite c1) x1) false)) (_ (and c1) (_ (and x1) true))))
  )
)
; program: $eovc_ite-else-false
(program $eovc_ite-else-false ((c1 Bool) (x1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_ite-else-false x1 c1) ($eo_requires_false ($eo_model_sat ($eor_ite-else-false c1 x1)) true))
  )
)
(echo "smt-meta $eovc_ite-else-false")
; program: $eor_ite-then-false
(program $eor_ite-then-false ((c1 Bool) (x1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eor_ite-then-false c1 x1) (_ (= (_ (_ (ite c1) false) x1)) (_ (and (not c1)) (_ (and x1) true))))
  )
)
; program: $eovc_ite-then-false
(program $eovc_ite-then-false ((c1 Bool) (x1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_ite-then-false x1 c1) ($eo_requires_false ($eo_model_sat ($eor_ite-then-false c1 x1)) true))
  )
)
(echo "smt-meta $eovc_ite-then-false")
; program: $eor_ite-else-true
(program $eor_ite-else-true ((c1 Bool) (x1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eor_ite-else-true c1 x1) (_ (= (_ (_ (ite c1) x1) true)) (_ (or (not c1)) (_ (or x1) false))))
  )
)
; program: $eovc_ite-else-true
(program $eovc_ite-else-true ((c1 Bool) (x1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_ite-else-true x1 c1) ($eo_requires_false ($eo_model_sat ($eor_ite-else-true c1 x1)) true))
  )
)
(echo "smt-meta $eovc_ite-else-true")
; program: $eor_ite-then-lookahead-self
(program $eor_ite-then-lookahead-self ((c1 Bool) (x1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eor_ite-then-lookahead-self c1 x1) (eo::define ((_v0 (ite c1))) (_ (= (_ (_ _v0 c1) x1)) (_ (_ _v0 true) x1))))
  )
)
; program: $eovc_ite-then-lookahead-self
(program $eovc_ite-then-lookahead-self ((c1 Bool) (x1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_ite-then-lookahead-self x1 c1) ($eo_requires_false ($eo_model_sat ($eor_ite-then-lookahead-self c1 x1)) true))
  )
)
(echo "smt-meta $eovc_ite-then-lookahead-self")
; program: $eor_ite-else-lookahead-self
(program $eor_ite-else-lookahead-self ((c1 Bool) (x1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eor_ite-else-lookahead-self c1 x1) (eo::define ((_v0 (_ (ite c1) x1))) (_ (= (_ _v0 c1)) (_ _v0 false))))
  )
)
; program: $eovc_ite-else-lookahead-self
(program $eovc_ite-else-lookahead-self ((c1 Bool) (x1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_ite-else-lookahead-self x1 c1) ($eo_requires_false ($eo_model_sat ($eor_ite-else-lookahead-self c1 x1)) true))
  )
)
(echo "smt-meta $eovc_ite-else-lookahead-self")
; program: $eor_ite-then-lookahead-not-self
(program $eor_ite-then-lookahead-not-self ((c1 Bool) (x1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eor_ite-then-lookahead-not-self c1 x1) (eo::define ((_v0 (ite c1))) (_ (= (_ (_ _v0 (not c1)) x1)) (_ (_ _v0 false) x1))))
  )
)
; program: $eovc_ite-then-lookahead-not-self
(program $eovc_ite-then-lookahead-not-self ((c1 Bool) (x1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_ite-then-lookahead-not-self x1 c1) ($eo_requires_false ($eo_model_sat ($eor_ite-then-lookahead-not-self c1 x1)) true))
  )
)
(echo "smt-meta $eovc_ite-then-lookahead-not-self")
; program: $eor_ite-else-lookahead-not-self
(program $eor_ite-else-lookahead-not-self ((c1 Bool) (x1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eor_ite-else-lookahead-not-self c1 x1) (eo::define ((_v0 (_ (ite c1) x1))) (_ (= (_ _v0 (not c1))) (_ _v0 true))))
  )
)
; program: $eovc_ite-else-lookahead-not-self
(program $eovc_ite-else-lookahead-not-self ((c1 Bool) (x1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_ite-else-lookahead-not-self x1 c1) ($eo_requires_false ($eo_model_sat ($eor_ite-else-lookahead-not-self c1 x1)) true))
  )
)
(echo "smt-meta $eovc_ite-else-lookahead-not-self")
; program: $eor_ite-expand
(program $eor_ite-expand ((x1 Bool) (c1 Bool) (y1 Bool))
  :signature (Bool Bool Bool) Bool
  (
  (($eor_ite-expand c1 x1 y1) (_ (= (_ (_ (ite c1) x1) y1)) (_ (and (_ (or (not c1)) (_ (or x1) false))) (_ (and (_ (or c1) (_ (or y1) false))) true))))
  )
)
; program: $eovc_ite-expand
(program $eovc_ite-expand ((c1 Bool) (x1 Bool) (y1 Bool))
  :signature (Bool Bool Bool) Bool
  (
  (($eovc_ite-expand y1 x1 c1) ($eo_requires_false ($eo_model_sat ($eor_ite-expand c1 x1 y1)) true))
  )
)
(echo "smt-meta $eovc_ite-expand")
; program: $eor_bool-not-ite-elim
(program $eor_bool-not-ite-elim ((c1 Bool) (x1 Bool) (y1 Bool))
  :signature (Bool Bool Bool) Bool
  (
  (($eor_bool-not-ite-elim c1 x1 y1) (eo::define ((_v0 (ite c1))) (_ (= (not (_ (_ _v0 x1) y1))) (_ (_ _v0 (not x1)) (not y1)))))
  )
)
; program: $eovc_bool-not-ite-elim
(program $eovc_bool-not-ite-elim ((c1 Bool) (x1 Bool) (y1 Bool))
  :signature (Bool Bool Bool) Bool
  (
  (($eovc_bool-not-ite-elim y1 x1 c1) ($eo_requires_false ($eo_model_sat ($eor_bool-not-ite-elim c1 x1 y1)) true))
  )
)
(echo "smt-meta $eovc_bool-not-ite-elim")
; program: $eor_ite-true-cond
(program $eor_ite-true-cond ((@T0 Type) (@T1 Type) (y1 @T1) (x1 @T0))
  :signature (@T0 @T1) Bool
  (
  (($eor_ite-true-cond x1 y1) (_ (= (_ (_ (ite true) x1) y1)) x1))
  )
)
; program: $eovc_ite-true-cond
(program $eovc_ite-true-cond ((@T1 Type) (@T0 Type) (x1 @T0) (y1 @T1))
  :signature (@T1 @T0) Bool
  (
  (($eovc_ite-true-cond y1 x1) ($eo_requires_false ($eo_model_sat ($eor_ite-true-cond x1 y1)) true))
  )
)
(echo "smt-meta $eovc_ite-true-cond")
; program: $eor_ite-false-cond
(program $eor_ite-false-cond ((@T0 Type) (@T1 Type) (x1 @T0) (y1 @T1))
  :signature (@T0 @T1) Bool
  (
  (($eor_ite-false-cond x1 y1) (_ (= (_ (_ (ite false) x1) y1)) y1))
  )
)
; program: $eovc_ite-false-cond
(program $eovc_ite-false-cond ((@T1 Type) (@T0 Type) (x1 @T0) (y1 @T1))
  :signature (@T1 @T0) Bool
  (
  (($eovc_ite-false-cond y1 x1) ($eo_requires_false ($eo_model_sat ($eor_ite-false-cond x1 y1)) true))
  )
)
(echo "smt-meta $eovc_ite-false-cond")
; program: $eor_ite-not-cond
(program $eor_ite-not-cond ((@T0 Type) (@T1 Type) (c1 Bool) (y1 @T1) (x1 @T0))
  :signature (Bool @T0 @T1) Bool
  (
  (($eor_ite-not-cond c1 x1 y1) (_ (= (_ (_ (ite (not c1)) x1) y1)) (_ (_ (ite c1) y1) x1)))
  )
)
; program: $eovc_ite-not-cond
(program $eovc_ite-not-cond ((@T1 Type) (@T0 Type) (c1 Bool) (x1 @T0) (y1 @T1))
  :signature (@T1 @T0 Bool) Bool
  (
  (($eovc_ite-not-cond y1 x1 c1) ($eo_requires_false ($eo_model_sat ($eor_ite-not-cond c1 x1 y1)) true))
  )
)
(echo "smt-meta $eovc_ite-not-cond")
; program: $eor_ite-eq-branch
(program $eor_ite-eq-branch ((@T0 Type) (c1 Bool) (x1 @T0))
  :signature (Bool @T0) Bool
  (
  (($eor_ite-eq-branch c1 x1) (_ (= (_ (_ (ite c1) x1) x1)) x1))
  )
)
; program: $eovc_ite-eq-branch
(program $eovc_ite-eq-branch ((@T0 Type) (c1 Bool) (x1 @T0))
  :signature (@T0 Bool) Bool
  (
  (($eovc_ite-eq-branch x1 c1) ($eo_requires_false ($eo_model_sat ($eor_ite-eq-branch c1 x1)) true))
  )
)
(echo "smt-meta $eovc_ite-eq-branch")
; program: $eor_ite-then-lookahead
(program $eor_ite-then-lookahead ((@T0 Type) (@T1 Type) (@T2 Type) (y1 @T1) (c1 Bool) (x1 @T0) (z1 @T2))
  :signature (Bool @T0 @T1 @T2) Bool
  (
  (($eor_ite-then-lookahead c1 x1 y1 z1) (eo::define ((_v0 (ite c1))) (eo::define ((_v1 (_ _v0 x1))) (_ (= (_ (_ _v0 (_ _v1 y1)) z1)) (_ _v1 z1)))))
  )
)
; program: $eovc_ite-then-lookahead
(program $eovc_ite-then-lookahead ((@T2 Type) (@T1 Type) (@T0 Type) (c1 Bool) (x1 @T0) (y1 @T1) (z1 @T2))
  :signature (@T2 @T1 @T0 Bool) Bool
  (
  (($eovc_ite-then-lookahead z1 y1 x1 c1) ($eo_requires_false ($eo_model_sat ($eor_ite-then-lookahead c1 x1 y1 z1)) true))
  )
)
(echo "smt-meta $eovc_ite-then-lookahead")
; program: $eor_ite-else-lookahead
(program $eor_ite-else-lookahead ((@T0 Type) (@T1 Type) (@T2 Type) (y1 @T1) (c1 Bool) (x1 @T0) (z1 @T2))
  :signature (Bool @T0 @T1 @T2) Bool
  (
  (($eor_ite-else-lookahead c1 x1 y1 z1) (eo::define ((_v0 (ite c1))) (eo::define ((_v1 (_ _v0 x1))) (_ (= (_ _v1 (_ (_ _v0 y1) z1))) (_ _v1 z1)))))
  )
)
; program: $eovc_ite-else-lookahead
(program $eovc_ite-else-lookahead ((@T2 Type) (@T1 Type) (@T0 Type) (c1 Bool) (x1 @T0) (y1 @T1) (z1 @T2))
  :signature (@T2 @T1 @T0 Bool) Bool
  (
  (($eovc_ite-else-lookahead z1 y1 x1 c1) ($eo_requires_false ($eo_model_sat ($eor_ite-else-lookahead c1 x1 y1 z1)) true))
  )
)
(echo "smt-meta $eovc_ite-else-lookahead")
; program: $eor_ite-then-neg-lookahead
(program $eor_ite-then-neg-lookahead ((@T0 Type) (@T1 Type) (@T2 Type) (x1 @T0) (c1 Bool) (y1 @T1) (z1 @T2))
  :signature (Bool @T0 @T1 @T2) Bool
  (
  (($eor_ite-then-neg-lookahead c1 x1 y1 z1) (eo::define ((_v0 (ite c1))) (_ (= (_ (_ _v0 (_ (_ (ite (not c1)) x1) y1)) z1)) (_ (_ _v0 y1) z1))))
  )
)
; program: $eovc_ite-then-neg-lookahead
(program $eovc_ite-then-neg-lookahead ((@T2 Type) (@T1 Type) (@T0 Type) (c1 Bool) (x1 @T0) (y1 @T1) (z1 @T2))
  :signature (@T2 @T1 @T0 Bool) Bool
  (
  (($eovc_ite-then-neg-lookahead z1 y1 x1 c1) ($eo_requires_false ($eo_model_sat ($eor_ite-then-neg-lookahead c1 x1 y1 z1)) true))
  )
)
(echo "smt-meta $eovc_ite-then-neg-lookahead")
; program: $eor_ite-else-neg-lookahead
(program $eor_ite-else-neg-lookahead ((@T0 Type) (@T1 Type) (@T2 Type) (z1 @T2) (c1 Bool) (x1 @T0) (y1 @T1))
  :signature (Bool @T0 @T1 @T2) Bool
  (
  (($eor_ite-else-neg-lookahead c1 x1 y1 z1) (eo::define ((_v0 (_ (ite c1) x1))) (_ (= (_ _v0 (_ (_ (ite (not c1)) y1) z1))) (_ _v0 y1))))
  )
)
; program: $eovc_ite-else-neg-lookahead
(program $eovc_ite-else-neg-lookahead ((@T2 Type) (@T1 Type) (@T0 Type) (c1 Bool) (x1 @T0) (y1 @T1) (z1 @T2))
  :signature (@T2 @T1 @T0 Bool) Bool
  (
  (($eovc_ite-else-neg-lookahead z1 y1 x1 c1) ($eo_requires_false ($eo_model_sat ($eor_ite-else-neg-lookahead c1 x1 y1 z1)) true))
  )
)
(echo "smt-meta $eovc_ite-else-neg-lookahead")
; program: $eor_bv-concat-extract-merge
(program $eor_bv-concat-extract-merge ((@n0 Int) (@n1 Int) (@n2 Int) (j2 Int) (j1 Int) (xs1 (BitVec @n0)) (k1 Int) (i1 Int) (s1 (BitVec @n1)) (ys1 (BitVec @n2)))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n2) Int Int Int Int Bool) Bool
  (
  (($eor_bv-concat-extract-merge xs1 s1 ys1 i1 j1 j2 k1 (_ (= j2) (_ (+ j1) (_ (+ 1) 0)))) (eo::define ((_v0 (extract k1))) (_ (= (eo::list_concat concat xs1 (_ (concat (_ (_ _v0 j2) s1)) (_ (concat (_ (_ (extract j1) i1) s1)) ys1)))) ($singleton_elim (eo::list_concat concat xs1 (_ (concat (_ (_ _v0 i1) s1)) ys1))))))
  )
)
; program: $eovc_bv-concat-extract-merge
(program $eovc_bv-concat-extract-merge ((@n2 Int) (@n1 Int) (@n0 Int) (xs1 (BitVec @n0)) (s1 (BitVec @n1)) (ys1 (BitVec @n2)) (i1 Int) (k1 Int) (j2 Int) (j1 Int))
  :signature (Int Int Int Int (BitVec @n2) (BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-concat-extract-merge j1 j2 k1 i1 ys1 s1 xs1) (eo::define ((_v0 (_ (= j2) (_ (+ j1) (_ (+ 1) 0))))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_bv-concat-extract-merge xs1 s1 ys1 i1 j1 j2 k1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_bv-concat-extract-merge")
; program: $eor_bv-extract-extract
(program $eor_bv-extract-extract ((@n0 Int) (l1 Int) (k1 Int) (j1 Int) (i1 Int) (ll1 Int) (kk1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int Int Int Int Bool Bool) Bool
  (
  ((eo::define ((_v0 (+ i1))) ($eor_bv-extract-extract x1 i1 j1 k1 l1 ll1 kk1 (_ (= ll1) (_ _v0 (_ (+ l1) 0))) (_ (= kk1) (_ _v0 (_ (+ k1) 0))))) (_ (= (_ (_ (extract l1) k1) (_ (_ (extract j1) i1) x1))) (_ (_ (extract ll1) kk1) x1)))
  )
)
; program: $eovc_bv-extract-extract
(program $eovc_bv-extract-extract ((@n0 Int) (x1 (BitVec @n0)) (j1 Int) (ll1 Int) (l1 Int) (kk1 Int) (i1 Int) (k1 Int))
  :signature (Int Int Int Int Int Int (BitVec @n0)) Bool
  (
  (($eovc_bv-extract-extract k1 i1 kk1 l1 ll1 j1 x1) (eo::define ((_v0 (+ i1))) (eo::define ((_v1 (_ (= kk1) (_ _v0 (_ (+ k1) 0))))) (eo::define ((_v2 (_ (= ll1) (_ _v0 (_ (+ l1) 0))))) ($eo_requires_true ($eo_model_sat _v2) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_false ($eo_model_sat ($eor_bv-extract-extract x1 i1 j1 k1 l1 ll1 kk1 _v2 _v1)) true)))))))
  )
)
(echo "smt-meta $eovc_bv-extract-extract")
; program: $eor_bv-extract-whole
(program $eor_bv-extract-whole ((@n0 Int) (n1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Bool) Bool
  (
  (($eor_bv-extract-whole x1 n1 (_ (= (_ (>= n1) (_ (- (@bvsize x1)) 1))) true)) (_ (= (_ (_ (extract n1) 0) x1)) x1))
  )
)
; program: $eovc_bv-extract-whole
(program $eovc_bv-extract-whole ((@n0 Int) (n1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int) Bool
  (
  (($eovc_bv-extract-whole x1 n1) (eo::define ((_v0 (_ (= (_ (>= n1) (_ (- (@bvsize x1)) 1))) true))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_bv-extract-whole x1 n1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_bv-extract-whole")
; program: $eor_bv-extract-concat-1
(program $eor_bv-extract-concat-1 ((@n0 Int) (@n1 Int) (@n2 Int) (xs1 (BitVec @n1)) (y1 (BitVec @n2)) (j1 Int) (i1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n2) Int Int Bool) Bool
  (
  (($eor_bv-extract-concat-1 x1 xs1 y1 i1 j1 (_ (= (_ (<= j1) (@bvsize x1))) true)) (eo::define ((_v0 (_ (extract j1) i1))) (_ (= (_ _v0 (eo::list_concat concat xs1 (_ (concat y1) (_ (concat x1) (eo::to_bin 0 0)))))) (_ _v0 x1))))
  )
)
; program: $eovc_bv-extract-concat-1
(program $eovc_bv-extract-concat-1 ((@n0 Int) (@n2 Int) (@n1 Int) (xs1 (BitVec @n1)) (y1 (BitVec @n2)) (i1 Int) (j1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int (BitVec @n2) (BitVec @n1)) Bool
  (
  (($eovc_bv-extract-concat-1 x1 j1 i1 y1 xs1) (eo::define ((_v0 (_ (= (_ (<= j1) (@bvsize x1))) true))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_bv-extract-concat-1 x1 xs1 y1 i1 j1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_bv-extract-concat-1")
; program: $eor_bv-extract-concat-2
(program $eor_bv-extract-concat-2 ((@n0 Int) (@n1 Int) (@n2 Int) (j1 Int) (u1 Int) (xs1 (BitVec @n1)) (y1 (BitVec @n2)) (u2 Int) (i1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n2) Int Int Int Int Bool Bool Bool Bool) Bool
  (
  ((eo::define ((_v0 (@bvsize x1))) ($eor_bv-extract-concat-2 x1 xs1 y1 i1 j1 u1 u2 (_ (= (_ (< i1) _v0)) true) (_ (= (_ (>= j1) _v0)) true) (_ (= u1) (_ (- j1) _v0)) (_ (= u2) (_ (- _v0) 1)))) (eo::define ((_v0 (concat y1))) (_ (= (_ (_ (extract j1) i1) (eo::list_concat concat xs1 (_ _v0 (_ (concat x1) (eo::to_bin 0 0)))))) (_ (concat (_ (_ (extract u1) 0) ($singleton_elim (eo::list_concat concat xs1 (_ _v0 (eo::to_bin 0 0)))))) (_ (concat (_ (_ (extract u2) i1) x1)) (eo::to_bin 0 0))))))
  )
)
; program: $eovc_bv-extract-concat-2
(program $eovc_bv-extract-concat-2 ((@n0 Int) (@n2 Int) (@n1 Int) (xs1 (BitVec @n1)) (y1 (BitVec @n2)) (i1 Int) (u1 Int) (j1 Int) (u2 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int Int (BitVec @n2) (BitVec @n1)) Bool
  (
  (($eovc_bv-extract-concat-2 x1 u2 j1 u1 i1 y1 xs1) (eo::define ((_v0 (@bvsize x1))) (eo::define ((_v1 (_ (= u2) (_ (- _v0) 1)))) (eo::define ((_v2 (_ (= u1) (_ (- j1) _v0)))) (eo::define ((_v3 (_ (= (_ (>= j1) _v0)) true))) (eo::define ((_v4 (_ (= (_ (< i1) _v0)) true))) ($eo_requires_true ($eo_model_sat _v4) ($eo_requires_true ($eo_model_sat _v3) ($eo_requires_true ($eo_model_sat _v2) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_false ($eo_model_sat ($eor_bv-extract-concat-2 x1 xs1 y1 i1 j1 u1 u2 _v4 _v3 _v2 _v1)) true)))))))))))
  )
)
(echo "smt-meta $eovc_bv-extract-concat-2")
; program: $eor_bv-extract-concat-3
(program $eor_bv-extract-concat-3 ((@n0 Int) (@n1 Int) (@n2 Int) (j1 Int) (i1 Int) (x1 (BitVec @n0)) (u1 Int) (l1 Int) (xs1 (BitVec @n2)) (y1 (BitVec @n1)))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n2) Int Int Int Int Bool Bool Bool) Bool
  (
  ((eo::define ((_v0 (@bvsize x1))) ($eor_bv-extract-concat-3 x1 y1 xs1 i1 j1 u1 l1 (_ (= (_ (>= i1) _v0)) true) (_ (= u1) (_ (- j1) _v0)) (_ (= l1) (_ (- i1) _v0)))) (eo::define ((_v0 (concat y1))) (_ (= (_ (_ (extract j1) i1) (eo::list_concat concat xs1 (_ _v0 (_ (concat x1) (eo::to_bin 0 0)))))) (_ (_ (extract u1) l1) ($singleton_elim (eo::list_concat concat xs1 (_ _v0 (eo::to_bin 0 0))))))))
  )
)
; program: $eovc_bv-extract-concat-3
(program $eovc_bv-extract-concat-3 ((@n0 Int) (@n2 Int) (@n1 Int) (y1 (BitVec @n1)) (xs1 (BitVec @n2)) (u1 Int) (j1 Int) (l1 Int) (i1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int Int (BitVec @n2) (BitVec @n1)) Bool
  (
  (($eovc_bv-extract-concat-3 x1 i1 l1 j1 u1 xs1 y1) (eo::define ((_v0 (@bvsize x1))) (eo::define ((_v1 (_ (= l1) (_ (- i1) _v0)))) (eo::define ((_v2 (_ (= u1) (_ (- j1) _v0)))) (eo::define ((_v3 (_ (= (_ (>= i1) _v0)) true))) ($eo_requires_true ($eo_model_sat _v3) ($eo_requires_true ($eo_model_sat _v2) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_false ($eo_model_sat ($eor_bv-extract-concat-3 x1 y1 xs1 i1 j1 u1 l1 _v3 _v2 _v1)) true)))))))))
  )
)
(echo "smt-meta $eovc_bv-extract-concat-3")
; program: $eor_bv-extract-concat-4
(program $eor_bv-extract-concat-4 ((@n0 Int) (@n1 Int) (@n2 Int) (Any Type) ($ex_1 Any) (x1 (BitVec @n0)) (j1 Int) (i1 Int) (xs1 (BitVec @n2)) (y1 (BitVec @n1)))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n2) Int Int Any) Bool
  (
  (($eor_bv-extract-concat-4 x1 y1 xs1 i1 j1 (_ (= (_ (< j1) (_ (- (@bvsize (_ (concat x1) $ex_1))) (@bvsize x1)))) true)) (eo::define ((_v0 (eo::list_concat concat xs1 (_ (concat y1) (eo::to_bin 0 0))))) (eo::define ((_v1 (_ (extract j1) i1))) (eo::requires $ex_1 _v0 (_ (= (_ _v1 (_ (concat x1) _v0))) (_ _v1 ($singleton_elim _v0)))))))
  )
)
; program: $eovc_bv-extract-concat-4
(program $eovc_bv-extract-concat-4 ((@n0 Int) (@n1 Int) (@n2 Int) (i1 Int) (j1 Int) (xs1 (BitVec @n2)) (y1 (BitVec @n1)) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n2) Int Int) Bool
  (
  (($eovc_bv-extract-concat-4 x1 y1 xs1 j1 i1) (eo::define ((_v0 (_ (= (_ (< j1) (_ (- (@bvsize (_ (concat x1) (eo::list_concat concat xs1 (_ (concat y1) (eo::to_bin 0 0)))))) (@bvsize x1)))) true))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_bv-extract-concat-4 x1 y1 xs1 i1 j1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_bv-extract-concat-4")
; program: $eor_bv-eq-extract-elim1
(program $eor_bv-eq-extract-elim1 ((@n0 Int) (@n1 Int) (j1 Int) (i1 Int) (wm1 Int) (jp1 Int) (y1 (BitVec @n1)) (im1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) (BitVec @n1) Int Int Int Int Int Bool Bool Bool Bool Bool) Bool
  (
  (($eor_bv-eq-extract-elim1 x1 y1 i1 j1 wm1 jp1 im1 (_ (= wm1) (_ (- (@bvsize x1)) 1)) (_ (= jp1) (_ (+ j1) (_ (+ 1) 0))) (_ (= im1) (_ (- i1) 1)) (_ (= (_ (> wm1) j1)) true) (_ (= (_ (> i1) 0)) true)) (_ (= (_ (= (_ (_ (extract j1) i1) x1)) y1)) (_ (= x1) (_ (concat (_ (_ (extract wm1) jp1) x1)) (_ (concat y1) (_ (concat (_ (_ (extract im1) 0) x1)) (eo::to_bin 0 0)))))))
  )
)
; program: $eovc_bv-eq-extract-elim1
(program $eovc_bv-eq-extract-elim1 ((@n0 Int) (@n1 Int) (y1 (BitVec @n1)) (x1 (BitVec @n0)) (jp1 Int) (im1 Int) (wm1 Int) (j1 Int) (i1 Int))
  :signature (Int Int Int Int Int (BitVec @n0) (BitVec @n1)) Bool
  (
  (($eovc_bv-eq-extract-elim1 i1 j1 wm1 im1 jp1 x1 y1) (eo::define ((_v0 (_ (= (_ (> i1) 0)) true))) (eo::define ((_v1 (_ (= (_ (> wm1) j1)) true))) (eo::define ((_v2 (_ (= im1) (_ (- i1) 1)))) (eo::define ((_v3 (_ (= jp1) (_ (+ j1) (_ (+ 1) 0))))) (eo::define ((_v4 (_ (= wm1) (_ (- (@bvsize x1)) 1)))) ($eo_requires_true ($eo_model_sat _v4) ($eo_requires_true ($eo_model_sat _v3) ($eo_requires_true ($eo_model_sat _v2) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_bv-eq-extract-elim1 x1 y1 i1 j1 wm1 jp1 im1 _v4 _v3 _v2 _v1 _v0)) true))))))))))))
  )
)
(echo "smt-meta $eovc_bv-eq-extract-elim1")
; program: $eor_bv-eq-extract-elim2
(program $eor_bv-eq-extract-elim2 ((@n0 Int) (@n1 Int) (j1 Int) (wm1 Int) (jp1 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :signature ((BitVec @n0) (BitVec @n1) Int Int Int Bool Bool Bool) Bool
  (
  (($eor_bv-eq-extract-elim2 x1 y1 j1 wm1 jp1 (_ (= wm1) (_ (- (@bvsize x1)) 1)) (_ (= jp1) (_ (+ j1) (_ (+ 1) 0))) (_ (= (_ (> wm1) j1)) true)) (_ (= (_ (= (_ (_ (extract j1) 0) x1)) y1)) (_ (= x1) (_ (concat (_ (_ (extract wm1) jp1) x1)) (_ (concat y1) (eo::to_bin 0 0))))))
  )
)
; program: $eovc_bv-eq-extract-elim2
(program $eovc_bv-eq-extract-elim2 ((@n0 Int) (@n1 Int) (y1 (BitVec @n1)) (x1 (BitVec @n0)) (jp1 Int) (wm1 Int) (j1 Int))
  :signature (Int Int Int (BitVec @n0) (BitVec @n1)) Bool
  (
  (($eovc_bv-eq-extract-elim2 j1 wm1 jp1 x1 y1) (eo::define ((_v0 (_ (= (_ (> wm1) j1)) true))) (eo::define ((_v1 (_ (= jp1) (_ (+ j1) (_ (+ 1) 0))))) (eo::define ((_v2 (_ (= wm1) (_ (- (@bvsize x1)) 1)))) ($eo_requires_true ($eo_model_sat _v2) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_bv-eq-extract-elim2 x1 y1 j1 wm1 jp1 _v2 _v1 _v0)) true))))))))
  )
)
(echo "smt-meta $eovc_bv-eq-extract-elim2")
; program: $eor_bv-eq-extract-elim3
(program $eor_bv-eq-extract-elim3 ((@n0 Int) (@n1 Int) (j1 Int) (i1 Int) (y1 (BitVec @n1)) (im1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) (BitVec @n1) Int Int Int Bool Bool Bool) Bool
  (
  (($eor_bv-eq-extract-elim3 x1 y1 i1 j1 im1 (_ (= j1) (_ (- (@bvsize x1)) 1)) (_ (= im1) (_ (- i1) 1)) (_ (= (_ (> i1) 0)) true)) (_ (= (_ (= (_ (_ (extract j1) i1) x1)) y1)) (_ (= x1) (_ (concat y1) (_ (concat (_ (_ (extract im1) 0) x1)) (eo::to_bin 0 0))))))
  )
)
; program: $eovc_bv-eq-extract-elim3
(program $eovc_bv-eq-extract-elim3 ((@n0 Int) (@n1 Int) (y1 (BitVec @n1)) (j1 Int) (x1 (BitVec @n0)) (im1 Int) (i1 Int))
  :signature (Int Int (BitVec @n0) Int (BitVec @n1)) Bool
  (
  (($eovc_bv-eq-extract-elim3 i1 im1 x1 j1 y1) (eo::define ((_v0 (_ (= (_ (> i1) 0)) true))) (eo::define ((_v1 (_ (= im1) (_ (- i1) 1)))) (eo::define ((_v2 (_ (= j1) (_ (- (@bvsize x1)) 1)))) ($eo_requires_true ($eo_model_sat _v2) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_bv-eq-extract-elim3 x1 y1 i1 j1 im1 _v2 _v1 _v0)) true))))))))
  )
)
(echo "smt-meta $eovc_bv-eq-extract-elim3")
; program: $eor_bv-extract-not
(program $eor_bv-extract-not ((@n0 Int) (j1 Int) (i1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int) Bool
  (
  (($eor_bv-extract-not x1 i1 j1) (eo::define ((_v0 (_ (extract j1) i1))) (_ (= (_ _v0 (bvnot x1))) (bvnot (_ _v0 x1)))))
  )
)
; program: $eovc_bv-extract-not
(program $eovc_bv-extract-not ((@n0 Int) (x1 (BitVec @n0)) (i1 Int) (j1 Int))
  :signature (Int Int (BitVec @n0)) Bool
  (
  (($eovc_bv-extract-not j1 i1 x1) ($eo_requires_false ($eo_model_sat ($eor_bv-extract-not x1 i1 j1)) true))
  )
)
(echo "smt-meta $eovc_bv-extract-not")
; program: $eor_bv-extract-sign-extend-1
(program $eor_bv-extract-sign-extend-1 ((@n0 Int) (k1 Int) (high1 Int) (low1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int Bool) Bool
  (
  (($eor_bv-extract-sign-extend-1 x1 low1 high1 k1 (_ (= (_ (< high1) (@bvsize x1))) true)) (eo::define ((_v0 (_ (extract high1) low1))) (_ (= (_ _v0 (_ (sign_extend k1) x1))) (_ _v0 x1))))
  )
)
; program: $eovc_bv-extract-sign-extend-1
(program $eovc_bv-extract-sign-extend-1 ((@n0 Int) (low1 Int) (k1 Int) (high1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int) Bool
  (
  (($eovc_bv-extract-sign-extend-1 x1 high1 k1 low1) (eo::define ((_v0 (_ (= (_ (< high1) (@bvsize x1))) true))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_bv-extract-sign-extend-1 x1 low1 high1 k1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_bv-extract-sign-extend-1")
; program: $eor_bv-extract-sign-extend-2
(program $eor_bv-extract-sign-extend-2 ((@n0 Int) (high1 Int) (k1 Int) (sn1 Int) (nm1 Int) (low1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int Int Int Bool Bool Bool Bool) Bool
  (
  ((eo::define ((_v0 (@bvsize x1))) ($eor_bv-extract-sign-extend-2 x1 low1 high1 k1 nm1 sn1 (_ (= (_ (< low1) _v0)) true) (_ (= (_ (>= high1) _v0)) true) (_ (= nm1) (_ (- _v0) 1)) (_ (= sn1) (_ (+ 1) (_ (+ (_ (- high1) _v0)) 0))))) (_ (= (_ (_ (extract high1) low1) (_ (sign_extend k1) x1))) (_ (sign_extend sn1) (_ (_ (extract nm1) low1) x1))))
  )
)
; program: $eovc_bv-extract-sign-extend-2
(program $eovc_bv-extract-sign-extend-2 ((@n0 Int) (k1 Int) (low1 Int) (nm1 Int) (sn1 Int) (high1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int Int Int) Bool
  (
  (($eovc_bv-extract-sign-extend-2 x1 high1 sn1 nm1 low1 k1) (eo::define ((_v0 (@bvsize x1))) (eo::define ((_v1 (_ (= sn1) (_ (+ 1) (_ (+ (_ (- high1) _v0)) 0))))) (eo::define ((_v2 (_ (= nm1) (_ (- _v0) 1)))) (eo::define ((_v3 (_ (= (_ (>= high1) _v0)) true))) (eo::define ((_v4 (_ (= (_ (< low1) _v0)) true))) ($eo_requires_true ($eo_model_sat _v4) ($eo_requires_true ($eo_model_sat _v3) ($eo_requires_true ($eo_model_sat _v2) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_false ($eo_model_sat ($eor_bv-extract-sign-extend-2 x1 low1 high1 k1 nm1 sn1 _v4 _v3 _v2 _v1)) true)))))))))))
  )
)
(echo "smt-meta $eovc_bv-extract-sign-extend-2")
; program: $eor_bv-extract-sign-extend-3
(program $eor_bv-extract-sign-extend-3 ((@n0 Int) (high1 Int) (low1 Int) (k1 Int) (rn1 Int) (nm1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int Int Int Bool Bool Bool) Bool
  (
  ((eo::define ((_v0 (@bvsize x1))) ($eor_bv-extract-sign-extend-3 x1 low1 high1 k1 rn1 nm1 (_ (= (_ (>= low1) _v0)) true) (_ (= rn1) (_ (+ 1) (_ (+ (_ (- high1) low1)) 0))) (_ (= nm1) (_ (- _v0) 1)))) (_ (= (_ (_ (extract high1) low1) (_ (sign_extend k1) x1))) (_ (repeat rn1) (_ (_ (extract nm1) nm1) x1))))
  )
)
; program: $eovc_bv-extract-sign-extend-3
(program $eovc_bv-extract-sign-extend-3 ((@n0 Int) (k1 Int) (rn1 Int) (high1 Int) (low1 Int) (nm1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int Int Int) Bool
  (
  (($eovc_bv-extract-sign-extend-3 x1 nm1 low1 high1 rn1 k1) (eo::define ((_v0 (@bvsize x1))) (eo::define ((_v1 (_ (= nm1) (_ (- _v0) 1)))) (eo::define ((_v2 (_ (= rn1) (_ (+ 1) (_ (+ (_ (- high1) low1)) 0))))) (eo::define ((_v3 (_ (= (_ (>= low1) _v0)) true))) ($eo_requires_true ($eo_model_sat _v3) ($eo_requires_true ($eo_model_sat _v2) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_false ($eo_model_sat ($eor_bv-extract-sign-extend-3 x1 low1 high1 k1 rn1 nm1 _v3 _v2 _v1)) true)))))))))
  )
)
(echo "smt-meta $eovc_bv-extract-sign-extend-3")
; program: $eor_bv-not-xor
(program $eor_bv-not-xor ((@n0 Int) (@n1 Int) (@n2 Int) (x1 (BitVec @n0)) (x2 (BitVec @n1)) (xs1 (BitVec @n2)))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n2)) Bool
  (
  (($eor_bv-not-xor x1 x2 xs1) (eo::define ((_v0 (_ (bvxor x2) xs1))) (_ (= (bvnot (_ (bvxor x1) _v0))) (_ (bvxor (bvnot x1)) _v0))))
  )
)
; program: $eovc_bv-not-xor
(program $eovc_bv-not-xor ((@n2 Int) (@n1 Int) (@n0 Int) (x1 (BitVec @n0)) (x2 (BitVec @n1)) (xs1 (BitVec @n2)))
  :signature ((BitVec @n2) (BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-not-xor xs1 x2 x1) ($eo_requires_false ($eo_model_sat ($eor_bv-not-xor x1 x2 xs1)) true))
  )
)
(echo "smt-meta $eovc_bv-not-xor")
; program: $eor_bv-and-simplify-1
(program $eor_bv-and-simplify-1 ((@n0 Int) (@n1 Int) (@n2 Int) (@n3 Int) (xs1 (BitVec @n0)) (ys1 (BitVec @n1)) (x1 (BitVec @n3)) (zs1 (BitVec @n2)) (w1 Int))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n2) (BitVec @n3) Int Bool) Bool
  (
  (($eor_bv-and-simplify-1 xs1 ys1 zs1 x1 w1 (_ (= w1) (@bvsize x1))) (_ (= (eo::list_concat bvand xs1 (_ (bvand (bvnot x1)) (eo::list_concat bvand ys1 (_ (bvand x1) zs1))))) (_ (@bv 0) w1)))
  )
)
; program: $eovc_bv-and-simplify-1
(program $eovc_bv-and-simplify-1 ((@n3 Int) (@n2 Int) (@n1 Int) (@n0 Int) (xs1 (BitVec @n0)) (ys1 (BitVec @n1)) (zs1 (BitVec @n2)) (w1 Int) (x1 (BitVec @n3)))
  :signature ((BitVec @n3) Int (BitVec @n2) (BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-and-simplify-1 x1 w1 zs1 ys1 xs1) (eo::define ((_v0 (_ (= w1) (@bvsize x1)))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_bv-and-simplify-1 xs1 ys1 zs1 x1 w1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_bv-and-simplify-1")
; program: $eor_bv-and-simplify-2
(program $eor_bv-and-simplify-2 ((@n0 Int) (@n1 Int) (@n2 Int) (@n3 Int) (xs1 (BitVec @n0)) (ys1 (BitVec @n1)) (x1 (BitVec @n3)) (zs1 (BitVec @n2)) (w1 Int))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n2) (BitVec @n3) Int Bool) Bool
  (
  (($eor_bv-and-simplify-2 xs1 ys1 zs1 x1 w1 (_ (= w1) (@bvsize x1))) (_ (= (eo::list_concat bvand xs1 (_ (bvand x1) (eo::list_concat bvand ys1 (_ (bvand (bvnot x1)) zs1))))) (_ (@bv 0) w1)))
  )
)
; program: $eovc_bv-and-simplify-2
(program $eovc_bv-and-simplify-2 ((@n3 Int) (@n2 Int) (@n1 Int) (@n0 Int) (xs1 (BitVec @n0)) (ys1 (BitVec @n1)) (zs1 (BitVec @n2)) (w1 Int) (x1 (BitVec @n3)))
  :signature ((BitVec @n3) Int (BitVec @n2) (BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-and-simplify-2 x1 w1 zs1 ys1 xs1) (eo::define ((_v0 (_ (= w1) (@bvsize x1)))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_bv-and-simplify-2 xs1 ys1 zs1 x1 w1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_bv-and-simplify-2")
; program: $eor_bv-or-simplify-1
(program $eor_bv-or-simplify-1 ((@n0 Int) (@n1 Int) (@n2 Int) (@n3 Int) (xs1 (BitVec @n0)) (ys1 (BitVec @n1)) (x1 (BitVec @n3)) (zs1 (BitVec @n2)) (w1 Int))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n2) (BitVec @n3) Int Bool) Bool
  (
  (($eor_bv-or-simplify-1 xs1 ys1 zs1 x1 w1 (_ (= w1) (@bvsize x1))) (_ (= (eo::list_concat bvor xs1 (_ (bvor (bvnot x1)) (eo::list_concat bvor ys1 (_ (bvor x1) zs1))))) (bvnot (_ (@bv 0) w1))))
  )
)
; program: $eovc_bv-or-simplify-1
(program $eovc_bv-or-simplify-1 ((@n3 Int) (@n2 Int) (@n1 Int) (@n0 Int) (xs1 (BitVec @n0)) (ys1 (BitVec @n1)) (zs1 (BitVec @n2)) (w1 Int) (x1 (BitVec @n3)))
  :signature ((BitVec @n3) Int (BitVec @n2) (BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-or-simplify-1 x1 w1 zs1 ys1 xs1) (eo::define ((_v0 (_ (= w1) (@bvsize x1)))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_bv-or-simplify-1 xs1 ys1 zs1 x1 w1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_bv-or-simplify-1")
; program: $eor_bv-or-simplify-2
(program $eor_bv-or-simplify-2 ((@n0 Int) (@n1 Int) (@n2 Int) (@n3 Int) (xs1 (BitVec @n0)) (ys1 (BitVec @n1)) (x1 (BitVec @n3)) (zs1 (BitVec @n2)) (w1 Int))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n2) (BitVec @n3) Int Bool) Bool
  (
  (($eor_bv-or-simplify-2 xs1 ys1 zs1 x1 w1 (_ (= w1) (@bvsize x1))) (_ (= (eo::list_concat bvor xs1 (_ (bvor x1) (eo::list_concat bvor ys1 (_ (bvor (bvnot x1)) zs1))))) (bvnot (_ (@bv 0) w1))))
  )
)
; program: $eovc_bv-or-simplify-2
(program $eovc_bv-or-simplify-2 ((@n3 Int) (@n2 Int) (@n1 Int) (@n0 Int) (xs1 (BitVec @n0)) (ys1 (BitVec @n1)) (zs1 (BitVec @n2)) (w1 Int) (x1 (BitVec @n3)))
  :signature ((BitVec @n3) Int (BitVec @n2) (BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-or-simplify-2 x1 w1 zs1 ys1 xs1) (eo::define ((_v0 (_ (= w1) (@bvsize x1)))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_bv-or-simplify-2 xs1 ys1 zs1 x1 w1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_bv-or-simplify-2")
; program: $eor_bv-xor-simplify-1
(program $eor_bv-xor-simplify-1 ((@n0 Int) (@n1 Int) (@n2 Int) (@n3 Int) (x1 (BitVec @n3)) (xs1 (BitVec @n0)) (ys1 (BitVec @n1)) (zs1 (BitVec @n2)))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n2) (BitVec @n3)) Bool
  (
  (($eor_bv-xor-simplify-1 xs1 ys1 zs1 x1) (eo::define ((_v0 (bvxor x1))) (_ (= (eo::list_concat bvxor xs1 (_ _v0 (eo::list_concat bvxor ys1 (_ _v0 zs1))))) ($singleton_elim (eo::list_concat bvxor xs1 (eo::list_concat bvxor ys1 zs1))))))
  )
)
; program: $eovc_bv-xor-simplify-1
(program $eovc_bv-xor-simplify-1 ((@n3 Int) (@n2 Int) (@n1 Int) (@n0 Int) (xs1 (BitVec @n0)) (ys1 (BitVec @n1)) (zs1 (BitVec @n2)) (x1 (BitVec @n3)))
  :signature ((BitVec @n3) (BitVec @n2) (BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-xor-simplify-1 x1 zs1 ys1 xs1) ($eo_requires_false ($eo_model_sat ($eor_bv-xor-simplify-1 xs1 ys1 zs1 x1)) true))
  )
)
(echo "smt-meta $eovc_bv-xor-simplify-1")
; program: $eor_bv-xor-simplify-2
(program $eor_bv-xor-simplify-2 ((@n0 Int) (@n1 Int) (@n2 Int) (@n3 Int) (x1 (BitVec @n3)) (xs1 (BitVec @n0)) (ys1 (BitVec @n1)) (zs1 (BitVec @n2)))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n2) (BitVec @n3)) Bool
  (
  (($eor_bv-xor-simplify-2 xs1 ys1 zs1 x1) (_ (= (eo::list_concat bvxor xs1 (_ (bvxor x1) (eo::list_concat bvxor ys1 (_ (bvxor (bvnot x1)) zs1))))) (bvnot ($singleton_elim (eo::list_concat bvxor xs1 (eo::list_concat bvxor ys1 zs1))))))
  )
)
; program: $eovc_bv-xor-simplify-2
(program $eovc_bv-xor-simplify-2 ((@n3 Int) (@n2 Int) (@n1 Int) (@n0 Int) (xs1 (BitVec @n0)) (ys1 (BitVec @n1)) (zs1 (BitVec @n2)) (x1 (BitVec @n3)))
  :signature ((BitVec @n3) (BitVec @n2) (BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-xor-simplify-2 x1 zs1 ys1 xs1) ($eo_requires_false ($eo_model_sat ($eor_bv-xor-simplify-2 xs1 ys1 zs1 x1)) true))
  )
)
(echo "smt-meta $eovc_bv-xor-simplify-2")
; program: $eor_bv-xor-simplify-3
(program $eor_bv-xor-simplify-3 ((@n0 Int) (@n1 Int) (@n2 Int) (@n3 Int) (x1 (BitVec @n3)) (xs1 (BitVec @n0)) (ys1 (BitVec @n1)) (zs1 (BitVec @n2)))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n2) (BitVec @n3)) Bool
  (
  (($eor_bv-xor-simplify-3 xs1 ys1 zs1 x1) (_ (= (eo::list_concat bvxor xs1 (_ (bvxor (bvnot x1)) (eo::list_concat bvxor ys1 (_ (bvxor x1) zs1))))) (bvnot ($singleton_elim (eo::list_concat bvxor xs1 (eo::list_concat bvxor ys1 zs1))))))
  )
)
; program: $eovc_bv-xor-simplify-3
(program $eovc_bv-xor-simplify-3 ((@n3 Int) (@n2 Int) (@n1 Int) (@n0 Int) (xs1 (BitVec @n0)) (ys1 (BitVec @n1)) (zs1 (BitVec @n2)) (x1 (BitVec @n3)))
  :signature ((BitVec @n3) (BitVec @n2) (BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-xor-simplify-3 x1 zs1 ys1 xs1) ($eo_requires_false ($eo_model_sat ($eor_bv-xor-simplify-3 xs1 ys1 zs1 x1)) true))
  )
)
(echo "smt-meta $eovc_bv-xor-simplify-3")
; program: $eor_bv-ult-add-one
(program $eor_bv-ult-add-one ((@n0 Int) (@n1 Int) (@n2 Int) (@n3 Int) (c1 (BitVec @n3)) (w1 Int) (ys1 (BitVec @n1)) (zs1 (BitVec @n2)) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n2) (BitVec @n3) Int Bool Bool) Bool
  (
  (($eor_bv-ult-add-one x1 ys1 zs1 c1 w1 (_ (= c1) (_ (@bv 1) w1)) (_ (= w1) (@bvsize x1))) (eo::define ((_v0 ($singleton_elim (eo::list_concat bvadd ys1 zs1)))) (_ (= (_ (bvult x1) (eo::list_concat bvadd ys1 (_ (bvadd c1) zs1)))) (_ (and (not (_ (= _v0) (bvnot (_ (@bv 0) w1))))) (_ (and (not (_ (bvult _v0) x1))) true)))))
  )
)
; program: $eovc_bv-ult-add-one
(program $eovc_bv-ult-add-one ((@n0 Int) (@n3 Int) (@n2 Int) (@n1 Int) (ys1 (BitVec @n1)) (zs1 (BitVec @n2)) (c1 (BitVec @n3)) (w1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int (BitVec @n3) (BitVec @n2) (BitVec @n1)) Bool
  (
  (($eovc_bv-ult-add-one x1 w1 c1 zs1 ys1) (eo::define ((_v0 (_ (= w1) (@bvsize x1)))) (eo::define ((_v1 (_ (= c1) (_ (@bv 1) w1)))) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_bv-ult-add-one x1 ys1 zs1 c1 w1 _v1 _v0)) true))))))
  )
)
(echo "smt-meta $eovc_bv-ult-add-one")
; program: $eor_bv-mult-slt-mult-1
(program $eor_bv-mult-slt-mult-1 ((@n0 Int) (@n1 Int) (@n2 Int) (m1 Int) (n1 Int) (tn1 Int) (y1 (BitVec @n1)) (x1 (BitVec @n0)) (a1 (BitVec @n2)) (an1 Int))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n2) Int Int Int Int Bool Bool) Bool
  (
  (($eor_bv-mult-slt-mult-1 x1 y1 a1 n1 m1 tn1 an1 (_ (= tn1) (@bvsize x1)) (_ (= an1) (@bvsize a1))) (eo::define ((_v0 (@bv 0))) (eo::define ((_v1 (_ _v0 an1))) (eo::define ((_v2 (sign_extend n1))) (eo::define ((_v3 (_ _v2 x1))) (eo::define ((_v4 (bvmul (_ (sign_extend m1) a1)))) (eo::define ((_v5 (_ _v2 y1))) (_ (= (_ (bvslt (_ (bvmul _v5) (_ _v4 (eo::nil bvmul (eo::typeof _v5))))) (_ (bvmul _v3) (_ _v4 (eo::nil bvmul (eo::typeof _v3)))))) (_ (and (not (_ (= (_ (bvsub y1) x1)) (_ _v0 tn1)))) (_ (and (not (_ (= a1) _v1))) (_ (and (_ (= (_ (bvslt y1) x1)) (_ (bvsgt a1) _v1))) true)))))))))))
  )
)
; program: $eovc_bv-mult-slt-mult-1
(program $eovc_bv-mult-slt-mult-1 ((@n2 Int) (@n0 Int) (@n1 Int) (y1 (BitVec @n1)) (n1 Int) (m1 Int) (tn1 Int) (x1 (BitVec @n0)) (an1 Int) (a1 (BitVec @n2)))
  :signature ((BitVec @n2) Int (BitVec @n0) Int Int Int (BitVec @n1)) Bool
  (
  (($eovc_bv-mult-slt-mult-1 a1 an1 x1 tn1 m1 n1 y1) (eo::define ((_v0 (_ (= an1) (@bvsize a1)))) (eo::define ((_v1 (_ (= tn1) (@bvsize x1)))) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_bv-mult-slt-mult-1 x1 y1 a1 n1 m1 tn1 an1 _v1 _v0)) true))))))
  )
)
(echo "smt-meta $eovc_bv-mult-slt-mult-1")
; program: $eor_bv-mult-slt-mult-2
(program $eor_bv-mult-slt-mult-2 ((@n0 Int) (@n1 Int) (@n2 Int) (m1 Int) (n1 Int) (tn1 Int) (y1 (BitVec @n1)) (x1 (BitVec @n0)) (a1 (BitVec @n2)) (an1 Int))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n2) Int Int Int Int Bool Bool) Bool
  (
  (($eor_bv-mult-slt-mult-2 x1 y1 a1 n1 m1 tn1 an1 (_ (= tn1) (@bvsize x1)) (_ (= an1) (@bvsize a1))) (eo::define ((_v0 (@bv 0))) (eo::define ((_v1 (_ _v0 an1))) (eo::define ((_v2 (zero_extend n1))) (eo::define ((_v3 (_ _v2 x1))) (eo::define ((_v4 (bvmul (_ (sign_extend m1) a1)))) (eo::define ((_v5 (_ _v2 y1))) (_ (= (_ (bvslt (_ (bvmul _v5) (_ _v4 (eo::nil bvmul (eo::typeof _v5))))) (_ (bvmul _v3) (_ _v4 (eo::nil bvmul (eo::typeof _v3)))))) (_ (and (not (_ (= (_ (bvsub y1) x1)) (_ _v0 tn1)))) (_ (and (not (_ (= a1) _v1))) (_ (and (_ (= (_ (bvult y1) x1)) (_ (bvsgt a1) _v1))) true)))))))))))
  )
)
; program: $eovc_bv-mult-slt-mult-2
(program $eovc_bv-mult-slt-mult-2 ((@n2 Int) (@n0 Int) (@n1 Int) (y1 (BitVec @n1)) (n1 Int) (m1 Int) (tn1 Int) (x1 (BitVec @n0)) (an1 Int) (a1 (BitVec @n2)))
  :signature ((BitVec @n2) Int (BitVec @n0) Int Int Int (BitVec @n1)) Bool
  (
  (($eovc_bv-mult-slt-mult-2 a1 an1 x1 tn1 m1 n1 y1) (eo::define ((_v0 (_ (= an1) (@bvsize a1)))) (eo::define ((_v1 (_ (= tn1) (@bvsize x1)))) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_bv-mult-slt-mult-2 x1 y1 a1 n1 m1 tn1 an1 _v1 _v0)) true))))))
  )
)
(echo "smt-meta $eovc_bv-mult-slt-mult-2")
; program: $eor_bv-commutative-xor
(program $eor_bv-commutative-xor ((@n0 Int) (@n1 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :signature ((BitVec @n0) (BitVec @n1)) Bool
  (
  (($eor_bv-commutative-xor x1 y1) (eo::define ((_v0 (bvxor x1))) (eo::define ((_v1 (bvxor y1))) (_ (= (_ _v0 (_ _v1 (eo::nil bvxor (eo::typeof x1))))) (_ _v1 (_ _v0 (eo::nil bvxor (eo::typeof y1))))))))
  )
)
; program: $eovc_bv-commutative-xor
(program $eovc_bv-commutative-xor ((@n1 Int) (@n0 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :signature ((BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-commutative-xor y1 x1) ($eo_requires_false ($eo_model_sat ($eor_bv-commutative-xor x1 y1)) true))
  )
)
(echo "smt-meta $eovc_bv-commutative-xor")
; program: $eor_bv-commutative-comp
(program $eor_bv-commutative-comp ((@n0 Int) (@n1 Int) (y1 (BitVec @n1)) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) (BitVec @n1)) Bool
  (
  (($eor_bv-commutative-comp x1 y1) (_ (= (_ (bvcomp x1) y1)) (_ (bvcomp y1) x1)))
  )
)
; program: $eovc_bv-commutative-comp
(program $eovc_bv-commutative-comp ((@n1 Int) (@n0 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :signature ((BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-commutative-comp y1 x1) ($eo_requires_false ($eo_model_sat ($eor_bv-commutative-comp x1 y1)) true))
  )
)
(echo "smt-meta $eovc_bv-commutative-comp")
; program: $eor_bv-zero-extend-eliminate-0
(program $eor_bv-zero-extend-eliminate-0 ((@n0 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0)) Bool
  (
  (($eor_bv-zero-extend-eliminate-0 x1) (_ (= (_ (zero_extend 0) x1)) x1))
  )
)
; program: $eovc_bv-zero-extend-eliminate-0
(program $eovc_bv-zero-extend-eliminate-0 ((@n0 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0)) Bool
  (
  (($eovc_bv-zero-extend-eliminate-0 x1) ($eo_requires_false ($eo_model_sat ($eor_bv-zero-extend-eliminate-0 x1)) true))
  )
)
(echo "smt-meta $eovc_bv-zero-extend-eliminate-0")
; program: $eor_bv-sign-extend-eliminate-0
(program $eor_bv-sign-extend-eliminate-0 ((@n0 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0)) Bool
  (
  (($eor_bv-sign-extend-eliminate-0 x1) (_ (= (_ (sign_extend 0) x1)) x1))
  )
)
; program: $eovc_bv-sign-extend-eliminate-0
(program $eovc_bv-sign-extend-eliminate-0 ((@n0 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0)) Bool
  (
  (($eovc_bv-sign-extend-eliminate-0 x1) ($eo_requires_false ($eo_model_sat ($eor_bv-sign-extend-eliminate-0 x1)) true))
  )
)
(echo "smt-meta $eovc_bv-sign-extend-eliminate-0")
; program: $eor_bv-not-neq
(program $eor_bv-not-neq ((@n0 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Bool) Bool
  (
  (($eor_bv-not-neq x1 (_ (= (_ (> (@bvsize x1)) 0)) true)) (_ (= (_ (= x1) (bvnot x1))) false))
  )
)
; program: $eovc_bv-not-neq
(program $eovc_bv-not-neq ((@n0 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0)) Bool
  (
  (($eovc_bv-not-neq x1) (eo::define ((_v0 (_ (= (_ (> (@bvsize x1)) 0)) true))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_bv-not-neq x1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_bv-not-neq")
; program: $eor_bv-ult-ones
(program $eor_bv-ult-ones ((@n0 Int) (x1 (BitVec @n0)) (n1 Int) (w1 Int))
  :signature ((BitVec @n0) Int Int Bool) Bool
  (
  (($eor_bv-ult-ones x1 n1 w1 (_ (= n1) (_ (- (int.pow2 w1)) 1))) (eo::define ((_v0 (_ (@bv n1) w1))) (_ (= (_ (bvult x1) _v0)) (_ (distinct x1) _v0))))
  )
)
; program: $eovc_bv-ult-ones
(program $eovc_bv-ult-ones ((@n0 Int) (x1 (BitVec @n0)) (n1 Int) (w1 Int))
  :signature (Int Int (BitVec @n0)) Bool
  (
  (($eovc_bv-ult-ones w1 n1 x1) (eo::define ((_v0 (_ (= n1) (_ (- (int.pow2 w1)) 1)))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_bv-ult-ones x1 n1 w1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_bv-ult-ones")
; program: $eor_bv-concat-merge-const
(program $eor_bv-concat-merge-const ((@n0 Int) (@n1 Int) (w1 Int) (xs1 (BitVec @n0)) (n1 Int) (w2 Int) (n2 Int) (ww1 Int) (zs1 (BitVec @n1)))
  :signature ((BitVec @n0) Int Int Int Int Int (BitVec @n1) Bool) Bool
  (
  (($eor_bv-concat-merge-const xs1 n1 w1 n2 w2 ww1 zs1 (_ (= ww1) (_ (+ w1) (_ (+ w2) 0)))) (_ (= (eo::list_concat concat xs1 (_ (concat (_ (@bv n1) w1)) (_ (concat (_ (@bv n2) w2)) zs1)))) ($singleton_elim (eo::list_concat concat xs1 (_ (concat (_ (@bv (_ (+ (_ (* n1) (_ (* (int.pow2 w2)) 1))) (_ (+ n2) 0))) ww1)) zs1)))))
  )
)
; program: $eovc_bv-concat-merge-const
(program $eovc_bv-concat-merge-const ((@n1 Int) (@n0 Int) (xs1 (BitVec @n0)) (n1 Int) (n2 Int) (zs1 (BitVec @n1)) (ww1 Int) (w1 Int) (w2 Int))
  :signature (Int Int Int (BitVec @n1) Int Int (BitVec @n0)) Bool
  (
  (($eovc_bv-concat-merge-const w2 w1 ww1 zs1 n2 n1 xs1) (eo::define ((_v0 (_ (= ww1) (_ (+ w1) (_ (+ w2) 0))))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_bv-concat-merge-const xs1 n1 w1 n2 w2 ww1 zs1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_bv-concat-merge-const")
; program: $eor_bv-commutative-add
(program $eor_bv-commutative-add ((@n0 Int) (@n1 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :signature ((BitVec @n0) (BitVec @n1)) Bool
  (
  (($eor_bv-commutative-add x1 y1) (eo::define ((_v0 (bvadd x1))) (eo::define ((_v1 (bvadd y1))) (_ (= (_ _v0 (_ _v1 (eo::nil bvadd (eo::typeof x1))))) (_ _v1 (_ _v0 (eo::nil bvadd (eo::typeof y1))))))))
  )
)
; program: $eovc_bv-commutative-add
(program $eovc_bv-commutative-add ((@n1 Int) (@n0 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :signature ((BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-commutative-add y1 x1) ($eo_requires_false ($eo_model_sat ($eor_bv-commutative-add x1 y1)) true))
  )
)
(echo "smt-meta $eovc_bv-commutative-add")
; program: $eor_bv-sub-eliminate
(program $eor_bv-sub-eliminate ((@n0 Int) (@n1 Int) (y1 (BitVec @n1)) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) (BitVec @n1)) Bool
  (
  (($eor_bv-sub-eliminate x1 y1) (_ (= (_ (bvsub x1) y1)) (_ (bvadd x1) (_ (bvadd (bvneg y1)) (eo::nil bvadd (eo::typeof x1))))))
  )
)
; program: $eovc_bv-sub-eliminate
(program $eovc_bv-sub-eliminate ((@n1 Int) (@n0 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :signature ((BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-sub-eliminate y1 x1) ($eo_requires_false ($eo_model_sat ($eor_bv-sub-eliminate x1 y1)) true))
  )
)
(echo "smt-meta $eovc_bv-sub-eliminate")
; program: $eor_bv-ite-width-one
(program $eor_bv-ite-width-one ((@n0 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0)) Bool
  (
  (($eor_bv-ite-width-one x1) (eo::define ((_v0 (_ (@bv 1) 1))) (_ (= (_ (_ (ite (_ (= x1) _v0)) _v0) (_ (@bv 0) 1))) x1)))
  )
)
; program: $eovc_bv-ite-width-one
(program $eovc_bv-ite-width-one ((@n0 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0)) Bool
  (
  (($eovc_bv-ite-width-one x1) ($eo_requires_false ($eo_model_sat ($eor_bv-ite-width-one x1)) true))
  )
)
(echo "smt-meta $eovc_bv-ite-width-one")
; program: $eor_bv-ite-width-one-not
(program $eor_bv-ite-width-one-not ((@n0 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0)) Bool
  (
  (($eor_bv-ite-width-one-not x1) (eo::define ((_v0 (_ (@bv 0) 1))) (_ (= (_ (_ (ite (_ (= x1) _v0)) (_ (@bv 1) 1)) _v0)) (bvnot x1))))
  )
)
; program: $eovc_bv-ite-width-one-not
(program $eovc_bv-ite-width-one-not ((@n0 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0)) Bool
  (
  (($eovc_bv-ite-width-one-not x1) ($eo_requires_false ($eo_model_sat ($eor_bv-ite-width-one-not x1)) true))
  )
)
(echo "smt-meta $eovc_bv-ite-width-one-not")
; program: $eor_bv-eq-xor-solve
(program $eor_bv-eq-xor-solve ((@n0 Int) (@n1 Int) (@n2 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)) (z1 (BitVec @n2)))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n2)) Bool
  (
  (($eor_bv-eq-xor-solve x1 y1 z1) (eo::define ((_v0 (bvxor y1))) (_ (= (_ (= (_ (= (_ (bvxor x1) (_ _v0 (eo::nil bvxor (eo::typeof x1))))) z1)) (_ (= x1) (_ (bvxor z1) (_ _v0 (eo::nil bvxor (eo::typeof z1))))))) true)))
  )
)
; program: $eovc_bv-eq-xor-solve
(program $eovc_bv-eq-xor-solve ((@n2 Int) (@n1 Int) (@n0 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)) (z1 (BitVec @n2)))
  :signature ((BitVec @n2) (BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-eq-xor-solve z1 y1 x1) ($eo_requires_false ($eo_model_sat ($eor_bv-eq-xor-solve x1 y1 z1)) true))
  )
)
(echo "smt-meta $eovc_bv-eq-xor-solve")
; program: $eor_bv-eq-not-solve
(program $eor_bv-eq-not-solve ((@n0 Int) (@n1 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :signature ((BitVec @n0) (BitVec @n1)) Bool
  (
  (($eor_bv-eq-not-solve x1 y1) (_ (= (_ (= (_ (= (bvnot x1)) y1)) (_ (= x1) (bvnot y1)))) true))
  )
)
; program: $eovc_bv-eq-not-solve
(program $eovc_bv-eq-not-solve ((@n1 Int) (@n0 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :signature ((BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-eq-not-solve y1 x1) ($eo_requires_false ($eo_model_sat ($eor_bv-eq-not-solve x1 y1)) true))
  )
)
(echo "smt-meta $eovc_bv-eq-not-solve")
; program: $eor_bv-ugt-eliminate
(program $eor_bv-ugt-eliminate ((@n0 Int) (@n1 Int) (y1 (BitVec @n1)) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) (BitVec @n1)) Bool
  (
  (($eor_bv-ugt-eliminate x1 y1) (_ (= (_ (bvugt x1) y1)) (_ (bvult y1) x1)))
  )
)
; program: $eovc_bv-ugt-eliminate
(program $eovc_bv-ugt-eliminate ((@n1 Int) (@n0 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :signature ((BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-ugt-eliminate y1 x1) ($eo_requires_false ($eo_model_sat ($eor_bv-ugt-eliminate x1 y1)) true))
  )
)
(echo "smt-meta $eovc_bv-ugt-eliminate")
; program: $eor_bv-uge-eliminate
(program $eor_bv-uge-eliminate ((@n0 Int) (@n1 Int) (y1 (BitVec @n1)) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) (BitVec @n1)) Bool
  (
  (($eor_bv-uge-eliminate x1 y1) (_ (= (_ (bvuge x1) y1)) (_ (bvule y1) x1)))
  )
)
; program: $eovc_bv-uge-eliminate
(program $eovc_bv-uge-eliminate ((@n1 Int) (@n0 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :signature ((BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-uge-eliminate y1 x1) ($eo_requires_false ($eo_model_sat ($eor_bv-uge-eliminate x1 y1)) true))
  )
)
(echo "smt-meta $eovc_bv-uge-eliminate")
; program: $eor_bv-sgt-eliminate
(program $eor_bv-sgt-eliminate ((@n0 Int) (@n1 Int) (y1 (BitVec @n1)) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) (BitVec @n1)) Bool
  (
  (($eor_bv-sgt-eliminate x1 y1) (_ (= (_ (bvsgt x1) y1)) (_ (bvslt y1) x1)))
  )
)
; program: $eovc_bv-sgt-eliminate
(program $eovc_bv-sgt-eliminate ((@n1 Int) (@n0 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :signature ((BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-sgt-eliminate y1 x1) ($eo_requires_false ($eo_model_sat ($eor_bv-sgt-eliminate x1 y1)) true))
  )
)
(echo "smt-meta $eovc_bv-sgt-eliminate")
; program: $eor_bv-sge-eliminate
(program $eor_bv-sge-eliminate ((@n0 Int) (@n1 Int) (y1 (BitVec @n1)) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) (BitVec @n1)) Bool
  (
  (($eor_bv-sge-eliminate x1 y1) (_ (= (_ (bvsge x1) y1)) (_ (bvsle y1) x1)))
  )
)
; program: $eovc_bv-sge-eliminate
(program $eovc_bv-sge-eliminate ((@n1 Int) (@n0 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :signature ((BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-sge-eliminate y1 x1) ($eo_requires_false ($eo_model_sat ($eor_bv-sge-eliminate x1 y1)) true))
  )
)
(echo "smt-meta $eovc_bv-sge-eliminate")
; program: $eor_bv-sle-eliminate
(program $eor_bv-sle-eliminate ((@n0 Int) (@n1 Int) (y1 (BitVec @n1)) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) (BitVec @n1)) Bool
  (
  (($eor_bv-sle-eliminate x1 y1) (_ (= (_ (bvsle x1) y1)) (not (_ (bvslt y1) x1))))
  )
)
; program: $eovc_bv-sle-eliminate
(program $eovc_bv-sle-eliminate ((@n1 Int) (@n0 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :signature ((BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-sle-eliminate y1 x1) ($eo_requires_false ($eo_model_sat ($eor_bv-sle-eliminate x1 y1)) true))
  )
)
(echo "smt-meta $eovc_bv-sle-eliminate")
; program: $eor_bv-redor-eliminate
(program $eor_bv-redor-eliminate ((@n0 Int) (x1 (BitVec @n0)) (w1 Int))
  :signature ((BitVec @n0) Int Bool) Bool
  (
  (($eor_bv-redor-eliminate x1 w1 (_ (= w1) (@bvsize x1))) (_ (= (bvredor x1)) (bvnot (_ (bvcomp x1) (_ (@bv 0) w1)))))
  )
)
; program: $eovc_bv-redor-eliminate
(program $eovc_bv-redor-eliminate ((@n0 Int) (w1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int) Bool
  (
  (($eovc_bv-redor-eliminate x1 w1) (eo::define ((_v0 (_ (= w1) (@bvsize x1)))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_bv-redor-eliminate x1 w1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_bv-redor-eliminate")
; program: $eor_bv-redand-eliminate
(program $eor_bv-redand-eliminate ((@n0 Int) (x1 (BitVec @n0)) (w1 Int))
  :signature ((BitVec @n0) Int Bool) Bool
  (
  (($eor_bv-redand-eliminate x1 w1 (_ (= w1) (@bvsize x1))) (_ (= (bvredand x1)) (_ (bvcomp x1) (bvnot (_ (@bv 0) w1)))))
  )
)
; program: $eovc_bv-redand-eliminate
(program $eovc_bv-redand-eliminate ((@n0 Int) (w1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int) Bool
  (
  (($eovc_bv-redand-eliminate x1 w1) (eo::define ((_v0 (_ (= w1) (@bvsize x1)))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_bv-redand-eliminate x1 w1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_bv-redand-eliminate")
; program: $eor_bv-ule-eliminate
(program $eor_bv-ule-eliminate ((@n0 Int) (@n1 Int) (y1 (BitVec @n1)) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) (BitVec @n1)) Bool
  (
  (($eor_bv-ule-eliminate x1 y1) (_ (= (_ (bvule x1) y1)) (not (_ (bvult y1) x1))))
  )
)
; program: $eovc_bv-ule-eliminate
(program $eovc_bv-ule-eliminate ((@n1 Int) (@n0 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :signature ((BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-ule-eliminate y1 x1) ($eo_requires_false ($eo_model_sat ($eor_bv-ule-eliminate x1 y1)) true))
  )
)
(echo "smt-meta $eovc_bv-ule-eliminate")
; program: $eor_bv-comp-eliminate
(program $eor_bv-comp-eliminate ((@n0 Int) (@n1 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :signature ((BitVec @n0) (BitVec @n1)) Bool
  (
  (($eor_bv-comp-eliminate x1 y1) (_ (= (_ (bvcomp x1) y1)) (_ (_ (ite (_ (= x1) y1)) (_ (@bv 1) 1)) (_ (@bv 0) 1))))
  )
)
; program: $eovc_bv-comp-eliminate
(program $eovc_bv-comp-eliminate ((@n1 Int) (@n0 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :signature ((BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-comp-eliminate y1 x1) ($eo_requires_false ($eo_model_sat ($eor_bv-comp-eliminate x1 y1)) true))
  )
)
(echo "smt-meta $eovc_bv-comp-eliminate")
; program: $eor_bv-rotate-left-eliminate-1
(program $eor_bv-rotate-left-eliminate-1 ((@n0 Int) (amount1 Int) (u1 Int) (u2 Int) (l1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int Int Bool Bool Bool Bool) Bool
  (
  ((eo::define ((_v0 (@bvsize x1))) (eo::define ((_v1 (_ (mod amount1) _v0))) (eo::define ((_v2 (- _v0))) ($eor_bv-rotate-left-eliminate-1 x1 amount1 u1 u2 l1 (_ (= (_ (= _v1) 0)) false) (_ (= u1) (_ _v2 (_ (+ 1) (_ (+ _v1) 0)))) (_ (= u2) (_ _v2 1)) (_ (= l1) (_ _v2 _v1)))))) (_ (= (_ (rotate_left amount1) x1)) (_ (concat (_ (_ (extract u1) 0) x1)) (_ (concat (_ (_ (extract u2) l1) x1)) (eo::to_bin 0 0)))))
  )
)
; program: $eovc_bv-rotate-left-eliminate-1
(program $eovc_bv-rotate-left-eliminate-1 ((@n0 Int) (u1 Int) (u2 Int) (l1 Int) (amount1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int Int) Bool
  (
  (($eovc_bv-rotate-left-eliminate-1 x1 amount1 l1 u2 u1) (eo::define ((_v0 (@bvsize x1))) (eo::define ((_v1 (_ (mod amount1) _v0))) (eo::define ((_v2 (- _v0))) (eo::define ((_v3 (_ (= l1) (_ _v2 _v1)))) (eo::define ((_v4 (_ (= u2) (_ _v2 1)))) (eo::define ((_v5 (_ (= u1) (_ _v2 (_ (+ 1) (_ (+ _v1) 0)))))) (eo::define ((_v6 (_ (= (_ (= _v1) 0)) false))) ($eo_requires_true ($eo_model_sat _v6) ($eo_requires_true ($eo_model_sat _v5) ($eo_requires_true ($eo_model_sat _v4) ($eo_requires_true ($eo_model_sat _v3) ($eo_requires_false ($eo_model_sat ($eor_bv-rotate-left-eliminate-1 x1 amount1 u1 u2 l1 _v6 _v5 _v4 _v3)) true)))))))))))))
  )
)
(echo "smt-meta $eovc_bv-rotate-left-eliminate-1")
; program: $eor_bv-rotate-left-eliminate-2
(program $eor_bv-rotate-left-eliminate-2 ((@n0 Int) (amount1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Bool) Bool
  (
  (($eor_bv-rotate-left-eliminate-2 x1 amount1 (_ (= (_ (mod amount1) (@bvsize x1))) 0)) (_ (= (_ (rotate_left amount1) x1)) x1))
  )
)
; program: $eovc_bv-rotate-left-eliminate-2
(program $eovc_bv-rotate-left-eliminate-2 ((@n0 Int) (amount1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int) Bool
  (
  (($eovc_bv-rotate-left-eliminate-2 x1 amount1) (eo::define ((_v0 (_ (= (_ (mod amount1) (@bvsize x1))) 0))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_bv-rotate-left-eliminate-2 x1 amount1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_bv-rotate-left-eliminate-2")
; program: $eor_bv-rotate-right-eliminate-1
(program $eor_bv-rotate-right-eliminate-1 ((@n0 Int) (amount1 Int) (u1 Int) (u2 Int) (l1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int Int Bool Bool Bool Bool) Bool
  (
  ((eo::define ((_v0 (@bvsize x1))) (eo::define ((_v1 (_ (mod amount1) _v0))) ($eor_bv-rotate-right-eliminate-1 x1 amount1 u1 u2 l1 (_ (= (_ (= _v1) 0)) false) (_ (= u1) (_ (- _v1) 1)) (_ (= u2) (_ (- _v0) 1)) (_ (= l1) _v1)))) (_ (= (_ (rotate_right amount1) x1)) (_ (concat (_ (_ (extract u1) 0) x1)) (_ (concat (_ (_ (extract u2) l1) x1)) (eo::to_bin 0 0)))))
  )
)
; program: $eovc_bv-rotate-right-eliminate-1
(program $eovc_bv-rotate-right-eliminate-1 ((@n0 Int) (u1 Int) (u2 Int) (l1 Int) (amount1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int Int) Bool
  (
  (($eovc_bv-rotate-right-eliminate-1 x1 amount1 l1 u2 u1) (eo::define ((_v0 (@bvsize x1))) (eo::define ((_v1 (_ (mod amount1) _v0))) (eo::define ((_v2 (_ (= l1) _v1))) (eo::define ((_v3 (_ (= u2) (_ (- _v0) 1)))) (eo::define ((_v4 (_ (= u1) (_ (- _v1) 1)))) (eo::define ((_v5 (_ (= (_ (= _v1) 0)) false))) ($eo_requires_true ($eo_model_sat _v5) ($eo_requires_true ($eo_model_sat _v4) ($eo_requires_true ($eo_model_sat _v3) ($eo_requires_true ($eo_model_sat _v2) ($eo_requires_false ($eo_model_sat ($eor_bv-rotate-right-eliminate-1 x1 amount1 u1 u2 l1 _v5 _v4 _v3 _v2)) true))))))))))))
  )
)
(echo "smt-meta $eovc_bv-rotate-right-eliminate-1")
; program: $eor_bv-rotate-right-eliminate-2
(program $eor_bv-rotate-right-eliminate-2 ((@n0 Int) (amount1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Bool) Bool
  (
  (($eor_bv-rotate-right-eliminate-2 x1 amount1 (_ (= (_ (mod amount1) (@bvsize x1))) 0)) (_ (= (_ (rotate_right amount1) x1)) x1))
  )
)
; program: $eovc_bv-rotate-right-eliminate-2
(program $eovc_bv-rotate-right-eliminate-2 ((@n0 Int) (amount1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int) Bool
  (
  (($eovc_bv-rotate-right-eliminate-2 x1 amount1) (eo::define ((_v0 (_ (= (_ (mod amount1) (@bvsize x1))) 0))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_bv-rotate-right-eliminate-2 x1 amount1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_bv-rotate-right-eliminate-2")
; program: $eor_bv-nand-eliminate
(program $eor_bv-nand-eliminate ((@n0 Int) (@n1 Int) (y1 (BitVec @n1)) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) (BitVec @n1)) Bool
  (
  (($eor_bv-nand-eliminate x1 y1) (_ (= (_ (bvnand x1) y1)) (bvnot (_ (bvand x1) (_ (bvand y1) (eo::nil bvand (eo::typeof x1)))))))
  )
)
; program: $eovc_bv-nand-eliminate
(program $eovc_bv-nand-eliminate ((@n1 Int) (@n0 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :signature ((BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-nand-eliminate y1 x1) ($eo_requires_false ($eo_model_sat ($eor_bv-nand-eliminate x1 y1)) true))
  )
)
(echo "smt-meta $eovc_bv-nand-eliminate")
; program: $eor_bv-nor-eliminate
(program $eor_bv-nor-eliminate ((@n0 Int) (@n1 Int) (y1 (BitVec @n1)) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) (BitVec @n1)) Bool
  (
  (($eor_bv-nor-eliminate x1 y1) (_ (= (_ (bvnor x1) y1)) (bvnot (_ (bvor x1) (_ (bvor y1) (eo::nil bvor (eo::typeof x1)))))))
  )
)
; program: $eovc_bv-nor-eliminate
(program $eovc_bv-nor-eliminate ((@n1 Int) (@n0 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :signature ((BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-nor-eliminate y1 x1) ($eo_requires_false ($eo_model_sat ($eor_bv-nor-eliminate x1 y1)) true))
  )
)
(echo "smt-meta $eovc_bv-nor-eliminate")
; program: $eor_bv-xnor-eliminate
(program $eor_bv-xnor-eliminate ((@n0 Int) (@n1 Int) (y1 (BitVec @n1)) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) (BitVec @n1)) Bool
  (
  (($eor_bv-xnor-eliminate x1 y1) (_ (= (_ (bvxnor x1) y1)) (bvnot (_ (bvxor x1) (_ (bvxor y1) (eo::nil bvxor (eo::typeof x1)))))))
  )
)
; program: $eovc_bv-xnor-eliminate
(program $eovc_bv-xnor-eliminate ((@n1 Int) (@n0 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :signature ((BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-xnor-eliminate y1 x1) ($eo_requires_false ($eo_model_sat ($eor_bv-xnor-eliminate x1 y1)) true))
  )
)
(echo "smt-meta $eovc_bv-xnor-eliminate")
; program: $eor_bv-sdiv-eliminate
(program $eor_bv-sdiv-eliminate ((@n0 Int) (@n1 Int) (x1 (BitVec @n0)) (nm1 Int) (y1 (BitVec @n1)))
  :signature ((BitVec @n0) (BitVec @n1) Int Bool) Bool
  (
  (($eor_bv-sdiv-eliminate x1 y1 nm1 (_ (= nm1) (_ (- (@bvsize x1)) 1))) (eo::define ((_v0 (_ (@bv 1) 1))) (eo::define ((_v1 (_ (extract nm1) nm1))) (eo::define ((_v2 (_ (= (_ _v1 y1)) _v0))) (eo::define ((_v3 (_ (= (_ _v1 x1)) _v0))) (eo::define ((_v4 (_ (bvudiv (_ (_ (ite _v3) (bvneg x1)) x1)) (_ (_ (ite _v2) (bvneg y1)) y1)))) (_ (= (_ (bvsdiv x1) y1)) (_ (_ (ite (_ (xor _v3) _v2)) (bvneg _v4)) _v4))))))))
  )
)
; program: $eovc_bv-sdiv-eliminate
(program $eovc_bv-sdiv-eliminate ((@n0 Int) (@n1 Int) (y1 (BitVec @n1)) (nm1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int (BitVec @n1)) Bool
  (
  (($eovc_bv-sdiv-eliminate x1 nm1 y1) (eo::define ((_v0 (_ (= nm1) (_ (- (@bvsize x1)) 1)))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_bv-sdiv-eliminate x1 y1 nm1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_bv-sdiv-eliminate")
; program: $eor_bv-zero-extend-eliminate
(program $eor_bv-zero-extend-eliminate ((@n0 Int) (n1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int) Bool
  (
  (($eor_bv-zero-extend-eliminate x1 n1) (_ (= (_ (zero_extend n1) x1)) (_ (concat (_ (@bv 0) n1)) (_ (concat x1) (eo::to_bin 0 0)))))
  )
)
; program: $eovc_bv-zero-extend-eliminate
(program $eovc_bv-zero-extend-eliminate ((@n0 Int) (x1 (BitVec @n0)) (n1 Int))
  :signature (Int (BitVec @n0)) Bool
  (
  (($eovc_bv-zero-extend-eliminate n1 x1) ($eo_requires_false ($eo_model_sat ($eor_bv-zero-extend-eliminate x1 n1)) true))
  )
)
(echo "smt-meta $eovc_bv-zero-extend-eliminate")
; program: $eor_bv-uaddo-eliminate
(program $eor_bv-uaddo-eliminate ((@n0 Int) (@n1 Int) (w1 Int) (y1 (BitVec @n1)) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) (BitVec @n1) Int Bool) Bool
  (
  (($eor_bv-uaddo-eliminate x1 y1 w1 (_ (= w1) (@bvsize x1))) (eo::define ((_v0 (concat (_ (@bv 0) 1)))) (eo::define ((_v1 (_ _v0 (_ (concat x1) (eo::to_bin 0 0))))) (_ (= (_ (bvuaddo x1) y1)) (_ (= (_ (_ (extract w1) w1) (_ (bvadd _v1) (_ (bvadd (_ _v0 (_ (concat y1) (eo::to_bin 0 0)))) (eo::nil bvadd (eo::typeof _v1)))))) (_ (@bv 1) 1))))))
  )
)
; program: $eovc_bv-uaddo-eliminate
(program $eovc_bv-uaddo-eliminate ((@n0 Int) (@n1 Int) (y1 (BitVec @n1)) (w1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int (BitVec @n1)) Bool
  (
  (($eovc_bv-uaddo-eliminate x1 w1 y1) (eo::define ((_v0 (_ (= w1) (@bvsize x1)))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_bv-uaddo-eliminate x1 y1 w1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_bv-uaddo-eliminate")
; program: $eor_bv-saddo-eliminate
(program $eor_bv-saddo-eliminate ((@n0 Int) (@n1 Int) (wm1 Int) (y1 (BitVec @n1)) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) (BitVec @n1) Int Bool) Bool
  (
  (($eor_bv-saddo-eliminate x1 y1 wm1 (_ (= wm1) (_ (- (@bvsize x1)) 1))) (eo::define ((_v0 (_ (@bv 1) 1))) (eo::define ((_v1 (_ (extract wm1) wm1))) (eo::define ((_v2 (= (_ _v1 (_ (bvadd x1) (_ (bvadd y1) (eo::nil bvadd (eo::typeof x1)))))))) (eo::define ((_v3 (_ (@bv 0) 1))) (eo::define ((_v4 (= (_ _v1 y1)))) (eo::define ((_v5 (= (_ _v1 x1)))) (_ (= (_ (bvsaddo x1) y1)) (_ (or (_ (and (_ (and (_ _v5 _v0)) (_ (and (_ _v4 _v0)) true))) (_ (and (_ _v2 _v3)) true))) (_ (or (_ (and (_ (and (_ _v5 _v3)) (_ (and (_ _v4 _v3)) true))) (_ (and (_ _v2 _v0)) true))) false))))))))))
  )
)
; program: $eovc_bv-saddo-eliminate
(program $eovc_bv-saddo-eliminate ((@n0 Int) (@n1 Int) (y1 (BitVec @n1)) (wm1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int (BitVec @n1)) Bool
  (
  (($eovc_bv-saddo-eliminate x1 wm1 y1) (eo::define ((_v0 (_ (= wm1) (_ (- (@bvsize x1)) 1)))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_bv-saddo-eliminate x1 y1 wm1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_bv-saddo-eliminate")
; program: $eor_bv-sdivo-eliminate
(program $eor_bv-sdivo-eliminate ((@n0 Int) (@n1 Int) (x1 (BitVec @n0)) (wm1 Int) (y1 (BitVec @n1)) (w1 Int))
  :signature ((BitVec @n0) (BitVec @n1) Int Int Bool Bool) Bool
  (
  (($eor_bv-sdivo-eliminate x1 y1 w1 wm1 (_ (= wm1) (_ (- (@bvsize x1)) 1)) (_ (= w1) (@bvsize y1))) (eo::define ((_v0 (@bv 0))) (_ (= (_ (bvsdivo x1) y1)) (_ (and (_ (= x1) (_ (concat (_ (@bv 1) 1)) (_ (concat (_ _v0 wm1)) (eo::to_bin 0 0))))) (_ (and (_ (= y1) (bvnot (_ _v0 w1)))) true)))))
  )
)
; program: $eovc_bv-sdivo-eliminate
(program $eovc_bv-sdivo-eliminate ((@n1 Int) (@n0 Int) (wm1 Int) (x1 (BitVec @n0)) (w1 Int) (y1 (BitVec @n1)))
  :signature ((BitVec @n1) Int (BitVec @n0) Int) Bool
  (
  (($eovc_bv-sdivo-eliminate y1 w1 x1 wm1) (eo::define ((_v0 (_ (= w1) (@bvsize y1)))) (eo::define ((_v1 (_ (= wm1) (_ (- (@bvsize x1)) 1)))) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_bv-sdivo-eliminate x1 y1 w1 wm1 _v1 _v0)) true))))))
  )
)
(echo "smt-meta $eovc_bv-sdivo-eliminate")
; program: $eor_bv-smod-eliminate
(program $eor_bv-smod-eliminate ((@n0 Int) (@n1 Int) (w1 Int) (x1 (BitVec @n0)) (wm1 Int) (y1 (BitVec @n1)))
  :signature ((BitVec @n0) (BitVec @n1) Int Int Bool Bool) Bool
  (
  ((eo::define ((_v0 (@bvsize x1))) ($eor_bv-smod-eliminate x1 y1 w1 wm1 (_ (= w1) _v0) (_ (= wm1) (_ (- _v0) 1)))) (eo::define ((_v0 (@bv 0))) (eo::define ((_v1 (_ _v0 1))) (eo::define ((_v2 (_ (extract wm1) wm1))) (eo::define ((_v3 (= (_ _v2 y1)))) (eo::define ((_v4 (_ _v3 _v1))) (eo::define ((_v5 (= (_ _v2 x1)))) (eo::define ((_v6 (_ _v5 _v1))) (eo::define ((_v7 (_ (bvurem (_ (_ (ite _v6) x1) (bvneg x1))) (_ (_ (ite _v4) y1) (bvneg y1))))) (eo::define ((_v8 (bvneg _v7))) (eo::define ((_v9 (bvadd y1))) (eo::define ((_v10 (_ (@bv 1) 1))) (eo::define ((_v11 (and _v6))) (eo::define ((_v12 (_ (and _v4) true))) (_ (= (_ (bvsmod x1) y1)) (_ (_ (ite (_ (= _v7) (_ _v0 w1))) _v7) (_ (_ (ite (_ _v11 _v12)) _v7) (_ (_ (ite (_ (and (_ _v5 _v10)) _v12)) (_ (bvadd _v8) (_ _v9 (eo::nil bvadd (eo::typeof _v8))))) (_ (_ (ite (_ _v11 (_ (and (_ _v3 _v10)) true))) (_ (bvadd _v7) (_ _v9 (eo::nil bvadd (eo::typeof _v7))))) _v8)))))))))))))))))))
  )
)
; program: $eovc_bv-smod-eliminate
(program $eovc_bv-smod-eliminate ((@n0 Int) (@n1 Int) (y1 (BitVec @n1)) (w1 Int) (wm1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int (BitVec @n1)) Bool
  (
  (($eovc_bv-smod-eliminate x1 wm1 w1 y1) (eo::define ((_v0 (@bvsize x1))) (eo::define ((_v1 (_ (= wm1) (_ (- _v0) 1)))) (eo::define ((_v2 (_ (= w1) _v0))) ($eo_requires_true ($eo_model_sat _v2) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_false ($eo_model_sat ($eor_bv-smod-eliminate x1 y1 w1 wm1 _v2 _v1)) true)))))))
  )
)
(echo "smt-meta $eovc_bv-smod-eliminate")
; program: $eor_bv-srem-eliminate
(program $eor_bv-srem-eliminate ((@n0 Int) (@n1 Int) (x1 (BitVec @n0)) (nm1 Int) (y1 (BitVec @n1)))
  :signature ((BitVec @n0) (BitVec @n1) Int Bool) Bool
  (
  (($eor_bv-srem-eliminate x1 y1 nm1 (_ (= nm1) (_ (- (@bvsize x1)) 1))) (eo::define ((_v0 (_ (@bv 1) 1))) (eo::define ((_v1 (_ (extract nm1) nm1))) (eo::define ((_v2 (ite (_ (= (_ _v1 x1)) _v0)))) (eo::define ((_v3 (_ (bvurem (_ (_ _v2 (bvneg x1)) x1)) (_ (_ (ite (_ (= (_ _v1 y1)) _v0)) (bvneg y1)) y1)))) (_ (= (_ (bvsrem x1) y1)) (_ (_ _v2 (bvneg _v3)) _v3)))))))
  )
)
; program: $eovc_bv-srem-eliminate
(program $eovc_bv-srem-eliminate ((@n0 Int) (@n1 Int) (y1 (BitVec @n1)) (nm1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int (BitVec @n1)) Bool
  (
  (($eovc_bv-srem-eliminate x1 nm1 y1) (eo::define ((_v0 (_ (= nm1) (_ (- (@bvsize x1)) 1)))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_bv-srem-eliminate x1 y1 nm1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_bv-srem-eliminate")
; program: $eor_bv-usubo-eliminate
(program $eor_bv-usubo-eliminate ((@n0 Int) (@n1 Int) (n1 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :signature ((BitVec @n0) (BitVec @n1) Int Bool) Bool
  (
  (($eor_bv-usubo-eliminate x1 y1 n1 (_ (= n1) (@bvsize x1))) (eo::define ((_v0 (zero_extend 1))) (_ (= (_ (bvusubo x1) y1)) (_ (= (_ (_ (extract n1) n1) (_ (bvsub (_ _v0 x1)) (_ _v0 y1)))) (_ (@bv 1) 1)))))
  )
)
; program: $eovc_bv-usubo-eliminate
(program $eovc_bv-usubo-eliminate ((@n0 Int) (@n1 Int) (y1 (BitVec @n1)) (n1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int (BitVec @n1)) Bool
  (
  (($eovc_bv-usubo-eliminate x1 n1 y1) (eo::define ((_v0 (_ (= n1) (@bvsize x1)))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_bv-usubo-eliminate x1 y1 n1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_bv-usubo-eliminate")
; program: $eor_bv-ssubo-eliminate
(program $eor_bv-ssubo-eliminate ((@n0 Int) (@n1 Int) (nm1 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :signature ((BitVec @n0) (BitVec @n1) Int Bool) Bool
  (
  (($eor_bv-ssubo-eliminate x1 y1 nm1 (_ (= nm1) (_ (- (@bvsize x1)) 1))) (eo::define ((_v0 (_ (@bv 1) 1))) (eo::define ((_v1 (_ (extract nm1) nm1))) (eo::define ((_v2 (= (_ _v1 (_ (bvsub x1) y1))))) (eo::define ((_v3 (= (_ _v1 y1)))) (eo::define ((_v4 (_ (@bv 0) 1))) (eo::define ((_v5 (= (_ _v1 x1)))) (_ (= (_ (bvssubo x1) y1)) (_ (or (_ (and (_ (and (_ _v5 _v0)) (_ (and (_ _v3 _v4)) true))) (_ (and (_ _v2 _v4)) true))) (_ (or (_ (and (_ (and (_ _v5 _v4)) (_ (and (_ _v3 _v0)) true))) (_ (and (_ _v2 _v0)) true))) false))))))))))
  )
)
; program: $eovc_bv-ssubo-eliminate
(program $eovc_bv-ssubo-eliminate ((@n0 Int) (@n1 Int) (y1 (BitVec @n1)) (nm1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int (BitVec @n1)) Bool
  (
  (($eovc_bv-ssubo-eliminate x1 nm1 y1) (eo::define ((_v0 (_ (= nm1) (_ (- (@bvsize x1)) 1)))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_bv-ssubo-eliminate x1 y1 nm1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_bv-ssubo-eliminate")
; program: $eor_bv-nego-eliminate
(program $eor_bv-nego-eliminate ((@n0 Int) (x1 (BitVec @n0)) (n1 Int))
  :signature ((BitVec @n0) Int Bool) Bool
  (
  (($eor_bv-nego-eliminate x1 n1 (_ (= n1) (_ (- (@bvsize x1)) 1))) (_ (= (bvnego x1)) (_ (= x1) (_ (concat (_ (@bv 1) 1)) (_ (concat (_ (@bv 0) n1)) (eo::to_bin 0 0))))))
  )
)
; program: $eovc_bv-nego-eliminate
(program $eovc_bv-nego-eliminate ((@n0 Int) (n1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int) Bool
  (
  (($eovc_bv-nego-eliminate x1 n1) (eo::define ((_v0 (_ (= n1) (_ (- (@bvsize x1)) 1)))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_bv-nego-eliminate x1 n1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_bv-nego-eliminate")
; program: $eor_bv-ite-equal-children
(program $eor_bv-ite-equal-children ((@n0 Int) (c1 (BitVec 1)) (x1 (BitVec @n0)))
  :signature ((BitVec 1) (BitVec @n0)) Bool
  (
  (($eor_bv-ite-equal-children c1 x1) (_ (= (_ (_ (bvite c1) x1) x1)) x1))
  )
)
; program: $eovc_bv-ite-equal-children
(program $eovc_bv-ite-equal-children ((@n0 Int) (c1 (BitVec 1)) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) (BitVec 1)) Bool
  (
  (($eovc_bv-ite-equal-children x1 c1) ($eo_requires_false ($eo_model_sat ($eor_bv-ite-equal-children c1 x1)) true))
  )
)
(echo "smt-meta $eovc_bv-ite-equal-children")
; program: $eor_bv-ite-const-children-1
(program $eor_bv-ite-const-children-1 ((c1 (BitVec 1)))
  :signature ((BitVec 1)) Bool
  (
  (($eor_bv-ite-const-children-1 c1) (_ (= (_ (_ (bvite c1) (_ (@bv 0) 1)) (_ (@bv 1) 1))) (bvnot c1)))
  )
)
; program: $eovc_bv-ite-const-children-1
(program $eovc_bv-ite-const-children-1 ((c1 (BitVec 1)))
  :signature ((BitVec 1)) Bool
  (
  (($eovc_bv-ite-const-children-1 c1) ($eo_requires_false ($eo_model_sat ($eor_bv-ite-const-children-1 c1)) true))
  )
)
(echo "smt-meta $eovc_bv-ite-const-children-1")
; program: $eor_bv-ite-const-children-2
(program $eor_bv-ite-const-children-2 ((c1 (BitVec 1)))
  :signature ((BitVec 1)) Bool
  (
  (($eor_bv-ite-const-children-2 c1) (_ (= (_ (_ (bvite c1) (_ (@bv 1) 1)) (_ (@bv 0) 1))) c1))
  )
)
; program: $eovc_bv-ite-const-children-2
(program $eovc_bv-ite-const-children-2 ((c1 (BitVec 1)))
  :signature ((BitVec 1)) Bool
  (
  (($eovc_bv-ite-const-children-2 c1) ($eo_requires_false ($eo_model_sat ($eor_bv-ite-const-children-2 c1)) true))
  )
)
(echo "smt-meta $eovc_bv-ite-const-children-2")
; program: $eor_bv-ite-equal-cond-1
(program $eor_bv-ite-equal-cond-1 ((@n0 Int) (@n1 Int) (@n2 Int) (e1 (BitVec @n1)) (c1 (BitVec 1)) (t1 (BitVec @n0)) (e2 (BitVec @n2)))
  :signature ((BitVec 1) (BitVec @n0) (BitVec @n1) (BitVec @n2)) Bool
  (
  (($eor_bv-ite-equal-cond-1 c1 t1 e1 e2) (eo::define ((_v0 (bvite c1))) (eo::define ((_v1 (_ _v0 t1))) (_ (= (_ (_ _v0 (_ _v1 e1)) e2)) (_ _v1 e2)))))
  )
)
; program: $eovc_bv-ite-equal-cond-1
(program $eovc_bv-ite-equal-cond-1 ((@n2 Int) (@n1 Int) (@n0 Int) (c1 (BitVec 1)) (t1 (BitVec @n0)) (e1 (BitVec @n1)) (e2 (BitVec @n2)))
  :signature ((BitVec @n2) (BitVec @n1) (BitVec @n0) (BitVec 1)) Bool
  (
  (($eovc_bv-ite-equal-cond-1 e2 e1 t1 c1) ($eo_requires_false ($eo_model_sat ($eor_bv-ite-equal-cond-1 c1 t1 e1 e2)) true))
  )
)
(echo "smt-meta $eovc_bv-ite-equal-cond-1")
; program: $eor_bv-ite-equal-cond-2
(program $eor_bv-ite-equal-cond-2 ((@n0 Int) (@n1 Int) (@n2 Int) (t2 (BitVec @n1)) (c1 (BitVec 1)) (t1 (BitVec @n0)) (e1 (BitVec @n2)))
  :signature ((BitVec 1) (BitVec @n0) (BitVec @n1) (BitVec @n2)) Bool
  (
  (($eor_bv-ite-equal-cond-2 c1 t1 t2 e1) (eo::define ((_v0 (bvite c1))) (eo::define ((_v1 (_ _v0 t1))) (_ (= (_ _v1 (_ (_ _v0 t2) e1))) (_ _v1 e1)))))
  )
)
; program: $eovc_bv-ite-equal-cond-2
(program $eovc_bv-ite-equal-cond-2 ((@n2 Int) (@n1 Int) (@n0 Int) (c1 (BitVec 1)) (t1 (BitVec @n0)) (t2 (BitVec @n1)) (e1 (BitVec @n2)))
  :signature ((BitVec @n2) (BitVec @n1) (BitVec @n0) (BitVec 1)) Bool
  (
  (($eovc_bv-ite-equal-cond-2 e1 t2 t1 c1) ($eo_requires_false ($eo_model_sat ($eor_bv-ite-equal-cond-2 c1 t1 t2 e1)) true))
  )
)
(echo "smt-meta $eovc_bv-ite-equal-cond-2")
; program: $eor_bv-ite-equal-cond-3
(program $eor_bv-ite-equal-cond-3 ((@n0 Int) (@n1 Int) (@n2 Int) (@n3 Int) (e1 (BitVec @n1)) (t2 (BitVec @n2)) (c1 (BitVec 1)) (t1 (BitVec @n0)) (e2 (BitVec @n3)))
  :signature ((BitVec 1) (BitVec @n0) (BitVec @n1) (BitVec @n2) (BitVec @n3)) Bool
  (
  (($eor_bv-ite-equal-cond-3 c1 t1 e1 t2 e2) (eo::define ((_v0 (bvite c1))) (eo::define ((_v1 (_ _v0 t1))) (_ (= (_ (_ _v0 (_ _v1 e1)) (_ (_ _v0 t2) e2))) (_ _v1 e2)))))
  )
)
; program: $eovc_bv-ite-equal-cond-3
(program $eovc_bv-ite-equal-cond-3 ((@n3 Int) (@n2 Int) (@n1 Int) (@n0 Int) (c1 (BitVec 1)) (t1 (BitVec @n0)) (e1 (BitVec @n1)) (t2 (BitVec @n2)) (e2 (BitVec @n3)))
  :signature ((BitVec @n3) (BitVec @n2) (BitVec @n1) (BitVec @n0) (BitVec 1)) Bool
  (
  (($eovc_bv-ite-equal-cond-3 e2 t2 e1 t1 c1) ($eo_requires_false ($eo_model_sat ($eor_bv-ite-equal-cond-3 c1 t1 e1 t2 e2)) true))
  )
)
(echo "smt-meta $eovc_bv-ite-equal-cond-3")
; program: $eor_bv-ite-merge-then-if
(program $eor_bv-ite-merge-then-if ((@n0 Int) (@n1 Int) (c1 (BitVec 1)) (c2 (BitVec 1)) (e1 (BitVec @n1)) (t1 (BitVec @n0)))
  :signature ((BitVec 1) (BitVec 1) (BitVec @n0) (BitVec @n1)) Bool
  (
  (($eor_bv-ite-merge-then-if c1 c2 t1 e1) (_ (= (_ (_ (bvite c1) (_ (_ (bvite c2) t1) e1)) t1)) (_ (_ (bvite (_ (bvand c1) (_ (bvand (bvnot c2)) #b1))) e1) t1)))
  )
)
; program: $eovc_bv-ite-merge-then-if
(program $eovc_bv-ite-merge-then-if ((@n1 Int) (@n0 Int) (c1 (BitVec 1)) (c2 (BitVec 1)) (t1 (BitVec @n0)) (e1 (BitVec @n1)))
  :signature ((BitVec @n1) (BitVec @n0) (BitVec 1) (BitVec 1)) Bool
  (
  (($eovc_bv-ite-merge-then-if e1 t1 c2 c1) ($eo_requires_false ($eo_model_sat ($eor_bv-ite-merge-then-if c1 c2 t1 e1)) true))
  )
)
(echo "smt-meta $eovc_bv-ite-merge-then-if")
; program: $eor_bv-ite-merge-else-if
(program $eor_bv-ite-merge-else-if ((@n0 Int) (@n1 Int) (c1 (BitVec 1)) (c2 (BitVec 1)) (t1 (BitVec @n0)) (e1 (BitVec @n1)))
  :signature ((BitVec 1) (BitVec 1) (BitVec @n0) (BitVec @n1)) Bool
  (
  (($eor_bv-ite-merge-else-if c1 c2 t1 e1) (_ (= (_ (_ (bvite c1) (_ (_ (bvite c2) t1) e1)) e1)) (_ (_ (bvite (_ (bvand c1) (_ (bvand c2) #b1))) t1) e1)))
  )
)
; program: $eovc_bv-ite-merge-else-if
(program $eovc_bv-ite-merge-else-if ((@n1 Int) (@n0 Int) (c1 (BitVec 1)) (c2 (BitVec 1)) (t1 (BitVec @n0)) (e1 (BitVec @n1)))
  :signature ((BitVec @n1) (BitVec @n0) (BitVec 1) (BitVec 1)) Bool
  (
  (($eovc_bv-ite-merge-else-if e1 t1 c2 c1) ($eo_requires_false ($eo_model_sat ($eor_bv-ite-merge-else-if c1 c2 t1 e1)) true))
  )
)
(echo "smt-meta $eovc_bv-ite-merge-else-if")
; program: $eor_bv-ite-merge-then-else
(program $eor_bv-ite-merge-then-else ((@n0 Int) (@n1 Int) (c1 (BitVec 1)) (c2 (BitVec 1)) (e1 (BitVec @n1)) (t1 (BitVec @n0)))
  :signature ((BitVec 1) (BitVec 1) (BitVec @n0) (BitVec @n1)) Bool
  (
  (($eor_bv-ite-merge-then-else c1 c2 t1 e1) (_ (= (_ (_ (bvite c1) t1) (_ (_ (bvite c2) t1) e1))) (_ (_ (bvite (_ (bvand (bvnot c1)) (_ (bvand (bvnot c2)) #b1))) e1) t1)))
  )
)
; program: $eovc_bv-ite-merge-then-else
(program $eovc_bv-ite-merge-then-else ((@n1 Int) (@n0 Int) (c1 (BitVec 1)) (c2 (BitVec 1)) (t1 (BitVec @n0)) (e1 (BitVec @n1)))
  :signature ((BitVec @n1) (BitVec @n0) (BitVec 1) (BitVec 1)) Bool
  (
  (($eovc_bv-ite-merge-then-else e1 t1 c2 c1) ($eo_requires_false ($eo_model_sat ($eor_bv-ite-merge-then-else c1 c2 t1 e1)) true))
  )
)
(echo "smt-meta $eovc_bv-ite-merge-then-else")
; program: $eor_bv-ite-merge-else-else
(program $eor_bv-ite-merge-else-else ((@n0 Int) (@n1 Int) (c1 (BitVec 1)) (c2 (BitVec 1)) (t1 (BitVec @n0)) (t2 (BitVec @n1)))
  :signature ((BitVec 1) (BitVec 1) (BitVec @n0) (BitVec @n1)) Bool
  (
  (($eor_bv-ite-merge-else-else c1 c2 t1 t2) (_ (= (_ (_ (bvite c1) t2) (_ (_ (bvite c2) t1) t2))) (_ (_ (bvite (_ (bvand (bvnot c1)) (_ (bvand c2) #b1))) t1) t2)))
  )
)
; program: $eovc_bv-ite-merge-else-else
(program $eovc_bv-ite-merge-else-else ((@n1 Int) (@n0 Int) (c1 (BitVec 1)) (c2 (BitVec 1)) (t1 (BitVec @n0)) (t2 (BitVec @n1)))
  :signature ((BitVec @n1) (BitVec @n0) (BitVec 1) (BitVec 1)) Bool
  (
  (($eovc_bv-ite-merge-else-else t2 t1 c2 c1) ($eo_requires_false ($eo_model_sat ($eor_bv-ite-merge-else-else c1 c2 t1 t2)) true))
  )
)
(echo "smt-meta $eovc_bv-ite-merge-else-else")
; program: $eor_bv-shl-by-const-0
(program $eor_bv-shl-by-const-0 ((@n0 Int) (sz1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int) Bool
  (
  (($eor_bv-shl-by-const-0 x1 sz1) (_ (= (_ (bvshl x1) (_ (@bv 0) sz1))) x1))
  )
)
; program: $eovc_bv-shl-by-const-0
(program $eovc_bv-shl-by-const-0 ((@n0 Int) (x1 (BitVec @n0)) (sz1 Int))
  :signature (Int (BitVec @n0)) Bool
  (
  (($eovc_bv-shl-by-const-0 sz1 x1) ($eo_requires_false ($eo_model_sat ($eor_bv-shl-by-const-0 x1 sz1)) true))
  )
)
(echo "smt-meta $eovc_bv-shl-by-const-0")
; program: $eor_bv-shl-by-const-1
(program $eor_bv-shl-by-const-1 ((@n0 Int) (sz1 Int) (en1 Int) (x1 (BitVec @n0)) (amount1 Int))
  :signature ((BitVec @n0) Int Int Int Bool Bool) Bool
  (
  ((eo::define ((_v0 (@bvsize x1))) ($eor_bv-shl-by-const-1 x1 amount1 sz1 en1 (_ (= (_ (< amount1) _v0)) true) (_ (= en1) (_ (- _v0) (_ (+ 1) (_ (+ amount1) 0)))))) (_ (= (_ (bvshl x1) (_ (@bv amount1) sz1))) (_ (concat (_ (_ (extract en1) 0) x1)) (_ (concat (_ (@bv 0) amount1)) (eo::to_bin 0 0)))))
  )
)
; program: $eovc_bv-shl-by-const-1
(program $eovc_bv-shl-by-const-1 ((@n0 Int) (sz1 Int) (en1 Int) (x1 (BitVec @n0)) (amount1 Int))
  :signature (Int (BitVec @n0) Int Int) Bool
  (
  (($eovc_bv-shl-by-const-1 amount1 x1 en1 sz1) (eo::define ((_v0 (@bvsize x1))) (eo::define ((_v1 (_ (= en1) (_ (- _v0) (_ (+ 1) (_ (+ amount1) 0)))))) (eo::define ((_v2 (_ (= (_ (< amount1) _v0)) true))) ($eo_requires_true ($eo_model_sat _v2) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_false ($eo_model_sat ($eor_bv-shl-by-const-1 x1 amount1 sz1 en1 _v2 _v1)) true)))))))
  )
)
(echo "smt-meta $eovc_bv-shl-by-const-1")
; program: $eor_bv-shl-by-const-2
(program $eor_bv-shl-by-const-2 ((@n0 Int) (x1 (BitVec @n0)) (amount1 Int) (sz1 Int) (w1 Int))
  :signature ((BitVec @n0) Int Int Int Bool Bool) Bool
  (
  ((eo::define ((_v0 (@bvsize x1))) ($eor_bv-shl-by-const-2 x1 amount1 sz1 w1 (_ (= (_ (>= amount1) _v0)) true) (_ (= w1) _v0))) (_ (= (_ (bvshl x1) (_ (@bv amount1) sz1))) (_ (@bv 0) w1)))
  )
)
; program: $eovc_bv-shl-by-const-2
(program $eovc_bv-shl-by-const-2 ((@n0 Int) (sz1 Int) (amount1 Int) (w1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int) Bool
  (
  (($eovc_bv-shl-by-const-2 x1 w1 amount1 sz1) (eo::define ((_v0 (@bvsize x1))) (eo::define ((_v1 (_ (= w1) _v0))) (eo::define ((_v2 (_ (= (_ (>= amount1) _v0)) true))) ($eo_requires_true ($eo_model_sat _v2) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_false ($eo_model_sat ($eor_bv-shl-by-const-2 x1 amount1 sz1 w1 _v2 _v1)) true)))))))
  )
)
(echo "smt-meta $eovc_bv-shl-by-const-2")
; program: $eor_bv-lshr-by-const-0
(program $eor_bv-lshr-by-const-0 ((@n0 Int) (sz1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int) Bool
  (
  (($eor_bv-lshr-by-const-0 x1 sz1) (_ (= (_ (bvlshr x1) (_ (@bv 0) sz1))) x1))
  )
)
; program: $eovc_bv-lshr-by-const-0
(program $eovc_bv-lshr-by-const-0 ((@n0 Int) (x1 (BitVec @n0)) (sz1 Int))
  :signature (Int (BitVec @n0)) Bool
  (
  (($eovc_bv-lshr-by-const-0 sz1 x1) ($eo_requires_false ($eo_model_sat ($eor_bv-lshr-by-const-0 x1 sz1)) true))
  )
)
(echo "smt-meta $eovc_bv-lshr-by-const-0")
; program: $eor_bv-lshr-by-const-1
(program $eor_bv-lshr-by-const-1 ((@n0 Int) (sz1 Int) (nm1 Int) (amount1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int Bool Bool) Bool
  (
  ((eo::define ((_v0 (@bvsize x1))) ($eor_bv-lshr-by-const-1 x1 amount1 sz1 nm1 (_ (= (_ (< amount1) _v0)) true) (_ (= nm1) (_ (- _v0) 1)))) (_ (= (_ (bvlshr x1) (_ (@bv amount1) sz1))) (_ (concat (_ (@bv 0) amount1)) (_ (concat (_ (_ (extract nm1) amount1) x1)) (eo::to_bin 0 0)))))
  )
)
; program: $eovc_bv-lshr-by-const-1
(program $eovc_bv-lshr-by-const-1 ((@n0 Int) (sz1 Int) (amount1 Int) (nm1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int) Bool
  (
  (($eovc_bv-lshr-by-const-1 x1 nm1 amount1 sz1) (eo::define ((_v0 (@bvsize x1))) (eo::define ((_v1 (_ (= nm1) (_ (- _v0) 1)))) (eo::define ((_v2 (_ (= (_ (< amount1) _v0)) true))) ($eo_requires_true ($eo_model_sat _v2) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_false ($eo_model_sat ($eor_bv-lshr-by-const-1 x1 amount1 sz1 nm1 _v2 _v1)) true)))))))
  )
)
(echo "smt-meta $eovc_bv-lshr-by-const-1")
; program: $eor_bv-lshr-by-const-2
(program $eor_bv-lshr-by-const-2 ((@n0 Int) (x1 (BitVec @n0)) (amount1 Int) (sz1 Int))
  :signature ((BitVec @n0) Int Int Bool) Bool
  (
  (($eor_bv-lshr-by-const-2 x1 amount1 sz1 (_ (= (_ (>= amount1) (@bvsize x1))) true)) (_ (= (_ (bvlshr x1) (_ (@bv amount1) sz1))) (_ (@bv 0) sz1)))
  )
)
; program: $eovc_bv-lshr-by-const-2
(program $eovc_bv-lshr-by-const-2 ((@n0 Int) (sz1 Int) (amount1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int) Bool
  (
  (($eovc_bv-lshr-by-const-2 x1 amount1 sz1) (eo::define ((_v0 (_ (= (_ (>= amount1) (@bvsize x1))) true))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_bv-lshr-by-const-2 x1 amount1 sz1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_bv-lshr-by-const-2")
; program: $eor_bv-ashr-by-const-0
(program $eor_bv-ashr-by-const-0 ((@n0 Int) (sz1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int) Bool
  (
  (($eor_bv-ashr-by-const-0 x1 sz1) (_ (= (_ (bvashr x1) (_ (@bv 0) sz1))) x1))
  )
)
; program: $eovc_bv-ashr-by-const-0
(program $eovc_bv-ashr-by-const-0 ((@n0 Int) (x1 (BitVec @n0)) (sz1 Int))
  :signature (Int (BitVec @n0)) Bool
  (
  (($eovc_bv-ashr-by-const-0 sz1 x1) ($eo_requires_false ($eo_model_sat ($eor_bv-ashr-by-const-0 x1 sz1)) true))
  )
)
(echo "smt-meta $eovc_bv-ashr-by-const-0")
; program: $eor_bv-ashr-by-const-1
(program $eor_bv-ashr-by-const-1 ((@n0 Int) (sz1 Int) (nm1 Int) (amount1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int Bool Bool) Bool
  (
  ((eo::define ((_v0 (@bvsize x1))) ($eor_bv-ashr-by-const-1 x1 amount1 sz1 nm1 (_ (= (_ (< amount1) _v0)) true) (_ (= nm1) (_ (- _v0) 1)))) (eo::define ((_v0 (extract nm1))) (_ (= (_ (bvashr x1) (_ (@bv amount1) sz1))) (_ (concat (_ (repeat amount1) (_ (_ _v0 nm1) x1))) (_ (concat (_ (_ _v0 amount1) x1)) (eo::to_bin 0 0))))))
  )
)
; program: $eovc_bv-ashr-by-const-1
(program $eovc_bv-ashr-by-const-1 ((@n0 Int) (sz1 Int) (amount1 Int) (nm1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int) Bool
  (
  (($eovc_bv-ashr-by-const-1 x1 nm1 amount1 sz1) (eo::define ((_v0 (@bvsize x1))) (eo::define ((_v1 (_ (= nm1) (_ (- _v0) 1)))) (eo::define ((_v2 (_ (= (_ (< amount1) _v0)) true))) ($eo_requires_true ($eo_model_sat _v2) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_false ($eo_model_sat ($eor_bv-ashr-by-const-1 x1 amount1 sz1 nm1 _v2 _v1)) true)))))))
  )
)
(echo "smt-meta $eovc_bv-ashr-by-const-1")
; program: $eor_bv-ashr-by-const-2
(program $eor_bv-ashr-by-const-2 ((@n0 Int) (amount1 Int) (sz1 Int) (rn1 Int) (nm1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int Int Bool Bool Bool) Bool
  (
  ((eo::define ((_v0 (@bvsize x1))) ($eor_bv-ashr-by-const-2 x1 amount1 sz1 nm1 rn1 (_ (= (_ (>= amount1) _v0)) true) (_ (= nm1) (_ (- _v0) 1)) (_ (= rn1) _v0))) (_ (= (_ (bvashr x1) (_ (@bv amount1) sz1))) (_ (repeat rn1) (_ (_ (extract nm1) nm1) x1))))
  )
)
; program: $eovc_bv-ashr-by-const-2
(program $eovc_bv-ashr-by-const-2 ((@n0 Int) (sz1 Int) (amount1 Int) (nm1 Int) (rn1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int Int) Bool
  (
  (($eovc_bv-ashr-by-const-2 x1 rn1 nm1 amount1 sz1) (eo::define ((_v0 (@bvsize x1))) (eo::define ((_v1 (_ (= rn1) _v0))) (eo::define ((_v2 (_ (= nm1) (_ (- _v0) 1)))) (eo::define ((_v3 (_ (= (_ (>= amount1) _v0)) true))) ($eo_requires_true ($eo_model_sat _v3) ($eo_requires_true ($eo_model_sat _v2) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_false ($eo_model_sat ($eor_bv-ashr-by-const-2 x1 amount1 sz1 nm1 rn1 _v3 _v2 _v1)) true)))))))))
  )
)
(echo "smt-meta $eovc_bv-ashr-by-const-2")
; program: $eor_bv-and-concat-pullup
(program $eor_bv-and-concat-pullup ((@n0 Int) (@n1 Int) (@n2 Int) (@n3 Int) (@n4 Int) (Any Type) ($ex_1 Any) (ys1 (BitVec @n4)) (z1 (BitVec @n3)) (nxm1 Int) (ny1 Int) (y1 (BitVec @n2)) (nym1 Int) (xs1 (BitVec @n0)) (ws1 (BitVec @n1)))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n2) (BitVec @n3) (BitVec @n4) Int Int Int Bool Any Bool) Bool
  (
  ((eo::define ((_v0 (@bvsize y1))) ($eor_bv-and-concat-pullup xs1 ws1 y1 z1 ys1 nxm1 ny1 nym1 (_ (= ny1) _v0) (_ (= nxm1) (_ (- (@bvsize $ex_1)) 1)) (_ (= nym1) (_ (- _v0) 1)))) (eo::define ((_v0 ($singleton_elim (eo::list_concat bvand xs1 ws1)))) (eo::define ((_v1 (_ (_ (extract nym1) 0) _v0))) (eo::define ((_v2 (_ (_ (extract nxm1) ny1) _v0))) (eo::define ((_v3 (concat z1))) (eo::requires $ex_1 _v0 (_ (= (eo::list_concat bvand xs1 (_ (bvand (eo::list_concat concat ys1 (_ _v3 (_ (concat y1) (eo::to_bin 0 0))))) ws1))) (_ (concat (_ (bvand _v2) (_ (bvand ($singleton_elim (eo::list_concat concat ys1 (_ _v3 (eo::to_bin 0 0))))) (eo::nil bvand (eo::typeof _v2))))) (_ (concat (_ (bvand _v1) (_ (bvand y1) (eo::nil bvand (eo::typeof _v1))))) (eo::to_bin 0 0))))))))))
  )
)
; program: $eovc_bv-and-concat-pullup
(program $eovc_bv-and-concat-pullup ((@n2 Int) (@n1 Int) (@n0 Int) (@n4 Int) (@n3 Int) (z1 (BitVec @n3)) (ys1 (BitVec @n4)) (ny1 Int) (nxm1 Int) (xs1 (BitVec @n0)) (ws1 (BitVec @n1)) (nym1 Int) (y1 (BitVec @n2)))
  :signature ((BitVec @n2) Int (BitVec @n1) (BitVec @n0) Int Int (BitVec @n4) (BitVec @n3)) Bool
  (
  (($eovc_bv-and-concat-pullup y1 nym1 ws1 xs1 nxm1 ny1 ys1 z1) (eo::define ((_v0 (@bvsize y1))) (eo::define ((_v1 (_ (= nym1) (_ (- _v0) 1)))) (eo::define ((_v2 (_ (= nxm1) (_ (- (@bvsize ($singleton_elim (eo::list_concat bvand xs1 ws1)))) 1)))) (eo::define ((_v3 (_ (= ny1) _v0))) ($eo_requires_true ($eo_model_sat _v3) ($eo_requires_true ($eo_model_sat _v2) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_false ($eo_model_sat ($eor_bv-and-concat-pullup xs1 ws1 y1 z1 ys1 nxm1 ny1 nym1 _v3 _v2 _v1)) true)))))))))
  )
)
(echo "smt-meta $eovc_bv-and-concat-pullup")
; program: $eor_bv-or-concat-pullup
(program $eor_bv-or-concat-pullup ((@n0 Int) (@n1 Int) (@n2 Int) (@n3 Int) (@n4 Int) (Any Type) ($ex_1 Any) (ys1 (BitVec @n4)) (z1 (BitVec @n3)) (nxm1 Int) (ny1 Int) (y1 (BitVec @n2)) (nym1 Int) (xs1 (BitVec @n0)) (ws1 (BitVec @n1)))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n2) (BitVec @n3) (BitVec @n4) Int Int Int Bool Any Bool) Bool
  (
  ((eo::define ((_v0 (@bvsize y1))) ($eor_bv-or-concat-pullup xs1 ws1 y1 z1 ys1 nxm1 ny1 nym1 (_ (= ny1) _v0) (_ (= nxm1) (_ (- (@bvsize $ex_1)) 1)) (_ (= nym1) (_ (- _v0) 1)))) (eo::define ((_v0 ($singleton_elim (eo::list_concat bvor xs1 ws1)))) (eo::define ((_v1 (_ (_ (extract nym1) 0) _v0))) (eo::define ((_v2 (_ (_ (extract nxm1) ny1) _v0))) (eo::define ((_v3 (concat z1))) (eo::requires $ex_1 _v0 (_ (= (eo::list_concat bvor xs1 (_ (bvor (eo::list_concat concat ys1 (_ _v3 (_ (concat y1) (eo::to_bin 0 0))))) ws1))) (_ (concat (_ (bvor _v2) (_ (bvor ($singleton_elim (eo::list_concat concat ys1 (_ _v3 (eo::to_bin 0 0))))) (eo::nil bvor (eo::typeof _v2))))) (_ (concat (_ (bvor _v1) (_ (bvor y1) (eo::nil bvor (eo::typeof _v1))))) (eo::to_bin 0 0))))))))))
  )
)
; program: $eovc_bv-or-concat-pullup
(program $eovc_bv-or-concat-pullup ((@n2 Int) (@n1 Int) (@n0 Int) (@n4 Int) (@n3 Int) (z1 (BitVec @n3)) (ys1 (BitVec @n4)) (ny1 Int) (nxm1 Int) (xs1 (BitVec @n0)) (ws1 (BitVec @n1)) (nym1 Int) (y1 (BitVec @n2)))
  :signature ((BitVec @n2) Int (BitVec @n1) (BitVec @n0) Int Int (BitVec @n4) (BitVec @n3)) Bool
  (
  (($eovc_bv-or-concat-pullup y1 nym1 ws1 xs1 nxm1 ny1 ys1 z1) (eo::define ((_v0 (@bvsize y1))) (eo::define ((_v1 (_ (= nym1) (_ (- _v0) 1)))) (eo::define ((_v2 (_ (= nxm1) (_ (- (@bvsize ($singleton_elim (eo::list_concat bvor xs1 ws1)))) 1)))) (eo::define ((_v3 (_ (= ny1) _v0))) ($eo_requires_true ($eo_model_sat _v3) ($eo_requires_true ($eo_model_sat _v2) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_false ($eo_model_sat ($eor_bv-or-concat-pullup xs1 ws1 y1 z1 ys1 nxm1 ny1 nym1 _v3 _v2 _v1)) true)))))))))
  )
)
(echo "smt-meta $eovc_bv-or-concat-pullup")
; program: $eor_bv-xor-concat-pullup
(program $eor_bv-xor-concat-pullup ((@n0 Int) (@n1 Int) (@n2 Int) (@n3 Int) (@n4 Int) (Any Type) ($ex_1 Any) (ys1 (BitVec @n4)) (z1 (BitVec @n3)) (nxm1 Int) (ny1 Int) (y1 (BitVec @n2)) (nym1 Int) (xs1 (BitVec @n0)) (ws1 (BitVec @n1)))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n2) (BitVec @n3) (BitVec @n4) Int Int Int Bool Any Bool) Bool
  (
  ((eo::define ((_v0 (@bvsize y1))) ($eor_bv-xor-concat-pullup xs1 ws1 y1 z1 ys1 nxm1 ny1 nym1 (_ (= ny1) _v0) (_ (= nxm1) (_ (- (@bvsize $ex_1)) 1)) (_ (= nym1) (_ (- _v0) 1)))) (eo::define ((_v0 ($singleton_elim (eo::list_concat bvxor xs1 ws1)))) (eo::define ((_v1 (_ (_ (extract nym1) 0) _v0))) (eo::define ((_v2 (_ (_ (extract nxm1) ny1) _v0))) (eo::define ((_v3 (concat z1))) (eo::requires $ex_1 _v0 (_ (= (eo::list_concat bvxor xs1 (_ (bvxor (eo::list_concat concat ys1 (_ _v3 (_ (concat y1) (eo::to_bin 0 0))))) ws1))) (_ (concat (_ (bvxor _v2) (_ (bvxor ($singleton_elim (eo::list_concat concat ys1 (_ _v3 (eo::to_bin 0 0))))) (eo::nil bvxor (eo::typeof _v2))))) (_ (concat (_ (bvxor _v1) (_ (bvxor y1) (eo::nil bvxor (eo::typeof _v1))))) (eo::to_bin 0 0))))))))))
  )
)
; program: $eovc_bv-xor-concat-pullup
(program $eovc_bv-xor-concat-pullup ((@n2 Int) (@n1 Int) (@n0 Int) (@n4 Int) (@n3 Int) (z1 (BitVec @n3)) (ys1 (BitVec @n4)) (ny1 Int) (nxm1 Int) (xs1 (BitVec @n0)) (ws1 (BitVec @n1)) (nym1 Int) (y1 (BitVec @n2)))
  :signature ((BitVec @n2) Int (BitVec @n1) (BitVec @n0) Int Int (BitVec @n4) (BitVec @n3)) Bool
  (
  (($eovc_bv-xor-concat-pullup y1 nym1 ws1 xs1 nxm1 ny1 ys1 z1) (eo::define ((_v0 (@bvsize y1))) (eo::define ((_v1 (_ (= nym1) (_ (- _v0) 1)))) (eo::define ((_v2 (_ (= nxm1) (_ (- (@bvsize ($singleton_elim (eo::list_concat bvxor xs1 ws1)))) 1)))) (eo::define ((_v3 (_ (= ny1) _v0))) ($eo_requires_true ($eo_model_sat _v3) ($eo_requires_true ($eo_model_sat _v2) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_false ($eo_model_sat ($eor_bv-xor-concat-pullup xs1 ws1 y1 z1 ys1 nxm1 ny1 nym1 _v3 _v2 _v1)) true)))))))))
  )
)
(echo "smt-meta $eovc_bv-xor-concat-pullup")
; program: $eor_bv-and-concat-pullup2
(program $eor_bv-and-concat-pullup2 ((@n0 Int) (@n1 Int) (@n2 Int) (@n3 Int) (@n4 Int) (Any Type) ($ex_1 Any) ($ex_2 Any) (z1 (BitVec @n3)) (nxm1 Int) (ny1 Int) (y1 (BitVec @n2)) (ys1 (BitVec @n4)) (nym1 Int) (xs1 (BitVec @n0)) (ws1 (BitVec @n1)))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n2) (BitVec @n3) (BitVec @n4) Int Int Int Any Any Any) Bool
  (
  ((eo::define ((_v0 (@bvsize $ex_1))) ($eor_bv-and-concat-pullup2 xs1 ws1 y1 z1 ys1 nxm1 ny1 nym1 (_ (= ny1) _v0) (_ (= nxm1) (_ (- (@bvsize $ex_2)) 1)) (_ (= nym1) (_ (- _v0) 1)))) (eo::define ((_v0 ($singleton_elim (eo::list_concat bvand xs1 ws1)))) (eo::define ((_v1 (_ (_ (extract nym1) 0) _v0))) (eo::define ((_v2 (_ (concat y1) ys1))) (eo::define ((_v3 ($singleton_elim _v2))) (eo::define ((_v4 (_ (_ (extract nxm1) ny1) _v0))) (eo::requires $ex_1 _v3 (eo::requires $ex_2 _v0 (_ (= (eo::list_concat bvand xs1 (_ (bvand (_ (concat z1) _v2)) ws1))) (_ (concat (_ (bvand _v4) (_ (bvand z1) (eo::nil bvand (eo::typeof _v4))))) (_ (concat (_ (bvand _v1) (_ (bvand _v3) (eo::nil bvand (eo::typeof _v1))))) (eo::to_bin 0 0))))))))))))
  )
)
; program: $eovc_bv-and-concat-pullup2
(program $eovc_bv-and-concat-pullup2 ((@n4 Int) (@n2 Int) (@n1 Int) (@n0 Int) (@n3 Int) (z1 (BitVec @n3)) (ny1 Int) (nxm1 Int) (xs1 (BitVec @n0)) (ws1 (BitVec @n1)) (nym1 Int) (y1 (BitVec @n2)) (ys1 (BitVec @n4)))
  :signature ((BitVec @n4) (BitVec @n2) Int (BitVec @n1) (BitVec @n0) Int Int (BitVec @n3)) Bool
  (
  (($eovc_bv-and-concat-pullup2 ys1 y1 nym1 ws1 xs1 nxm1 ny1 z1) (eo::define ((_v0 (@bvsize ($singleton_elim (_ (concat y1) ys1))))) (eo::define ((_v1 (_ (= nym1) (_ (- _v0) 1)))) (eo::define ((_v2 (_ (= nxm1) (_ (- (@bvsize ($singleton_elim (eo::list_concat bvand xs1 ws1)))) 1)))) (eo::define ((_v3 (_ (= ny1) _v0))) ($eo_requires_true ($eo_model_sat _v3) ($eo_requires_true ($eo_model_sat _v2) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_false ($eo_model_sat ($eor_bv-and-concat-pullup2 xs1 ws1 y1 z1 ys1 nxm1 ny1 nym1 _v3 _v2 _v1)) true)))))))))
  )
)
(echo "smt-meta $eovc_bv-and-concat-pullup2")
; program: $eor_bv-or-concat-pullup2
(program $eor_bv-or-concat-pullup2 ((@n0 Int) (@n1 Int) (@n2 Int) (@n3 Int) (@n4 Int) (Any Type) ($ex_1 Any) ($ex_2 Any) (z1 (BitVec @n3)) (nxm1 Int) (ny1 Int) (y1 (BitVec @n2)) (ys1 (BitVec @n4)) (nym1 Int) (xs1 (BitVec @n0)) (ws1 (BitVec @n1)))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n2) (BitVec @n3) (BitVec @n4) Int Int Int Any Any Any) Bool
  (
  ((eo::define ((_v0 (@bvsize $ex_1))) ($eor_bv-or-concat-pullup2 xs1 ws1 y1 z1 ys1 nxm1 ny1 nym1 (_ (= ny1) _v0) (_ (= nxm1) (_ (- (@bvsize $ex_2)) 1)) (_ (= nym1) (_ (- _v0) 1)))) (eo::define ((_v0 ($singleton_elim (eo::list_concat bvor xs1 ws1)))) (eo::define ((_v1 (_ (_ (extract nym1) 0) _v0))) (eo::define ((_v2 (_ (concat y1) ys1))) (eo::define ((_v3 ($singleton_elim _v2))) (eo::define ((_v4 (_ (_ (extract nxm1) ny1) _v0))) (eo::requires $ex_1 _v3 (eo::requires $ex_2 _v0 (_ (= (eo::list_concat bvor xs1 (_ (bvor (_ (concat z1) _v2)) ws1))) (_ (concat (_ (bvor _v4) (_ (bvor z1) (eo::nil bvor (eo::typeof _v4))))) (_ (concat (_ (bvor _v1) (_ (bvor _v3) (eo::nil bvor (eo::typeof _v1))))) (eo::to_bin 0 0))))))))))))
  )
)
; program: $eovc_bv-or-concat-pullup2
(program $eovc_bv-or-concat-pullup2 ((@n4 Int) (@n2 Int) (@n1 Int) (@n0 Int) (@n3 Int) (z1 (BitVec @n3)) (ny1 Int) (nxm1 Int) (xs1 (BitVec @n0)) (ws1 (BitVec @n1)) (nym1 Int) (y1 (BitVec @n2)) (ys1 (BitVec @n4)))
  :signature ((BitVec @n4) (BitVec @n2) Int (BitVec @n1) (BitVec @n0) Int Int (BitVec @n3)) Bool
  (
  (($eovc_bv-or-concat-pullup2 ys1 y1 nym1 ws1 xs1 nxm1 ny1 z1) (eo::define ((_v0 (@bvsize ($singleton_elim (_ (concat y1) ys1))))) (eo::define ((_v1 (_ (= nym1) (_ (- _v0) 1)))) (eo::define ((_v2 (_ (= nxm1) (_ (- (@bvsize ($singleton_elim (eo::list_concat bvor xs1 ws1)))) 1)))) (eo::define ((_v3 (_ (= ny1) _v0))) ($eo_requires_true ($eo_model_sat _v3) ($eo_requires_true ($eo_model_sat _v2) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_false ($eo_model_sat ($eor_bv-or-concat-pullup2 xs1 ws1 y1 z1 ys1 nxm1 ny1 nym1 _v3 _v2 _v1)) true)))))))))
  )
)
(echo "smt-meta $eovc_bv-or-concat-pullup2")
; program: $eor_bv-xor-concat-pullup2
(program $eor_bv-xor-concat-pullup2 ((@n0 Int) (@n1 Int) (@n2 Int) (@n3 Int) (@n4 Int) (Any Type) ($ex_1 Any) ($ex_2 Any) (z1 (BitVec @n3)) (nxm1 Int) (ny1 Int) (y1 (BitVec @n2)) (ys1 (BitVec @n4)) (nym1 Int) (xs1 (BitVec @n0)) (ws1 (BitVec @n1)))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n2) (BitVec @n3) (BitVec @n4) Int Int Int Any Any Any) Bool
  (
  ((eo::define ((_v0 (@bvsize $ex_1))) ($eor_bv-xor-concat-pullup2 xs1 ws1 y1 z1 ys1 nxm1 ny1 nym1 (_ (= ny1) _v0) (_ (= nxm1) (_ (- (@bvsize $ex_2)) 1)) (_ (= nym1) (_ (- _v0) 1)))) (eo::define ((_v0 ($singleton_elim (eo::list_concat bvxor xs1 ws1)))) (eo::define ((_v1 (_ (_ (extract nym1) 0) _v0))) (eo::define ((_v2 (_ (concat y1) ys1))) (eo::define ((_v3 ($singleton_elim _v2))) (eo::define ((_v4 (_ (_ (extract nxm1) ny1) _v0))) (eo::requires $ex_1 _v3 (eo::requires $ex_2 _v0 (_ (= (eo::list_concat bvxor xs1 (_ (bvxor (_ (concat z1) _v2)) ws1))) (_ (concat (_ (bvxor _v4) (_ (bvxor z1) (eo::nil bvxor (eo::typeof _v4))))) (_ (concat (_ (bvxor _v1) (_ (bvxor _v3) (eo::nil bvxor (eo::typeof _v1))))) (eo::to_bin 0 0))))))))))))
  )
)
; program: $eovc_bv-xor-concat-pullup2
(program $eovc_bv-xor-concat-pullup2 ((@n4 Int) (@n2 Int) (@n1 Int) (@n0 Int) (@n3 Int) (z1 (BitVec @n3)) (ny1 Int) (nxm1 Int) (xs1 (BitVec @n0)) (ws1 (BitVec @n1)) (nym1 Int) (y1 (BitVec @n2)) (ys1 (BitVec @n4)))
  :signature ((BitVec @n4) (BitVec @n2) Int (BitVec @n1) (BitVec @n0) Int Int (BitVec @n3)) Bool
  (
  (($eovc_bv-xor-concat-pullup2 ys1 y1 nym1 ws1 xs1 nxm1 ny1 z1) (eo::define ((_v0 (@bvsize ($singleton_elim (_ (concat y1) ys1))))) (eo::define ((_v1 (_ (= nym1) (_ (- _v0) 1)))) (eo::define ((_v2 (_ (= nxm1) (_ (- (@bvsize ($singleton_elim (eo::list_concat bvxor xs1 ws1)))) 1)))) (eo::define ((_v3 (_ (= ny1) _v0))) ($eo_requires_true ($eo_model_sat _v3) ($eo_requires_true ($eo_model_sat _v2) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_false ($eo_model_sat ($eor_bv-xor-concat-pullup2 xs1 ws1 y1 z1 ys1 nxm1 ny1 nym1 _v3 _v2 _v1)) true)))))))))
  )
)
(echo "smt-meta $eovc_bv-xor-concat-pullup2")
; program: $eor_bv-and-concat-pullup3
(program $eor_bv-and-concat-pullup3 ((@n0 Int) (@n1 Int) (@n2 Int) (@n3 Int) (@n4 Int) (Any Type) ($ex_1 Any) (z1 (BitVec @n3)) (nxm1 Int) (nyu1 Int) (y1 (BitVec @n2)) (nyum1 Int) (nu1 Int) (u1 (BitVec @n4)) (num1 Int) (xs1 (BitVec @n0)) (ws1 (BitVec @n1)))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n2) (BitVec @n3) (BitVec @n4) Int Int Int Int Int Any Bool Bool Bool Bool) Bool
  (
  ((eo::define ((_v0 (@bvsize u1))) (eo::define ((_v1 (_ (+ (@bvsize y1)) (_ (+ _v0) 0)))) ($eor_bv-and-concat-pullup3 xs1 ws1 y1 z1 u1 nxm1 nyu1 nyum1 nu1 num1 (_ (= nxm1) (_ (- (@bvsize $ex_1)) 1)) (_ (= nyu1) _v1) (_ (= nyum1) (_ (- _v1) 1)) (_ (= nu1) _v0) (_ (= num1) (_ (- _v0) 1))))) (eo::define ((_v0 ($singleton_elim (eo::list_concat bvand xs1 ws1)))) (eo::define ((_v1 (_ (_ (extract num1) 0) _v0))) (eo::define ((_v2 (_ (_ (extract nyum1) nu1) _v0))) (eo::define ((_v3 (_ (_ (extract nxm1) nyu1) _v0))) (eo::requires $ex_1 _v0 (_ (= (eo::list_concat bvand xs1 (_ (bvand (_ (concat z1) (_ (concat y1) (_ (concat u1) (eo::to_bin 0 0))))) ws1))) (_ (concat (_ (bvand _v3) (_ (bvand z1) (eo::nil bvand (eo::typeof _v3))))) (_ (concat (_ (bvand _v2) (_ (bvand y1) (eo::nil bvand (eo::typeof _v2))))) (_ (concat (_ (bvand _v1) (_ (bvand u1) (eo::nil bvand (eo::typeof _v1))))) (eo::to_bin 0 0)))))))))))
  )
)
; program: $eovc_bv-and-concat-pullup3
(program $eovc_bv-and-concat-pullup3 ((@n4 Int) (@n2 Int) (@n1 Int) (@n0 Int) (@n3 Int) (z1 (BitVec @n3)) (nxm1 Int) (xs1 (BitVec @n0)) (ws1 (BitVec @n1)) (nyu1 Int) (nyum1 Int) (y1 (BitVec @n2)) (nu1 Int) (num1 Int) (u1 (BitVec @n4)))
  :signature ((BitVec @n4) Int Int (BitVec @n2) Int Int (BitVec @n1) (BitVec @n0) Int (BitVec @n3)) Bool
  (
  (($eovc_bv-and-concat-pullup3 u1 num1 nu1 y1 nyum1 nyu1 ws1 xs1 nxm1 z1) (eo::define ((_v0 (@bvsize u1))) (eo::define ((_v1 (_ (= num1) (_ (- _v0) 1)))) (eo::define ((_v2 (_ (= nu1) _v0))) (eo::define ((_v3 (_ (+ (@bvsize y1)) (_ (+ _v0) 0)))) (eo::define ((_v4 (_ (= nyum1) (_ (- _v3) 1)))) (eo::define ((_v5 (_ (= nyu1) _v3))) (eo::define ((_v6 (_ (= nxm1) (_ (- (@bvsize ($singleton_elim (eo::list_concat bvand xs1 ws1)))) 1)))) ($eo_requires_true ($eo_model_sat _v6) ($eo_requires_true ($eo_model_sat _v5) ($eo_requires_true ($eo_model_sat _v4) ($eo_requires_true ($eo_model_sat _v2) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_false ($eo_model_sat ($eor_bv-and-concat-pullup3 xs1 ws1 y1 z1 u1 nxm1 nyu1 nyum1 nu1 num1 _v6 _v5 _v4 _v2 _v1)) true))))))))))))))
  )
)
(echo "smt-meta $eovc_bv-and-concat-pullup3")
; program: $eor_bv-or-concat-pullup3
(program $eor_bv-or-concat-pullup3 ((@n0 Int) (@n1 Int) (@n2 Int) (@n3 Int) (@n4 Int) (Any Type) ($ex_1 Any) (z1 (BitVec @n3)) (nxm1 Int) (nyu1 Int) (y1 (BitVec @n2)) (nyum1 Int) (nu1 Int) (u1 (BitVec @n4)) (num1 Int) (xs1 (BitVec @n0)) (ws1 (BitVec @n1)))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n2) (BitVec @n3) (BitVec @n4) Int Int Int Int Int Any Bool Bool Bool Bool) Bool
  (
  ((eo::define ((_v0 (@bvsize u1))) (eo::define ((_v1 (_ (+ (@bvsize y1)) (_ (+ _v0) 0)))) ($eor_bv-or-concat-pullup3 xs1 ws1 y1 z1 u1 nxm1 nyu1 nyum1 nu1 num1 (_ (= nxm1) (_ (- (@bvsize $ex_1)) 1)) (_ (= nyu1) _v1) (_ (= nyum1) (_ (- _v1) 1)) (_ (= nu1) _v0) (_ (= num1) (_ (- _v0) 1))))) (eo::define ((_v0 ($singleton_elim (eo::list_concat bvor xs1 ws1)))) (eo::define ((_v1 (_ (_ (extract num1) 0) _v0))) (eo::define ((_v2 (_ (_ (extract nyum1) nu1) _v0))) (eo::define ((_v3 (_ (_ (extract nxm1) nyu1) _v0))) (eo::requires $ex_1 _v0 (_ (= (eo::list_concat bvor xs1 (_ (bvor (_ (concat z1) (_ (concat y1) (_ (concat u1) (eo::to_bin 0 0))))) ws1))) (_ (concat (_ (bvor _v3) (_ (bvor z1) (eo::nil bvor (eo::typeof _v3))))) (_ (concat (_ (bvor _v2) (_ (bvor y1) (eo::nil bvor (eo::typeof _v2))))) (_ (concat (_ (bvor _v1) (_ (bvor u1) (eo::nil bvor (eo::typeof _v1))))) (eo::to_bin 0 0)))))))))))
  )
)
; program: $eovc_bv-or-concat-pullup3
(program $eovc_bv-or-concat-pullup3 ((@n4 Int) (@n2 Int) (@n1 Int) (@n0 Int) (@n3 Int) (z1 (BitVec @n3)) (nxm1 Int) (xs1 (BitVec @n0)) (ws1 (BitVec @n1)) (nyu1 Int) (nyum1 Int) (y1 (BitVec @n2)) (nu1 Int) (num1 Int) (u1 (BitVec @n4)))
  :signature ((BitVec @n4) Int Int (BitVec @n2) Int Int (BitVec @n1) (BitVec @n0) Int (BitVec @n3)) Bool
  (
  (($eovc_bv-or-concat-pullup3 u1 num1 nu1 y1 nyum1 nyu1 ws1 xs1 nxm1 z1) (eo::define ((_v0 (@bvsize u1))) (eo::define ((_v1 (_ (= num1) (_ (- _v0) 1)))) (eo::define ((_v2 (_ (= nu1) _v0))) (eo::define ((_v3 (_ (+ (@bvsize y1)) (_ (+ _v0) 0)))) (eo::define ((_v4 (_ (= nyum1) (_ (- _v3) 1)))) (eo::define ((_v5 (_ (= nyu1) _v3))) (eo::define ((_v6 (_ (= nxm1) (_ (- (@bvsize ($singleton_elim (eo::list_concat bvor xs1 ws1)))) 1)))) ($eo_requires_true ($eo_model_sat _v6) ($eo_requires_true ($eo_model_sat _v5) ($eo_requires_true ($eo_model_sat _v4) ($eo_requires_true ($eo_model_sat _v2) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_false ($eo_model_sat ($eor_bv-or-concat-pullup3 xs1 ws1 y1 z1 u1 nxm1 nyu1 nyum1 nu1 num1 _v6 _v5 _v4 _v2 _v1)) true))))))))))))))
  )
)
(echo "smt-meta $eovc_bv-or-concat-pullup3")
; program: $eor_bv-xor-concat-pullup3
(program $eor_bv-xor-concat-pullup3 ((@n0 Int) (@n1 Int) (@n2 Int) (@n3 Int) (@n4 Int) (Any Type) ($ex_1 Any) (z1 (BitVec @n3)) (nxm1 Int) (nyu1 Int) (y1 (BitVec @n2)) (nyum1 Int) (nu1 Int) (u1 (BitVec @n4)) (num1 Int) (xs1 (BitVec @n0)) (ws1 (BitVec @n1)))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n2) (BitVec @n3) (BitVec @n4) Int Int Int Int Int Any Bool Bool Bool Bool) Bool
  (
  ((eo::define ((_v0 (@bvsize u1))) (eo::define ((_v1 (_ (+ (@bvsize y1)) (_ (+ _v0) 0)))) ($eor_bv-xor-concat-pullup3 xs1 ws1 y1 z1 u1 nxm1 nyu1 nyum1 nu1 num1 (_ (= nxm1) (_ (- (@bvsize $ex_1)) 1)) (_ (= nyu1) _v1) (_ (= nyum1) (_ (- _v1) 1)) (_ (= nu1) _v0) (_ (= num1) (_ (- _v0) 1))))) (eo::define ((_v0 ($singleton_elim (eo::list_concat bvxor xs1 ws1)))) (eo::define ((_v1 (_ (_ (extract num1) 0) _v0))) (eo::define ((_v2 (_ (_ (extract nyum1) nu1) _v0))) (eo::define ((_v3 (_ (_ (extract nxm1) nyu1) _v0))) (eo::requires $ex_1 _v0 (_ (= (eo::list_concat bvxor xs1 (_ (bvxor (_ (concat z1) (_ (concat y1) (_ (concat u1) (eo::to_bin 0 0))))) ws1))) (_ (concat (_ (bvxor _v3) (_ (bvxor z1) (eo::nil bvxor (eo::typeof _v3))))) (_ (concat (_ (bvxor _v2) (_ (bvxor y1) (eo::nil bvxor (eo::typeof _v2))))) (_ (concat (_ (bvxor _v1) (_ (bvxor u1) (eo::nil bvxor (eo::typeof _v1))))) (eo::to_bin 0 0)))))))))))
  )
)
; program: $eovc_bv-xor-concat-pullup3
(program $eovc_bv-xor-concat-pullup3 ((@n4 Int) (@n2 Int) (@n1 Int) (@n0 Int) (@n3 Int) (z1 (BitVec @n3)) (nxm1 Int) (xs1 (BitVec @n0)) (ws1 (BitVec @n1)) (nyu1 Int) (nyum1 Int) (y1 (BitVec @n2)) (nu1 Int) (num1 Int) (u1 (BitVec @n4)))
  :signature ((BitVec @n4) Int Int (BitVec @n2) Int Int (BitVec @n1) (BitVec @n0) Int (BitVec @n3)) Bool
  (
  (($eovc_bv-xor-concat-pullup3 u1 num1 nu1 y1 nyum1 nyu1 ws1 xs1 nxm1 z1) (eo::define ((_v0 (@bvsize u1))) (eo::define ((_v1 (_ (= num1) (_ (- _v0) 1)))) (eo::define ((_v2 (_ (= nu1) _v0))) (eo::define ((_v3 (_ (+ (@bvsize y1)) (_ (+ _v0) 0)))) (eo::define ((_v4 (_ (= nyum1) (_ (- _v3) 1)))) (eo::define ((_v5 (_ (= nyu1) _v3))) (eo::define ((_v6 (_ (= nxm1) (_ (- (@bvsize ($singleton_elim (eo::list_concat bvxor xs1 ws1)))) 1)))) ($eo_requires_true ($eo_model_sat _v6) ($eo_requires_true ($eo_model_sat _v5) ($eo_requires_true ($eo_model_sat _v4) ($eo_requires_true ($eo_model_sat _v2) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_false ($eo_model_sat ($eor_bv-xor-concat-pullup3 xs1 ws1 y1 z1 u1 nxm1 nyu1 nyum1 nu1 num1 _v6 _v5 _v4 _v2 _v1)) true))))))))))))))
  )
)
(echo "smt-meta $eovc_bv-xor-concat-pullup3")
; program: $eor_bv-xor-duplicate
(program $eor_bv-xor-duplicate ((@n0 Int) (x1 (BitVec @n0)) (w1 Int))
  :signature ((BitVec @n0) Int Bool) Bool
  (
  (($eor_bv-xor-duplicate x1 w1 (_ (= w1) (@bvsize x1))) (eo::define ((_v0 (bvxor x1))) (_ (= (_ _v0 (_ _v0 (eo::nil bvxor (eo::typeof x1))))) (_ (@bv 0) w1))))
  )
)
; program: $eovc_bv-xor-duplicate
(program $eovc_bv-xor-duplicate ((@n0 Int) (w1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int) Bool
  (
  (($eovc_bv-xor-duplicate x1 w1) (eo::define ((_v0 (_ (= w1) (@bvsize x1)))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_bv-xor-duplicate x1 w1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_bv-xor-duplicate")
; program: $eor_bv-xor-ones
(program $eor_bv-xor-ones ((@n0 Int) (@n1 Int) (n1 Int) (w1 Int) (xs1 (BitVec @n0)) (zs1 (BitVec @n1)))
  :signature ((BitVec @n0) (BitVec @n1) Int Int Bool) Bool
  (
  (($eor_bv-xor-ones xs1 zs1 n1 w1 (_ (= n1) (_ (- (int.pow2 w1)) 1))) (_ (= (eo::list_concat bvxor xs1 (_ (bvxor (_ (@bv n1) w1)) zs1))) (bvnot ($singleton_elim (eo::list_concat bvxor xs1 zs1)))))
  )
)
; program: $eovc_bv-xor-ones
(program $eovc_bv-xor-ones ((@n1 Int) (@n0 Int) (xs1 (BitVec @n0)) (zs1 (BitVec @n1)) (n1 Int) (w1 Int))
  :signature (Int Int (BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-xor-ones w1 n1 zs1 xs1) (eo::define ((_v0 (_ (= n1) (_ (- (int.pow2 w1)) 1)))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_bv-xor-ones xs1 zs1 n1 w1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_bv-xor-ones")
; program: $eor_bv-xor-not
(program $eor_bv-xor-not ((@n0 Int) (@n1 Int) (y1 (BitVec @n1)) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) (BitVec @n1)) Bool
  (
  (($eor_bv-xor-not x1 y1) (eo::define ((_v0 (bvnot x1))) (_ (= (_ (bvxor _v0) (_ (bvxor (bvnot y1)) (eo::nil bvxor (eo::typeof _v0))))) (_ (bvxor x1) (_ (bvxor y1) (eo::nil bvxor (eo::typeof x1)))))))
  )
)
; program: $eovc_bv-xor-not
(program $eovc_bv-xor-not ((@n1 Int) (@n0 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :signature ((BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-xor-not y1 x1) ($eo_requires_false ($eo_model_sat ($eor_bv-xor-not x1 y1)) true))
  )
)
(echo "smt-meta $eovc_bv-xor-not")
; program: $eor_bv-not-idemp
(program $eor_bv-not-idemp ((@n0 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0)) Bool
  (
  (($eor_bv-not-idemp x1) (_ (= (bvnot (bvnot x1))) x1))
  )
)
; program: $eovc_bv-not-idemp
(program $eovc_bv-not-idemp ((@n0 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0)) Bool
  (
  (($eovc_bv-not-idemp x1) ($eo_requires_false ($eo_model_sat ($eor_bv-not-idemp x1)) true))
  )
)
(echo "smt-meta $eovc_bv-not-idemp")
; program: $eor_bv-ult-zero-1
(program $eor_bv-ult-zero-1 ((@n0 Int) (x1 (BitVec @n0)) (n1 Int))
  :signature ((BitVec @n0) Int) Bool
  (
  (($eor_bv-ult-zero-1 x1 n1) (eo::define ((_v0 (_ (@bv 0) n1))) (_ (= (_ (bvult _v0) x1)) (not (_ (= x1) _v0)))))
  )
)
; program: $eovc_bv-ult-zero-1
(program $eovc_bv-ult-zero-1 ((@n0 Int) (x1 (BitVec @n0)) (n1 Int))
  :signature (Int (BitVec @n0)) Bool
  (
  (($eovc_bv-ult-zero-1 n1 x1) ($eo_requires_false ($eo_model_sat ($eor_bv-ult-zero-1 x1 n1)) true))
  )
)
(echo "smt-meta $eovc_bv-ult-zero-1")
; program: $eor_bv-ult-zero-2
(program $eor_bv-ult-zero-2 ((@n0 Int) (x1 (BitVec @n0)) (n1 Int))
  :signature ((BitVec @n0) Int) Bool
  (
  (($eor_bv-ult-zero-2 x1 n1) (_ (= (_ (bvult x1) (_ (@bv 0) n1))) false))
  )
)
; program: $eovc_bv-ult-zero-2
(program $eovc_bv-ult-zero-2 ((@n0 Int) (x1 (BitVec @n0)) (n1 Int))
  :signature (Int (BitVec @n0)) Bool
  (
  (($eovc_bv-ult-zero-2 n1 x1) ($eo_requires_false ($eo_model_sat ($eor_bv-ult-zero-2 x1 n1)) true))
  )
)
(echo "smt-meta $eovc_bv-ult-zero-2")
; program: $eor_bv-ult-self
(program $eor_bv-ult-self ((@n0 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0)) Bool
  (
  (($eor_bv-ult-self x1) (_ (= (_ (bvult x1) x1)) false))
  )
)
; program: $eovc_bv-ult-self
(program $eovc_bv-ult-self ((@n0 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0)) Bool
  (
  (($eovc_bv-ult-self x1) ($eo_requires_false ($eo_model_sat ($eor_bv-ult-self x1)) true))
  )
)
(echo "smt-meta $eovc_bv-ult-self")
; program: $eor_bv-lt-self
(program $eor_bv-lt-self ((@n0 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0)) Bool
  (
  (($eor_bv-lt-self x1) (_ (= (_ (bvslt x1) x1)) false))
  )
)
; program: $eovc_bv-lt-self
(program $eovc_bv-lt-self ((@n0 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0)) Bool
  (
  (($eovc_bv-lt-self x1) ($eo_requires_false ($eo_model_sat ($eor_bv-lt-self x1)) true))
  )
)
(echo "smt-meta $eovc_bv-lt-self")
; program: $eor_bv-ule-self
(program $eor_bv-ule-self ((@n0 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0)) Bool
  (
  (($eor_bv-ule-self x1) (_ (= (_ (bvule x1) x1)) true))
  )
)
; program: $eovc_bv-ule-self
(program $eovc_bv-ule-self ((@n0 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0)) Bool
  (
  (($eovc_bv-ule-self x1) ($eo_requires_false ($eo_model_sat ($eor_bv-ule-self x1)) true))
  )
)
(echo "smt-meta $eovc_bv-ule-self")
; program: $eor_bv-ule-zero
(program $eor_bv-ule-zero ((@n0 Int) (x1 (BitVec @n0)) (n1 Int))
  :signature ((BitVec @n0) Int) Bool
  (
  (($eor_bv-ule-zero x1 n1) (eo::define ((_v0 (_ (@bv 0) n1))) (_ (= (_ (bvule x1) _v0)) (_ (= x1) _v0))))
  )
)
; program: $eovc_bv-ule-zero
(program $eovc_bv-ule-zero ((@n0 Int) (x1 (BitVec @n0)) (n1 Int))
  :signature (Int (BitVec @n0)) Bool
  (
  (($eovc_bv-ule-zero n1 x1) ($eo_requires_false ($eo_model_sat ($eor_bv-ule-zero x1 n1)) true))
  )
)
(echo "smt-meta $eovc_bv-ule-zero")
; program: $eor_bv-zero-ule
(program $eor_bv-zero-ule ((@n0 Int) (n1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int) Bool
  (
  (($eor_bv-zero-ule x1 n1) (_ (= (_ (bvule (_ (@bv 0) n1)) x1)) true))
  )
)
; program: $eovc_bv-zero-ule
(program $eovc_bv-zero-ule ((@n0 Int) (x1 (BitVec @n0)) (n1 Int))
  :signature (Int (BitVec @n0)) Bool
  (
  (($eovc_bv-zero-ule n1 x1) ($eo_requires_false ($eo_model_sat ($eor_bv-zero-ule x1 n1)) true))
  )
)
(echo "smt-meta $eovc_bv-zero-ule")
; program: $eor_bv-sle-self
(program $eor_bv-sle-self ((@n0 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0)) Bool
  (
  (($eor_bv-sle-self x1) (_ (= (_ (bvsle x1) x1)) true))
  )
)
; program: $eovc_bv-sle-self
(program $eovc_bv-sle-self ((@n0 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0)) Bool
  (
  (($eovc_bv-sle-self x1) ($eo_requires_false ($eo_model_sat ($eor_bv-sle-self x1)) true))
  )
)
(echo "smt-meta $eovc_bv-sle-self")
; program: $eor_bv-ule-max
(program $eor_bv-ule-max ((@n0 Int) (x1 (BitVec @n0)) (n1 Int) (w1 Int))
  :signature ((BitVec @n0) Int Int Bool Bool) Bool
  (
  ((eo::define ((_v0 (@bvsize x1))) ($eor_bv-ule-max x1 n1 w1 (_ (= w1) _v0) (_ (= n1) (_ (- (int.pow2 _v0)) 1)))) (_ (= (_ (bvule x1) (_ (@bv n1) w1))) true))
  )
)
; program: $eovc_bv-ule-max
(program $eovc_bv-ule-max ((@n0 Int) (w1 Int) (n1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int) Bool
  (
  (($eovc_bv-ule-max x1 n1 w1) (eo::define ((_v0 (@bvsize x1))) (eo::define ((_v1 (_ (= n1) (_ (- (int.pow2 _v0)) 1)))) (eo::define ((_v2 (_ (= w1) _v0))) ($eo_requires_true ($eo_model_sat _v2) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_false ($eo_model_sat ($eor_bv-ule-max x1 n1 w1 _v2 _v1)) true)))))))
  )
)
(echo "smt-meta $eovc_bv-ule-max")
; program: $eor_bv-not-ult
(program $eor_bv-not-ult ((@n0 Int) (@n1 Int) (y1 (BitVec @n1)) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) (BitVec @n1)) Bool
  (
  (($eor_bv-not-ult x1 y1) (_ (= (not (_ (bvult x1) y1))) (_ (bvule y1) x1)))
  )
)
; program: $eovc_bv-not-ult
(program $eovc_bv-not-ult ((@n1 Int) (@n0 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :signature ((BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-not-ult y1 x1) ($eo_requires_false ($eo_model_sat ($eor_bv-not-ult x1 y1)) true))
  )
)
(echo "smt-meta $eovc_bv-not-ult")
; program: $eor_bv-mult-pow2-1
(program $eor_bv-mult-pow2-1 ((@n0 Int) (@n1 Int) (@n2 Int) (n1 Int) (size1 Int) (u1 Int) (xs1 (BitVec @n0)) (z1 (BitVec @n2)) (ys1 (BitVec @n1)) (exponent1 Int))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n2) Int Int Int Int Bool Bool Bool) Bool
  (
  ((eo::define ((_v0 (int.log2 n1))) ($eor_bv-mult-pow2-1 xs1 ys1 z1 size1 n1 exponent1 u1 (_ (= (int.ispow2 n1)) true) (_ (= exponent1) _v0) (_ (= u1) (_ (- (_ (- size1) _v0)) 1)))) (eo::define ((_v0 (bvmul z1))) (_ (= (eo::list_concat bvmul xs1 (_ _v0 (_ (bvmul (_ (@bv n1) size1)) ys1)))) (_ (concat (_ (_ (extract u1) 0) ($singleton_elim (eo::list_concat bvmul xs1 (_ _v0 ys1))))) (_ (concat (_ (@bv 0) exponent1)) (eo::to_bin 0 0))))))
  )
)
; program: $eovc_bv-mult-pow2-1
(program $eovc_bv-mult-pow2-1 ((@n2 Int) (@n1 Int) (@n0 Int) (xs1 (BitVec @n0)) (ys1 (BitVec @n1)) (z1 (BitVec @n2)) (exponent1 Int) (u1 Int) (size1 Int) (n1 Int))
  :signature (Int Int Int Int (BitVec @n2) (BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-mult-pow2-1 n1 size1 u1 exponent1 z1 ys1 xs1) (eo::define ((_v0 (int.log2 n1))) (eo::define ((_v1 (_ (= u1) (_ (- (_ (- size1) _v0)) 1)))) (eo::define ((_v2 (_ (= exponent1) _v0))) (eo::define ((_v3 (_ (= (int.ispow2 n1)) true))) ($eo_requires_true ($eo_model_sat _v3) ($eo_requires_true ($eo_model_sat _v2) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_false ($eo_model_sat ($eor_bv-mult-pow2-1 xs1 ys1 z1 size1 n1 exponent1 u1 _v3 _v2 _v1)) true)))))))))
  )
)
(echo "smt-meta $eovc_bv-mult-pow2-1")
; program: $eor_bv-mult-pow2-2
(program $eor_bv-mult-pow2-2 ((@n0 Int) (@n1 Int) (@n2 Int) (n1 Int) (size1 Int) (u1 Int) (xs1 (BitVec @n0)) (z1 (BitVec @n2)) (ys1 (BitVec @n1)) (exponent1 Int))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n2) Int Int Int Int Bool Bool Bool) Bool
  (
  ((eo::define ((_v0 (_ (- (int.pow2 size1)) n1))) (eo::define ((_v1 (int.log2 _v0))) ($eor_bv-mult-pow2-2 xs1 ys1 z1 size1 n1 exponent1 u1 (_ (= (int.ispow2 _v0)) true) (_ (= exponent1) _v1) (_ (= u1) (_ (- (_ (- size1) _v1)) 1))))) (eo::define ((_v0 (bvmul z1))) (_ (= (eo::list_concat bvmul xs1 (_ _v0 (_ (bvmul (_ (@bv n1) size1)) ys1)))) (_ (concat (_ (_ (extract u1) 0) (bvneg ($singleton_elim (eo::list_concat bvmul xs1 (_ _v0 ys1)))))) (_ (concat (_ (@bv 0) exponent1)) (eo::to_bin 0 0))))))
  )
)
; program: $eovc_bv-mult-pow2-2
(program $eovc_bv-mult-pow2-2 ((@n2 Int) (@n1 Int) (@n0 Int) (xs1 (BitVec @n0)) (ys1 (BitVec @n1)) (z1 (BitVec @n2)) (exponent1 Int) (u1 Int) (size1 Int) (n1 Int))
  :signature (Int Int Int Int (BitVec @n2) (BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-mult-pow2-2 n1 size1 u1 exponent1 z1 ys1 xs1) (eo::define ((_v0 (_ (- (int.pow2 size1)) n1))) (eo::define ((_v1 (int.log2 _v0))) (eo::define ((_v2 (_ (= u1) (_ (- (_ (- size1) _v1)) 1)))) (eo::define ((_v3 (_ (= exponent1) _v1))) (eo::define ((_v4 (_ (= (int.ispow2 _v0)) true))) ($eo_requires_true ($eo_model_sat _v4) ($eo_requires_true ($eo_model_sat _v3) ($eo_requires_true ($eo_model_sat _v2) ($eo_requires_false ($eo_model_sat ($eor_bv-mult-pow2-2 xs1 ys1 z1 size1 n1 exponent1 u1 _v4 _v3 _v2)) true))))))))))
  )
)
(echo "smt-meta $eovc_bv-mult-pow2-2")
; program: $eor_bv-mult-pow2-2b
(program $eor_bv-mult-pow2-2b ((@n0 Int) (n1 Int) (size1 Int) (u1 Int) (z1 (BitVec @n0)) (exponent1 Int))
  :signature ((BitVec @n0) Int Int Int Int Bool Bool Bool) Bool
  (
  ((eo::define ((_v0 (_ (- (int.pow2 size1)) n1))) (eo::define ((_v1 (int.log2 _v0))) ($eor_bv-mult-pow2-2b z1 size1 n1 exponent1 u1 (_ (= (int.ispow2 _v0)) true) (_ (= exponent1) _v1) (_ (= u1) (_ (- (_ (- size1) _v1)) 1))))) (_ (= (_ (bvmul z1) (_ (bvmul (_ (@bv n1) size1)) (eo::nil bvmul (eo::typeof z1))))) (_ (concat (_ (_ (extract u1) 0) (bvneg z1))) (_ (concat (_ (@bv 0) exponent1)) (eo::to_bin 0 0)))))
  )
)
; program: $eovc_bv-mult-pow2-2b
(program $eovc_bv-mult-pow2-2b ((@n0 Int) (z1 (BitVec @n0)) (exponent1 Int) (u1 Int) (size1 Int) (n1 Int))
  :signature (Int Int Int Int (BitVec @n0)) Bool
  (
  (($eovc_bv-mult-pow2-2b n1 size1 u1 exponent1 z1) (eo::define ((_v0 (_ (- (int.pow2 size1)) n1))) (eo::define ((_v1 (int.log2 _v0))) (eo::define ((_v2 (_ (= u1) (_ (- (_ (- size1) _v1)) 1)))) (eo::define ((_v3 (_ (= exponent1) _v1))) (eo::define ((_v4 (_ (= (int.ispow2 _v0)) true))) ($eo_requires_true ($eo_model_sat _v4) ($eo_requires_true ($eo_model_sat _v3) ($eo_requires_true ($eo_model_sat _v2) ($eo_requires_false ($eo_model_sat ($eor_bv-mult-pow2-2b z1 size1 n1 exponent1 u1 _v4 _v3 _v2)) true))))))))))
  )
)
(echo "smt-meta $eovc_bv-mult-pow2-2b")
; program: $eor_bv-extract-mult-leading-bit
(program $eor_bv-extract-mult-leading-bit ((@n0 Int) (@n1 Int) (high1 Int) (low1 Int) (y1i1 Int) (y1in1 Int) (y1 (BitVec @n1)) (x1i1 Int) (x1in1 Int) (x1 (BitVec @n0)) (w1 Int))
  :signature (Int Int Int Int (BitVec @n0) Int Int (BitVec @n1) Int Bool Bool Bool) Bool
  (
  ((eo::define ((_v0 (+ 1))) (eo::define ((_v1 (_ (+ x1in1) (_ (+ (@bvsize x1)) 0)))) ($eor_bv-extract-mult-leading-bit high1 low1 x1i1 x1in1 x1 y1i1 y1in1 y1 w1 (_ (= (_ (> _v1) 64)) true) (_ (= (_ (<= (_ (- (_ (* 2) (_ (* _v1) 1))) (_ (+ (_ (_ (ite (_ (= x1i1) 0)) x1in1) (_ (- x1in1) (_ _v0 (_ (+ (int.log2 x1i1)) 0))))) (_ (+ (_ (_ (ite (_ (= y1i1) 0)) y1in1) (_ (- y1in1) (_ _v0 (_ (+ (int.log2 y1i1)) 0))))) 0)))) low1)) true) (_ (= w1) (_ _v0 (_ (+ (_ (- high1) low1)) 0)))))) (eo::define ((_v0 (_ (concat (_ (@bv x1i1) x1in1)) (_ (concat x1) (eo::to_bin 0 0))))) (_ (= (_ (_ (extract high1) low1) (_ (bvmul _v0) (_ (bvmul (_ (concat (_ (@bv y1i1) y1in1)) (_ (concat y1) (eo::to_bin 0 0)))) (eo::nil bvmul (eo::typeof _v0)))))) (_ (@bv 0) w1))))
  )
)
; program: $eovc_bv-extract-mult-leading-bit
(program $eovc_bv-extract-mult-leading-bit ((@n0 Int) (@n1 Int) (y1 (BitVec @n1)) (x1 (BitVec @n0)) (x1in1 Int) (x1i1 Int) (y1in1 Int) (y1i1 Int) (w1 Int) (high1 Int) (low1 Int))
  :signature (Int Int Int Int Int Int Int (BitVec @n0) (BitVec @n1)) Bool
  (
  (($eovc_bv-extract-mult-leading-bit low1 high1 w1 y1i1 y1in1 x1i1 x1in1 x1 y1) (eo::define ((_v0 (+ 1))) (eo::define ((_v1 (_ (= w1) (_ _v0 (_ (+ (_ (- high1) low1)) 0))))) (eo::define ((_v2 (_ (+ x1in1) (_ (+ (@bvsize x1)) 0)))) (eo::define ((_v3 (_ (= (_ (<= (_ (- (_ (* 2) (_ (* _v2) 1))) (_ (+ (_ (_ (ite (_ (= x1i1) 0)) x1in1) (_ (- x1in1) (_ _v0 (_ (+ (int.log2 x1i1)) 0))))) (_ (+ (_ (_ (ite (_ (= y1i1) 0)) y1in1) (_ (- y1in1) (_ _v0 (_ (+ (int.log2 y1i1)) 0))))) 0)))) low1)) true))) (eo::define ((_v4 (_ (= (_ (> _v2) 64)) true))) ($eo_requires_true ($eo_model_sat _v4) ($eo_requires_true ($eo_model_sat _v3) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_false ($eo_model_sat ($eor_bv-extract-mult-leading-bit high1 low1 x1i1 x1in1 x1 y1i1 y1in1 y1 w1 _v4 _v3 _v1)) true))))))))))
  )
)
(echo "smt-meta $eovc_bv-extract-mult-leading-bit")
; program: $eor_bv-udiv-pow2-not-one
(program $eor_bv-udiv-pow2-not-one ((@n0 Int) (v1 Int) (n1 Int) (nm1 Int) (power1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int Int Bool Bool Bool Bool) Bool
  (
  (($eor_bv-udiv-pow2-not-one x1 v1 n1 power1 nm1 (_ (= (int.ispow2 v1)) true) (_ (= (_ (> v1) 1)) true) (_ (= power1) (int.log2 v1)) (_ (= nm1) (_ (- n1) 1))) (_ (= (_ (bvudiv x1) (_ (@bv v1) n1))) (_ (concat (_ (@bv 0) power1)) (_ (concat (_ (_ (extract nm1) power1) x1)) (eo::to_bin 0 0)))))
  )
)
; program: $eovc_bv-udiv-pow2-not-one
(program $eovc_bv-udiv-pow2-not-one ((@n0 Int) (x1 (BitVec @n0)) (power1 Int) (v1 Int) (nm1 Int) (n1 Int))
  :signature (Int Int Int Int (BitVec @n0)) Bool
  (
  (($eovc_bv-udiv-pow2-not-one n1 nm1 v1 power1 x1) (eo::define ((_v0 (_ (= nm1) (_ (- n1) 1)))) (eo::define ((_v1 (_ (= power1) (int.log2 v1)))) (eo::define ((_v2 (_ (= (_ (> v1) 1)) true))) (eo::define ((_v3 (_ (= (int.ispow2 v1)) true))) ($eo_requires_true ($eo_model_sat _v3) ($eo_requires_true ($eo_model_sat _v2) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_bv-udiv-pow2-not-one x1 v1 n1 power1 nm1 _v3 _v2 _v1 _v0)) true))))))))))
  )
)
(echo "smt-meta $eovc_bv-udiv-pow2-not-one")
; program: $eor_bv-udiv-zero
(program $eor_bv-udiv-zero ((@n0 Int) (x1 (BitVec @n0)) (n1 Int))
  :signature ((BitVec @n0) Int) Bool
  (
  (($eor_bv-udiv-zero x1 n1) (eo::define ((_v0 (_ (@bv 0) n1))) (_ (= (_ (bvudiv x1) _v0)) (bvnot _v0))))
  )
)
; program: $eovc_bv-udiv-zero
(program $eovc_bv-udiv-zero ((@n0 Int) (x1 (BitVec @n0)) (n1 Int))
  :signature (Int (BitVec @n0)) Bool
  (
  (($eovc_bv-udiv-zero n1 x1) ($eo_requires_false ($eo_model_sat ($eor_bv-udiv-zero x1 n1)) true))
  )
)
(echo "smt-meta $eovc_bv-udiv-zero")
; program: $eor_bv-udiv-one
(program $eor_bv-udiv-one ((@n0 Int) (n1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int) Bool
  (
  (($eor_bv-udiv-one x1 n1) (_ (= (_ (bvudiv x1) (_ (@bv 1) n1))) x1))
  )
)
; program: $eovc_bv-udiv-one
(program $eovc_bv-udiv-one ((@n0 Int) (x1 (BitVec @n0)) (n1 Int))
  :signature (Int (BitVec @n0)) Bool
  (
  (($eovc_bv-udiv-one n1 x1) ($eo_requires_false ($eo_model_sat ($eor_bv-udiv-one x1 n1)) true))
  )
)
(echo "smt-meta $eovc_bv-udiv-one")
; program: $eor_bv-urem-pow2-not-one
(program $eor_bv-urem-pow2-not-one ((@n0 Int) (v1 Int) (n1 Int) (nmp1 Int) (pm1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int Int Bool Bool Bool Bool) Bool
  (
  ((eo::define ((_v0 (int.log2 v1))) ($eor_bv-urem-pow2-not-one x1 v1 n1 nmp1 pm1 (_ (= (int.ispow2 v1)) true) (_ (= (_ (> v1) 1)) true) (_ (= nmp1) (_ (- n1) _v0)) (_ (= pm1) (_ (- _v0) 1)))) (_ (= (_ (bvurem x1) (_ (@bv v1) n1))) (_ (concat (_ (@bv 0) nmp1)) (_ (concat (_ (_ (extract pm1) 0) x1)) (eo::to_bin 0 0)))))
  )
)
; program: $eovc_bv-urem-pow2-not-one
(program $eovc_bv-urem-pow2-not-one ((@n0 Int) (x1 (BitVec @n0)) (nmp1 Int) (n1 Int) (pm1 Int) (v1 Int))
  :signature (Int Int Int Int (BitVec @n0)) Bool
  (
  (($eovc_bv-urem-pow2-not-one v1 pm1 n1 nmp1 x1) (eo::define ((_v0 (int.log2 v1))) (eo::define ((_v1 (_ (= pm1) (_ (- _v0) 1)))) (eo::define ((_v2 (_ (= nmp1) (_ (- n1) _v0)))) (eo::define ((_v3 (_ (= (_ (> v1) 1)) true))) (eo::define ((_v4 (_ (= (int.ispow2 v1)) true))) ($eo_requires_true ($eo_model_sat _v4) ($eo_requires_true ($eo_model_sat _v3) ($eo_requires_true ($eo_model_sat _v2) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_false ($eo_model_sat ($eor_bv-urem-pow2-not-one x1 v1 n1 nmp1 pm1 _v4 _v3 _v2 _v1)) true)))))))))))
  )
)
(echo "smt-meta $eovc_bv-urem-pow2-not-one")
; program: $eor_bv-urem-one
(program $eor_bv-urem-one ((@n0 Int) (x1 (BitVec @n0)) (n1 Int))
  :signature ((BitVec @n0) Int) Bool
  (
  (($eor_bv-urem-one x1 n1) (_ (= (_ (bvurem x1) (_ (@bv 1) n1))) (_ (@bv 0) n1)))
  )
)
; program: $eovc_bv-urem-one
(program $eovc_bv-urem-one ((@n0 Int) (x1 (BitVec @n0)) (n1 Int))
  :signature (Int (BitVec @n0)) Bool
  (
  (($eovc_bv-urem-one n1 x1) ($eo_requires_false ($eo_model_sat ($eor_bv-urem-one x1 n1)) true))
  )
)
(echo "smt-meta $eovc_bv-urem-one")
; program: $eor_bv-urem-self
(program $eor_bv-urem-self ((@n0 Int) (x1 (BitVec @n0)) (w1 Int))
  :signature ((BitVec @n0) Int Bool) Bool
  (
  (($eor_bv-urem-self x1 w1 (_ (= w1) (@bvsize x1))) (_ (= (_ (bvurem x1) x1)) (_ (@bv 0) w1)))
  )
)
; program: $eovc_bv-urem-self
(program $eovc_bv-urem-self ((@n0 Int) (w1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int) Bool
  (
  (($eovc_bv-urem-self x1 w1) (eo::define ((_v0 (_ (= w1) (@bvsize x1)))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_bv-urem-self x1 w1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_bv-urem-self")
; program: $eor_bv-shl-zero
(program $eor_bv-shl-zero ((@n0 Int) (a1 (BitVec @n0)) (n1 Int))
  :signature ((BitVec @n0) Int) Bool
  (
  (($eor_bv-shl-zero a1 n1) (eo::define ((_v0 (_ (@bv 0) n1))) (_ (= (_ (bvshl _v0) a1)) _v0)))
  )
)
; program: $eovc_bv-shl-zero
(program $eovc_bv-shl-zero ((@n0 Int) (a1 (BitVec @n0)) (n1 Int))
  :signature (Int (BitVec @n0)) Bool
  (
  (($eovc_bv-shl-zero n1 a1) ($eo_requires_false ($eo_model_sat ($eor_bv-shl-zero a1 n1)) true))
  )
)
(echo "smt-meta $eovc_bv-shl-zero")
; program: $eor_bv-lshr-zero
(program $eor_bv-lshr-zero ((@n0 Int) (a1 (BitVec @n0)) (n1 Int))
  :signature ((BitVec @n0) Int) Bool
  (
  (($eor_bv-lshr-zero a1 n1) (eo::define ((_v0 (_ (@bv 0) n1))) (_ (= (_ (bvlshr _v0) a1)) _v0)))
  )
)
; program: $eovc_bv-lshr-zero
(program $eovc_bv-lshr-zero ((@n0 Int) (a1 (BitVec @n0)) (n1 Int))
  :signature (Int (BitVec @n0)) Bool
  (
  (($eovc_bv-lshr-zero n1 a1) ($eo_requires_false ($eo_model_sat ($eor_bv-lshr-zero a1 n1)) true))
  )
)
(echo "smt-meta $eovc_bv-lshr-zero")
; program: $eor_bv-ashr-zero
(program $eor_bv-ashr-zero ((@n0 Int) (a1 (BitVec @n0)) (n1 Int))
  :signature ((BitVec @n0) Int) Bool
  (
  (($eor_bv-ashr-zero a1 n1) (eo::define ((_v0 (_ (@bv 0) n1))) (_ (= (_ (bvashr _v0) a1)) _v0)))
  )
)
; program: $eovc_bv-ashr-zero
(program $eovc_bv-ashr-zero ((@n0 Int) (a1 (BitVec @n0)) (n1 Int))
  :signature (Int (BitVec @n0)) Bool
  (
  (($eovc_bv-ashr-zero n1 a1) ($eo_requires_false ($eo_model_sat ($eor_bv-ashr-zero a1 n1)) true))
  )
)
(echo "smt-meta $eovc_bv-ashr-zero")
; program: $eor_bv-ugt-urem
(program $eor_bv-ugt-urem ((@n0 Int) (@n1 Int) (x1 (BitVec @n1)) (y1 (BitVec @n0)) (w1 Int))
  :signature ((BitVec @n0) (BitVec @n1) Int Bool) Bool
  (
  (($eor_bv-ugt-urem y1 x1 w1 (_ (= w1) (@bvsize y1))) (eo::define ((_v0 (_ (@bv 0) w1))) (_ (= (_ (bvugt (_ (bvurem y1) x1)) x1)) (_ (and (_ (= x1) _v0)) (_ (and (_ (bvugt y1) _v0)) true)))))
  )
)
; program: $eovc_bv-ugt-urem
(program $eovc_bv-ugt-urem ((@n0 Int) (@n1 Int) (x1 (BitVec @n1)) (w1 Int) (y1 (BitVec @n0)))
  :signature ((BitVec @n0) Int (BitVec @n1)) Bool
  (
  (($eovc_bv-ugt-urem y1 w1 x1) (eo::define ((_v0 (_ (= w1) (@bvsize y1)))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_bv-ugt-urem y1 x1 w1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_bv-ugt-urem")
; program: $eor_bv-ult-one
(program $eor_bv-ult-one ((@n0 Int) (x1 (BitVec @n0)) (n1 Int))
  :signature ((BitVec @n0) Int) Bool
  (
  (($eor_bv-ult-one x1 n1) (_ (= (_ (bvult x1) (_ (@bv 1) n1))) (_ (= x1) (_ (@bv 0) n1))))
  )
)
; program: $eovc_bv-ult-one
(program $eovc_bv-ult-one ((@n0 Int) (x1 (BitVec @n0)) (n1 Int))
  :signature (Int (BitVec @n0)) Bool
  (
  (($eovc_bv-ult-one n1 x1) ($eo_requires_false ($eo_model_sat ($eor_bv-ult-one x1 n1)) true))
  )
)
(echo "smt-meta $eovc_bv-ult-one")
; program: $eor_bv-merge-sign-extend-1
(program $eor_bv-merge-sign-extend-1 ((@n0 Int) (i1 Int) (j1 Int) (k1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int Bool) Bool
  (
  (($eor_bv-merge-sign-extend-1 x1 i1 j1 k1 (_ (= k1) (_ (+ i1) (_ (+ j1) 0)))) (_ (= (_ (sign_extend i1) (_ (sign_extend j1) x1))) (_ (sign_extend k1) x1)))
  )
)
; program: $eovc_bv-merge-sign-extend-1
(program $eovc_bv-merge-sign-extend-1 ((@n0 Int) (x1 (BitVec @n0)) (k1 Int) (i1 Int) (j1 Int))
  :signature (Int Int Int (BitVec @n0)) Bool
  (
  (($eovc_bv-merge-sign-extend-1 j1 i1 k1 x1) (eo::define ((_v0 (_ (= k1) (_ (+ i1) (_ (+ j1) 0))))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_bv-merge-sign-extend-1 x1 i1 j1 k1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_bv-merge-sign-extend-1")
; program: $eor_bv-merge-sign-extend-2
(program $eor_bv-merge-sign-extend-2 ((@n0 Int) (i1 Int) (j1 Int) (k1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int Bool Bool) Bool
  (
  (($eor_bv-merge-sign-extend-2 x1 i1 j1 k1 (_ (= (_ (> j1) 0)) true) (_ (= k1) (_ (+ i1) (_ (+ j1) 0)))) (_ (= (_ (sign_extend i1) (_ (zero_extend j1) x1))) (_ (zero_extend k1) x1)))
  )
)
; program: $eovc_bv-merge-sign-extend-2
(program $eovc_bv-merge-sign-extend-2 ((@n0 Int) (x1 (BitVec @n0)) (k1 Int) (i1 Int) (j1 Int))
  :signature (Int Int Int (BitVec @n0)) Bool
  (
  (($eovc_bv-merge-sign-extend-2 j1 i1 k1 x1) (eo::define ((_v0 (_ (= k1) (_ (+ i1) (_ (+ j1) 0))))) (eo::define ((_v1 (_ (= (_ (> j1) 0)) true))) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_bv-merge-sign-extend-2 x1 i1 j1 k1 _v1 _v0)) true))))))
  )
)
(echo "smt-meta $eovc_bv-merge-sign-extend-2")
; program: $eor_bv-sign-extend-eq-const-1
(program $eor_bv-sign-extend-eq-const-1 ((@n0 Int) (m1 Int) (nmm1 Int) (mp1 Int) (x1 (BitVec @n0)) (nm2 Int) (c1 Int) (nm1 Int))
  :signature ((BitVec @n0) Int Int Int Int Int Int Bool Bool Bool) Bool
  (
  (($eor_bv-sign-extend-eq-const-1 x1 m1 c1 nm1 mp1 nm2 nmm1 (_ (= mp1) (_ (+ m1) (_ (+ 1) 0))) (_ (= nm2) (_ (- (@bvsize x1)) 1)) (_ (= nmm1) (_ (- nm1) 1))) (eo::define ((_v0 (_ (@bv c1) nm1))) (eo::define ((_v1 (_ (@bv 0) mp1))) (eo::define ((_v2 (= (_ (_ (extract nmm1) nm2) _v0)))) (_ (= (_ (= (_ (sign_extend m1) x1)) _v0)) (_ (and (_ (or (_ _v2 _v1)) (_ (or (_ _v2 (bvnot _v1))) false))) (_ (and (_ (= x1) (_ (_ (extract nm2) 0) _v0))) true)))))))
  )
)
; program: $eovc_bv-sign-extend-eq-const-1
(program $eovc_bv-sign-extend-eq-const-1 ((@n0 Int) (c1 Int) (mp1 Int) (m1 Int) (nm2 Int) (x1 (BitVec @n0)) (nmm1 Int) (nm1 Int))
  :signature (Int Int (BitVec @n0) Int Int Int Int) Bool
  (
  (($eovc_bv-sign-extend-eq-const-1 nm1 nmm1 x1 nm2 m1 mp1 c1) (eo::define ((_v0 (_ (= nmm1) (_ (- nm1) 1)))) (eo::define ((_v1 (_ (= nm2) (_ (- (@bvsize x1)) 1)))) (eo::define ((_v2 (_ (= mp1) (_ (+ m1) (_ (+ 1) 0))))) ($eo_requires_true ($eo_model_sat _v2) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_bv-sign-extend-eq-const-1 x1 m1 c1 nm1 mp1 nm2 nmm1 _v2 _v1 _v0)) true))))))))
  )
)
(echo "smt-meta $eovc_bv-sign-extend-eq-const-1")
; program: $eor_bv-sign-extend-eq-const-2
(program $eor_bv-sign-extend-eq-const-2 ((@n0 Int) (m1 Int) (nmm1 Int) (mp1 Int) (x1 (BitVec @n0)) (nm2 Int) (c1 Int) (nm1 Int))
  :signature ((BitVec @n0) Int Int Int Int Int Int Bool Bool Bool) Bool
  (
  (($eor_bv-sign-extend-eq-const-2 x1 m1 c1 nm1 mp1 nm2 nmm1 (_ (= mp1) (_ (+ m1) (_ (+ 1) 0))) (_ (= nm2) (_ (- (@bvsize x1)) 1)) (_ (= nmm1) (_ (- nm1) 1))) (eo::define ((_v0 (_ (@bv c1) nm1))) (eo::define ((_v1 (_ (@bv 0) mp1))) (eo::define ((_v2 (= (_ (_ (extract nmm1) nm2) _v0)))) (_ (= (_ (= _v0) (_ (sign_extend m1) x1))) (_ (and (_ (or (_ _v2 _v1)) (_ (or (_ _v2 (bvnot _v1))) false))) (_ (and (_ (= x1) (_ (_ (extract nm2) 0) _v0))) true)))))))
  )
)
; program: $eovc_bv-sign-extend-eq-const-2
(program $eovc_bv-sign-extend-eq-const-2 ((@n0 Int) (c1 Int) (mp1 Int) (m1 Int) (nm2 Int) (x1 (BitVec @n0)) (nmm1 Int) (nm1 Int))
  :signature (Int Int (BitVec @n0) Int Int Int Int) Bool
  (
  (($eovc_bv-sign-extend-eq-const-2 nm1 nmm1 x1 nm2 m1 mp1 c1) (eo::define ((_v0 (_ (= nmm1) (_ (- nm1) 1)))) (eo::define ((_v1 (_ (= nm2) (_ (- (@bvsize x1)) 1)))) (eo::define ((_v2 (_ (= mp1) (_ (+ m1) (_ (+ 1) 0))))) ($eo_requires_true ($eo_model_sat _v2) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_bv-sign-extend-eq-const-2 x1 m1 c1 nm1 mp1 nm2 nmm1 _v2 _v1 _v0)) true))))))))
  )
)
(echo "smt-meta $eovc_bv-sign-extend-eq-const-2")
; program: $eor_bv-zero-extend-eq-const-1
(program $eor_bv-zero-extend-eq-const-1 ((@n0 Int) (nmm1 Int) (m1 Int) (x1 (BitVec @n0)) (nm2 Int) (c1 Int) (nm1 Int))
  :signature ((BitVec @n0) Int Int Int Int Int Bool Bool) Bool
  (
  (($eor_bv-zero-extend-eq-const-1 x1 m1 c1 nm1 nm2 nmm1 (_ (= nm2) (_ (- (@bvsize x1)) 1)) (_ (= nmm1) (_ (- nm1) 1))) (eo::define ((_v0 (_ (@bv c1) nm1))) (_ (= (_ (= (_ (zero_extend m1) x1)) _v0)) (_ (and (_ (= (_ (_ (extract nmm1) nm2) _v0)) (_ (@bv 0) m1))) (_ (and (_ (= x1) (_ (_ (extract nm2) 0) _v0))) true)))))
  )
)
; program: $eovc_bv-zero-extend-eq-const-1
(program $eovc_bv-zero-extend-eq-const-1 ((@n0 Int) (m1 Int) (c1 Int) (nm2 Int) (x1 (BitVec @n0)) (nmm1 Int) (nm1 Int))
  :signature (Int Int (BitVec @n0) Int Int Int) Bool
  (
  (($eovc_bv-zero-extend-eq-const-1 nm1 nmm1 x1 nm2 c1 m1) (eo::define ((_v0 (_ (= nmm1) (_ (- nm1) 1)))) (eo::define ((_v1 (_ (= nm2) (_ (- (@bvsize x1)) 1)))) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_bv-zero-extend-eq-const-1 x1 m1 c1 nm1 nm2 nmm1 _v1 _v0)) true))))))
  )
)
(echo "smt-meta $eovc_bv-zero-extend-eq-const-1")
; program: $eor_bv-zero-extend-eq-const-2
(program $eor_bv-zero-extend-eq-const-2 ((@n0 Int) (nmm1 Int) (m1 Int) (x1 (BitVec @n0)) (nm2 Int) (c1 Int) (nm1 Int))
  :signature ((BitVec @n0) Int Int Int Int Int Bool Bool) Bool
  (
  (($eor_bv-zero-extend-eq-const-2 x1 m1 c1 nm1 nm2 nmm1 (_ (= nm2) (_ (- (@bvsize x1)) 1)) (_ (= nmm1) (_ (- nm1) 1))) (eo::define ((_v0 (_ (@bv c1) nm1))) (_ (= (_ (= _v0) (_ (zero_extend m1) x1))) (_ (and (_ (= (_ (_ (extract nmm1) nm2) _v0)) (_ (@bv 0) m1))) (_ (and (_ (= x1) (_ (_ (extract nm2) 0) _v0))) true)))))
  )
)
; program: $eovc_bv-zero-extend-eq-const-2
(program $eovc_bv-zero-extend-eq-const-2 ((@n0 Int) (m1 Int) (c1 Int) (nm2 Int) (x1 (BitVec @n0)) (nmm1 Int) (nm1 Int))
  :signature (Int Int (BitVec @n0) Int Int Int) Bool
  (
  (($eovc_bv-zero-extend-eq-const-2 nm1 nmm1 x1 nm2 c1 m1) (eo::define ((_v0 (_ (= nmm1) (_ (- nm1) 1)))) (eo::define ((_v1 (_ (= nm2) (_ (- (@bvsize x1)) 1)))) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_bv-zero-extend-eq-const-2 x1 m1 c1 nm1 nm2 nmm1 _v1 _v0)) true))))))
  )
)
(echo "smt-meta $eovc_bv-zero-extend-eq-const-2")
; program: $eor_bv-zero-extend-ult-const-1
(program $eor_bv-zero-extend-ult-const-1 ((@n0 Int) (m1 Int) (x1 (BitVec @n0)) (nm2 Int) (c1 Int) (nm1 Int))
  :signature ((BitVec @n0) Int Int Int Int Bool Bool) Bool
  (
  ((eo::define ((_v0 (_ (@bv c1) nm1))) ($eor_bv-zero-extend-ult-const-1 x1 m1 c1 nm1 nm2 (_ (= nm2) (_ (- (@bvsize x1)) 1)) (_ (= _v0) (_ (zero_extend m1) (_ (_ (extract nm2) 0) _v0))))) (eo::define ((_v0 (_ (@bv c1) nm1))) (_ (= (_ (bvult (_ (zero_extend m1) x1)) _v0)) (_ (bvult x1) (_ (_ (extract nm2) 0) _v0)))))
  )
)
; program: $eovc_bv-zero-extend-ult-const-1
(program $eovc_bv-zero-extend-ult-const-1 ((@n0 Int) (x1 (BitVec @n0)) (m1 Int) (nm2 Int) (c1 Int) (nm1 Int))
  :signature (Int Int Int Int (BitVec @n0)) Bool
  (
  (($eovc_bv-zero-extend-ult-const-1 nm1 c1 nm2 m1 x1) (eo::define ((_v0 (_ (@bv c1) nm1))) (eo::define ((_v1 (_ (= _v0) (_ (zero_extend m1) (_ (_ (extract nm2) 0) _v0))))) (eo::define ((_v2 (_ (= nm2) (_ (- (@bvsize x1)) 1)))) ($eo_requires_true ($eo_model_sat _v2) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_false ($eo_model_sat ($eor_bv-zero-extend-ult-const-1 x1 m1 c1 nm1 nm2 _v2 _v1)) true)))))))
  )
)
(echo "smt-meta $eovc_bv-zero-extend-ult-const-1")
; program: $eor_bv-zero-extend-ult-const-2
(program $eor_bv-zero-extend-ult-const-2 ((@n0 Int) (m1 Int) (nm2 Int) (c1 Int) (nm1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int Int Bool Bool) Bool
  (
  ((eo::define ((_v0 (_ (@bv c1) nm1))) ($eor_bv-zero-extend-ult-const-2 x1 m1 c1 nm1 nm2 (_ (= nm2) (_ (- (@bvsize x1)) 1)) (_ (= _v0) (_ (zero_extend m1) (_ (_ (extract nm2) 0) _v0))))) (eo::define ((_v0 (_ (@bv c1) nm1))) (_ (= (_ (bvult _v0) (_ (zero_extend m1) x1))) (_ (bvult (_ (_ (extract nm2) 0) _v0)) x1))))
  )
)
; program: $eovc_bv-zero-extend-ult-const-2
(program $eovc_bv-zero-extend-ult-const-2 ((@n0 Int) (x1 (BitVec @n0)) (m1 Int) (nm2 Int) (c1 Int) (nm1 Int))
  :signature (Int Int Int Int (BitVec @n0)) Bool
  (
  (($eovc_bv-zero-extend-ult-const-2 nm1 c1 nm2 m1 x1) (eo::define ((_v0 (_ (@bv c1) nm1))) (eo::define ((_v1 (_ (= _v0) (_ (zero_extend m1) (_ (_ (extract nm2) 0) _v0))))) (eo::define ((_v2 (_ (= nm2) (_ (- (@bvsize x1)) 1)))) ($eo_requires_true ($eo_model_sat _v2) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_false ($eo_model_sat ($eor_bv-zero-extend-ult-const-2 x1 m1 c1 nm1 nm2 _v2 _v1)) true)))))))
  )
)
(echo "smt-meta $eovc_bv-zero-extend-ult-const-2")
; program: $eor_bv-sign-extend-ult-const-1
(program $eor_bv-sign-extend-ult-const-1 ((@n0 Int) (m1 Int) (x1 (BitVec @n0)) (nm2 Int) (c1 Int) (nm1 Int))
  :signature ((BitVec @n0) Int Int Int Int Bool Bool) Bool
  (
  ((eo::define ((_v0 (_ (- (@bvsize x1)) 1))) (eo::define ((_v1 (_ (@bv _v0) nm1))) (eo::define ((_v2 (_ (@bv c1) nm1))) ($eor_bv-sign-extend-ult-const-1 x1 m1 c1 nm1 nm2 (_ (= (_ (or (_ (bvule _v2) (_ (bvshl (_ (@bv 1) nm1)) _v1))) (_ (or (_ (bvuge _v2) (_ (bvshl (bvnot (_ (@bv 0) nm1))) _v1))) false))) true) (_ (= nm2) _v0))))) (eo::define ((_v0 (_ (@bv c1) nm1))) (_ (= (_ (bvult (_ (sign_extend m1) x1)) _v0)) (_ (bvult x1) (_ (_ (extract nm2) 0) _v0)))))
  )
)
; program: $eovc_bv-sign-extend-ult-const-1
(program $eovc_bv-sign-extend-ult-const-1 ((@n0 Int) (m1 Int) (c1 Int) (nm1 Int) (nm2 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int Int) Bool
  (
  (($eovc_bv-sign-extend-ult-const-1 x1 nm2 nm1 c1 m1) (eo::define ((_v0 (_ (- (@bvsize x1)) 1))) (eo::define ((_v1 (_ (= nm2) _v0))) (eo::define ((_v2 (_ (@bv _v0) nm1))) (eo::define ((_v3 (_ (@bv c1) nm1))) (eo::define ((_v4 (_ (= (_ (or (_ (bvule _v3) (_ (bvshl (_ (@bv 1) nm1)) _v2))) (_ (or (_ (bvuge _v3) (_ (bvshl (bvnot (_ (@bv 0) nm1))) _v2))) false))) true))) ($eo_requires_true ($eo_model_sat _v4) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_false ($eo_model_sat ($eor_bv-sign-extend-ult-const-1 x1 m1 c1 nm1 nm2 _v4 _v1)) true)))))))))
  )
)
(echo "smt-meta $eovc_bv-sign-extend-ult-const-1")
; program: $eor_bv-sign-extend-ult-const-2
(program $eor_bv-sign-extend-ult-const-2 ((@n0 Int) (m1 Int) (c1 Int) (nm1 Int) (nm2 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int Int Bool Bool Bool) Bool
  (
  ((eo::define ((_v0 (_ (- (@bvsize x1)) 1))) (eo::define ((_v1 (_ (@bv _v0) nm1))) (eo::define ((_v2 (_ (@bv c1) nm1))) ($eor_bv-sign-extend-ult-const-2 x1 m1 c1 nm1 nm2 (_ (= (_ (bvult (_ (bvshl (_ (@bv 1) nm1)) _v1)) _v2)) true) (_ (= (_ (bvule _v2) (_ (bvshl (bvnot (_ (@bv 0) nm1))) _v1))) true) (_ (= nm2) _v0))))) (_ (= (_ (bvult (_ (sign_extend m1) x1)) (_ (@bv c1) nm1))) (_ (= (_ (_ (extract nm2) nm2) x1)) (_ (@bv 0) 1))))
  )
)
; program: $eovc_bv-sign-extend-ult-const-2
(program $eovc_bv-sign-extend-ult-const-2 ((@n0 Int) (m1 Int) (c1 Int) (nm1 Int) (nm2 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int Int) Bool
  (
  (($eovc_bv-sign-extend-ult-const-2 x1 nm2 nm1 c1 m1) (eo::define ((_v0 (_ (- (@bvsize x1)) 1))) (eo::define ((_v1 (_ (= nm2) _v0))) (eo::define ((_v2 (_ (@bv _v0) nm1))) (eo::define ((_v3 (_ (@bv c1) nm1))) (eo::define ((_v4 (_ (= (_ (bvule _v3) (_ (bvshl (bvnot (_ (@bv 0) nm1))) _v2))) true))) (eo::define ((_v5 (_ (= (_ (bvult (_ (bvshl (_ (@bv 1) nm1)) _v2)) _v3)) true))) ($eo_requires_true ($eo_model_sat _v5) ($eo_requires_true ($eo_model_sat _v4) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_false ($eo_model_sat ($eor_bv-sign-extend-ult-const-2 x1 m1 c1 nm1 nm2 _v5 _v4 _v1)) true)))))))))))
  )
)
(echo "smt-meta $eovc_bv-sign-extend-ult-const-2")
; program: $eor_bv-sign-extend-ult-const-3
(program $eor_bv-sign-extend-ult-const-3 ((@n0 Int) (m1 Int) (nm2 Int) (c1 Int) (nm1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int Int Bool Bool) Bool
  (
  ((eo::define ((_v0 (_ (- (@bvsize x1)) 1))) (eo::define ((_v1 (_ (bvshl (_ (@bv 1) nm1)) (_ (@bv _v0) nm1)))) (eo::define ((_v2 (_ (@bv c1) nm1))) ($eor_bv-sign-extend-ult-const-3 x1 m1 c1 nm1 nm2 (_ (= (_ (or (_ (bvult _v2) _v1)) (_ (or (_ (bvuge _v2) (bvnot _v1))) false))) true) (_ (= nm2) _v0))))) (eo::define ((_v0 (_ (@bv c1) nm1))) (_ (= (_ (bvult _v0) (_ (sign_extend m1) x1))) (_ (bvult (_ (_ (extract nm2) 0) _v0)) x1))))
  )
)
; program: $eovc_bv-sign-extend-ult-const-3
(program $eovc_bv-sign-extend-ult-const-3 ((@n0 Int) (m1 Int) (c1 Int) (nm1 Int) (nm2 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int Int) Bool
  (
  (($eovc_bv-sign-extend-ult-const-3 x1 nm2 nm1 c1 m1) (eo::define ((_v0 (_ (- (@bvsize x1)) 1))) (eo::define ((_v1 (_ (= nm2) _v0))) (eo::define ((_v2 (_ (bvshl (_ (@bv 1) nm1)) (_ (@bv _v0) nm1)))) (eo::define ((_v3 (_ (@bv c1) nm1))) (eo::define ((_v4 (_ (= (_ (or (_ (bvult _v3) _v2)) (_ (or (_ (bvuge _v3) (bvnot _v2))) false))) true))) ($eo_requires_true ($eo_model_sat _v4) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_false ($eo_model_sat ($eor_bv-sign-extend-ult-const-3 x1 m1 c1 nm1 nm2 _v4 _v1)) true)))))))))
  )
)
(echo "smt-meta $eovc_bv-sign-extend-ult-const-3")
; program: $eor_bv-sign-extend-ult-const-4
(program $eor_bv-sign-extend-ult-const-4 ((@n0 Int) (c1 Int) (nm1 Int) (m1 Int) (nm2 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int Int Bool Bool Bool) Bool
  (
  ((eo::define ((_v0 (_ (- (@bvsize x1)) 1))) (eo::define ((_v1 (_ (@bv _v0) nm1))) (eo::define ((_v2 (_ (@bv c1) nm1))) ($eor_bv-sign-extend-ult-const-4 x1 m1 c1 nm1 nm2 (_ (= (_ (bvule (bvnot (_ (bvshl (bvnot (_ (@bv 0) nm1))) _v1))) _v2)) true) (_ (= (_ (bvule _v2) (bvnot (_ (bvshl (_ (@bv 1) nm1)) _v1)))) true) (_ (= nm2) _v0))))) (_ (= (_ (bvult (_ (@bv c1) nm1)) (_ (sign_extend m1) x1))) (_ (= (_ (_ (extract nm2) nm2) x1)) (_ (@bv 1) 1))))
  )
)
; program: $eovc_bv-sign-extend-ult-const-4
(program $eovc_bv-sign-extend-ult-const-4 ((@n0 Int) (m1 Int) (c1 Int) (nm1 Int) (nm2 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int Int) Bool
  (
  (($eovc_bv-sign-extend-ult-const-4 x1 nm2 nm1 c1 m1) (eo::define ((_v0 (_ (- (@bvsize x1)) 1))) (eo::define ((_v1 (_ (= nm2) _v0))) (eo::define ((_v2 (_ (@bv _v0) nm1))) (eo::define ((_v3 (_ (@bv c1) nm1))) (eo::define ((_v4 (_ (= (_ (bvule _v3) (bvnot (_ (bvshl (_ (@bv 1) nm1)) _v2)))) true))) (eo::define ((_v5 (_ (= (_ (bvule (bvnot (_ (bvshl (bvnot (_ (@bv 0) nm1))) _v2))) _v3)) true))) ($eo_requires_true ($eo_model_sat _v5) ($eo_requires_true ($eo_model_sat _v4) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_false ($eo_model_sat ($eor_bv-sign-extend-ult-const-4 x1 m1 c1 nm1 nm2 _v5 _v4 _v1)) true)))))))))))
  )
)
(echo "smt-meta $eovc_bv-sign-extend-ult-const-4")
; program: $eor_sets-eq-singleton-emp
(program $eor_sets-eq-singleton-emp ((@T1 Type) (@T0 Type) (x1 (Set @T0)) (y1 @T1))
  :signature ((Set @T0) @T1 Type Bool) Bool
  (
  ((eo::define ((_v0 (Set @T0))) ($eor_sets-eq-singleton-emp x1 y1 _v0 (_ (= x1) (_ set.empty _v0)))) (_ (= (_ (= x1) (set.singleton y1))) false))
  )
)
; program: $eovc_sets-eq-singleton-emp
(program $eovc_sets-eq-singleton-emp ((@T1 Type) (y1 @T1) (@T0 Type) (x1 (Set @T0)))
  :signature (Type (Set @T0) @T1) Bool
  (
  (($eovc_sets-eq-singleton-emp @T0 x1 y1) (eo::define ((_v0 (Set @T0))) (eo::define ((_v1 (_ (= x1) (_ set.empty _v0)))) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_false ($eo_model_sat ($eor_sets-eq-singleton-emp x1 y1 _v0 _v1)) true)))))
  )
)
(echo "smt-meta $eovc_sets-eq-singleton-emp")
; program: $eor_sets-member-singleton
(program $eor_sets-member-singleton ((@T0 Type) (@T1 Type) (x1 @T0) (y1 @T1))
  :signature (@T0 @T1) Bool
  (
  (($eor_sets-member-singleton x1 y1) (_ (= (_ (set.member x1) (set.singleton y1))) (_ (= x1) y1)))
  )
)
; program: $eovc_sets-member-singleton
(program $eovc_sets-member-singleton ((@T1 Type) (@T0 Type) (x1 @T0) (y1 @T1))
  :signature (@T1 @T0) Bool
  (
  (($eovc_sets-member-singleton y1 x1) ($eo_requires_false ($eo_model_sat ($eor_sets-member-singleton x1 y1)) true))
  )
)
(echo "smt-meta $eovc_sets-member-singleton")
; program: $eor_sets-member-emp
(program $eor_sets-member-emp ((@T0 Type) (@T1 Type) (x1 @T0) (y1 (Set @T1)))
  :signature (@T0 (Set @T1) Type Bool) Bool
  (
  ((eo::define ((_v0 (Set @T1))) ($eor_sets-member-emp x1 y1 _v0 (_ (= y1) (_ set.empty _v0)))) (_ (= (_ (set.member x1) y1)) false))
  )
)
; program: $eovc_sets-member-emp
(program $eovc_sets-member-emp ((@T0 Type) (x1 @T0) (@T1 Type) (y1 (Set @T1)))
  :signature (Type (Set @T1) @T0) Bool
  (
  (($eovc_sets-member-emp @T1 y1 x1) (eo::define ((_v0 (Set @T1))) (eo::define ((_v1 (_ (= y1) (_ set.empty _v0)))) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_false ($eo_model_sat ($eor_sets-member-emp x1 y1 _v0 _v1)) true)))))
  )
)
(echo "smt-meta $eovc_sets-member-emp")
; program: $eor_sets-subset-elim
(program $eor_sets-subset-elim ((@T0 Type) (@T1 Type) (x1 (Set @T0)) (y1 (Set @T1)))
  :signature ((Set @T0) (Set @T1)) Bool
  (
  (($eor_sets-subset-elim x1 y1) (_ (= (_ (set.subset x1) y1)) (_ (= (_ (set.union x1) y1)) y1)))
  )
)
; program: $eovc_sets-subset-elim
(program $eovc_sets-subset-elim ((@T1 Type) (@T0 Type) (x1 (Set @T0)) (y1 (Set @T1)))
  :signature ((Set @T1) (Set @T0)) Bool
  (
  (($eovc_sets-subset-elim y1 x1) ($eo_requires_false ($eo_model_sat ($eor_sets-subset-elim x1 y1)) true))
  )
)
(echo "smt-meta $eovc_sets-subset-elim")
; program: $eor_sets-union-comm
(program $eor_sets-union-comm ((@T0 Type) (@T1 Type) (y1 (Set @T1)) (x1 (Set @T0)))
  :signature ((Set @T0) (Set @T1)) Bool
  (
  (($eor_sets-union-comm x1 y1) (_ (= (_ (set.union x1) y1)) (_ (set.union y1) x1)))
  )
)
; program: $eovc_sets-union-comm
(program $eovc_sets-union-comm ((@T1 Type) (@T0 Type) (x1 (Set @T0)) (y1 (Set @T1)))
  :signature ((Set @T1) (Set @T0)) Bool
  (
  (($eovc_sets-union-comm y1 x1) ($eo_requires_false ($eo_model_sat ($eor_sets-union-comm x1 y1)) true))
  )
)
(echo "smt-meta $eovc_sets-union-comm")
; program: $eor_sets-inter-comm
(program $eor_sets-inter-comm ((@T0 Type) (@T1 Type) (y1 (Set @T1)) (x1 (Set @T0)))
  :signature ((Set @T0) (Set @T1)) Bool
  (
  (($eor_sets-inter-comm x1 y1) (_ (= (_ (set.inter x1) y1)) (_ (set.inter y1) x1)))
  )
)
; program: $eovc_sets-inter-comm
(program $eovc_sets-inter-comm ((@T1 Type) (@T0 Type) (x1 (Set @T0)) (y1 (Set @T1)))
  :signature ((Set @T1) (Set @T0)) Bool
  (
  (($eovc_sets-inter-comm y1 x1) ($eo_requires_false ($eo_model_sat ($eor_sets-inter-comm x1 y1)) true))
  )
)
(echo "smt-meta $eovc_sets-inter-comm")
; program: $eor_sets-inter-emp1
(program $eor_sets-inter-emp1 ((@T1 Type) (@T0 Type) (y1 (Set @T1)) (x1 (Set @T0)))
  :signature ((Set @T0) (Set @T1) Type Bool) Bool
  (
  ((eo::define ((_v0 (Set @T0))) ($eor_sets-inter-emp1 x1 y1 _v0 (_ (= x1) (_ set.empty _v0)))) (_ (= (_ (set.inter x1) y1)) x1))
  )
)
; program: $eovc_sets-inter-emp1
(program $eovc_sets-inter-emp1 ((@T1 Type) (y1 (Set @T1)) (@T0 Type) (x1 (Set @T0)))
  :signature (Type (Set @T0) (Set @T1)) Bool
  (
  (($eovc_sets-inter-emp1 @T0 x1 y1) (eo::define ((_v0 (Set @T0))) (eo::define ((_v1 (_ (= x1) (_ set.empty _v0)))) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_false ($eo_model_sat ($eor_sets-inter-emp1 x1 y1 _v0 _v1)) true)))))
  )
)
(echo "smt-meta $eovc_sets-inter-emp1")
; program: $eor_sets-inter-emp2
(program $eor_sets-inter-emp2 ((@T0 Type) (@T1 Type) (x1 (Set @T0)) (y1 (Set @T1)))
  :signature ((Set @T0) (Set @T1) Type Bool) Bool
  (
  ((eo::define ((_v0 (Set @T1))) ($eor_sets-inter-emp2 x1 y1 _v0 (_ (= y1) (_ set.empty _v0)))) (_ (= (_ (set.inter x1) y1)) y1))
  )
)
; program: $eovc_sets-inter-emp2
(program $eovc_sets-inter-emp2 ((@T0 Type) (x1 (Set @T0)) (@T1 Type) (y1 (Set @T1)))
  :signature (Type (Set @T1) (Set @T0)) Bool
  (
  (($eovc_sets-inter-emp2 @T1 y1 x1) (eo::define ((_v0 (Set @T1))) (eo::define ((_v1 (_ (= y1) (_ set.empty _v0)))) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_false ($eo_model_sat ($eor_sets-inter-emp2 x1 y1 _v0 _v1)) true)))))
  )
)
(echo "smt-meta $eovc_sets-inter-emp2")
; program: $eor_sets-minus-emp1
(program $eor_sets-minus-emp1 ((@T1 Type) (@T0 Type) (y1 (Set @T1)) (x1 (Set @T0)))
  :signature ((Set @T0) (Set @T1) Type Bool) Bool
  (
  ((eo::define ((_v0 (Set @T0))) ($eor_sets-minus-emp1 x1 y1 _v0 (_ (= x1) (_ set.empty _v0)))) (_ (= (_ (set.minus x1) y1)) x1))
  )
)
; program: $eovc_sets-minus-emp1
(program $eovc_sets-minus-emp1 ((@T1 Type) (y1 (Set @T1)) (@T0 Type) (x1 (Set @T0)))
  :signature (Type (Set @T0) (Set @T1)) Bool
  (
  (($eovc_sets-minus-emp1 @T0 x1 y1) (eo::define ((_v0 (Set @T0))) (eo::define ((_v1 (_ (= x1) (_ set.empty _v0)))) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_false ($eo_model_sat ($eor_sets-minus-emp1 x1 y1 _v0 _v1)) true)))))
  )
)
(echo "smt-meta $eovc_sets-minus-emp1")
; program: $eor_sets-minus-emp2
(program $eor_sets-minus-emp2 ((@T0 Type) (@T1 Type) (y1 (Set @T1)) (x1 (Set @T0)))
  :signature ((Set @T0) (Set @T1) Type Bool) Bool
  (
  ((eo::define ((_v0 (Set @T1))) ($eor_sets-minus-emp2 x1 y1 _v0 (_ (= y1) (_ set.empty _v0)))) (_ (= (_ (set.minus x1) y1)) x1))
  )
)
; program: $eovc_sets-minus-emp2
(program $eovc_sets-minus-emp2 ((@T0 Type) (x1 (Set @T0)) (@T1 Type) (y1 (Set @T1)))
  :signature (Type (Set @T1) (Set @T0)) Bool
  (
  (($eovc_sets-minus-emp2 @T1 y1 x1) (eo::define ((_v0 (Set @T1))) (eo::define ((_v1 (_ (= y1) (_ set.empty _v0)))) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_false ($eo_model_sat ($eor_sets-minus-emp2 x1 y1 _v0 _v1)) true)))))
  )
)
(echo "smt-meta $eovc_sets-minus-emp2")
; program: $eor_sets-union-emp1
(program $eor_sets-union-emp1 ((@T1 Type) (@T0 Type) (x1 (Set @T0)) (y1 (Set @T1)))
  :signature ((Set @T0) (Set @T1) Type Bool) Bool
  (
  ((eo::define ((_v0 (Set @T0))) ($eor_sets-union-emp1 x1 y1 _v0 (_ (= x1) (_ set.empty _v0)))) (_ (= (_ (set.union x1) y1)) y1))
  )
)
; program: $eovc_sets-union-emp1
(program $eovc_sets-union-emp1 ((@T1 Type) (y1 (Set @T1)) (@T0 Type) (x1 (Set @T0)))
  :signature (Type (Set @T0) (Set @T1)) Bool
  (
  (($eovc_sets-union-emp1 @T0 x1 y1) (eo::define ((_v0 (Set @T0))) (eo::define ((_v1 (_ (= x1) (_ set.empty _v0)))) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_false ($eo_model_sat ($eor_sets-union-emp1 x1 y1 _v0 _v1)) true)))))
  )
)
(echo "smt-meta $eovc_sets-union-emp1")
; program: $eor_sets-union-emp2
(program $eor_sets-union-emp2 ((@T0 Type) (@T1 Type) (y1 (Set @T1)) (x1 (Set @T0)))
  :signature ((Set @T0) (Set @T1) Type Bool) Bool
  (
  ((eo::define ((_v0 (Set @T1))) ($eor_sets-union-emp2 x1 y1 _v0 (_ (= y1) (_ set.empty _v0)))) (_ (= (_ (set.union x1) y1)) x1))
  )
)
; program: $eovc_sets-union-emp2
(program $eovc_sets-union-emp2 ((@T0 Type) (x1 (Set @T0)) (@T1 Type) (y1 (Set @T1)))
  :signature (Type (Set @T1) (Set @T0)) Bool
  (
  (($eovc_sets-union-emp2 @T1 y1 x1) (eo::define ((_v0 (Set @T1))) (eo::define ((_v1 (_ (= y1) (_ set.empty _v0)))) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_false ($eo_model_sat ($eor_sets-union-emp2 x1 y1 _v0 _v1)) true)))))
  )
)
(echo "smt-meta $eovc_sets-union-emp2")
; program: $eor_sets-inter-member
(program $eor_sets-inter-member ((@T0 Type) (@T1 Type) (@T2 Type) (y1 (Set @T1)) (x1 @T0) (z1 (Set @T2)))
  :signature (@T0 (Set @T1) (Set @T2)) Bool
  (
  (($eor_sets-inter-member x1 y1 z1) (eo::define ((_v0 (set.member x1))) (_ (= (_ _v0 (_ (set.inter y1) z1))) (_ (and (_ _v0 y1)) (_ (and (_ _v0 z1)) true)))))
  )
)
; program: $eovc_sets-inter-member
(program $eovc_sets-inter-member ((@T2 Type) (@T1 Type) (@T0 Type) (x1 @T0) (y1 (Set @T1)) (z1 (Set @T2)))
  :signature ((Set @T2) (Set @T1) @T0) Bool
  (
  (($eovc_sets-inter-member z1 y1 x1) ($eo_requires_false ($eo_model_sat ($eor_sets-inter-member x1 y1 z1)) true))
  )
)
(echo "smt-meta $eovc_sets-inter-member")
; program: $eor_sets-minus-member
(program $eor_sets-minus-member ((@T0 Type) (@T1 Type) (@T2 Type) (y1 (Set @T1)) (x1 @T0) (z1 (Set @T2)))
  :signature (@T0 (Set @T1) (Set @T2)) Bool
  (
  (($eor_sets-minus-member x1 y1 z1) (eo::define ((_v0 (set.member x1))) (_ (= (_ _v0 (_ (set.minus y1) z1))) (_ (and (_ _v0 y1)) (_ (and (not (_ _v0 z1))) true)))))
  )
)
; program: $eovc_sets-minus-member
(program $eovc_sets-minus-member ((@T2 Type) (@T1 Type) (@T0 Type) (x1 @T0) (y1 (Set @T1)) (z1 (Set @T2)))
  :signature ((Set @T2) (Set @T1) @T0) Bool
  (
  (($eovc_sets-minus-member z1 y1 x1) ($eo_requires_false ($eo_model_sat ($eor_sets-minus-member x1 y1 z1)) true))
  )
)
(echo "smt-meta $eovc_sets-minus-member")
; program: $eor_sets-union-member
(program $eor_sets-union-member ((@T0 Type) (@T1 Type) (@T2 Type) (y1 (Set @T1)) (x1 @T0) (z1 (Set @T2)))
  :signature (@T0 (Set @T1) (Set @T2)) Bool
  (
  (($eor_sets-union-member x1 y1 z1) (eo::define ((_v0 (set.member x1))) (_ (= (_ _v0 (_ (set.union y1) z1))) (_ (or (_ _v0 y1)) (_ (or (_ _v0 z1)) false)))))
  )
)
; program: $eovc_sets-union-member
(program $eovc_sets-union-member ((@T2 Type) (@T1 Type) (@T0 Type) (x1 @T0) (y1 (Set @T1)) (z1 (Set @T2)))
  :signature ((Set @T2) (Set @T1) @T0) Bool
  (
  (($eovc_sets-union-member z1 y1 x1) ($eo_requires_false ($eo_model_sat ($eor_sets-union-member x1 y1 z1)) true))
  )
)
(echo "smt-meta $eovc_sets-union-member")
; program: $eor_sets-choose-singleton
(program $eor_sets-choose-singleton ((@T0 Type) (x1 @T0))
  :signature (@T0) Bool
  (
  (($eor_sets-choose-singleton x1) (_ (= (set.choose (set.singleton x1))) x1))
  )
)
; program: $eovc_sets-choose-singleton
(program $eovc_sets-choose-singleton ((@T0 Type) (x1 @T0))
  :signature (@T0) Bool
  (
  (($eovc_sets-choose-singleton x1) ($eo_requires_false ($eo_model_sat ($eor_sets-choose-singleton x1)) true))
  )
)
(echo "smt-meta $eovc_sets-choose-singleton")
; program: $eor_sets-minus-self
(program $eor_sets-minus-self ((@T0 Type) (x1 (Set @T0)))
  :signature ((Set @T0) Type) Bool
  (
  (($eor_sets-minus-self x1 (Set @T0)) (_ (= (_ (set.minus x1) x1)) (_ set.empty (Set @T0))))
  )
)
; program: $eovc_sets-minus-self
(program $eovc_sets-minus-self ((@T0 Type) (x1 (Set @T0)))
  :signature (Type (Set @T0)) Bool
  (
  (($eovc_sets-minus-self @T0 x1) ($eo_requires_false ($eo_model_sat ($eor_sets-minus-self x1 (Set @T0))) true))
  )
)
(echo "smt-meta $eovc_sets-minus-self")
; program: $eor_sets-is-empty-elim
(program $eor_sets-is-empty-elim ((@T0 Type) (x1 (Set @T0)))
  :signature ((Set @T0) Type) Bool
  (
  (($eor_sets-is-empty-elim x1 (Set @T0)) (_ (= (set.is_empty x1)) (_ (= x1) (_ set.empty (Set @T0)))))
  )
)
; program: $eovc_sets-is-empty-elim
(program $eovc_sets-is-empty-elim ((@T0 Type) (x1 (Set @T0)))
  :signature (Type (Set @T0)) Bool
  (
  (($eovc_sets-is-empty-elim @T0 x1) ($eo_requires_false ($eo_model_sat ($eor_sets-is-empty-elim x1 (Set @T0))) true))
  )
)
(echo "smt-meta $eovc_sets-is-empty-elim")
; program: $eor_sets-is-singleton-elim
(program $eor_sets-is-singleton-elim ((@T0 Type) (x1 (Set @T0)))
  :signature ((Set @T0)) Bool
  (
  (($eor_sets-is-singleton-elim x1) (_ (= (set.is_singleton x1)) (_ (= x1) (set.singleton (set.choose x1)))))
  )
)
; program: $eovc_sets-is-singleton-elim
(program $eovc_sets-is-singleton-elim ((@T0 Type) (x1 (Set @T0)))
  :signature ((Set @T0)) Bool
  (
  (($eovc_sets-is-singleton-elim x1) ($eo_requires_false ($eo_model_sat ($eor_sets-is-singleton-elim x1)) true))
  )
)
(echo "smt-meta $eovc_sets-is-singleton-elim")
; program: $eor_str-eq-ctn-false
(program $eor_str-eq-ctn-false ((@T0 Type) (@T1 Type) (@T2 Type) (@T3 Type) (x1 (Seq @T0)) (x2 (Seq @T1)) (x3 (Seq @T2)) (y1 (Seq @T3)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) (Seq @T3) Bool) Bool
  (
  (($eor_str-eq-ctn-false x1 x2 x3 y1 (_ (= (_ (str.contains y1) x2)) false)) (_ (= (_ (= (eo::list_concat str.++ x1 (_ (str.++ x2) x3))) y1)) false))
  )
)
; program: $eovc_str-eq-ctn-false
(program $eovc_str-eq-ctn-false ((@T1 Type) (@T3 Type) (@T2 Type) (@T0 Type) (x1 (Seq @T0)) (x3 (Seq @T2)) (y1 (Seq @T3)) (x2 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T3) (Seq @T2) (Seq @T0)) Bool
  (
  (($eovc_str-eq-ctn-false x2 y1 x3 x1) (eo::define ((_v0 (_ (= (_ (str.contains y1) x2)) false))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-eq-ctn-false x1 x2 x3 y1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_str-eq-ctn-false")
; program: $eor_str-eq-ctn-full-false1
(program $eor_str-eq-ctn-full-false1 ((@T0 Type) (@T1 Type) (x1 (Seq @T0)) (y1 (Seq @T1)))
  :signature ((Seq @T0) (Seq @T1) Bool) Bool
  (
  (($eor_str-eq-ctn-full-false1 x1 y1 (_ (= (_ (str.contains y1) x1)) false)) (_ (= (_ (= x1) y1)) false))
  )
)
; program: $eovc_str-eq-ctn-full-false1
(program $eovc_str-eq-ctn-full-false1 ((@T0 Type) (@T1 Type) (y1 (Seq @T1)) (x1 (Seq @T0)))
  :signature ((Seq @T0) (Seq @T1)) Bool
  (
  (($eovc_str-eq-ctn-full-false1 x1 y1) (eo::define ((_v0 (_ (= (_ (str.contains y1) x1)) false))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-eq-ctn-full-false1 x1 y1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_str-eq-ctn-full-false1")
; program: $eor_str-eq-ctn-full-false2
(program $eor_str-eq-ctn-full-false2 ((@T0 Type) (@T1 Type) (x1 (Seq @T0)) (y1 (Seq @T1)))
  :signature ((Seq @T0) (Seq @T1) Bool) Bool
  (
  (($eor_str-eq-ctn-full-false2 x1 y1 (_ (= (_ (str.contains x1) y1)) false)) (_ (= (_ (= x1) y1)) false))
  )
)
; program: $eovc_str-eq-ctn-full-false2
(program $eovc_str-eq-ctn-full-false2 ((@T1 Type) (@T0 Type) (x1 (Seq @T0)) (y1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-eq-ctn-full-false2 y1 x1) (eo::define ((_v0 (_ (= (_ (str.contains x1) y1)) false))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-eq-ctn-full-false2 x1 y1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_str-eq-ctn-full-false2")
; program: $eor_str-eq-len-false
(program $eor_str-eq-len-false ((x1 (Seq Char)) (y1 (Seq Char)))
  :signature ((Seq Char) (Seq Char) Bool) Bool
  (
  (($eor_str-eq-len-false x1 y1 (_ (= (_ (= (str.len x1)) (str.len y1))) false)) (_ (= (_ (= x1) y1)) false))
  )
)
; program: $eovc_str-eq-len-false
(program $eovc_str-eq-len-false ((x1 (Seq Char)) (y1 (Seq Char)))
  :signature ((Seq Char) (Seq Char)) Bool
  (
  (($eovc_str-eq-len-false y1 x1) (eo::define ((_v0 (_ (= (_ (= (str.len x1)) (str.len y1))) false))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-eq-len-false x1 y1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_str-eq-len-false")
; program: $eor_str-substr-empty-str
(program $eor_str-substr-empty-str ((Any Type) ($ex_1 Any) (@T0 Type) (n1 Int) (m1 Int) (x1 (Seq @T0)))
  :signature ((Seq @T0) Int Int Type Any) Bool
  (
  (($eor_str-substr-empty-str x1 n1 m1 (Seq @T0) (_ (= x1) $ex_1)) (eo::define ((_v0 (Seq @T0))) (eo::requires $ex_1 (eo::ite (eo::is_eq _v0 (Seq Char)) "" (_ seq.empty _v0)) (_ (= (_ (_ (str.substr x1) n1) m1)) x1))))
  )
)
; program: $eovc_str-substr-empty-str
(program $eovc_str-substr-empty-str ((n1 Int) (m1 Int) (@T0 Type) (x1 (Seq @T0)))
  :signature (Type (Seq @T0) Int Int) Bool
  (
  (($eovc_str-substr-empty-str @T0 x1 m1 n1) (eo::define ((_v0 (Seq @T0))) (eo::define ((_v1 (_ (= x1) (eo::ite (eo::is_eq _v0 (Seq Char)) "" (_ seq.empty _v0))))) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_false ($eo_model_sat ($eor_str-substr-empty-str x1 n1 m1 _v0 _v1)) true)))))
  )
)
(echo "smt-meta $eovc_str-substr-empty-str")
; program: $eor_str-substr-empty-range
(program $eor_str-substr-empty-range ((@T0 Type) (x1 (Seq @T0)) (n1 Int) (m1 Int))
  :signature ((Seq @T0) Int Int Type Bool) Bool
  (
  (($eor_str-substr-empty-range x1 n1 m1 (Seq @T0) (_ (= (_ (>= 0) m1)) true)) (eo::define ((_v0 (Seq @T0))) (_ (= (_ (_ (str.substr x1) n1) m1)) (eo::ite (eo::is_eq _v0 (Seq Char)) "" (_ seq.empty _v0)))))
  )
)
; program: $eovc_str-substr-empty-range
(program $eovc_str-substr-empty-range ((@T0 Type) (x1 (Seq @T0)) (n1 Int) (m1 Int))
  :signature (Int Type Int (Seq @T0)) Bool
  (
  (($eovc_str-substr-empty-range m1 @T0 n1 x1) (eo::define ((_v0 (_ (= (_ (>= 0) m1)) true))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-substr-empty-range x1 n1 m1 (Seq @T0) _v0)) true))))
  )
)
(echo "smt-meta $eovc_str-substr-empty-range")
; program: $eor_str-substr-empty-start
(program $eor_str-substr-empty-start ((@T0 Type) (x1 (Seq @T0)) (n1 Int) (m1 Int))
  :signature ((Seq @T0) Int Int Type Bool) Bool
  (
  (($eor_str-substr-empty-start x1 n1 m1 (Seq @T0) (_ (= (_ (>= n1) (str.len x1))) true)) (eo::define ((_v0 (Seq @T0))) (_ (= (_ (_ (str.substr x1) n1) m1)) (eo::ite (eo::is_eq _v0 (Seq Char)) "" (_ seq.empty _v0)))))
  )
)
; program: $eovc_str-substr-empty-start
(program $eovc_str-substr-empty-start ((m1 Int) (@T0 Type) (n1 Int) (x1 (Seq @T0)))
  :signature ((Seq @T0) Int Type Int) Bool
  (
  (($eovc_str-substr-empty-start x1 n1 @T0 m1) (eo::define ((_v0 (_ (= (_ (>= n1) (str.len x1))) true))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-substr-empty-start x1 n1 m1 (Seq @T0) _v0)) true))))
  )
)
(echo "smt-meta $eovc_str-substr-empty-start")
; program: $eor_str-substr-empty-start-neg
(program $eor_str-substr-empty-start-neg ((@T0 Type) (x1 (Seq @T0)) (n1 Int) (m1 Int))
  :signature ((Seq @T0) Int Int Type Bool) Bool
  (
  (($eor_str-substr-empty-start-neg x1 n1 m1 (Seq @T0) (_ (= (_ (< n1) 0)) true)) (eo::define ((_v0 (Seq @T0))) (_ (= (_ (_ (str.substr x1) n1) m1)) (eo::ite (eo::is_eq _v0 (Seq Char)) "" (_ seq.empty _v0)))))
  )
)
; program: $eovc_str-substr-empty-start-neg
(program $eovc_str-substr-empty-start-neg ((@T0 Type) (x1 (Seq @T0)) (m1 Int) (n1 Int))
  :signature (Int Type Int (Seq @T0)) Bool
  (
  (($eovc_str-substr-empty-start-neg n1 @T0 m1 x1) (eo::define ((_v0 (_ (= (_ (< n1) 0)) true))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-substr-empty-start-neg x1 n1 m1 (Seq @T0) _v0)) true))))
  )
)
(echo "smt-meta $eovc_str-substr-empty-start-neg")
; program: $eor_str-substr-substr-start-geq-len
(program $eor_str-substr-substr-start-geq-len ((@T0 Type) (x1 (Seq @T0)) (n1 Int) (m1 Int) (n2 Int) (m2 Int))
  :signature ((Seq @T0) Int Int Int Int Type Bool) Bool
  (
  (($eor_str-substr-substr-start-geq-len x1 n1 m1 n2 m2 (Seq @T0) (_ (= (_ (>= n2) m1)) true)) (eo::define ((_v0 (Seq @T0))) (_ (= (_ (_ (str.substr (_ (_ (str.substr x1) n1) m1)) n2) m2)) (eo::ite (eo::is_eq _v0 (Seq Char)) "" (_ seq.empty _v0)))))
  )
)
; program: $eovc_str-substr-substr-start-geq-len
(program $eovc_str-substr-substr-start-geq-len ((@T0 Type) (x1 (Seq @T0)) (n1 Int) (m2 Int) (n2 Int) (m1 Int))
  :signature (Int Int Type Int Int (Seq @T0)) Bool
  (
  (($eovc_str-substr-substr-start-geq-len m1 n2 @T0 m2 n1 x1) (eo::define ((_v0 (_ (= (_ (>= n2) m1)) true))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-substr-substr-start-geq-len x1 n1 m1 n2 m2 (Seq @T0) _v0)) true))))
  )
)
(echo "smt-meta $eovc_str-substr-substr-start-geq-len")
; program: $eor_str-substr-eq-empty
(program $eor_str-substr-eq-empty ((@T0 Type) (Any Type) ($ex_1 Any) (@T1 Type) (n1 Int) (m1 Int) (s1 (Seq @T0)) (r1 (Seq @T1)))
  :signature ((Seq @T0) (Seq @T1) Int Int Type Bool Bool Any) Bool
  (
  (($eor_str-substr-eq-empty s1 r1 n1 m1 (Seq @T1) (_ (= n1) 0) (_ (= (_ (> m1) n1)) true) (_ (= r1) $ex_1)) (eo::define ((_v0 (Seq @T1))) (eo::requires $ex_1 (eo::ite (eo::is_eq _v0 (Seq Char)) "" (_ seq.empty _v0)) (_ (= (_ (= (_ (_ (str.substr s1) n1) m1)) r1)) (_ (= s1) r1)))))
  )
)
; program: $eovc_str-substr-eq-empty
(program $eovc_str-substr-eq-empty ((@T0 Type) (s1 (Seq @T0)) (m1 Int) (n1 Int) (@T1 Type) (r1 (Seq @T1)))
  :signature (Type (Seq @T1) Int Int (Seq @T0)) Bool
  (
  (($eovc_str-substr-eq-empty @T1 r1 n1 m1 s1) (eo::define ((_v0 (Seq @T1))) (eo::define ((_v1 (_ (= r1) (eo::ite (eo::is_eq _v0 (Seq Char)) "" (_ seq.empty _v0))))) (eo::define ((_v2 (_ (= (_ (> m1) n1)) true))) (eo::define ((_v3 (_ (= n1) 0))) ($eo_requires_true ($eo_model_sat _v3) ($eo_requires_true ($eo_model_sat _v2) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_false ($eo_model_sat ($eor_str-substr-eq-empty s1 r1 n1 m1 _v0 _v3 _v2 _v1)) true)))))))))
  )
)
(echo "smt-meta $eovc_str-substr-eq-empty")
; program: $eor_str-substr-z-eq-empty-leq
(program $eor_str-substr-z-eq-empty-leq ((@T1 Type) (Any Type) ($ex_1 Any) (@T0 Type) (s1 (Seq @T0)) (r1 (Seq @T1)) (m1 Int))
  :signature ((Seq @T0) (Seq @T1) Int Type Any Any) Bool
  (
  (($eor_str-substr-z-eq-empty-leq s1 r1 m1 (Seq @T0) (_ (= (_ (= s1) $ex_1)) false) (_ (= r1) $ex_1)) (eo::define ((_v0 (Seq @T0))) (eo::requires $ex_1 (eo::ite (eo::is_eq _v0 (Seq Char)) "" (_ seq.empty _v0)) (_ (= (_ (= (_ (_ (str.substr s1) 0) m1)) r1)) (_ (<= m1) 0)))))
  )
)
; program: $eovc_str-substr-z-eq-empty-leq
(program $eovc_str-substr-z-eq-empty-leq ((@T1 Type) (m1 Int) (@T0 Type) (s1 (Seq @T0)) (r1 (Seq @T1)))
  :signature (Type (Seq @T1) (Seq @T0) Int) Bool
  (
  (($eovc_str-substr-z-eq-empty-leq @T0 r1 s1 m1) (eo::define ((_v0 (Seq @T0))) (eo::define ((_v1 (eo::ite (eo::is_eq _v0 (Seq Char)) "" (_ seq.empty _v0)))) (eo::define ((_v2 (_ (= r1) _v1))) (eo::define ((_v3 (_ (= (_ (= s1) _v1)) false))) ($eo_requires_true ($eo_model_sat _v3) ($eo_requires_true ($eo_model_sat _v2) ($eo_requires_false ($eo_model_sat ($eor_str-substr-z-eq-empty-leq s1 r1 m1 _v0 _v3 _v2)) true))))))))
  )
)
(echo "smt-meta $eovc_str-substr-z-eq-empty-leq")
; program: $eor_str-substr-eq-empty-leq-len
(program $eor_str-substr-eq-empty-leq-len ((@T0 Type) (Any Type) ($ex_1 Any) (@T1 Type) (m1 Int) (emp1 (Seq @T1)) (s1 (Seq @T0)) (n1 Int))
  :signature ((Seq @T0) (Seq @T1) Int Int Type Bool Bool Any) Bool
  (
  (($eor_str-substr-eq-empty-leq-len s1 emp1 n1 m1 (Seq @T1) (_ (= (_ (>= n1) 0)) true) (_ (= (_ (> m1) 0)) true) (_ (= emp1) $ex_1)) (eo::define ((_v0 (Seq @T1))) (eo::requires $ex_1 (eo::ite (eo::is_eq _v0 (Seq Char)) "" (_ seq.empty _v0)) (_ (= (_ (= (_ (_ (str.substr s1) n1) m1)) emp1)) (_ (<= (str.len s1)) n1)))))
  )
)
; program: $eovc_str-substr-eq-empty-leq-len
(program $eovc_str-substr-eq-empty-leq-len ((@T0 Type) (s1 (Seq @T0)) (n1 Int) (m1 Int) (@T1 Type) (emp1 (Seq @T1)))
  :signature (Type (Seq @T1) Int Int (Seq @T0)) Bool
  (
  (($eovc_str-substr-eq-empty-leq-len @T1 emp1 m1 n1 s1) (eo::define ((_v0 (Seq @T1))) (eo::define ((_v1 (_ (= emp1) (eo::ite (eo::is_eq _v0 (Seq Char)) "" (_ seq.empty _v0))))) (eo::define ((_v2 (_ (= (_ (> m1) 0)) true))) (eo::define ((_v3 (_ (= (_ (>= n1) 0)) true))) ($eo_requires_true ($eo_model_sat _v3) ($eo_requires_true ($eo_model_sat _v2) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_false ($eo_model_sat ($eor_str-substr-eq-empty-leq-len s1 emp1 n1 m1 _v0 _v3 _v2 _v1)) true)))))))))
  )
)
(echo "smt-meta $eovc_str-substr-eq-empty-leq-len")
; program: $eor_str-len-replace-inv
(program $eor_str-len-replace-inv ((@T0 Type) (@T1 Type) (@T2 Type) (s1 (Seq @T1)) (r1 (Seq @T2)) (t1 (Seq @T0)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) Bool) Bool
  (
  (($eor_str-len-replace-inv t1 s1 r1 (_ (= (str.len s1)) (str.len r1))) (_ (= (str.len (_ (_ (str.replace t1) s1) r1))) (str.len t1)))
  )
)
; program: $eovc_str-len-replace-inv
(program $eovc_str-len-replace-inv ((@T2 Type) (@T1 Type) (@T0 Type) (t1 (Seq @T0)) (s1 (Seq @T1)) (r1 (Seq @T2)))
  :signature ((Seq @T2) (Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-len-replace-inv r1 s1 t1) (eo::define ((_v0 (_ (= (str.len s1)) (str.len r1)))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-len-replace-inv t1 s1 r1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_str-len-replace-inv")
; program: $eor_str-len-replace-all-inv
(program $eor_str-len-replace-all-inv ((@T0 Type) (@T1 Type) (@T2 Type) (s1 (Seq @T1)) (r1 (Seq @T2)) (t1 (Seq @T0)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) Bool) Bool
  (
  (($eor_str-len-replace-all-inv t1 s1 r1 (_ (= (str.len s1)) (str.len r1))) (_ (= (str.len (_ (_ (str.replace_all t1) s1) r1))) (str.len t1)))
  )
)
; program: $eovc_str-len-replace-all-inv
(program $eovc_str-len-replace-all-inv ((@T2 Type) (@T1 Type) (@T0 Type) (t1 (Seq @T0)) (s1 (Seq @T1)) (r1 (Seq @T2)))
  :signature ((Seq @T2) (Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-len-replace-all-inv r1 s1 t1) (eo::define ((_v0 (_ (= (str.len s1)) (str.len r1)))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-len-replace-all-inv t1 s1 r1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_str-len-replace-all-inv")
; program: $eor_str-len-update-inv
(program $eor_str-len-update-inv ((@T0 Type) (@T1 Type) (n1 Int) (r1 (Seq @T1)) (t1 (Seq @T0)))
  :signature ((Seq @T0) Int (Seq @T1)) Bool
  (
  (($eor_str-len-update-inv t1 n1 r1) (_ (= (str.len (_ (_ (str.update t1) n1) r1))) (str.len t1)))
  )
)
; program: $eovc_str-len-update-inv
(program $eovc_str-len-update-inv ((@T1 Type) (@T0 Type) (t1 (Seq @T0)) (n1 Int) (r1 (Seq @T1)))
  :signature ((Seq @T1) Int (Seq @T0)) Bool
  (
  (($eovc_str-len-update-inv r1 n1 t1) ($eo_requires_false ($eo_model_sat ($eor_str-len-update-inv t1 n1 r1)) true))
  )
)
(echo "smt-meta $eovc_str-len-update-inv")
; program: $eor_str-update-in-first-concat
(program $eor_str-update-in-first-concat ((@T0 Type) (@T1 Type) (@T2 Type) (@T3 Type) (@T4 Type) (t1 (Seq @T0)) (n1 Int) (tpre1 (Seq @T3)) (s1 (Seq @T2)) (tpost1 (Seq @T4)) (ts1 (Seq @T1)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) Int (Seq @T3) (Seq @T4) Bool Bool Bool Bool) Bool
  (
  ((eo::define ((_v0 (str.len t1))) (eo::define ((_v1 (_ (+ n1) (_ (+ (str.len s1)) 0)))) (eo::define ((_v2 (str.substr t1))) ($eor_str-update-in-first-concat t1 ts1 s1 n1 tpre1 tpost1 (_ (= (_ (>= n1) 0)) true) (_ (= (_ (< _v1) _v0)) true) (_ (= tpre1) (_ (_ _v2 0) n1)) (_ (= tpost1) (_ (_ _v2 _v1) _v0)))))) (_ (= (_ (_ (str.update (_ (str.++ t1) ts1)) n1) s1)) (_ (str.++ tpre1) (_ (str.++ s1) (_ (str.++ tpost1) ts1)))))
  )
)
; program: $eovc_str-update-in-first-concat
(program $eovc_str-update-in-first-concat ((@T0 Type) (@T2 Type) (@T4 Type) (@T3 Type) (@T1 Type) (ts1 (Seq @T1)) (tpre1 (Seq @T3)) (tpost1 (Seq @T4)) (n1 Int) (s1 (Seq @T2)) (t1 (Seq @T0)))
  :signature ((Seq @T0) (Seq @T2) Int (Seq @T4) (Seq @T3) (Seq @T1)) Bool
  (
  (($eovc_str-update-in-first-concat t1 s1 n1 tpost1 tpre1 ts1) (eo::define ((_v0 (str.len t1))) (eo::define ((_v1 (_ (+ n1) (_ (+ (str.len s1)) 0)))) (eo::define ((_v2 (str.substr t1))) (eo::define ((_v3 (_ (= tpost1) (_ (_ _v2 _v1) _v0)))) (eo::define ((_v4 (_ (= tpre1) (_ (_ _v2 0) n1)))) (eo::define ((_v5 (_ (= (_ (< _v1) _v0)) true))) (eo::define ((_v6 (_ (= (_ (>= n1) 0)) true))) ($eo_requires_true ($eo_model_sat _v6) ($eo_requires_true ($eo_model_sat _v5) ($eo_requires_true ($eo_model_sat _v4) ($eo_requires_true ($eo_model_sat _v3) ($eo_requires_false ($eo_model_sat ($eor_str-update-in-first-concat t1 ts1 s1 n1 tpre1 tpost1 _v6 _v5 _v4 _v3)) true)))))))))))))
  )
)
(echo "smt-meta $eovc_str-update-in-first-concat")
; program: $eor_str-len-substr-in-range
(program $eor_str-len-substr-in-range ((@T0 Type) (s1 (Seq @T0)) (n1 Int) (m1 Int))
  :signature ((Seq @T0) Int Int Bool Bool Bool) Bool
  (
  (($eor_str-len-substr-in-range s1 n1 m1 (_ (= (_ (>= n1) 0)) true) (_ (= (_ (>= m1) 0)) true) (_ (= (_ (>= (str.len s1)) (_ (+ n1) (_ (+ m1) 0)))) true)) (_ (= (str.len (_ (_ (str.substr s1) n1) m1))) m1))
  )
)
; program: $eovc_str-len-substr-in-range
(program $eovc_str-len-substr-in-range ((@T0 Type) (s1 (Seq @T0)) (n1 Int) (m1 Int))
  :signature (Int Int (Seq @T0)) Bool
  (
  (($eovc_str-len-substr-in-range m1 n1 s1) (eo::define ((_v0 (_ (= (_ (>= (str.len s1)) (_ (+ n1) (_ (+ m1) 0)))) true))) (eo::define ((_v1 (_ (= (_ (>= m1) 0)) true))) (eo::define ((_v2 (_ (= (_ (>= n1) 0)) true))) ($eo_requires_true ($eo_model_sat _v2) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-len-substr-in-range s1 n1 m1 _v2 _v1 _v0)) true))))))))
  )
)
(echo "smt-meta $eovc_str-len-substr-in-range")
; program: $eor_str-concat-clash
(program $eor_str-concat-clash ((@T0 Type) (@T1 Type) (@T2 Type) (@T3 Type) (s1 (Seq @T0)) (s2 (Seq @T1)) (t1 (Seq @T2)) (t2 (Seq @T3)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) (Seq @T3) Bool Bool) Bool
  (
  (($eor_str-concat-clash s1 s2 t1 t2 (_ (= (_ (= s1) t1)) false) (_ (= (str.len s1)) (str.len t1))) (_ (= (_ (= (_ (str.++ s1) s2)) (_ (str.++ t1) t2))) false))
  )
)
; program: $eovc_str-concat-clash
(program $eovc_str-concat-clash ((@T2 Type) (@T0 Type) (@T3 Type) (@T1 Type) (s2 (Seq @T1)) (t2 (Seq @T3)) (s1 (Seq @T0)) (t1 (Seq @T2)))
  :signature ((Seq @T2) (Seq @T0) (Seq @T3) (Seq @T1)) Bool
  (
  (($eovc_str-concat-clash t1 s1 t2 s2) (eo::define ((_v0 (_ (= (str.len s1)) (str.len t1)))) (eo::define ((_v1 (_ (= (_ (= s1) t1)) false))) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-concat-clash s1 s2 t1 t2 _v1 _v0)) true))))))
  )
)
(echo "smt-meta $eovc_str-concat-clash")
; program: $eor_str-concat-clash-rev
(program $eor_str-concat-clash-rev ((@T0 Type) (@T1 Type) (@T2 Type) (@T3 Type) (s1 (Seq @T0)) (s2 (Seq @T1)) (t1 (Seq @T2)) (t2 (Seq @T3)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) (Seq @T3) Bool Bool) Bool
  (
  (($eor_str-concat-clash-rev s1 s2 t1 t2 (_ (= (_ (= s1) t1)) false) (_ (= (str.len s1)) (str.len t1))) (_ (= (_ (= (eo::list_concat str.++ s2 (_ (str.++ s1) (eo::nil str.++ (eo::typeof s2))))) (eo::list_concat str.++ t2 (_ (str.++ t1) (eo::nil str.++ (eo::typeof t2)))))) false))
  )
)
; program: $eovc_str-concat-clash-rev
(program $eovc_str-concat-clash-rev ((@T2 Type) (@T0 Type) (@T3 Type) (@T1 Type) (s2 (Seq @T1)) (t2 (Seq @T3)) (s1 (Seq @T0)) (t1 (Seq @T2)))
  :signature ((Seq @T2) (Seq @T0) (Seq @T3) (Seq @T1)) Bool
  (
  (($eovc_str-concat-clash-rev t1 s1 t2 s2) (eo::define ((_v0 (_ (= (str.len s1)) (str.len t1)))) (eo::define ((_v1 (_ (= (_ (= s1) t1)) false))) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-concat-clash-rev s1 s2 t1 t2 _v1 _v0)) true))))))
  )
)
(echo "smt-meta $eovc_str-concat-clash-rev")
; program: $eor_str-concat-clash2
(program $eor_str-concat-clash2 ((@T0 Type) (@T1 Type) (@T2 Type) (s1 (Seq @T0)) (t1 (Seq @T1)) (t2 (Seq @T2)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) Bool Bool) Bool
  (
  (($eor_str-concat-clash2 s1 t1 t2 (_ (= (_ (= s1) t1)) false) (_ (= (str.len s1)) (str.len t1))) (_ (= (_ (= s1) (_ (str.++ t1) t2))) false))
  )
)
; program: $eovc_str-concat-clash2
(program $eovc_str-concat-clash2 ((@T1 Type) (@T0 Type) (@T2 Type) (t2 (Seq @T2)) (s1 (Seq @T0)) (t1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T0) (Seq @T2)) Bool
  (
  (($eovc_str-concat-clash2 t1 s1 t2) (eo::define ((_v0 (_ (= (str.len s1)) (str.len t1)))) (eo::define ((_v1 (_ (= (_ (= s1) t1)) false))) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-concat-clash2 s1 t1 t2 _v1 _v0)) true))))))
  )
)
(echo "smt-meta $eovc_str-concat-clash2")
; program: $eor_str-concat-clash2-rev
(program $eor_str-concat-clash2-rev ((@T0 Type) (@T1 Type) (@T2 Type) (s1 (Seq @T0)) (t1 (Seq @T1)) (t2 (Seq @T2)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) Bool Bool) Bool
  (
  (($eor_str-concat-clash2-rev s1 t1 t2 (_ (= (_ (= s1) t1)) false) (_ (= (str.len s1)) (str.len t1))) (_ (= (_ (= s1) (eo::list_concat str.++ t2 (_ (str.++ t1) (eo::nil str.++ (eo::typeof t2)))))) false))
  )
)
; program: $eovc_str-concat-clash2-rev
(program $eovc_str-concat-clash2-rev ((@T1 Type) (@T0 Type) (@T2 Type) (t2 (Seq @T2)) (s1 (Seq @T0)) (t1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T0) (Seq @T2)) Bool
  (
  (($eovc_str-concat-clash2-rev t1 s1 t2) (eo::define ((_v0 (_ (= (str.len s1)) (str.len t1)))) (eo::define ((_v1 (_ (= (_ (= s1) t1)) false))) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-concat-clash2-rev s1 t1 t2 _v1 _v0)) true))))))
  )
)
(echo "smt-meta $eovc_str-concat-clash2-rev")
; program: $eor_str-concat-unify
(program $eor_str-concat-unify ((@T0 Type) (@T1 Type) (@T2 Type) (@T3 Type) (@T4 Type) (s1 (Seq @T0)) (s2 (Seq @T1)) (s3 (Seq @T2)) (t1 (Seq @T3)) (t2 (Seq @T4)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) (Seq @T3) (Seq @T4)) Bool
  (
  (($eor_str-concat-unify s1 s2 s3 t1 t2) (eo::define ((_v0 (_ (str.++ t1) t2))) (eo::define ((_v1 (_ (str.++ s2) s3))) (eo::define ((_v2 (str.++ s1))) (_ (= (_ (= (_ _v2 _v1)) (_ _v2 _v0))) (_ (= ($singleton_elim _v1)) ($singleton_elim _v0)))))))
  )
)
; program: $eovc_str-concat-unify
(program $eovc_str-concat-unify ((@T4 Type) (@T3 Type) (@T2 Type) (@T1 Type) (@T0 Type) (s1 (Seq @T0)) (s2 (Seq @T1)) (s3 (Seq @T2)) (t1 (Seq @T3)) (t2 (Seq @T4)))
  :signature ((Seq @T4) (Seq @T3) (Seq @T2) (Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-concat-unify t2 t1 s3 s2 s1) ($eo_requires_false ($eo_model_sat ($eor_str-concat-unify s1 s2 s3 t1 t2)) true))
  )
)
(echo "smt-meta $eovc_str-concat-unify")
; program: $eor_str-concat-unify-rev
(program $eor_str-concat-unify-rev ((@T0 Type) (@T1 Type) (@T2 Type) (@T3 Type) (@T4 Type) (s1 (Seq @T0)) (s2 (Seq @T1)) (s3 (Seq @T2)) (t1 (Seq @T3)) (t2 (Seq @T4)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) (Seq @T3) (Seq @T4)) Bool
  (
  (($eor_str-concat-unify-rev s1 s2 s3 t1 t2) (eo::define ((_v0 (str.++ t1))) (eo::define ((_v1 (str.++ s2))) (eo::define ((_v2 (str.++ s1))) (_ (= (_ (= (_ _v1 (eo::list_concat str.++ s3 (_ _v2 (eo::nil str.++ (eo::typeof s2)))))) (_ _v0 (eo::list_concat str.++ t2 (_ _v2 (eo::nil str.++ (eo::typeof t1))))))) (_ (= ($singleton_elim (_ _v1 s3))) ($singleton_elim (_ _v0 t2))))))))
  )
)
; program: $eovc_str-concat-unify-rev
(program $eovc_str-concat-unify-rev ((@T4 Type) (@T3 Type) (@T2 Type) (@T1 Type) (@T0 Type) (s1 (Seq @T0)) (s2 (Seq @T1)) (s3 (Seq @T2)) (t1 (Seq @T3)) (t2 (Seq @T4)))
  :signature ((Seq @T4) (Seq @T3) (Seq @T2) (Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-concat-unify-rev t2 t1 s3 s2 s1) ($eo_requires_false ($eo_model_sat ($eor_str-concat-unify-rev s1 s2 s3 t1 t2)) true))
  )
)
(echo "smt-meta $eovc_str-concat-unify-rev")
; program: $eor_str-concat-unify-base
(program $eor_str-concat-unify-base ((@T1 Type) (@T2 Type) (@T0 Type) (s1 (Seq @T0)) (t1 (Seq @T1)) (t2 (Seq @T2)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) Type) Bool
  (
  (($eor_str-concat-unify-base s1 t1 t2 (Seq @T0)) (eo::define ((_v0 (_ (str.++ t1) t2))) (eo::define ((_v1 (Seq @T0))) (_ (= (_ (= s1) (_ (str.++ s1) _v0))) (_ (= (eo::ite (eo::is_eq _v1 (Seq Char)) "" (_ seq.empty _v1))) ($singleton_elim _v0))))))
  )
)
; program: $eovc_str-concat-unify-base
(program $eovc_str-concat-unify-base ((@T2 Type) (@T1 Type) (@T0 Type) (s1 (Seq @T0)) (t1 (Seq @T1)) (t2 (Seq @T2)))
  :signature (Type (Seq @T2) (Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-concat-unify-base @T0 t2 t1 s1) ($eo_requires_false ($eo_model_sat ($eor_str-concat-unify-base s1 t1 t2 (Seq @T0))) true))
  )
)
(echo "smt-meta $eovc_str-concat-unify-base")
; program: $eor_str-concat-unify-base-rev
(program $eor_str-concat-unify-base-rev ((@T1 Type) (@T2 Type) (@T0 Type) (s1 (Seq @T0)) (t1 (Seq @T1)) (t2 (Seq @T2)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) Type) Bool
  (
  (($eor_str-concat-unify-base-rev s1 t1 t2 (Seq @T0)) (eo::define ((_v0 (str.++ t1))) (eo::define ((_v1 (Seq @T0))) (_ (= (_ (= s1) (_ _v0 (eo::list_concat str.++ t2 (_ (str.++ s1) (eo::nil str.++ (eo::typeof t1))))))) (_ (= (eo::ite (eo::is_eq _v1 (Seq Char)) "" (_ seq.empty _v1))) ($singleton_elim (_ _v0 t2)))))))
  )
)
; program: $eovc_str-concat-unify-base-rev
(program $eovc_str-concat-unify-base-rev ((@T2 Type) (@T1 Type) (@T0 Type) (s1 (Seq @T0)) (t1 (Seq @T1)) (t2 (Seq @T2)))
  :signature (Type (Seq @T2) (Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-concat-unify-base-rev @T0 t2 t1 s1) ($eo_requires_false ($eo_model_sat ($eor_str-concat-unify-base-rev s1 t1 t2 (Seq @T0))) true))
  )
)
(echo "smt-meta $eovc_str-concat-unify-base-rev")
; program: $eor_str-prefixof-elim
(program $eor_str-prefixof-elim ((@T0 Type) (@T1 Type) (t1 (Seq @T1)) (s1 (Seq @T0)))
  :signature ((Seq @T0) (Seq @T1)) Bool
  (
  (($eor_str-prefixof-elim s1 t1) (_ (= (_ (str.prefixof s1) t1)) (_ (= s1) (_ (_ (str.substr t1) 0) (str.len s1)))))
  )
)
; program: $eovc_str-prefixof-elim
(program $eovc_str-prefixof-elim ((@T1 Type) (@T0 Type) (s1 (Seq @T0)) (t1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-prefixof-elim t1 s1) ($eo_requires_false ($eo_model_sat ($eor_str-prefixof-elim s1 t1)) true))
  )
)
(echo "smt-meta $eovc_str-prefixof-elim")
; program: $eor_str-suffixof-elim
(program $eor_str-suffixof-elim ((@T0 Type) (@T1 Type) (t1 (Seq @T1)) (s1 (Seq @T0)))
  :signature ((Seq @T0) (Seq @T1)) Bool
  (
  (($eor_str-suffixof-elim s1 t1) (eo::define ((_v0 (str.len s1))) (_ (= (_ (str.suffixof s1) t1)) (_ (= s1) (_ (_ (str.substr t1) (_ (- (str.len t1)) _v0)) _v0)))))
  )
)
; program: $eovc_str-suffixof-elim
(program $eovc_str-suffixof-elim ((@T1 Type) (@T0 Type) (s1 (Seq @T0)) (t1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-suffixof-elim t1 s1) ($eo_requires_false ($eo_model_sat ($eor_str-suffixof-elim s1 t1)) true))
  )
)
(echo "smt-meta $eovc_str-suffixof-elim")
; program: $eor_str-prefixof-eq
(program $eor_str-prefixof-eq ((@T0 Type) (@T1 Type) (s1 (Seq @T0)) (t1 (Seq @T1)))
  :signature ((Seq @T0) (Seq @T1) Bool) Bool
  (
  (($eor_str-prefixof-eq s1 t1 (_ (= (_ (>= (str.len s1)) (str.len t1))) true)) (_ (= (_ (str.prefixof s1) t1)) (_ (= s1) t1)))
  )
)
; program: $eovc_str-prefixof-eq
(program $eovc_str-prefixof-eq ((@T1 Type) (@T0 Type) (s1 (Seq @T0)) (t1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-prefixof-eq t1 s1) (eo::define ((_v0 (_ (= (_ (>= (str.len s1)) (str.len t1))) true))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-prefixof-eq s1 t1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_str-prefixof-eq")
; program: $eor_str-suffixof-eq
(program $eor_str-suffixof-eq ((@T0 Type) (@T1 Type) (s1 (Seq @T0)) (t1 (Seq @T1)))
  :signature ((Seq @T0) (Seq @T1) Bool) Bool
  (
  (($eor_str-suffixof-eq s1 t1 (_ (= (_ (>= (str.len s1)) (str.len t1))) true)) (_ (= (_ (str.suffixof s1) t1)) (_ (= s1) t1)))
  )
)
; program: $eovc_str-suffixof-eq
(program $eovc_str-suffixof-eq ((@T1 Type) (@T0 Type) (s1 (Seq @T0)) (t1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-suffixof-eq t1 s1) (eo::define ((_v0 (_ (= (_ (>= (str.len s1)) (str.len t1))) true))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-suffixof-eq s1 t1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_str-suffixof-eq")
; program: $eor_str-prefixof-one
(program $eor_str-prefixof-one ((@T0 Type) (@T1 Type) (t1 (Seq @T1)) (s1 (Seq @T0)))
  :signature ((Seq @T0) (Seq @T1) Bool) Bool
  (
  (($eor_str-prefixof-one s1 t1 (_ (= (str.len t1)) 1)) (_ (= (_ (str.prefixof s1) t1)) (_ (str.contains t1) s1)))
  )
)
; program: $eovc_str-prefixof-one
(program $eovc_str-prefixof-one ((@T1 Type) (@T0 Type) (s1 (Seq @T0)) (t1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-prefixof-one t1 s1) (eo::define ((_v0 (_ (= (str.len t1)) 1))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-prefixof-one s1 t1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_str-prefixof-one")
; program: $eor_str-suffixof-one
(program $eor_str-suffixof-one ((@T0 Type) (@T1 Type) (t1 (Seq @T1)) (s1 (Seq @T0)))
  :signature ((Seq @T0) (Seq @T1) Bool) Bool
  (
  (($eor_str-suffixof-one s1 t1 (_ (= (str.len t1)) 1)) (_ (= (_ (str.suffixof s1) t1)) (_ (str.contains t1) s1)))
  )
)
; program: $eovc_str-suffixof-one
(program $eovc_str-suffixof-one ((@T1 Type) (@T0 Type) (s1 (Seq @T0)) (t1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-suffixof-one t1 s1) (eo::define ((_v0 (_ (= (str.len t1)) 1))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-suffixof-one s1 t1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_str-suffixof-one")
; program: $eor_str-substr-combine1
(program $eor_str-substr-combine1 ((@T0 Type) (m2 Int) (s1 (Seq @T0)) (n1 Int) (m1 Int) (n2 Int))
  :signature ((Seq @T0) Int Int Int Int Bool Bool Bool) Bool
  (
  (($eor_str-substr-combine1 s1 n1 m1 n2 m2 (_ (= (_ (>= n1) 0)) true) (_ (= (_ (>= n2) 0)) true) (_ (= (_ (>= (_ (- m2) (_ (- m1) n2))) 0)) true)) (eo::define ((_v0 (str.substr s1))) (_ (= (_ (_ (str.substr (_ (_ _v0 n1) m1)) n2) m2)) (_ (_ _v0 (_ (+ n1) (_ (+ n2) 0))) (_ (- m1) n2)))))
  )
)
; program: $eovc_str-substr-combine1
(program $eovc_str-substr-combine1 ((@T0 Type) (s1 (Seq @T0)) (n1 Int) (m2 Int) (m1 Int) (n2 Int))
  :signature (Int Int Int Int (Seq @T0)) Bool
  (
  (($eovc_str-substr-combine1 n2 m1 m2 n1 s1) (eo::define ((_v0 (_ (= (_ (>= (_ (- m2) (_ (- m1) n2))) 0)) true))) (eo::define ((_v1 (_ (= (_ (>= n2) 0)) true))) (eo::define ((_v2 (_ (= (_ (>= n1) 0)) true))) ($eo_requires_true ($eo_model_sat _v2) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-substr-combine1 s1 n1 m1 n2 m2 _v2 _v1 _v0)) true))))))))
  )
)
(echo "smt-meta $eovc_str-substr-combine1")
; program: $eor_str-substr-combine2
(program $eor_str-substr-combine2 ((@T0 Type) (m1 Int) (s1 (Seq @T0)) (n1 Int) (n2 Int) (m2 Int))
  :signature ((Seq @T0) Int Int Int Int Bool Bool Bool) Bool
  (
  (($eor_str-substr-combine2 s1 n1 m1 n2 m2 (_ (= (_ (>= n1) 0)) true) (_ (= (_ (>= n2) 0)) true) (_ (= (_ (>= (_ (- (_ (- m1) n2)) m2)) 0)) true)) (eo::define ((_v0 (str.substr s1))) (_ (= (_ (_ (str.substr (_ (_ _v0 n1) m1)) n2) m2)) (_ (_ _v0 (_ (+ n1) (_ (+ n2) 0))) m2))))
  )
)
; program: $eovc_str-substr-combine2
(program $eovc_str-substr-combine2 ((@T0 Type) (s1 (Seq @T0)) (n1 Int) (m1 Int) (n2 Int) (m2 Int))
  :signature (Int Int Int Int (Seq @T0)) Bool
  (
  (($eovc_str-substr-combine2 m2 n2 m1 n1 s1) (eo::define ((_v0 (_ (= (_ (>= (_ (- (_ (- m1) n2)) m2)) 0)) true))) (eo::define ((_v1 (_ (= (_ (>= n2) 0)) true))) (eo::define ((_v2 (_ (= (_ (>= n1) 0)) true))) ($eo_requires_true ($eo_model_sat _v2) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-substr-combine2 s1 n1 m1 n2 m2 _v2 _v1 _v0)) true))))))))
  )
)
(echo "smt-meta $eovc_str-substr-combine2")
; program: $eor_str-substr-combine3
(program $eor_str-substr-combine3 ((@T0 Type) (m1 Int) (s1 (Seq @T0)) (n1 Int) (n2 Int) (m2 Int))
  :signature ((Seq @T0) Int Int Int Int Bool Bool Bool) Bool
  (
  (($eor_str-substr-combine3 s1 n1 m1 n2 m2 (_ (= (_ (>= n1) 0)) true) (_ (= (_ (>= n2) 0)) true) (_ (= (_ (>= (str.len (_ (_ (str.substr s1) n1) m1))) (_ (+ n2) (_ (+ m2) 0)))) true)) (eo::define ((_v0 (str.substr s1))) (_ (= (_ (_ (str.substr (_ (_ _v0 n1) m1)) n2) m2)) (_ (_ _v0 (_ (+ n1) (_ (+ n2) 0))) m2))))
  )
)
; program: $eovc_str-substr-combine3
(program $eovc_str-substr-combine3 ((@T0 Type) (s1 (Seq @T0)) (n1 Int) (m1 Int) (n2 Int) (m2 Int))
  :signature (Int Int Int Int (Seq @T0)) Bool
  (
  (($eovc_str-substr-combine3 m2 n2 m1 n1 s1) (eo::define ((_v0 (_ (= (_ (>= (str.len (_ (_ (str.substr s1) n1) m1))) (_ (+ n2) (_ (+ m2) 0)))) true))) (eo::define ((_v1 (_ (= (_ (>= n2) 0)) true))) (eo::define ((_v2 (_ (= (_ (>= n1) 0)) true))) ($eo_requires_true ($eo_model_sat _v2) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-substr-combine3 s1 n1 m1 n2 m2 _v2 _v1 _v0)) true))))))))
  )
)
(echo "smt-meta $eovc_str-substr-combine3")
; program: $eor_str-substr-combine4
(program $eor_str-substr-combine4 ((@T0 Type) (m2 Int) (s1 (Seq @T0)) (n1 Int) (m1 Int) (n2 Int))
  :signature ((Seq @T0) Int Int Int Int Bool Bool Bool) Bool
  (
  (($eor_str-substr-combine4 s1 n1 m1 n2 m2 (_ (= (_ (>= n1) 0)) true) (_ (= (_ (>= n2) 0)) true) (_ (= (_ (>= (_ (+ n2) (_ (+ m2) 0))) (str.len (_ (_ (str.substr s1) n1) m1)))) true)) (eo::define ((_v0 (str.substr s1))) (_ (= (_ (_ (str.substr (_ (_ _v0 n1) m1)) n2) m2)) (_ (_ _v0 (_ (+ n1) (_ (+ n2) 0))) (_ (- m1) n2)))))
  )
)
; program: $eovc_str-substr-combine4
(program $eovc_str-substr-combine4 ((@T0 Type) (n2 Int) (m2 Int) (s1 (Seq @T0)) (n1 Int) (m1 Int))
  :signature (Int Int (Seq @T0) Int Int) Bool
  (
  (($eovc_str-substr-combine4 m1 n1 s1 m2 n2) (eo::define ((_v0 (_ (= (_ (>= (_ (+ n2) (_ (+ m2) 0))) (str.len (_ (_ (str.substr s1) n1) m1)))) true))) (eo::define ((_v1 (_ (= (_ (>= n2) 0)) true))) (eo::define ((_v2 (_ (= (_ (>= n1) 0)) true))) ($eo_requires_true ($eo_model_sat _v2) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-substr-combine4 s1 n1 m1 n2 m2 _v2 _v1 _v0)) true))))))))
  )
)
(echo "smt-meta $eovc_str-substr-combine4")
; program: $eor_str-substr-concat1
(program $eor_str-substr-concat1 ((@T0 Type) (@T1 Type) (s2 (Seq @T1)) (s1 (Seq @T0)) (n1 Int) (m1 Int))
  :signature ((Seq @T0) (Seq @T1) Int Int Bool Bool) Bool
  (
  (($eor_str-substr-concat1 s1 s2 n1 m1 (_ (= (_ (>= n1) 0)) true) (_ (= (_ (>= (str.len s1)) (_ (+ n1) (_ (+ m1) 0)))) true)) (_ (= (_ (_ (str.substr (_ (str.++ s1) s2)) n1) m1)) (_ (_ (str.substr s1) n1) m1)))
  )
)
; program: $eovc_str-substr-concat1
(program $eovc_str-substr-concat1 ((@T0 Type) (@T1 Type) (s2 (Seq @T1)) (s1 (Seq @T0)) (n1 Int) (m1 Int))
  :signature (Int Int (Seq @T0) (Seq @T1)) Bool
  (
  (($eovc_str-substr-concat1 m1 n1 s1 s2) (eo::define ((_v0 (_ (= (_ (>= (str.len s1)) (_ (+ n1) (_ (+ m1) 0)))) true))) (eo::define ((_v1 (_ (= (_ (>= n1) 0)) true))) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-substr-concat1 s1 s2 n1 m1 _v1 _v0)) true))))))
  )
)
(echo "smt-meta $eovc_str-substr-concat1")
; program: $eor_str-substr-concat2
(program $eor_str-substr-concat2 ((@T0 Type) (@T1 Type) (@T2 Type) (s2 (Seq @T1)) (s3 (Seq @T2)) (n1 Int) (s1 (Seq @T0)) (m1 Int))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) Int Int Bool) Bool
  (
  (($eor_str-substr-concat2 s1 s2 s3 n1 m1 (_ (= (_ (>= n1) (str.len s1))) true)) (eo::define ((_v0 (_ (str.++ s2) s3))) (_ (= (_ (_ (str.substr (_ (str.++ s1) _v0)) n1) m1)) (_ (_ (str.substr ($singleton_elim _v0)) (_ (- n1) (str.len s1))) m1))))
  )
)
; program: $eovc_str-substr-concat2
(program $eovc_str-substr-concat2 ((@T0 Type) (@T2 Type) (@T1 Type) (s2 (Seq @T1)) (s3 (Seq @T2)) (m1 Int) (n1 Int) (s1 (Seq @T0)))
  :signature ((Seq @T0) Int Int (Seq @T2) (Seq @T1)) Bool
  (
  (($eovc_str-substr-concat2 s1 n1 m1 s3 s2) (eo::define ((_v0 (_ (= (_ (>= n1) (str.len s1))) true))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-substr-concat2 s1 s2 s3 n1 m1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_str-substr-concat2")
; program: $eor_str-substr-replace
(program $eor_str-substr-replace ((@T0 Type) (@T1 Type) (@T2 Type) (s1 (Seq @T0)) (n1 Int) (t1 (Seq @T1)) (r1 (Seq @T2)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) Int Bool Bool) Bool
  (
  ((eo::define ((_v0 (= (str.len t1)))) ($eor_str-substr-replace s1 t1 r1 n1 (_ _v0 (str.len r1)) (_ _v0 1))) (_ (= (_ (_ (str.substr (_ (_ (str.replace s1) t1) r1)) 0) n1)) (_ (_ (str.replace (_ (_ (str.substr s1) 0) n1)) t1) r1)))
  )
)
; program: $eovc_str-substr-replace
(program $eovc_str-substr-replace ((@T1 Type) (@T2 Type) (@T0 Type) (s1 (Seq @T0)) (n1 Int) (r1 (Seq @T2)) (t1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T2) Int (Seq @T0)) Bool
  (
  (($eovc_str-substr-replace t1 r1 n1 s1) (eo::define ((_v0 (= (str.len t1)))) (eo::define ((_v1 (_ _v0 1))) (eo::define ((_v2 (_ _v0 (str.len r1)))) ($eo_requires_true ($eo_model_sat _v2) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_false ($eo_model_sat ($eor_str-substr-replace s1 t1 r1 n1 _v2 _v1)) true)))))))
  )
)
(echo "smt-meta $eovc_str-substr-replace")
; program: $eor_str-substr-full
(program $eor_str-substr-full ((@T0 Type) (n1 Int) (s1 (Seq @T0)))
  :signature ((Seq @T0) Int Bool) Bool
  (
  (($eor_str-substr-full s1 n1 (_ (= (_ (>= n1) (str.len s1))) true)) (_ (= (_ (_ (str.substr s1) 0) n1)) s1))
  )
)
; program: $eovc_str-substr-full
(program $eovc_str-substr-full ((@T0 Type) (n1 Int) (s1 (Seq @T0)))
  :signature ((Seq @T0) Int) Bool
  (
  (($eovc_str-substr-full s1 n1) (eo::define ((_v0 (_ (= (_ (>= n1) (str.len s1))) true))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-substr-full s1 n1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_str-substr-full")
; program: $eor_str-substr-full-eq
(program $eor_str-substr-full-eq ((@T0 Type) (n1 Int) (s1 (Seq @T0)))
  :signature ((Seq @T0) Int Bool) Bool
  (
  (($eor_str-substr-full-eq s1 n1 (_ (= (str.len s1)) n1)) (_ (= (_ (_ (str.substr s1) 0) n1)) s1))
  )
)
; program: $eovc_str-substr-full-eq
(program $eovc_str-substr-full-eq ((@T0 Type) (s1 (Seq @T0)) (n1 Int))
  :signature (Int (Seq @T0)) Bool
  (
  (($eovc_str-substr-full-eq n1 s1) (eo::define ((_v0 (_ (= (str.len s1)) n1))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-substr-full-eq s1 n1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_str-substr-full-eq")
; program: $eor_str-contains-refl
(program $eor_str-contains-refl ((@T0 Type) (x1 (Seq @T0)))
  :signature ((Seq @T0)) Bool
  (
  (($eor_str-contains-refl x1) (_ (= (_ (str.contains x1) x1)) true))
  )
)
; program: $eovc_str-contains-refl
(program $eovc_str-contains-refl ((@T0 Type) (x1 (Seq @T0)))
  :signature ((Seq @T0)) Bool
  (
  (($eovc_str-contains-refl x1) ($eo_requires_false ($eo_model_sat ($eor_str-contains-refl x1)) true))
  )
)
(echo "smt-meta $eovc_str-contains-refl")
; program: $eor_str-contains-concat-find
(program $eor_str-contains-concat-find ((@T0 Type) (@T1 Type) (@T2 Type) (@T3 Type) (xs1 (Seq @T0)) (z1 (Seq @T1)) (zs1 (Seq @T3)) (y1 (Seq @T2)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) (Seq @T3) Bool) Bool
  (
  (($eor_str-contains-concat-find xs1 z1 y1 zs1 (_ (= (_ (str.contains z1) y1)) true)) (_ (= (_ (str.contains (eo::list_concat str.++ xs1 (_ (str.++ z1) zs1))) y1)) true))
  )
)
; program: $eovc_str-contains-concat-find
(program $eovc_str-contains-concat-find ((@T2 Type) (@T1 Type) (@T3 Type) (@T0 Type) (xs1 (Seq @T0)) (zs1 (Seq @T3)) (z1 (Seq @T1)) (y1 (Seq @T2)))
  :signature ((Seq @T2) (Seq @T1) (Seq @T3) (Seq @T0)) Bool
  (
  (($eovc_str-contains-concat-find y1 z1 zs1 xs1) (eo::define ((_v0 (_ (= (_ (str.contains z1) y1)) true))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-contains-concat-find xs1 z1 y1 zs1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_str-contains-concat-find")
; program: $eor_str-contains-concat-find-contra
(program $eor_str-contains-concat-find-contra ((@T0 Type) (@T1 Type) (@T2 Type) (@T3 Type) (y1 (Seq @T2)) (xs1 (Seq @T0)) (z1 (Seq @T1)) (zs1 (Seq @T3)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) (Seq @T3) Bool) Bool
  (
  (($eor_str-contains-concat-find-contra xs1 z1 y1 zs1 (_ (= (_ (str.contains y1) z1)) false)) (_ (= (_ (str.contains y1) (eo::list_concat str.++ xs1 (_ (str.++ z1) zs1)))) false))
  )
)
; program: $eovc_str-contains-concat-find-contra
(program $eovc_str-contains-concat-find-contra ((@T1 Type) (@T2 Type) (@T3 Type) (@T0 Type) (xs1 (Seq @T0)) (zs1 (Seq @T3)) (y1 (Seq @T2)) (z1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T2) (Seq @T3) (Seq @T0)) Bool
  (
  (($eovc_str-contains-concat-find-contra z1 y1 zs1 xs1) (eo::define ((_v0 (_ (= (_ (str.contains y1) z1)) false))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-contains-concat-find-contra xs1 z1 y1 zs1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_str-contains-concat-find-contra")
; program: $eor_str-contains-split-char
(program $eor_str-contains-split-char ((@T0 Type) (@T1 Type) (@T2 Type) (@T3 Type) (x1 (Seq @T0)) (y1 (Seq @T1)) (z1 (Seq @T2)) (w1 (Seq @T3)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) (Seq @T3) Bool) Bool
  (
  (($eor_str-contains-split-char x1 y1 z1 w1 (_ (= (str.len w1)) 1)) (eo::define ((_v0 (_ (str.++ y1) z1))) (_ (= (_ (str.contains (_ (str.++ x1) _v0)) w1)) (_ (or (_ (str.contains x1) w1)) (_ (or (_ (str.contains ($singleton_elim _v0)) w1)) false)))))
  )
)
; program: $eovc_str-contains-split-char
(program $eovc_str-contains-split-char ((@T3 Type) (@T2 Type) (@T1 Type) (@T0 Type) (x1 (Seq @T0)) (y1 (Seq @T1)) (z1 (Seq @T2)) (w1 (Seq @T3)))
  :signature ((Seq @T3) (Seq @T2) (Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-contains-split-char w1 z1 y1 x1) (eo::define ((_v0 (_ (= (str.len w1)) 1))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-contains-split-char x1 y1 z1 w1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_str-contains-split-char")
; program: $eor_str-contains-leq-len-eq
(program $eor_str-contains-leq-len-eq ((@T0 Type) (@T1 Type) (x1 (Seq @T0)) (y1 (Seq @T1)))
  :signature ((Seq @T0) (Seq @T1) Bool) Bool
  (
  (($eor_str-contains-leq-len-eq x1 y1 (_ (= (_ (>= (str.len y1)) (str.len x1))) true)) (_ (= (_ (str.contains x1) y1)) (_ (= x1) y1)))
  )
)
; program: $eovc_str-contains-leq-len-eq
(program $eovc_str-contains-leq-len-eq ((@T0 Type) (@T1 Type) (y1 (Seq @T1)) (x1 (Seq @T0)))
  :signature ((Seq @T0) (Seq @T1)) Bool
  (
  (($eovc_str-contains-leq-len-eq x1 y1) (eo::define ((_v0 (_ (= (_ (>= (str.len y1)) (str.len x1))) true))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-contains-leq-len-eq x1 y1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_str-contains-leq-len-eq")
; program: $eor_str-contains-emp
(program $eor_str-contains-emp ((@T0 Type) (@T1 Type) (x1 (Seq @T0)) (y1 (Seq @T1)))
  :signature ((Seq @T0) (Seq @T1) Bool) Bool
  (
  (($eor_str-contains-emp x1 y1 (_ (= (str.len y1)) 0)) (_ (= (_ (str.contains x1) y1)) true))
  )
)
; program: $eovc_str-contains-emp
(program $eovc_str-contains-emp ((@T1 Type) (@T0 Type) (x1 (Seq @T0)) (y1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-contains-emp y1 x1) (eo::define ((_v0 (_ (= (str.len y1)) 0))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-contains-emp x1 y1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_str-contains-emp")
; program: $eor_str-contains-char
(program $eor_str-contains-char ((@T1 Type) (@T0 Type) (x1 (Seq @T0)) (y1 (Seq @T1)))
  :signature ((Seq @T0) (Seq @T1) Type Bool) Bool
  (
  (($eor_str-contains-char x1 y1 (Seq @T0) (_ (= (str.len x1)) 1)) (eo::define ((_v0 (Seq @T0))) (_ (= (_ (str.contains x1) y1)) (_ (or (_ (= (eo::ite (eo::is_eq _v0 (Seq Char)) "" (_ seq.empty _v0))) y1)) (_ (or (_ (= x1) y1)) false)))))
  )
)
; program: $eovc_str-contains-char
(program $eovc_str-contains-char ((@T1 Type) (y1 (Seq @T1)) (@T0 Type) (x1 (Seq @T0)))
  :signature ((Seq @T0) Type (Seq @T1)) Bool
  (
  (($eovc_str-contains-char x1 @T0 y1) (eo::define ((_v0 (_ (= (str.len x1)) 1))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-contains-char x1 y1 (Seq @T0) _v0)) true))))
  )
)
(echo "smt-meta $eovc_str-contains-char")
; program: $eor_str-at-elim
(program $eor_str-at-elim ((@T0 Type) (x1 (Seq @T0)) (n1 Int))
  :signature ((Seq @T0) Int) Bool
  (
  (($eor_str-at-elim x1 n1) (_ (= (_ (str.at x1) n1)) (_ (_ (str.substr x1) n1) 1)))
  )
)
; program: $eovc_str-at-elim
(program $eovc_str-at-elim ((@T0 Type) (x1 (Seq @T0)) (n1 Int))
  :signature (Int (Seq @T0)) Bool
  (
  (($eovc_str-at-elim n1 x1) ($eo_requires_false ($eo_model_sat ($eor_str-at-elim x1 n1)) true))
  )
)
(echo "smt-meta $eovc_str-at-elim")
; program: $eor_str-replace-self
(program $eor_str-replace-self ((@T0 Type) (@T1 Type) (t1 (Seq @T0)) (s1 (Seq @T1)))
  :signature ((Seq @T0) (Seq @T1)) Bool
  (
  (($eor_str-replace-self t1 s1) (_ (= (_ (_ (str.replace t1) t1) s1)) s1))
  )
)
; program: $eovc_str-replace-self
(program $eovc_str-replace-self ((@T1 Type) (@T0 Type) (t1 (Seq @T0)) (s1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-replace-self s1 t1) ($eo_requires_false ($eo_model_sat ($eor_str-replace-self t1 s1)) true))
  )
)
(echo "smt-meta $eovc_str-replace-self")
; program: $eor_str-replace-id
(program $eor_str-replace-id ((@T0 Type) (@T1 Type) (s1 (Seq @T1)) (t1 (Seq @T0)))
  :signature ((Seq @T0) (Seq @T1)) Bool
  (
  (($eor_str-replace-id t1 s1) (_ (= (_ (_ (str.replace t1) s1) s1)) t1))
  )
)
; program: $eovc_str-replace-id
(program $eovc_str-replace-id ((@T1 Type) (@T0 Type) (t1 (Seq @T0)) (s1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-replace-id s1 t1) ($eo_requires_false ($eo_model_sat ($eor_str-replace-id t1 s1)) true))
  )
)
(echo "smt-meta $eovc_str-replace-id")
; program: $eor_str-replace-prefix
(program $eor_str-replace-prefix ((@T0 Type) (@T1 Type) (@T2 Type) (@T3 Type) (t1 (Seq @T0)) (s1 (Seq @T3)) (t2 (Seq @T1)) (r1 (Seq @T2)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) (Seq @T3)) Bool
  (
  (($eor_str-replace-prefix t1 t2 r1 s1) (eo::define ((_v0 (_ (str.++ t2) r1))) (_ (= (_ (_ (str.replace (_ (str.++ t1) _v0)) t1) s1)) (_ (str.++ s1) _v0))))
  )
)
; program: $eovc_str-replace-prefix
(program $eovc_str-replace-prefix ((@T3 Type) (@T2 Type) (@T1 Type) (@T0 Type) (t1 (Seq @T0)) (t2 (Seq @T1)) (r1 (Seq @T2)) (s1 (Seq @T3)))
  :signature ((Seq @T3) (Seq @T2) (Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-replace-prefix s1 r1 t2 t1) ($eo_requires_false ($eo_model_sat ($eor_str-replace-prefix t1 t2 r1 s1)) true))
  )
)
(echo "smt-meta $eovc_str-replace-prefix")
; program: $eor_str-replace-no-contains
(program $eor_str-replace-no-contains ((@T0 Type) (@T1 Type) (@T2 Type) (s1 (Seq @T1)) (r1 (Seq @T2)) (t1 (Seq @T0)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) Bool) Bool
  (
  (($eor_str-replace-no-contains t1 s1 r1 (_ (= (_ (str.contains t1) s1)) false)) (_ (= (_ (_ (str.replace t1) s1) r1)) t1))
  )
)
; program: $eovc_str-replace-no-contains
(program $eovc_str-replace-no-contains ((@T1 Type) (@T0 Type) (@T2 Type) (r1 (Seq @T2)) (t1 (Seq @T0)) (s1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T0) (Seq @T2)) Bool
  (
  (($eovc_str-replace-no-contains s1 t1 r1) (eo::define ((_v0 (_ (= (_ (str.contains t1) s1)) false))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-replace-no-contains t1 s1 r1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_str-replace-no-contains")
; program: $eor_str-replace-find-base
(program $eor_str-replace-find-base ((@T0 Type) (@T1 Type) (@T2 Type) (@T3 Type) (@T4 Type) (t1 (Seq @T0)) (s1 (Seq @T1)) (r1 (Seq @T2)) (tpost1 (Seq @T4)) (tpre1 (Seq @T3)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) (Seq @T3) (Seq @T4) Bool Bool Bool) Bool
  (
  ((eo::define ((_v0 (_ (_ (str.indexof t1) s1) 0))) (eo::define ((_v1 (str.substr t1))) ($eor_str-replace-find-base t1 s1 r1 tpre1 tpost1 (_ (= (_ (>= _v0) 0)) true) (_ (= tpre1) (_ (_ _v1 0) _v0)) (_ (= tpost1) (_ (_ _v1 (_ (+ _v0) (_ (+ (str.len s1)) 0))) (str.len t1)))))) (_ (= (_ (_ (str.replace t1) s1) r1)) (_ (str.++ tpre1) (_ (str.++ r1) (_ (str.++ tpost1) (eo::nil str.++ (eo::typeof tpre1)))))))
  )
)
; program: $eovc_str-replace-find-base
(program $eovc_str-replace-find-base ((@T0 Type) (@T1 Type) (@T4 Type) (@T3 Type) (@T2 Type) (r1 (Seq @T2)) (tpre1 (Seq @T3)) (tpost1 (Seq @T4)) (s1 (Seq @T1)) (t1 (Seq @T0)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T4) (Seq @T3) (Seq @T2)) Bool
  (
  (($eovc_str-replace-find-base t1 s1 tpost1 tpre1 r1) (eo::define ((_v0 (_ (_ (str.indexof t1) s1) 0))) (eo::define ((_v1 (str.substr t1))) (eo::define ((_v2 (_ (= tpost1) (_ (_ _v1 (_ (+ _v0) (_ (+ (str.len s1)) 0))) (str.len t1))))) (eo::define ((_v3 (_ (= tpre1) (_ (_ _v1 0) _v0)))) (eo::define ((_v4 (_ (= (_ (>= _v0) 0)) true))) ($eo_requires_true ($eo_model_sat _v4) ($eo_requires_true ($eo_model_sat _v3) ($eo_requires_true ($eo_model_sat _v2) ($eo_requires_false ($eo_model_sat ($eor_str-replace-find-base t1 s1 r1 tpre1 tpost1 _v4 _v3 _v2)) true))))))))))
  )
)
(echo "smt-meta $eovc_str-replace-find-base")
; program: $eor_str-replace-find-first-concat
(program $eor_str-replace-find-first-concat ((@T0 Type) (@T1 Type) (@T2 Type) (@T3 Type) (@T4 Type) (@T5 Type) (t1 (Seq @T0)) (s1 (Seq @T2)) (tpre1 (Seq @T4)) (r1 (Seq @T3)) (tpost1 (Seq @T5)) (ts1 (Seq @T1)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) (Seq @T3) (Seq @T4) (Seq @T5) Bool Bool Bool) Bool
  (
  ((eo::define ((_v0 (_ (_ (str.indexof t1) s1) 0))) (eo::define ((_v1 (str.substr t1))) ($eor_str-replace-find-first-concat t1 ts1 s1 r1 tpre1 tpost1 (_ (= (_ (>= _v0) 0)) true) (_ (= tpre1) (_ (_ _v1 0) _v0)) (_ (= tpost1) (_ (_ _v1 (_ (+ _v0) (_ (+ (str.len s1)) 0))) (str.len t1)))))) (_ (= (_ (_ (str.replace (_ (str.++ t1) ts1)) s1) r1)) (_ (str.++ tpre1) (_ (str.++ r1) (_ (str.++ tpost1) ts1)))))
  )
)
; program: $eovc_str-replace-find-first-concat
(program $eovc_str-replace-find-first-concat ((@T0 Type) (@T2 Type) (@T5 Type) (@T4 Type) (@T3 Type) (@T1 Type) (ts1 (Seq @T1)) (r1 (Seq @T3)) (tpre1 (Seq @T4)) (tpost1 (Seq @T5)) (s1 (Seq @T2)) (t1 (Seq @T0)))
  :signature ((Seq @T0) (Seq @T2) (Seq @T5) (Seq @T4) (Seq @T3) (Seq @T1)) Bool
  (
  (($eovc_str-replace-find-first-concat t1 s1 tpost1 tpre1 r1 ts1) (eo::define ((_v0 (_ (_ (str.indexof t1) s1) 0))) (eo::define ((_v1 (str.substr t1))) (eo::define ((_v2 (_ (= tpost1) (_ (_ _v1 (_ (+ _v0) (_ (+ (str.len s1)) 0))) (str.len t1))))) (eo::define ((_v3 (_ (= tpre1) (_ (_ _v1 0) _v0)))) (eo::define ((_v4 (_ (= (_ (>= _v0) 0)) true))) ($eo_requires_true ($eo_model_sat _v4) ($eo_requires_true ($eo_model_sat _v3) ($eo_requires_true ($eo_model_sat _v2) ($eo_requires_false ($eo_model_sat ($eor_str-replace-find-first-concat t1 ts1 s1 r1 tpre1 tpost1 _v4 _v3 _v2)) true))))))))))
  )
)
(echo "smt-meta $eovc_str-replace-find-first-concat")
; program: $eor_str-replace-empty
(program $eor_str-replace-empty ((@T0 Type) (@T1 Type) (Any Type) ($ex_1 Any) (@T2 Type) (r1 (Seq @T2)) (t1 (Seq @T0)) (s1 (Seq @T1)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) Type Any) Bool
  (
  (($eor_str-replace-empty t1 s1 r1 (Seq @T2) (_ (= r1) $ex_1)) (eo::define ((_v0 (Seq @T2))) (eo::requires $ex_1 (eo::ite (eo::is_eq _v0 (Seq Char)) "" (_ seq.empty _v0)) (_ (= (_ (_ (str.replace t1) r1) s1)) (_ (str.++ s1) (_ (str.++ t1) (eo::nil str.++ (eo::typeof s1))))))))
  )
)
; program: $eovc_str-replace-empty
(program $eovc_str-replace-empty ((@T1 Type) (@T0 Type) (t1 (Seq @T0)) (s1 (Seq @T1)) (@T2 Type) (r1 (Seq @T2)))
  :signature (Type (Seq @T2) (Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-replace-empty @T2 r1 s1 t1) (eo::define ((_v0 (Seq @T2))) (eo::define ((_v1 (_ (= r1) (eo::ite (eo::is_eq _v0 (Seq Char)) "" (_ seq.empty _v0))))) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_false ($eo_model_sat ($eor_str-replace-empty t1 s1 r1 _v0 _v1)) true)))))
  )
)
(echo "smt-meta $eovc_str-replace-empty")
; program: $eor_str-replace-one-pre
(program $eor_str-replace-one-pre ((@T0 Type) (@T1 Type) (@T2 Type) (@T3 Type) (@T4 Type) (ts1 (Seq @T3)) (t1 (Seq @T0)) (ss1 (Seq @T4)) (s1 (Seq @T1)) (r1 (Seq @T2)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) (Seq @T3) (Seq @T4) Bool) Bool
  (
  (($eor_str-replace-one-pre t1 s1 r1 ts1 ss1 (_ (= (str.len s1)) 1)) (eo::define ((_v0 (str.++ t1))) (eo::define ((_v1 (_ (_ (str.replace ($singleton_elim (eo::list_concat str.++ ts1 (_ _v0 ss1)))) s1) r1))) (_ (= (_ (_ (str.replace (eo::list_concat str.++ ts1 (_ _v0 (eo::list_concat str.++ ss1 (_ _v0 (eo::nil str.++ (eo::typeof ts1))))))) s1) r1)) (_ (str.++ _v1) (_ _v0 (eo::nil str.++ (eo::typeof _v1))))))))
  )
)
; program: $eovc_str-replace-one-pre
(program $eovc_str-replace-one-pre ((@T1 Type) (@T4 Type) (@T3 Type) (@T2 Type) (@T0 Type) (t1 (Seq @T0)) (r1 (Seq @T2)) (ts1 (Seq @T3)) (ss1 (Seq @T4)) (s1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T4) (Seq @T3) (Seq @T2) (Seq @T0)) Bool
  (
  (($eovc_str-replace-one-pre s1 ss1 ts1 r1 t1) (eo::define ((_v0 (_ (= (str.len s1)) 1))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-replace-one-pre t1 s1 r1 ts1 ss1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_str-replace-one-pre")
; program: $eor_str-replace-find-pre
(program $eor_str-replace-find-pre ((@T0 Type) (@T1 Type) (@T2 Type) (@T3 Type) (ts1 (Seq @T2)) (t1 (Seq @T0)) (r1 (Seq @T1)) (ss1 (Seq @T3)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) (Seq @T3)) Bool
  (
  (($eor_str-replace-find-pre t1 r1 ts1 ss1) (eo::define ((_v0 (str.++ t1))) (_ (= (_ (_ (str.replace (eo::list_concat str.++ ts1 (_ _v0 ss1))) t1) r1)) ($singleton_elim (_ (str.++ (_ (_ (str.replace ($singleton_elim (eo::list_concat str.++ ts1 (_ _v0 (eo::nil str.++ (eo::typeof ts1)))))) t1) r1)) ss1)))))
  )
)
; program: $eovc_str-replace-find-pre
(program $eovc_str-replace-find-pre ((@T3 Type) (@T2 Type) (@T1 Type) (@T0 Type) (t1 (Seq @T0)) (r1 (Seq @T1)) (ts1 (Seq @T2)) (ss1 (Seq @T3)))
  :signature ((Seq @T3) (Seq @T2) (Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-replace-find-pre ss1 ts1 r1 t1) ($eo_requires_false ($eo_model_sat ($eor_str-replace-find-pre t1 r1 ts1 ss1)) true))
  )
)
(echo "smt-meta $eovc_str-replace-find-pre")
; program: $eor_str-replace-all-no-contains
(program $eor_str-replace-all-no-contains ((@T0 Type) (@T1 Type) (@T2 Type) (s1 (Seq @T1)) (r1 (Seq @T2)) (t1 (Seq @T0)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) Bool) Bool
  (
  (($eor_str-replace-all-no-contains t1 s1 r1 (_ (= (_ (str.contains t1) s1)) false)) (_ (= (_ (_ (str.replace_all t1) s1) r1)) t1))
  )
)
; program: $eovc_str-replace-all-no-contains
(program $eovc_str-replace-all-no-contains ((@T1 Type) (@T0 Type) (@T2 Type) (r1 (Seq @T2)) (t1 (Seq @T0)) (s1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T0) (Seq @T2)) Bool
  (
  (($eovc_str-replace-all-no-contains s1 t1 r1) (eo::define ((_v0 (_ (= (_ (str.contains t1) s1)) false))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-replace-all-no-contains t1 s1 r1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_str-replace-all-no-contains")
; program: $eor_str-replace-re-none
(program $eor_str-replace-re-none ((@T0 Type) (@T1 Type) (r1 (Seq @T1)) (t1 (Seq @T0)))
  :signature ((Seq @T0) (Seq @T1)) Bool
  (
  (($eor_str-replace-re-none t1 r1) (_ (= (_ (_ (str.replace_re t1) re.none) r1)) t1))
  )
)
; program: $eovc_str-replace-re-none
(program $eovc_str-replace-re-none ((@T1 Type) (@T0 Type) (t1 (Seq @T0)) (r1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-replace-re-none r1 t1) ($eo_requires_false ($eo_model_sat ($eor_str-replace-re-none t1 r1)) true))
  )
)
(echo "smt-meta $eovc_str-replace-re-none")
; program: $eor_str-replace-re-all-none
(program $eor_str-replace-re-all-none ((@T0 Type) (@T1 Type) (r1 (Seq @T1)) (t1 (Seq @T0)))
  :signature ((Seq @T0) (Seq @T1)) Bool
  (
  (($eor_str-replace-re-all-none t1 r1) (_ (= (_ (_ (str.replace_re_all t1) re.none) r1)) t1))
  )
)
; program: $eovc_str-replace-re-all-none
(program $eovc_str-replace-re-all-none ((@T1 Type) (@T0 Type) (t1 (Seq @T0)) (r1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-replace-re-all-none r1 t1) ($eo_requires_false ($eo_model_sat ($eor_str-replace-re-all-none t1 r1)) true))
  )
)
(echo "smt-meta $eovc_str-replace-re-all-none")
; program: $eor_str-len-concat-rec
(program $eor_str-len-concat-rec ((@T0 Type) (@T1 Type) (@T2 Type) (s1 (Seq @T0)) (s2 (Seq @T1)) (s3 (Seq @T2)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2)) Bool
  (
  (($eor_str-len-concat-rec s1 s2 s3) (eo::define ((_v0 (_ (str.++ s2) s3))) (_ (= (str.len (_ (str.++ s1) _v0))) (_ (+ (str.len s1)) (_ (+ (str.len ($singleton_elim _v0))) 0)))))
  )
)
; program: $eovc_str-len-concat-rec
(program $eovc_str-len-concat-rec ((@T2 Type) (@T1 Type) (@T0 Type) (s1 (Seq @T0)) (s2 (Seq @T1)) (s3 (Seq @T2)))
  :signature ((Seq @T2) (Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-len-concat-rec s3 s2 s1) ($eo_requires_false ($eo_model_sat ($eor_str-len-concat-rec s1 s2 s3)) true))
  )
)
(echo "smt-meta $eovc_str-len-concat-rec")
; program: $eor_str-len-eq-zero-concat-rec
(program $eor_str-len-eq-zero-concat-rec ((@T1 Type) (@T2 Type) (@T0 Type) (s1 (Seq @T0)) (s2 (Seq @T1)) (s3 (Seq @T2)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) Type) Bool
  (
  (($eor_str-len-eq-zero-concat-rec s1 s2 s3 (Seq @T0)) (eo::define ((_v0 (_ (str.++ s2) s3))) (eo::define ((_v1 (Seq @T0))) (_ (= (_ (= (str.len (_ (str.++ s1) _v0))) 0)) (_ (and (_ (= s1) (eo::ite (eo::is_eq _v1 (Seq Char)) "" (_ seq.empty _v1)))) (_ (and (_ (= (str.len ($singleton_elim _v0))) 0)) true))))))
  )
)
; program: $eovc_str-len-eq-zero-concat-rec
(program $eovc_str-len-eq-zero-concat-rec ((@T2 Type) (@T1 Type) (@T0 Type) (s1 (Seq @T0)) (s2 (Seq @T1)) (s3 (Seq @T2)))
  :signature (Type (Seq @T2) (Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-len-eq-zero-concat-rec @T0 s3 s2 s1) ($eo_requires_false ($eo_model_sat ($eor_str-len-eq-zero-concat-rec s1 s2 s3 (Seq @T0))) true))
  )
)
(echo "smt-meta $eovc_str-len-eq-zero-concat-rec")
; program: $eor_str-len-eq-zero-base
(program $eor_str-len-eq-zero-base ((@T0 Type) (s1 (Seq @T0)))
  :signature ((Seq @T0) Type) Bool
  (
  (($eor_str-len-eq-zero-base s1 (Seq @T0)) (eo::define ((_v0 (Seq @T0))) (_ (= (_ (= (str.len s1)) 0)) (_ (= s1) (eo::ite (eo::is_eq _v0 (Seq Char)) "" (_ seq.empty _v0))))))
  )
)
; program: $eovc_str-len-eq-zero-base
(program $eovc_str-len-eq-zero-base ((@T0 Type) (s1 (Seq @T0)))
  :signature (Type (Seq @T0)) Bool
  (
  (($eovc_str-len-eq-zero-base @T0 s1) ($eo_requires_false ($eo_model_sat ($eor_str-len-eq-zero-base s1 (Seq @T0))) true))
  )
)
(echo "smt-meta $eovc_str-len-eq-zero-base")
; program: $eor_str-indexof-self
(program $eor_str-indexof-self ((@T0 Type) (t1 (Seq @T0)) (n1 Int))
  :signature ((Seq @T0) Int Type) Bool
  (
  (($eor_str-indexof-self t1 n1 (Seq @T0)) (eo::define ((_v0 (Seq @T0))) (eo::define ((_v1 (eo::ite (eo::is_eq _v0 (Seq Char)) "" (_ seq.empty _v0)))) (_ (= (_ (_ (str.indexof t1) t1) n1)) (_ (_ (str.indexof _v1) _v1) n1)))))
  )
)
; program: $eovc_str-indexof-self
(program $eovc_str-indexof-self ((@T0 Type) (t1 (Seq @T0)) (n1 Int))
  :signature (Type Int (Seq @T0)) Bool
  (
  (($eovc_str-indexof-self @T0 n1 t1) ($eo_requires_false ($eo_model_sat ($eor_str-indexof-self t1 n1 (Seq @T0))) true))
  )
)
(echo "smt-meta $eovc_str-indexof-self")
; program: $eor_str-indexof-no-contains
(program $eor_str-indexof-no-contains ((@T0 Type) (@T1 Type) (t1 (Seq @T0)) (s1 (Seq @T1)) (n1 Int))
  :signature ((Seq @T0) (Seq @T1) Int Bool) Bool
  (
  (($eor_str-indexof-no-contains t1 s1 n1 (_ (= (_ (str.contains (_ (_ (str.substr t1) n1) (str.len t1))) s1)) false)) (_ (= (_ (_ (str.indexof t1) s1) n1)) -1))
  )
)
; program: $eovc_str-indexof-no-contains
(program $eovc_str-indexof-no-contains ((@T1 Type) (@T0 Type) (n1 Int) (t1 (Seq @T0)) (s1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T0) Int) Bool
  (
  (($eovc_str-indexof-no-contains s1 t1 n1) (eo::define ((_v0 (_ (= (_ (str.contains (_ (_ (str.substr t1) n1) (str.len t1))) s1)) false))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-indexof-no-contains t1 s1 n1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_str-indexof-no-contains")
; program: $eor_str-indexof-oob
(program $eor_str-indexof-oob ((@T0 Type) (@T1 Type) (t1 (Seq @T0)) (s1 (Seq @T1)) (n1 Int))
  :signature ((Seq @T0) (Seq @T1) Int Bool) Bool
  (
  (($eor_str-indexof-oob t1 s1 n1 (_ (= (_ (> n1) (str.len t1))) true)) (_ (= (_ (_ (str.indexof t1) s1) n1)) -1))
  )
)
; program: $eovc_str-indexof-oob
(program $eovc_str-indexof-oob ((@T0 Type) (@T1 Type) (s1 (Seq @T1)) (n1 Int) (t1 (Seq @T0)))
  :signature ((Seq @T0) Int (Seq @T1)) Bool
  (
  (($eovc_str-indexof-oob t1 n1 s1) (eo::define ((_v0 (_ (= (_ (> n1) (str.len t1))) true))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-indexof-oob t1 s1 n1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_str-indexof-oob")
; program: $eor_str-indexof-oob2
(program $eor_str-indexof-oob2 ((@T0 Type) (@T1 Type) (t1 (Seq @T0)) (s1 (Seq @T1)) (n1 Int))
  :signature ((Seq @T0) (Seq @T1) Int Bool) Bool
  (
  (($eor_str-indexof-oob2 t1 s1 n1 (_ (= (_ (> 0) n1)) true)) (_ (= (_ (_ (str.indexof t1) s1) n1)) -1))
  )
)
; program: $eovc_str-indexof-oob2
(program $eovc_str-indexof-oob2 ((@T1 Type) (@T0 Type) (t1 (Seq @T0)) (s1 (Seq @T1)) (n1 Int))
  :signature (Int (Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-indexof-oob2 n1 s1 t1) (eo::define ((_v0 (_ (= (_ (> 0) n1)) true))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-indexof-oob2 t1 s1 n1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_str-indexof-oob2")
; program: $eor_str-indexof-contains-pre
(program $eor_str-indexof-contains-pre ((@T0 Type) (@T1 Type) (@T2 Type) (t2 (Seq @T1)) (t1 (Seq @T0)) (s1 (Seq @T2)) (n1 Int))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) Int Bool) Bool
  (
  (($eor_str-indexof-contains-pre t1 t2 s1 n1 (_ (= (_ (str.contains (_ (_ (str.substr t1) n1) (str.len t1))) s1)) true)) (_ (= (_ (_ (str.indexof (_ (str.++ t1) t2)) s1) n1)) (_ (_ (str.indexof t1) s1) n1)))
  )
)
; program: $eovc_str-indexof-contains-pre
(program $eovc_str-indexof-contains-pre ((@T2 Type) (@T0 Type) (@T1 Type) (t2 (Seq @T1)) (n1 Int) (t1 (Seq @T0)) (s1 (Seq @T2)))
  :signature ((Seq @T2) (Seq @T0) Int (Seq @T1)) Bool
  (
  (($eovc_str-indexof-contains-pre s1 t1 n1 t2) (eo::define ((_v0 (_ (= (_ (str.contains (_ (_ (str.substr t1) n1) (str.len t1))) s1)) true))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-indexof-contains-pre t1 t2 s1 n1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_str-indexof-contains-pre")
; program: $eor_str-indexof-find-emp
(program $eor_str-indexof-find-emp ((@T1 Type) (Any Type) ($ex_1 Any) (@T0 Type) (t1 (Seq @T0)) (emp1 (Seq @T1)) (n1 Int))
  :signature ((Seq @T0) (Seq @T1) Int Type Any Bool) Bool
  (
  (($eor_str-indexof-find-emp t1 emp1 n1 (Seq @T0) (_ (= emp1) $ex_1) (_ (= (_ (>= (str.len t1)) n1)) true)) (eo::define ((_v0 (Seq @T0))) (eo::requires $ex_1 (eo::ite (eo::is_eq _v0 (Seq Char)) "" (_ seq.empty _v0)) (_ (= (_ (_ (str.indexof t1) emp1) n1)) n1))))
  )
)
; program: $eovc_str-indexof-find-emp
(program $eovc_str-indexof-find-emp ((@T1 Type) (emp1 (Seq @T1)) (@T0 Type) (t1 (Seq @T0)) (n1 Int))
  :signature (Int (Seq @T0) Type (Seq @T1)) Bool
  (
  (($eovc_str-indexof-find-emp n1 t1 @T0 emp1) (eo::define ((_v0 (_ (= (_ (>= (str.len t1)) n1)) true))) (eo::define ((_v1 (Seq @T0))) (eo::define ((_v2 (_ (= emp1) (eo::ite (eo::is_eq _v1 (Seq Char)) "" (_ seq.empty _v1))))) ($eo_requires_true ($eo_model_sat _v2) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-indexof-find-emp t1 emp1 n1 _v1 _v2 _v0)) true)))))))
  )
)
(echo "smt-meta $eovc_str-indexof-find-emp")
; program: $eor_str-indexof-eq-irr
(program $eor_str-indexof-eq-irr ((@T0 Type) (@T1 Type) (@T2 Type) (t1 (Seq @T0)) (r1 (Seq @T2)) (s1 (Seq @T1)) (n1 Int))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) Int Bool) Bool
  (
  (($eor_str-indexof-eq-irr t1 s1 r1 n1 (_ (= (_ (_ (str.substr t1) n1) (str.len t1))) (_ (_ (str.substr r1) n1) (str.len r1)))) (_ (= (_ (= (_ (_ (str.indexof t1) s1) n1)) (_ (_ (str.indexof r1) s1) n1))) true))
  )
)
; program: $eovc_str-indexof-eq-irr
(program $eovc_str-indexof-eq-irr ((@T2 Type) (@T0 Type) (@T1 Type) (s1 (Seq @T1)) (t1 (Seq @T0)) (n1 Int) (r1 (Seq @T2)))
  :signature ((Seq @T2) Int (Seq @T0) (Seq @T1)) Bool
  (
  (($eovc_str-indexof-eq-irr r1 n1 t1 s1) (eo::define ((_v0 (_ (= (_ (_ (str.substr t1) n1) (str.len t1))) (_ (_ (str.substr r1) n1) (str.len r1))))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-indexof-eq-irr t1 s1 r1 n1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_str-indexof-eq-irr")
; program: $eor_str-indexof-re-none
(program $eor_str-indexof-re-none ((t1 (Seq Char)) (n1 Int))
  :signature ((Seq Char) Int) Bool
  (
  (($eor_str-indexof-re-none t1 n1) (_ (= (_ (_ (str.indexof_re t1) re.none) n1)) -1))
  )
)
; program: $eovc_str-indexof-re-none
(program $eovc_str-indexof-re-none ((t1 (Seq Char)) (n1 Int))
  :signature (Int (Seq Char)) Bool
  (
  (($eovc_str-indexof-re-none n1 t1) ($eo_requires_false ($eo_model_sat ($eor_str-indexof-re-none t1 n1)) true))
  )
)
(echo "smt-meta $eovc_str-indexof-re-none")
; program: $eor_str-indexof-re-emp-re
(program $eor_str-indexof-re-emp-re ((t1 (Seq Char)) (r1 RegLan) (n1 Int))
  :signature ((Seq Char) RegLan Int Bool Bool) Bool
  (
  (($eor_str-indexof-re-emp-re t1 r1 n1 (_ (= (_ (str.in_re "") r1)) true) (_ (= (_ (>= (str.len t1)) n1)) true)) (_ (= (_ (_ (str.indexof_re t1) r1) n1)) n1))
  )
)
; program: $eovc_str-indexof-re-emp-re
(program $eovc_str-indexof-re-emp-re ((r1 RegLan) (t1 (Seq Char)) (n1 Int))
  :signature (Int (Seq Char) RegLan) Bool
  (
  (($eovc_str-indexof-re-emp-re n1 t1 r1) (eo::define ((_v0 (_ (= (_ (>= (str.len t1)) n1)) true))) (eo::define ((_v1 (_ (= (_ (str.in_re "") r1)) true))) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-indexof-re-emp-re t1 r1 n1 _v1 _v0)) true))))))
  )
)
(echo "smt-meta $eovc_str-indexof-re-emp-re")
; program: $eor_str-to-lower-concat
(program $eor_str-to-lower-concat ((s1 (Seq Char)) (s2 (Seq Char)) (s3 (Seq Char)))
  :signature ((Seq Char) (Seq Char) (Seq Char)) Bool
  (
  (($eor_str-to-lower-concat s1 s2 s3) (eo::define ((_v0 (_ (str.++ s2) s3))) (_ (= (str.to_lower (_ (str.++ s1) _v0))) (_ (str.++ (str.to_lower s1)) (_ (str.++ (str.to_lower ($singleton_elim _v0))) "")))))
  )
)
; program: $eovc_str-to-lower-concat
(program $eovc_str-to-lower-concat ((s1 (Seq Char)) (s2 (Seq Char)) (s3 (Seq Char)))
  :signature ((Seq Char) (Seq Char) (Seq Char)) Bool
  (
  (($eovc_str-to-lower-concat s3 s2 s1) ($eo_requires_false ($eo_model_sat ($eor_str-to-lower-concat s1 s2 s3)) true))
  )
)
(echo "smt-meta $eovc_str-to-lower-concat")
; program: $eor_str-to-upper-concat
(program $eor_str-to-upper-concat ((s1 (Seq Char)) (s2 (Seq Char)) (s3 (Seq Char)))
  :signature ((Seq Char) (Seq Char) (Seq Char)) Bool
  (
  (($eor_str-to-upper-concat s1 s2 s3) (eo::define ((_v0 (_ (str.++ s2) s3))) (_ (= (str.to_upper (_ (str.++ s1) _v0))) (_ (str.++ (str.to_upper s1)) (_ (str.++ (str.to_upper ($singleton_elim _v0))) "")))))
  )
)
; program: $eovc_str-to-upper-concat
(program $eovc_str-to-upper-concat ((s1 (Seq Char)) (s2 (Seq Char)) (s3 (Seq Char)))
  :signature ((Seq Char) (Seq Char) (Seq Char)) Bool
  (
  (($eovc_str-to-upper-concat s3 s2 s1) ($eo_requires_false ($eo_model_sat ($eor_str-to-upper-concat s1 s2 s3)) true))
  )
)
(echo "smt-meta $eovc_str-to-upper-concat")
; program: $eor_str-to-lower-upper
(program $eor_str-to-lower-upper ((s1 (Seq Char)))
  :signature ((Seq Char)) Bool
  (
  (($eor_str-to-lower-upper s1) (_ (= (str.to_lower (str.to_upper s1))) (str.to_lower s1)))
  )
)
; program: $eovc_str-to-lower-upper
(program $eovc_str-to-lower-upper ((s1 (Seq Char)))
  :signature ((Seq Char)) Bool
  (
  (($eovc_str-to-lower-upper s1) ($eo_requires_false ($eo_model_sat ($eor_str-to-lower-upper s1)) true))
  )
)
(echo "smt-meta $eovc_str-to-lower-upper")
; program: $eor_str-to-upper-lower
(program $eor_str-to-upper-lower ((s1 (Seq Char)))
  :signature ((Seq Char)) Bool
  (
  (($eor_str-to-upper-lower s1) (_ (= (str.to_upper (str.to_lower s1))) (str.to_upper s1)))
  )
)
; program: $eovc_str-to-upper-lower
(program $eovc_str-to-upper-lower ((s1 (Seq Char)))
  :signature ((Seq Char)) Bool
  (
  (($eovc_str-to-upper-lower s1) ($eo_requires_false ($eo_model_sat ($eor_str-to-upper-lower s1)) true))
  )
)
(echo "smt-meta $eovc_str-to-upper-lower")
; program: $eor_str-to-lower-len
(program $eor_str-to-lower-len ((s1 (Seq Char)))
  :signature ((Seq Char)) Bool
  (
  (($eor_str-to-lower-len s1) (_ (= (str.len (str.to_lower s1))) (str.len s1)))
  )
)
; program: $eovc_str-to-lower-len
(program $eovc_str-to-lower-len ((s1 (Seq Char)))
  :signature ((Seq Char)) Bool
  (
  (($eovc_str-to-lower-len s1) ($eo_requires_false ($eo_model_sat ($eor_str-to-lower-len s1)) true))
  )
)
(echo "smt-meta $eovc_str-to-lower-len")
; program: $eor_str-to-upper-len
(program $eor_str-to-upper-len ((s1 (Seq Char)))
  :signature ((Seq Char)) Bool
  (
  (($eor_str-to-upper-len s1) (_ (= (str.len (str.to_upper s1))) (str.len s1)))
  )
)
; program: $eovc_str-to-upper-len
(program $eovc_str-to-upper-len ((s1 (Seq Char)))
  :signature ((Seq Char)) Bool
  (
  (($eovc_str-to-upper-len s1) ($eo_requires_false ($eo_model_sat ($eor_str-to-upper-len s1)) true))
  )
)
(echo "smt-meta $eovc_str-to-upper-len")
; program: $eor_str-to-lower-from-int
(program $eor_str-to-lower-from-int ((n1 Int))
  :signature (Int) Bool
  (
  (($eor_str-to-lower-from-int n1) (eo::define ((_v0 (str.from_int n1))) (_ (= (str.to_lower _v0)) _v0)))
  )
)
; program: $eovc_str-to-lower-from-int
(program $eovc_str-to-lower-from-int ((n1 Int))
  :signature (Int) Bool
  (
  (($eovc_str-to-lower-from-int n1) ($eo_requires_false ($eo_model_sat ($eor_str-to-lower-from-int n1)) true))
  )
)
(echo "smt-meta $eovc_str-to-lower-from-int")
; program: $eor_str-to-upper-from-int
(program $eor_str-to-upper-from-int ((n1 Int))
  :signature (Int) Bool
  (
  (($eor_str-to-upper-from-int n1) (eo::define ((_v0 (str.from_int n1))) (_ (= (str.to_upper _v0)) _v0)))
  )
)
; program: $eovc_str-to-upper-from-int
(program $eovc_str-to-upper-from-int ((n1 Int))
  :signature (Int) Bool
  (
  (($eovc_str-to-upper-from-int n1) ($eo_requires_false ($eo_model_sat ($eor_str-to-upper-from-int n1)) true))
  )
)
(echo "smt-meta $eovc_str-to-upper-from-int")
; program: $eor_str-to-int-concat-neg-one
(program $eor_str-to-int-concat-neg-one ((s1 (Seq Char)) (s2 (Seq Char)) (s3 (Seq Char)))
  :signature ((Seq Char) (Seq Char) (Seq Char) Bool) Bool
  (
  (($eor_str-to-int-concat-neg-one s1 s2 s3 (_ (= (str.to_int s2)) -1)) (_ (= (str.to_int (eo::list_concat str.++ s1 (_ (str.++ s2) s3)))) -1))
  )
)
; program: $eovc_str-to-int-concat-neg-one
(program $eovc_str-to-int-concat-neg-one ((s1 (Seq Char)) (s3 (Seq Char)) (s2 (Seq Char)))
  :signature ((Seq Char) (Seq Char) (Seq Char)) Bool
  (
  (($eovc_str-to-int-concat-neg-one s2 s3 s1) (eo::define ((_v0 (_ (= (str.to_int s2)) -1))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-to-int-concat-neg-one s1 s2 s3 _v0)) true))))
  )
)
(echo "smt-meta $eovc_str-to-int-concat-neg-one")
; program: $eor_str-leq-empty
(program $eor_str-leq-empty ((s1 (Seq Char)))
  :signature ((Seq Char)) Bool
  (
  (($eor_str-leq-empty s1) (_ (= (_ (str.<= "") s1)) true))
  )
)
; program: $eovc_str-leq-empty
(program $eovc_str-leq-empty ((s1 (Seq Char)))
  :signature ((Seq Char)) Bool
  (
  (($eovc_str-leq-empty s1) ($eo_requires_false ($eo_model_sat ($eor_str-leq-empty s1)) true))
  )
)
(echo "smt-meta $eovc_str-leq-empty")
; program: $eor_str-leq-empty-eq
(program $eor_str-leq-empty-eq ((s1 (Seq Char)))
  :signature ((Seq Char)) Bool
  (
  (($eor_str-leq-empty-eq s1) (_ (= (_ (str.<= s1) "")) (_ (= s1) "")))
  )
)
; program: $eovc_str-leq-empty-eq
(program $eovc_str-leq-empty-eq ((s1 (Seq Char)))
  :signature ((Seq Char)) Bool
  (
  (($eovc_str-leq-empty-eq s1) ($eo_requires_false ($eo_model_sat ($eor_str-leq-empty-eq s1)) true))
  )
)
(echo "smt-meta $eovc_str-leq-empty-eq")
; program: $eor_str-leq-concat-false
(program $eor_str-leq-concat-false ((t1 (Seq Char)) (t2 (Seq Char)) (s1 (Seq Char)) (s2 (Seq Char)) (s3 (Seq Char)))
  :signature ((Seq Char) (Seq Char) (Seq Char) (Seq Char) (Seq Char) Bool Bool) Bool
  (
  (($eor_str-leq-concat-false s1 t1 s2 t2 s3 (_ (= (str.len t1)) (str.len s2)) (_ (= (_ (str.<= t1) s2)) false)) (_ (= (_ (str.<= (eo::list_concat str.++ s1 (_ (str.++ t1) t2))) (eo::list_concat str.++ s1 (_ (str.++ s2) s3)))) false))
  )
)
; program: $eovc_str-leq-concat-false
(program $eovc_str-leq-concat-false ((s1 (Seq Char)) (t2 (Seq Char)) (s3 (Seq Char)) (t1 (Seq Char)) (s2 (Seq Char)))
  :signature ((Seq Char) (Seq Char) (Seq Char) (Seq Char) (Seq Char)) Bool
  (
  (($eovc_str-leq-concat-false s2 t1 s3 t2 s1) (eo::define ((_v0 (_ (= (_ (str.<= t1) s2)) false))) (eo::define ((_v1 (_ (= (str.len t1)) (str.len s2)))) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-leq-concat-false s1 t1 s2 t2 s3 _v1 _v0)) true))))))
  )
)
(echo "smt-meta $eovc_str-leq-concat-false")
; program: $eor_str-leq-concat-true
(program $eor_str-leq-concat-true ((t1 (Seq Char)) (t2 (Seq Char)) (s1 (Seq Char)) (s2 (Seq Char)) (s3 (Seq Char)))
  :signature ((Seq Char) (Seq Char) (Seq Char) (Seq Char) (Seq Char) Bool Bool Bool) Bool
  (
  (($eor_str-leq-concat-true s1 t1 s2 t2 s3 (_ (= (str.len t1)) (str.len s2)) (_ (= (_ (= t1) s2)) false) (_ (= (_ (str.<= t1) s2)) true)) (_ (= (_ (str.<= (eo::list_concat str.++ s1 (_ (str.++ t1) t2))) (eo::list_concat str.++ s1 (_ (str.++ s2) s3)))) true))
  )
)
; program: $eovc_str-leq-concat-true
(program $eovc_str-leq-concat-true ((s1 (Seq Char)) (t2 (Seq Char)) (s3 (Seq Char)) (t1 (Seq Char)) (s2 (Seq Char)))
  :signature ((Seq Char) (Seq Char) (Seq Char) (Seq Char) (Seq Char)) Bool
  (
  (($eovc_str-leq-concat-true s2 t1 s3 t2 s1) (eo::define ((_v0 (_ (= (_ (str.<= t1) s2)) true))) (eo::define ((_v1 (_ (= (_ (= t1) s2)) false))) (eo::define ((_v2 (_ (= (str.len t1)) (str.len s2)))) ($eo_requires_true ($eo_model_sat _v2) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-leq-concat-true s1 t1 s2 t2 s3 _v2 _v1 _v0)) true))))))))
  )
)
(echo "smt-meta $eovc_str-leq-concat-true")
; program: $eor_str-leq-concat-base-1
(program $eor_str-leq-concat-base-1 ((t2 (Seq Char)) (t1 (Seq Char)) (s1 (Seq Char)))
  :signature ((Seq Char) (Seq Char) (Seq Char) Bool Bool) Bool
  (
  (($eor_str-leq-concat-base-1 t1 t2 s1 (_ (= (str.len t1)) (str.len s1)) (_ (= (_ (= t1) s1)) false)) (_ (= (_ (str.<= (_ (str.++ t1) t2)) s1)) (_ (str.<= t1) s1)))
  )
)
; program: $eovc_str-leq-concat-base-1
(program $eovc_str-leq-concat-base-1 ((t2 (Seq Char)) (t1 (Seq Char)) (s1 (Seq Char)))
  :signature ((Seq Char) (Seq Char) (Seq Char)) Bool
  (
  (($eovc_str-leq-concat-base-1 s1 t1 t2) (eo::define ((_v0 (_ (= (_ (= t1) s1)) false))) (eo::define ((_v1 (_ (= (str.len t1)) (str.len s1)))) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-leq-concat-base-1 t1 t2 s1 _v1 _v0)) true))))))
  )
)
(echo "smt-meta $eovc_str-leq-concat-base-1")
; program: $eor_str-leq-concat-base-2
(program $eor_str-leq-concat-base-2 ((s2 (Seq Char)) (t1 (Seq Char)) (s1 (Seq Char)))
  :signature ((Seq Char) (Seq Char) (Seq Char) Bool Bool) Bool
  (
  (($eor_str-leq-concat-base-2 t1 s1 s2 (_ (= (str.len t1)) (str.len s1)) (_ (= (_ (= t1) s1)) false)) (eo::define ((_v0 (str.<= t1))) (_ (= (_ _v0 (_ (str.++ s1) s2))) (_ _v0 s1))))
  )
)
; program: $eovc_str-leq-concat-base-2
(program $eovc_str-leq-concat-base-2 ((s2 (Seq Char)) (t1 (Seq Char)) (s1 (Seq Char)))
  :signature ((Seq Char) (Seq Char) (Seq Char)) Bool
  (
  (($eovc_str-leq-concat-base-2 s1 t1 s2) (eo::define ((_v0 (_ (= (_ (= t1) s1)) false))) (eo::define ((_v1 (_ (= (str.len t1)) (str.len s1)))) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-leq-concat-base-2 t1 s1 s2 _v1 _v0)) true))))))
  )
)
(echo "smt-meta $eovc_str-leq-concat-base-2")
; program: $eor_str-lt-elim
(program $eor_str-lt-elim ((s1 (Seq Char)) (t1 (Seq Char)))
  :signature ((Seq Char) (Seq Char)) Bool
  (
  (($eor_str-lt-elim s1 t1) (_ (= (_ (str.< s1) t1)) (_ (and (not (_ (= s1) t1))) (_ (and (_ (str.<= s1) t1)) true))))
  )
)
; program: $eovc_str-lt-elim
(program $eovc_str-lt-elim ((s1 (Seq Char)) (t1 (Seq Char)))
  :signature ((Seq Char) (Seq Char)) Bool
  (
  (($eovc_str-lt-elim t1 s1) ($eo_requires_false ($eo_model_sat ($eor_str-lt-elim s1 t1)) true))
  )
)
(echo "smt-meta $eovc_str-lt-elim")
; program: $eor_str-from-int-no-ctn-nondigit
(program $eor_str-from-int-no-ctn-nondigit ((n1 Int) (s1 (Seq Char)))
  :signature (Int (Seq Char) Bool Bool) Bool
  (
  (($eor_str-from-int-no-ctn-nondigit n1 s1 (_ (= (_ (= s1) "")) false) (_ (= (str.to_int s1)) -1)) (_ (= (_ (str.contains (str.from_int n1)) s1)) false))
  )
)
; program: $eovc_str-from-int-no-ctn-nondigit
(program $eovc_str-from-int-no-ctn-nondigit ((n1 Int) (s1 (Seq Char)))
  :signature ((Seq Char) Int) Bool
  (
  (($eovc_str-from-int-no-ctn-nondigit s1 n1) (eo::define ((_v0 (_ (= (str.to_int s1)) -1))) (eo::define ((_v1 (_ (= (_ (= s1) "")) false))) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-from-int-no-ctn-nondigit n1 s1 _v1 _v0)) true))))))
  )
)
(echo "smt-meta $eovc_str-from-int-no-ctn-nondigit")
; program: $eor_str-substr-ctn-contra
(program $eor_str-substr-ctn-contra ((@T0 Type) (@T1 Type) (t1 (Seq @T0)) (n1 Int) (m1 Int) (s1 (Seq @T1)))
  :signature ((Seq @T0) (Seq @T1) Int Int Bool) Bool
  (
  (($eor_str-substr-ctn-contra t1 s1 n1 m1 (_ (= (_ (str.contains t1) s1)) false)) (_ (= (_ (str.contains (_ (_ (str.substr t1) n1) m1)) s1)) false))
  )
)
; program: $eovc_str-substr-ctn-contra
(program $eovc_str-substr-ctn-contra ((@T1 Type) (@T0 Type) (n1 Int) (m1 Int) (t1 (Seq @T0)) (s1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T0) Int Int) Bool
  (
  (($eovc_str-substr-ctn-contra s1 t1 m1 n1) (eo::define ((_v0 (_ (= (_ (str.contains t1) s1)) false))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-substr-ctn-contra t1 s1 n1 m1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_str-substr-ctn-contra")
; program: $eor_str-substr-ctn
(program $eor_str-substr-ctn ((@T0 Type) (s1 (Seq @T0)) (n1 Int) (m1 Int))
  :signature ((Seq @T0) Int Int) Bool
  (
  (($eor_str-substr-ctn s1 n1 m1) (_ (= (_ (str.contains s1) (_ (_ (str.substr s1) n1) m1))) true))
  )
)
; program: $eovc_str-substr-ctn
(program $eovc_str-substr-ctn ((@T0 Type) (s1 (Seq @T0)) (n1 Int) (m1 Int))
  :signature (Int Int (Seq @T0)) Bool
  (
  (($eovc_str-substr-ctn m1 n1 s1) ($eo_requires_false ($eo_model_sat ($eor_str-substr-ctn s1 n1 m1)) true))
  )
)
(echo "smt-meta $eovc_str-substr-ctn")
; program: $eor_str-replace-dual-ctn
(program $eor_str-replace-dual-ctn ((@T0 Type) (@T1 Type) (@T2 Type) (@T3 Type) (s1 (Seq @T0)) (t1 (Seq @T1)) (r1 (Seq @T2)) (u1 (Seq @T3)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) (Seq @T3) Bool Bool) Bool
  (
  (($eor_str-replace-dual-ctn s1 t1 r1 u1 (_ (= (_ (str.contains s1) u1)) true) (_ (= (_ (str.contains r1) u1)) true)) (_ (= (_ (str.contains (_ (_ (str.replace s1) t1) r1)) u1)) true))
  )
)
; program: $eovc_str-replace-dual-ctn
(program $eovc_str-replace-dual-ctn ((@T3 Type) (@T2 Type) (@T0 Type) (@T1 Type) (t1 (Seq @T1)) (s1 (Seq @T0)) (r1 (Seq @T2)) (u1 (Seq @T3)))
  :signature ((Seq @T3) (Seq @T2) (Seq @T0) (Seq @T1)) Bool
  (
  (($eovc_str-replace-dual-ctn u1 r1 s1 t1) (eo::define ((_v0 (_ (= (_ (str.contains r1) u1)) true))) (eo::define ((_v1 (_ (= (_ (str.contains s1) u1)) true))) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-replace-dual-ctn s1 t1 r1 u1 _v1 _v0)) true))))))
  )
)
(echo "smt-meta $eovc_str-replace-dual-ctn")
; program: $eor_str-replace-dual-ctn-false
(program $eor_str-replace-dual-ctn-false ((@T0 Type) (@T1 Type) (@T2 Type) (@T3 Type) (s1 (Seq @T0)) (t1 (Seq @T1)) (r1 (Seq @T2)) (u1 (Seq @T3)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) (Seq @T3) Bool Bool) Bool
  (
  ((eo::define ((_v0 (str.contains s1))) ($eor_str-replace-dual-ctn-false s1 t1 r1 u1 (_ (= (_ _v0 t1)) false) (_ (= (_ _v0 u1)) false))) (_ (= (_ (str.contains s1) (_ (_ (str.replace t1) r1) u1))) false))
  )
)
; program: $eovc_str-replace-dual-ctn-false
(program $eovc_str-replace-dual-ctn-false ((@T3 Type) (@T0 Type) (@T1 Type) (@T2 Type) (r1 (Seq @T2)) (t1 (Seq @T1)) (s1 (Seq @T0)) (u1 (Seq @T3)))
  :signature ((Seq @T3) (Seq @T0) (Seq @T1) (Seq @T2)) Bool
  (
  (($eovc_str-replace-dual-ctn-false u1 s1 t1 r1) (eo::define ((_v0 (str.contains s1))) (eo::define ((_v1 (_ (= (_ _v0 u1)) false))) (eo::define ((_v2 (_ (= (_ _v0 t1)) false))) ($eo_requires_true ($eo_model_sat _v2) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_false ($eo_model_sat ($eor_str-replace-dual-ctn-false s1 t1 r1 u1 _v2 _v1)) true)))))))
  )
)
(echo "smt-meta $eovc_str-replace-dual-ctn-false")
; program: $eor_str-replace-self-ctn-simp
(program $eor_str-replace-self-ctn-simp ((@T0 Type) (@T1 Type) (s1 (Seq @T0)) (t1 (Seq @T1)))
  :signature ((Seq @T0) (Seq @T1)) Bool
  (
  (($eor_str-replace-self-ctn-simp s1 t1) (eo::define ((_v0 (str.contains s1))) (_ (= (_ _v0 (_ (_ (str.replace t1) s1) t1))) (_ _v0 t1))))
  )
)
; program: $eovc_str-replace-self-ctn-simp
(program $eovc_str-replace-self-ctn-simp ((@T1 Type) (@T0 Type) (s1 (Seq @T0)) (t1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-replace-self-ctn-simp t1 s1) ($eo_requires_false ($eo_model_sat ($eor_str-replace-self-ctn-simp s1 t1)) true))
  )
)
(echo "smt-meta $eovc_str-replace-self-ctn-simp")
; program: $eor_str-replace-emp-ctn-src
(program $eor_str-replace-emp-ctn-src ((@T1 Type) (@T2 Type) (Any Type) ($ex_1 Any) (@T0 Type) (emp1 (Seq @T2)) (s1 (Seq @T0)) (t1 (Seq @T1)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) Type Any) Bool
  (
  (($eor_str-replace-emp-ctn-src s1 t1 emp1 (Seq @T0) (_ (= emp1) $ex_1)) (eo::define ((_v0 (_ (_ (str.replace emp1) s1) t1))) (eo::define ((_v1 (Seq @T0))) (eo::requires $ex_1 (eo::ite (eo::is_eq _v1 (Seq Char)) "" (_ seq.empty _v1)) (_ (= (_ (str.contains s1) _v0)) (_ (= emp1) _v0))))))
  )
)
; program: $eovc_str-replace-emp-ctn-src
(program $eovc_str-replace-emp-ctn-src ((@T2 Type) (@T1 Type) (@T0 Type) (s1 (Seq @T0)) (t1 (Seq @T1)) (emp1 (Seq @T2)))
  :signature (Type (Seq @T2) (Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-replace-emp-ctn-src @T0 emp1 t1 s1) (eo::define ((_v0 (Seq @T0))) (eo::define ((_v1 (_ (= emp1) (eo::ite (eo::is_eq _v0 (Seq Char)) "" (_ seq.empty _v0))))) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_false ($eo_model_sat ($eor_str-replace-emp-ctn-src s1 t1 emp1 _v0 _v1)) true)))))
  )
)
(echo "smt-meta $eovc_str-replace-emp-ctn-src")
; program: $eor_str-substr-char-start-eq-len
(program $eor_str-substr-char-start-eq-len ((@T0 Type) (x1 (Seq @T0)) (n1 Int))
  :signature ((Seq @T0) Int Type Bool) Bool
  (
  (($eor_str-substr-char-start-eq-len x1 n1 (Seq @T0) (_ (= (_ (>= 1) (str.len x1))) true)) (eo::define ((_v0 (Seq @T0))) (_ (= (_ (_ (str.substr x1) n1) n1)) (eo::ite (eo::is_eq _v0 (Seq Char)) "" (_ seq.empty _v0)))))
  )
)
; program: $eovc_str-substr-char-start-eq-len
(program $eovc_str-substr-char-start-eq-len ((n1 Int) (@T0 Type) (x1 (Seq @T0)))
  :signature ((Seq @T0) Type Int) Bool
  (
  (($eovc_str-substr-char-start-eq-len x1 @T0 n1) (eo::define ((_v0 (_ (= (_ (>= 1) (str.len x1))) true))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-substr-char-start-eq-len x1 n1 (Seq @T0) _v0)) true))))
  )
)
(echo "smt-meta $eovc_str-substr-char-start-eq-len")
; program: $eor_str-contains-repl-char
(program $eor_str-contains-repl-char ((@T0 Type) (@T1 Type) (@T2 Type) (@T3 Type) (x1 (Seq @T0)) (y1 (Seq @T1)) (z1 (Seq @T2)) (w1 (Seq @T3)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) (Seq @T3) Bool Bool) Bool
  (
  (($eor_str-contains-repl-char x1 y1 z1 w1 (_ (= (str.len w1)) 1) (_ (= (_ (str.contains w1) y1)) false)) (eo::define ((_v0 (str.contains x1))) (_ (= (_ (str.contains (_ (_ (str.replace x1) y1) z1)) w1)) (_ (or (_ _v0 w1)) (_ (or (_ (and (_ _v0 y1)) (_ (and (_ (str.contains z1) w1)) true))) false)))))
  )
)
; program: $eovc_str-contains-repl-char
(program $eovc_str-contains-repl-char ((@T1 Type) (@T3 Type) (@T2 Type) (@T0 Type) (x1 (Seq @T0)) (z1 (Seq @T2)) (w1 (Seq @T3)) (y1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T3) (Seq @T2) (Seq @T0)) Bool
  (
  (($eovc_str-contains-repl-char y1 w1 z1 x1) (eo::define ((_v0 (_ (= (_ (str.contains w1) y1)) false))) (eo::define ((_v1 (_ (= (str.len w1)) 1))) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-contains-repl-char x1 y1 z1 w1 _v1 _v0)) true))))))
  )
)
(echo "smt-meta $eovc_str-contains-repl-char")
; program: $eor_str-contains-repl-self-tgt-char
(program $eor_str-contains-repl-self-tgt-char ((@T0 Type) (@T1 Type) (@T2 Type) (y1 (Seq @T1)) (x1 (Seq @T0)) (w1 (Seq @T2)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) Bool) Bool
  (
  (($eor_str-contains-repl-self-tgt-char x1 y1 w1 (_ (= (str.len w1)) 1)) (_ (= (_ (str.contains (_ (_ (str.replace x1) y1) x1)) w1)) (_ (str.contains x1) w1)))
  )
)
; program: $eovc_str-contains-repl-self-tgt-char
(program $eovc_str-contains-repl-self-tgt-char ((@T2 Type) (@T1 Type) (@T0 Type) (x1 (Seq @T0)) (y1 (Seq @T1)) (w1 (Seq @T2)))
  :signature ((Seq @T2) (Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-contains-repl-self-tgt-char w1 y1 x1) (eo::define ((_v0 (_ (= (str.len w1)) 1))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-contains-repl-self-tgt-char x1 y1 w1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_str-contains-repl-self-tgt-char")
; program: $eor_str-contains-repl-self
(program $eor_str-contains-repl-self ((@T0 Type) (@T1 Type) (x1 (Seq @T0)) (y1 (Seq @T1)))
  :signature ((Seq @T0) (Seq @T1)) Bool
  (
  (($eor_str-contains-repl-self x1 y1) (_ (= (_ (str.contains (_ (_ (str.replace x1) y1) x1)) y1)) (_ (str.contains x1) y1)))
  )
)
; program: $eovc_str-contains-repl-self
(program $eovc_str-contains-repl-self ((@T1 Type) (@T0 Type) (x1 (Seq @T0)) (y1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-contains-repl-self y1 x1) ($eo_requires_false ($eo_model_sat ($eor_str-contains-repl-self x1 y1)) true))
  )
)
(echo "smt-meta $eovc_str-contains-repl-self")
; program: $eor_str-contains-repl-tgt
(program $eor_str-contains-repl-tgt ((@T0 Type) (@T1 Type) (@T2 Type) (y1 (Seq @T1)) (x1 (Seq @T0)) (z1 (Seq @T2)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2)) Bool
  (
  (($eor_str-contains-repl-tgt x1 y1 z1) (eo::define ((_v0 (str.contains x1))) (_ (= (_ (str.contains (_ (_ (str.replace x1) y1) z1)) z1)) (_ (or (_ _v0 y1)) (_ (or (_ _v0 z1)) false)))))
  )
)
; program: $eovc_str-contains-repl-tgt
(program $eovc_str-contains-repl-tgt ((@T2 Type) (@T1 Type) (@T0 Type) (x1 (Seq @T0)) (y1 (Seq @T1)) (z1 (Seq @T2)))
  :signature ((Seq @T2) (Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-contains-repl-tgt z1 y1 x1) ($eo_requires_false ($eo_model_sat ($eor_str-contains-repl-tgt x1 y1 z1)) true))
  )
)
(echo "smt-meta $eovc_str-contains-repl-tgt")
; program: $eor_str-repl-repl-len-id
(program $eor_str-repl-repl-len-id ((@T0 Type) (@T1 Type) (y1 (Seq @T1)) (x1 (Seq @T0)))
  :signature ((Seq @T0) (Seq @T1) Bool) Bool
  (
  (($eor_str-repl-repl-len-id x1 y1 (_ (= (_ (>= (str.len y1)) (str.len x1))) true)) (_ (= (_ (_ (str.replace x1) y1) x1)) x1))
  )
)
; program: $eovc_str-repl-repl-len-id
(program $eovc_str-repl-repl-len-id ((@T0 Type) (@T1 Type) (y1 (Seq @T1)) (x1 (Seq @T0)))
  :signature ((Seq @T0) (Seq @T1)) Bool
  (
  (($eovc_str-repl-repl-len-id x1 y1) (eo::define ((_v0 (_ (= (_ (>= (str.len y1)) (str.len x1))) true))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-repl-repl-len-id x1 y1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_str-repl-repl-len-id")
; program: $eor_str-repl-repl-src-tgt-no-ctn
(program $eor_str-repl-repl-src-tgt-no-ctn ((@T0 Type) (@T1 Type) (@T2 Type) (@T3 Type) (y1 (Seq @T1)) (x1 (Seq @T0)) (w1 (Seq @T3)) (z1 (Seq @T2)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) (Seq @T3) Bool) Bool
  (
  (($eor_str-repl-repl-src-tgt-no-ctn x1 y1 z1 w1 (_ (= (_ (str.contains z1) w1)) false)) (eo::define ((_v0 (_ (str.replace x1) w1))) (_ (= (_ _v0 (_ (_ (str.replace z1) x1) y1))) (_ _v0 z1))))
  )
)
; program: $eovc_str-repl-repl-src-tgt-no-ctn
(program $eovc_str-repl-repl-src-tgt-no-ctn ((@T3 Type) (@T2 Type) (@T1 Type) (@T0 Type) (x1 (Seq @T0)) (y1 (Seq @T1)) (z1 (Seq @T2)) (w1 (Seq @T3)))
  :signature ((Seq @T3) (Seq @T2) (Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-repl-repl-src-tgt-no-ctn w1 z1 y1 x1) (eo::define ((_v0 (_ (= (_ (str.contains z1) w1)) false))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-repl-repl-src-tgt-no-ctn x1 y1 z1 w1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_str-repl-repl-src-tgt-no-ctn")
; program: $eor_str-repl-repl-tgt-self
(program $eor_str-repl-repl-tgt-self ((@T0 Type) (@T1 Type) (y1 (Seq @T1)) (x1 (Seq @T0)))
  :signature ((Seq @T0) (Seq @T1)) Bool
  (
  (($eor_str-repl-repl-tgt-self x1 y1) (_ (= (_ (_ (str.replace x1) y1) (_ (_ (str.replace y1) x1) y1))) x1))
  )
)
; program: $eovc_str-repl-repl-tgt-self
(program $eovc_str-repl-repl-tgt-self ((@T1 Type) (@T0 Type) (x1 (Seq @T0)) (y1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-repl-repl-tgt-self y1 x1) ($eo_requires_false ($eo_model_sat ($eor_str-repl-repl-tgt-self x1 y1)) true))
  )
)
(echo "smt-meta $eovc_str-repl-repl-tgt-self")
; program: $eor_str-repl-repl-tgt-no-ctn
(program $eor_str-repl-repl-tgt-no-ctn ((@T0 Type) (@T1 Type) (@T2 Type) (@T3 Type) (y1 (Seq @T1)) (z1 (Seq @T2)) (w1 (Seq @T3)) (x1 (Seq @T0)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) (Seq @T3) Bool) Bool
  (
  (($eor_str-repl-repl-tgt-no-ctn x1 y1 z1 w1 (_ (= (_ (str.contains x1) z1)) false)) (_ (= (_ (_ (str.replace x1) y1) (_ (_ (str.replace y1) z1) w1))) x1))
  )
)
; program: $eovc_str-repl-repl-tgt-no-ctn
(program $eovc_str-repl-repl-tgt-no-ctn ((@T2 Type) (@T0 Type) (@T3 Type) (@T1 Type) (y1 (Seq @T1)) (w1 (Seq @T3)) (x1 (Seq @T0)) (z1 (Seq @T2)))
  :signature ((Seq @T2) (Seq @T0) (Seq @T3) (Seq @T1)) Bool
  (
  (($eovc_str-repl-repl-tgt-no-ctn z1 x1 w1 y1) (eo::define ((_v0 (_ (= (_ (str.contains x1) z1)) false))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-repl-repl-tgt-no-ctn x1 y1 z1 w1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_str-repl-repl-tgt-no-ctn")
; program: $eor_str-repl-repl-src-self
(program $eor_str-repl-repl-src-self ((@T0 Type) (@T1 Type) (@T2 Type) (x1 (Seq @T0)) (y1 (Seq @T1)) (z1 (Seq @T2)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2)) Bool
  (
  (($eor_str-repl-repl-src-self x1 y1 z1) (eo::define ((_v0 (str.replace x1))) (_ (= (_ (_ _v0 (_ (_ (str.replace y1) x1) y1)) z1)) (_ (_ _v0 y1) z1))))
  )
)
; program: $eovc_str-repl-repl-src-self
(program $eovc_str-repl-repl-src-self ((@T2 Type) (@T1 Type) (@T0 Type) (x1 (Seq @T0)) (y1 (Seq @T1)) (z1 (Seq @T2)))
  :signature ((Seq @T2) (Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-repl-repl-src-self z1 y1 x1) ($eo_requires_false ($eo_model_sat ($eor_str-repl-repl-src-self x1 y1 z1)) true))
  )
)
(echo "smt-meta $eovc_str-repl-repl-src-self")
; program: $eor_str-repl-repl-src-inv-no-ctn1
(program $eor_str-repl-repl-src-inv-no-ctn1 ((@T0 Type) (@T1 Type) (@T2 Type) (z1 (Seq @T2)) (x1 (Seq @T0)) (y1 (Seq @T1)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) Bool) Bool
  (
  (($eor_str-repl-repl-src-inv-no-ctn1 x1 y1 z1 (_ (= (_ (str.contains y1) z1)) false)) (eo::define ((_v0 (str.replace x1))) (_ (= (_ (_ _v0 (_ (_ (str.replace y1) x1) z1)) y1)) (_ (_ _v0 y1) y1))))
  )
)
; program: $eovc_str-repl-repl-src-inv-no-ctn1
(program $eovc_str-repl-repl-src-inv-no-ctn1 ((@T2 Type) (@T1 Type) (@T0 Type) (x1 (Seq @T0)) (y1 (Seq @T1)) (z1 (Seq @T2)))
  :signature ((Seq @T2) (Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-repl-repl-src-inv-no-ctn1 z1 y1 x1) (eo::define ((_v0 (_ (= (_ (str.contains y1) z1)) false))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-repl-repl-src-inv-no-ctn1 x1 y1 z1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_str-repl-repl-src-inv-no-ctn1")
; program: $eor_str-repl-repl-src-inv-no-ctn2
(program $eor_str-repl-repl-src-inv-no-ctn2 ((@T0 Type) (@T1 Type) (@T2 Type) (z1 (Seq @T2)) (y1 (Seq @T1)) (x1 (Seq @T0)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) Bool) Bool
  (
  (($eor_str-repl-repl-src-inv-no-ctn2 x1 y1 z1 (_ (= (_ (str.contains y1) z1)) false)) (eo::define ((_v0 (str.replace x1))) (_ (= (_ (_ _v0 (_ (_ (str.replace y1) x1) z1)) x1)) (_ (_ _v0 y1) x1))))
  )
)
; program: $eovc_str-repl-repl-src-inv-no-ctn2
(program $eovc_str-repl-repl-src-inv-no-ctn2 ((@T2 Type) (@T1 Type) (@T0 Type) (x1 (Seq @T0)) (y1 (Seq @T1)) (z1 (Seq @T2)))
  :signature ((Seq @T2) (Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-repl-repl-src-inv-no-ctn2 z1 y1 x1) (eo::define ((_v0 (_ (= (_ (str.contains y1) z1)) false))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-repl-repl-src-inv-no-ctn2 x1 y1 z1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_str-repl-repl-src-inv-no-ctn2")
; program: $eor_str-repl-repl-src-inv-no-ctn3
(program $eor_str-repl-repl-src-inv-no-ctn3 ((@T0 Type) (@T1 Type) (@T2 Type) (@T3 Type) (@T4 Type) (z1 (Seq @T2)) (w1 (Seq @T3)) (x1 (Seq @T0)) (y1 (Seq @T1)) (u1 (Seq @T4)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) (Seq @T3) (Seq @T4) Bool Bool) Bool
  (
  ((eo::define ((_v0 (str.contains x1))) ($eor_str-repl-repl-src-inv-no-ctn3 x1 y1 z1 w1 u1 (_ (= (_ _v0 z1)) false) (_ (= (_ _v0 w1)) false))) (eo::define ((_v0 (str.replace x1))) (_ (= (_ (_ _v0 (_ (_ (str.replace y1) z1) w1)) u1)) (_ (_ _v0 y1) u1))))
  )
)
; program: $eovc_str-repl-repl-src-inv-no-ctn3
(program $eovc_str-repl-repl-src-inv-no-ctn3 ((@T3 Type) (@T0 Type) (@T2 Type) (@T4 Type) (@T1 Type) (y1 (Seq @T1)) (u1 (Seq @T4)) (z1 (Seq @T2)) (x1 (Seq @T0)) (w1 (Seq @T3)))
  :signature ((Seq @T3) (Seq @T0) (Seq @T2) (Seq @T4) (Seq @T1)) Bool
  (
  (($eovc_str-repl-repl-src-inv-no-ctn3 w1 x1 z1 u1 y1) (eo::define ((_v0 (str.contains x1))) (eo::define ((_v1 (_ (= (_ _v0 w1)) false))) (eo::define ((_v2 (_ (= (_ _v0 z1)) false))) ($eo_requires_true ($eo_model_sat _v2) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_false ($eo_model_sat ($eor_str-repl-repl-src-inv-no-ctn3 x1 y1 z1 w1 u1 _v2 _v1)) true)))))))
  )
)
(echo "smt-meta $eovc_str-repl-repl-src-inv-no-ctn3")
; program: $eor_str-repl-repl-dual-self
(program $eor_str-repl-repl-dual-self ((@T0 Type) (@T1 Type) (y1 (Seq @T1)) (x1 (Seq @T0)))
  :signature ((Seq @T0) (Seq @T1)) Bool
  (
  (($eor_str-repl-repl-dual-self x1 y1) (eo::define ((_v0 (str.replace x1))) (_ (= (_ (_ _v0 (_ (_ _v0 y1) x1)) x1)) x1)))
  )
)
; program: $eovc_str-repl-repl-dual-self
(program $eovc_str-repl-repl-dual-self ((@T1 Type) (@T0 Type) (x1 (Seq @T0)) (y1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-repl-repl-dual-self y1 x1) ($eo_requires_false ($eo_model_sat ($eor_str-repl-repl-dual-self x1 y1)) true))
  )
)
(echo "smt-meta $eovc_str-repl-repl-dual-self")
; program: $eor_str-repl-repl-dual-ite1
(program $eor_str-repl-repl-dual-ite1 ((@T0 Type) (@T1 Type) (@T2 Type) (@T3 Type) (z1 (Seq @T2)) (y1 (Seq @T1)) (x1 (Seq @T0)) (w1 (Seq @T3)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) (Seq @T3) Bool) Bool
  (
  (($eor_str-repl-repl-dual-ite1 x1 y1 z1 w1 (_ (= (_ (str.contains x1) z1)) false)) (eo::define ((_v0 (str.replace x1))) (_ (= (_ (_ _v0 (_ (_ _v0 y1) z1)) w1)) (_ (_ (ite (_ (str.contains x1) y1)) x1) w1))))
  )
)
; program: $eovc_str-repl-repl-dual-ite1
(program $eovc_str-repl-repl-dual-ite1 ((@T2 Type) (@T0 Type) (@T3 Type) (@T1 Type) (y1 (Seq @T1)) (w1 (Seq @T3)) (x1 (Seq @T0)) (z1 (Seq @T2)))
  :signature ((Seq @T2) (Seq @T0) (Seq @T3) (Seq @T1)) Bool
  (
  (($eovc_str-repl-repl-dual-ite1 z1 x1 w1 y1) (eo::define ((_v0 (_ (= (_ (str.contains x1) z1)) false))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-repl-repl-dual-ite1 x1 y1 z1 w1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_str-repl-repl-dual-ite1")
; program: $eor_str-repl-repl-dual-ite2
(program $eor_str-repl-repl-dual-ite2 ((@T0 Type) (@T1 Type) (@T2 Type) (@T3 Type) (z1 (Seq @T2)) (y1 (Seq @T1)) (x1 (Seq @T0)) (w1 (Seq @T3)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) (Seq @T3) Bool Bool) Bool
  (
  (($eor_str-repl-repl-dual-ite2 x1 y1 z1 w1 (_ (= (_ (str.contains y1) z1)) false) (_ (= (_ (str.contains z1) y1)) false)) (eo::define ((_v0 (str.replace x1))) (_ (= (_ (_ _v0 (_ (_ _v0 y1) z1)) w1)) (_ (_ (ite (_ (str.contains x1) y1)) x1) w1))))
  )
)
; program: $eovc_str-repl-repl-dual-ite2
(program $eovc_str-repl-repl-dual-ite2 ((@T1 Type) (@T2 Type) (@T3 Type) (@T0 Type) (x1 (Seq @T0)) (w1 (Seq @T3)) (z1 (Seq @T2)) (y1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T2) (Seq @T3) (Seq @T0)) Bool
  (
  (($eovc_str-repl-repl-dual-ite2 y1 z1 w1 x1) (eo::define ((_v0 (_ (= (_ (str.contains z1) y1)) false))) (eo::define ((_v1 (_ (= (_ (str.contains y1) z1)) false))) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-repl-repl-dual-ite2 x1 y1 z1 w1 _v1 _v0)) true))))))
  )
)
(echo "smt-meta $eovc_str-repl-repl-dual-ite2")
; program: $eor_str-repl-repl-lookahead-id-simp
(program $eor_str-repl-repl-lookahead-id-simp ((@T0 Type) (@T1 Type) (@T2 Type) (w1 (Seq @T2)) (y1 (Seq @T0)) (z1 (Seq @T1)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) Bool Bool) Bool
  (
  (($eor_str-repl-repl-lookahead-id-simp y1 z1 w1 (_ (= (_ (= w1) z1)) false) (_ (= (_ (>= (str.len w1)) (str.len z1))) true)) (eo::define ((_v0 (_ (str.replace y1) w1))) (_ (= (_ (_ (str.replace (_ _v0 y1)) y1) z1)) (_ (_ (str.replace (_ _v0 z1)) y1) z1))))
  )
)
; program: $eovc_str-repl-repl-lookahead-id-simp
(program $eovc_str-repl-repl-lookahead-id-simp ((@T1 Type) (@T2 Type) (@T0 Type) (y1 (Seq @T0)) (w1 (Seq @T2)) (z1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T2) (Seq @T0)) Bool
  (
  (($eovc_str-repl-repl-lookahead-id-simp z1 w1 y1) (eo::define ((_v0 (_ (= (_ (>= (str.len w1)) (str.len z1))) true))) (eo::define ((_v1 (_ (= (_ (= w1) z1)) false))) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-repl-repl-lookahead-id-simp y1 z1 w1 _v1 _v0)) true))))))
  )
)
(echo "smt-meta $eovc_str-repl-repl-lookahead-id-simp")
; program: $eor_re-all-elim
(program $eor_re-all-elim (($etmp Bool))
  :signature (Bool) Bool
  (
  (($eor_re-all-elim $etmp) (_ (= re.all) (re.* re.allchar)))
  )
)
; program: $eovc_re-all-elim
(program $eovc_re-all-elim (($etmp Bool))
  :signature (Bool) Bool
  (
  (($eovc_re-all-elim $etmp) ($eo_requires_false ($eo_model_sat ($eor_re-all-elim $etmp)) true))
  )
)
(echo "smt-meta $eovc_re-all-elim")
; program: $eor_re-opt-elim
(program $eor_re-opt-elim ((x1 RegLan))
  :signature (RegLan) Bool
  (
  (($eor_re-opt-elim x1) (_ (= (re.opt x1)) (_ (re.union (str.to_re "")) (_ (re.union x1) re.none))))
  )
)
; program: $eovc_re-opt-elim
(program $eovc_re-opt-elim ((x1 RegLan))
  :signature (RegLan) Bool
  (
  (($eovc_re-opt-elim x1) ($eo_requires_false ($eo_model_sat ($eor_re-opt-elim x1)) true))
  )
)
(echo "smt-meta $eovc_re-opt-elim")
; program: $eor_re-diff-elim
(program $eor_re-diff-elim ((x1 RegLan) (y1 RegLan))
  :signature (RegLan RegLan) Bool
  (
  (($eor_re-diff-elim x1 y1) (_ (= (_ (re.diff x1) y1)) (_ (re.inter x1) (_ (re.inter (re.comp y1)) re.all))))
  )
)
; program: $eovc_re-diff-elim
(program $eovc_re-diff-elim ((x1 RegLan) (y1 RegLan))
  :signature (RegLan RegLan) Bool
  (
  (($eovc_re-diff-elim y1 x1) ($eo_requires_false ($eo_model_sat ($eor_re-diff-elim x1 y1)) true))
  )
)
(echo "smt-meta $eovc_re-diff-elim")
; program: $eor_re-plus-elim
(program $eor_re-plus-elim ((x1 RegLan))
  :signature (RegLan) Bool
  (
  (($eor_re-plus-elim x1) (_ (= (re.+ x1)) (_ (re.++ x1) (_ (re.++ (re.* x1)) (str.to_re "")))))
  )
)
; program: $eovc_re-plus-elim
(program $eovc_re-plus-elim ((x1 RegLan))
  :signature (RegLan) Bool
  (
  (($eovc_re-plus-elim x1) ($eo_requires_false ($eo_model_sat ($eor_re-plus-elim x1)) true))
  )
)
(echo "smt-meta $eovc_re-plus-elim")
; program: $eor_re-concat-star-swap
(program $eor_re-concat-star-swap ((xs1 RegLan) (r1 RegLan) (ys1 RegLan))
  :signature (RegLan RegLan RegLan) Bool
  (
  (($eor_re-concat-star-swap xs1 r1 ys1) (eo::define ((_v0 (re.++ (re.* r1)))) (eo::define ((_v1 (re.++ r1))) (_ (= (eo::list_concat re.++ xs1 (_ _v0 (_ _v1 ys1)))) (eo::list_concat re.++ xs1 (_ _v1 (_ _v0 ys1)))))))
  )
)
; program: $eovc_re-concat-star-swap
(program $eovc_re-concat-star-swap ((xs1 RegLan) (r1 RegLan) (ys1 RegLan))
  :signature (RegLan RegLan RegLan) Bool
  (
  (($eovc_re-concat-star-swap ys1 r1 xs1) ($eo_requires_false ($eo_model_sat ($eor_re-concat-star-swap xs1 r1 ys1)) true))
  )
)
(echo "smt-meta $eovc_re-concat-star-swap")
; program: $eor_re-concat-star-repeat
(program $eor_re-concat-star-repeat ((xs1 RegLan) (r1 RegLan) (ys1 RegLan))
  :signature (RegLan RegLan RegLan) Bool
  (
  (($eor_re-concat-star-repeat xs1 r1 ys1) (eo::define ((_v0 (re.++ (re.* r1)))) (eo::define ((_v1 (_ _v0 ys1))) (_ (= (eo::list_concat re.++ xs1 (_ _v0 _v1))) ($singleton_elim (eo::list_concat re.++ xs1 _v1))))))
  )
)
; program: $eovc_re-concat-star-repeat
(program $eovc_re-concat-star-repeat ((xs1 RegLan) (r1 RegLan) (ys1 RegLan))
  :signature (RegLan RegLan RegLan) Bool
  (
  (($eovc_re-concat-star-repeat ys1 r1 xs1) ($eo_requires_false ($eo_model_sat ($eor_re-concat-star-repeat xs1 r1 ys1)) true))
  )
)
(echo "smt-meta $eovc_re-concat-star-repeat")
; program: $eor_re-concat-star-subsume1
(program $eor_re-concat-star-subsume1 ((r1 RegLan) (xs1 RegLan) (ys1 RegLan))
  :signature (RegLan RegLan RegLan) Bool
  (
  (($eor_re-concat-star-subsume1 xs1 r1 ys1) (eo::define ((_v0 (_ (re.++ (re.* re.allchar)) ys1))) (_ (= (eo::list_concat re.++ xs1 (_ (re.++ (re.* r1)) _v0))) ($singleton_elim (eo::list_concat re.++ xs1 _v0)))))
  )
)
; program: $eovc_re-concat-star-subsume1
(program $eovc_re-concat-star-subsume1 ((xs1 RegLan) (r1 RegLan) (ys1 RegLan))
  :signature (RegLan RegLan RegLan) Bool
  (
  (($eovc_re-concat-star-subsume1 ys1 r1 xs1) ($eo_requires_false ($eo_model_sat ($eor_re-concat-star-subsume1 xs1 r1 ys1)) true))
  )
)
(echo "smt-meta $eovc_re-concat-star-subsume1")
; program: $eor_re-concat-star-subsume2
(program $eor_re-concat-star-subsume2 ((r1 RegLan) (xs1 RegLan) (ys1 RegLan))
  :signature (RegLan RegLan RegLan) Bool
  (
  (($eor_re-concat-star-subsume2 xs1 r1 ys1) (eo::define ((_v0 (re.++ (re.* re.allchar)))) (_ (= (eo::list_concat re.++ xs1 (_ _v0 (_ (re.++ (re.* r1)) ys1)))) ($singleton_elim (eo::list_concat re.++ xs1 (_ _v0 ys1))))))
  )
)
; program: $eovc_re-concat-star-subsume2
(program $eovc_re-concat-star-subsume2 ((xs1 RegLan) (r1 RegLan) (ys1 RegLan))
  :signature (RegLan RegLan RegLan) Bool
  (
  (($eovc_re-concat-star-subsume2 ys1 r1 xs1) ($eo_requires_false ($eo_model_sat ($eor_re-concat-star-subsume2 xs1 r1 ys1)) true))
  )
)
(echo "smt-meta $eovc_re-concat-star-subsume2")
; program: $eor_re-concat-merge
(program $eor_re-concat-merge ((xs1 RegLan) (s1 (Seq Char)) (t1 (Seq Char)) (ys1 RegLan))
  :signature (RegLan (Seq Char) (Seq Char) RegLan) Bool
  (
  (($eor_re-concat-merge xs1 s1 t1 ys1) (_ (= (eo::list_concat re.++ xs1 (_ (re.++ (str.to_re s1)) (_ (re.++ (str.to_re t1)) ys1)))) ($singleton_elim (eo::list_concat re.++ xs1 (_ (re.++ (str.to_re (_ (str.++ s1) (_ (str.++ t1) "")))) ys1)))))
  )
)
; program: $eovc_re-concat-merge
(program $eovc_re-concat-merge ((xs1 RegLan) (s1 (Seq Char)) (t1 (Seq Char)) (ys1 RegLan))
  :signature (RegLan (Seq Char) (Seq Char) RegLan) Bool
  (
  (($eovc_re-concat-merge ys1 t1 s1 xs1) ($eo_requires_false ($eo_model_sat ($eor_re-concat-merge xs1 s1 t1 ys1)) true))
  )
)
(echo "smt-meta $eovc_re-concat-merge")
; program: $eor_re-union-all
(program $eor_re-union-all ((xs1 RegLan) (ys1 RegLan))
  :signature (RegLan RegLan) Bool
  (
  (($eor_re-union-all xs1 ys1) (eo::define ((_v0 (re.* re.allchar))) (_ (= (eo::list_concat re.union xs1 (_ (re.union _v0) ys1))) _v0)))
  )
)
; program: $eovc_re-union-all
(program $eovc_re-union-all ((xs1 RegLan) (ys1 RegLan))
  :signature (RegLan RegLan) Bool
  (
  (($eovc_re-union-all ys1 xs1) ($eo_requires_false ($eo_model_sat ($eor_re-union-all xs1 ys1)) true))
  )
)
(echo "smt-meta $eovc_re-union-all")
; program: $eor_re-union-const-elim
(program $eor_re-union-const-elim ((s1 (Seq Char)) (r1 RegLan))
  :signature (RegLan (Seq Char) Bool) Bool
  (
  (($eor_re-union-const-elim r1 s1 (_ (= (_ (str.in_re s1) r1)) true)) (_ (= (_ (re.union (str.to_re s1)) (_ (re.union r1) re.none))) r1))
  )
)
; program: $eovc_re-union-const-elim
(program $eovc_re-union-const-elim ((s1 (Seq Char)) (r1 RegLan))
  :signature (RegLan (Seq Char)) Bool
  (
  (($eovc_re-union-const-elim r1 s1) (eo::define ((_v0 (_ (= (_ (str.in_re s1) r1)) true))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_re-union-const-elim r1 s1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_re-union-const-elim")
; program: $eor_re-inter-all
(program $eor_re-inter-all ((xs1 RegLan) (ys1 RegLan))
  :signature (RegLan RegLan) Bool
  (
  (($eor_re-inter-all xs1 ys1) (_ (= (eo::list_concat re.inter xs1 (_ (re.inter (re.* re.allchar)) ys1))) ($singleton_elim (eo::list_concat re.inter xs1 ys1))))
  )
)
; program: $eovc_re-inter-all
(program $eovc_re-inter-all ((xs1 RegLan) (ys1 RegLan))
  :signature (RegLan RegLan) Bool
  (
  (($eovc_re-inter-all ys1 xs1) ($eo_requires_false ($eo_model_sat ($eor_re-inter-all xs1 ys1)) true))
  )
)
(echo "smt-meta $eovc_re-inter-all")
; program: $eor_re-star-none
(program $eor_re-star-none (($etmp Bool))
  :signature (Bool) Bool
  (
  (($eor_re-star-none $etmp) (_ (= (re.* re.none)) (str.to_re "")))
  )
)
; program: $eovc_re-star-none
(program $eovc_re-star-none (($etmp Bool))
  :signature (Bool) Bool
  (
  (($eovc_re-star-none $etmp) ($eo_requires_false ($eo_model_sat ($eor_re-star-none $etmp)) true))
  )
)
(echo "smt-meta $eovc_re-star-none")
; program: $eor_re-star-emp
(program $eor_re-star-emp (($etmp Bool))
  :signature (Bool) Bool
  (
  (($eor_re-star-emp $etmp) (eo::define ((_v0 (str.to_re ""))) (_ (= (re.* _v0)) _v0)))
  )
)
; program: $eovc_re-star-emp
(program $eovc_re-star-emp (($etmp Bool))
  :signature (Bool) Bool
  (
  (($eovc_re-star-emp $etmp) ($eo_requires_false ($eo_model_sat ($eor_re-star-emp $etmp)) true))
  )
)
(echo "smt-meta $eovc_re-star-emp")
; program: $eor_re-star-star
(program $eor_re-star-star ((x1 RegLan))
  :signature (RegLan) Bool
  (
  (($eor_re-star-star x1) (eo::define ((_v0 (re.* x1))) (_ (= (re.* _v0)) _v0)))
  )
)
; program: $eovc_re-star-star
(program $eovc_re-star-star ((x1 RegLan))
  :signature (RegLan) Bool
  (
  (($eovc_re-star-star x1) ($eo_requires_false ($eo_model_sat ($eor_re-star-star x1)) true))
  )
)
(echo "smt-meta $eovc_re-star-star")
; program: $eor_re-star-union-drop-emp
(program $eor_re-star-union-drop-emp ((x1 RegLan) (y1 RegLan))
  :signature (RegLan RegLan) Bool
  (
  (($eor_re-star-union-drop-emp x1 y1) (_ (= (re.* (eo::list_concat re.union x1 (_ (re.union (str.to_re "")) y1)))) (re.* ($singleton_elim (eo::list_concat re.union x1 y1)))))
  )
)
; program: $eovc_re-star-union-drop-emp
(program $eovc_re-star-union-drop-emp ((x1 RegLan) (y1 RegLan))
  :signature (RegLan RegLan) Bool
  (
  (($eovc_re-star-union-drop-emp y1 x1) ($eo_requires_false ($eo_model_sat ($eor_re-star-union-drop-emp x1 y1)) true))
  )
)
(echo "smt-meta $eovc_re-star-union-drop-emp")
; program: $eor_re-loop-neg
(program $eor_re-loop-neg ((n1 Int) (m1 Int) (r1 RegLan))
  :signature (Int Int RegLan Bool) Bool
  (
  (($eor_re-loop-neg n1 m1 r1 (_ (= (_ (> n1) m1)) true)) (_ (= (_ (_ (re.loop n1) m1) r1)) re.none))
  )
)
; program: $eovc_re-loop-neg
(program $eovc_re-loop-neg ((r1 RegLan) (n1 Int) (m1 Int))
  :signature (Int Int RegLan) Bool
  (
  (($eovc_re-loop-neg m1 n1 r1) (eo::define ((_v0 (_ (= (_ (> n1) m1)) true))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_re-loop-neg n1 m1 r1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_re-loop-neg")
; program: $eor_re-inter-cstring
(program $eor_re-inter-cstring ((Any Type) ($ex_1 Any) (xs1 RegLan) (ys1 RegLan) (s1 (Seq Char)))
  :signature (RegLan RegLan (Seq Char) Any) Bool
  (
  (($eor_re-inter-cstring xs1 ys1 s1 (_ (= (_ (str.in_re s1) $ex_1)) true)) (eo::define ((_v0 (str.to_re s1))) (eo::requires $ex_1 ($singleton_elim (eo::list_concat re.inter xs1 ys1)) (_ (= (eo::list_concat re.inter xs1 (_ (re.inter _v0) ys1))) _v0))))
  )
)
; program: $eovc_re-inter-cstring
(program $eovc_re-inter-cstring ((s1 (Seq Char)) (xs1 RegLan) (ys1 RegLan))
  :signature (RegLan RegLan (Seq Char)) Bool
  (
  (($eovc_re-inter-cstring ys1 xs1 s1) (eo::define ((_v0 (_ (= (_ (str.in_re s1) ($singleton_elim (eo::list_concat re.inter xs1 ys1)))) true))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_re-inter-cstring xs1 ys1 s1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_re-inter-cstring")
; program: $eor_re-inter-cstring-neg
(program $eor_re-inter-cstring-neg ((Any Type) ($ex_1 Any) (xs1 RegLan) (s1 (Seq Char)) (ys1 RegLan))
  :signature (RegLan RegLan (Seq Char) Any) Bool
  (
  (($eor_re-inter-cstring-neg xs1 ys1 s1 (_ (= (_ (str.in_re s1) $ex_1)) false)) (eo::requires $ex_1 ($singleton_elim (eo::list_concat re.inter xs1 ys1)) (_ (= (eo::list_concat re.inter xs1 (_ (re.inter (str.to_re s1)) ys1))) re.none)))
  )
)
; program: $eovc_re-inter-cstring-neg
(program $eovc_re-inter-cstring-neg ((s1 (Seq Char)) (xs1 RegLan) (ys1 RegLan))
  :signature (RegLan RegLan (Seq Char)) Bool
  (
  (($eovc_re-inter-cstring-neg ys1 xs1 s1) (eo::define ((_v0 (_ (= (_ (str.in_re s1) ($singleton_elim (eo::list_concat re.inter xs1 ys1)))) false))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_re-inter-cstring-neg xs1 ys1 s1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_re-inter-cstring-neg")
; program: $eor_str-substr-len-include
(program $eor_str-substr-len-include ((@T0 Type) (@T1 Type) (s2 (Seq @T1)) (s1 (Seq @T0)) (n1 Int) (m1 Int))
  :signature ((Seq @T0) (Seq @T1) Int Int Bool) Bool
  (
  (($eor_str-substr-len-include s1 s2 n1 m1 (_ (= (_ (>= (str.len s1)) (_ (+ n1) (_ (+ m1) 0)))) true)) (_ (= (_ (_ (str.substr (_ (str.++ s1) s2)) n1) m1)) (_ (_ (str.substr s1) n1) m1)))
  )
)
; program: $eovc_str-substr-len-include
(program $eovc_str-substr-len-include ((@T0 Type) (@T1 Type) (s2 (Seq @T1)) (s1 (Seq @T0)) (n1 Int) (m1 Int))
  :signature (Int Int (Seq @T0) (Seq @T1)) Bool
  (
  (($eovc_str-substr-len-include m1 n1 s1 s2) (eo::define ((_v0 (_ (= (_ (>= (str.len s1)) (_ (+ n1) (_ (+ m1) 0)))) true))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-substr-len-include s1 s2 n1 m1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_str-substr-len-include")
; program: $eor_str-substr-len-include-pre
(program $eor_str-substr-len-include-pre ((@T0 Type) (@T1 Type) (@T2 Type) (s2 (Seq @T1)) (s3 (Seq @T2)) (n1 Int) (s1 (Seq @T0)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) Int Bool) Bool
  (
  (($eor_str-substr-len-include-pre s1 s2 s3 n1 (_ (= (_ (>= n1) (str.len s1))) true)) (eo::define ((_v0 (_ (str.++ s2) s3))) (eo::define ((_v1 (str.++ s1))) (_ (= (_ (_ (str.substr (_ _v1 _v0)) 0) n1)) (_ _v1 (_ (str.++ (_ (_ (str.substr ($singleton_elim _v0)) 0) (_ (- n1) (str.len s1)))) (eo::nil str.++ (eo::typeof s1))))))))
  )
)
; program: $eovc_str-substr-len-include-pre
(program $eovc_str-substr-len-include-pre ((@T0 Type) (@T2 Type) (@T1 Type) (s2 (Seq @T1)) (s3 (Seq @T2)) (n1 Int) (s1 (Seq @T0)))
  :signature ((Seq @T0) Int (Seq @T2) (Seq @T1)) Bool
  (
  (($eovc_str-substr-len-include-pre s1 n1 s3 s2) (eo::define ((_v0 (_ (= (_ (>= n1) (str.len s1))) true))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-substr-len-include-pre s1 s2 s3 n1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_str-substr-len-include-pre")
; program: $eor_str-substr-len-norm
(program $eor_str-substr-len-norm ((@T0 Type) (m1 Int) (n1 Int) (s1 (Seq @T0)))
  :signature ((Seq @T0) Int Int Bool) Bool
  (
  (($eor_str-substr-len-norm s1 n1 m1 (_ (= (_ (>= m1) (str.len s1))) true)) (eo::define ((_v0 (_ (str.substr s1) n1))) (_ (= (_ _v0 m1)) (_ _v0 (str.len s1)))))
  )
)
; program: $eovc_str-substr-len-norm
(program $eovc_str-substr-len-norm ((@T0 Type) (n1 Int) (m1 Int) (s1 (Seq @T0)))
  :signature ((Seq @T0) Int Int) Bool
  (
  (($eovc_str-substr-len-norm s1 m1 n1) (eo::define ((_v0 (_ (= (_ (>= m1) (str.len s1))) true))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-substr-len-norm s1 n1 m1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_str-substr-len-norm")
; program: $eor_seq-len-rev
(program $eor_seq-len-rev ((@T0 Type) (x1 (Seq @T0)))
  :signature ((Seq @T0)) Bool
  (
  (($eor_seq-len-rev x1) (_ (= (str.len (str.rev x1))) (str.len x1)))
  )
)
; program: $eovc_seq-len-rev
(program $eovc_seq-len-rev ((@T0 Type) (x1 (Seq @T0)))
  :signature ((Seq @T0)) Bool
  (
  (($eovc_seq-len-rev x1) ($eo_requires_false ($eo_model_sat ($eor_seq-len-rev x1)) true))
  )
)
(echo "smt-meta $eovc_seq-len-rev")
; program: $eor_seq-rev-rev
(program $eor_seq-rev-rev ((@T0 Type) (x1 (Seq @T0)))
  :signature ((Seq @T0)) Bool
  (
  (($eor_seq-rev-rev x1) (_ (= (str.rev (str.rev x1))) x1))
  )
)
; program: $eovc_seq-rev-rev
(program $eovc_seq-rev-rev ((@T0 Type) (x1 (Seq @T0)))
  :signature ((Seq @T0)) Bool
  (
  (($eovc_seq-rev-rev x1) ($eo_requires_false ($eo_model_sat ($eor_seq-rev-rev x1)) true))
  )
)
(echo "smt-meta $eovc_seq-rev-rev")
; program: $eor_seq-rev-concat
(program $eor_seq-rev-concat ((@T0 Type) (@T1 Type) (@T2 Type) (x1 (Seq @T0)) (y1 (Seq @T1)) (z1 (Seq @T2)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2)) Bool
  (
  (($eor_seq-rev-concat x1 y1 z1) (eo::define ((_v0 (str.rev z1))) (eo::define ((_v1 (str.++ x1))) (_ (= (str.rev (_ _v1 (eo::list_concat str.++ y1 (_ (str.++ z1) (eo::nil str.++ (eo::typeof x1))))))) (_ (str.++ _v0) (_ (str.++ (str.rev ($singleton_elim (_ _v1 y1)))) (eo::nil str.++ (eo::typeof _v0))))))))
  )
)
; program: $eovc_seq-rev-concat
(program $eovc_seq-rev-concat ((@T2 Type) (@T1 Type) (@T0 Type) (x1 (Seq @T0)) (y1 (Seq @T1)) (z1 (Seq @T2)))
  :signature ((Seq @T2) (Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_seq-rev-concat z1 y1 x1) ($eo_requires_false ($eo_model_sat ($eor_seq-rev-concat x1 y1 z1)) true))
  )
)
(echo "smt-meta $eovc_seq-rev-concat")
; program: $eor_str-eq-repl-self-emp
(program $eor_str-eq-repl-self-emp ((@T1 Type) (@T2 Type) (Any Type) ($ex_1 Any) (@T0 Type) (y1 (Seq @T1)) (x1 (Seq @T0)) (emp1 (Seq @T2)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) Type Any) Bool
  (
  (($eor_str-eq-repl-self-emp x1 y1 emp1 (Seq @T0) (_ (= emp1) $ex_1)) (eo::define ((_v0 (Seq @T0))) (eo::requires $ex_1 (eo::ite (eo::is_eq _v0 (Seq Char)) "" (_ seq.empty _v0)) (_ (= (_ (= (_ (_ (str.replace x1) y1) x1)) emp1)) (_ (= x1) emp1)))))
  )
)
; program: $eovc_str-eq-repl-self-emp
(program $eovc_str-eq-repl-self-emp ((@T2 Type) (@T1 Type) (@T0 Type) (x1 (Seq @T0)) (y1 (Seq @T1)) (emp1 (Seq @T2)))
  :signature (Type (Seq @T2) (Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-eq-repl-self-emp @T0 emp1 y1 x1) (eo::define ((_v0 (Seq @T0))) (eo::define ((_v1 (_ (= emp1) (eo::ite (eo::is_eq _v0 (Seq Char)) "" (_ seq.empty _v0))))) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_false ($eo_model_sat ($eor_str-eq-repl-self-emp x1 y1 emp1 _v0 _v1)) true)))))
  )
)
(echo "smt-meta $eovc_str-eq-repl-self-emp")
; program: $eor_str-eq-repl-no-change
(program $eor_str-eq-repl-no-change ((@T0 Type) (@T1 Type) (@T2 Type) (z1 (Seq @T2)) (x1 (Seq @T0)) (y1 (Seq @T1)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) Bool) Bool
  (
  (($eor_str-eq-repl-no-change x1 y1 z1 (_ (= (_ (= y1) z1)) false)) (_ (= (_ (= (_ (_ (str.replace x1) y1) z1)) x1)) (not (_ (str.contains x1) y1))))
  )
)
; program: $eovc_str-eq-repl-no-change
(program $eovc_str-eq-repl-no-change ((@T2 Type) (@T1 Type) (@T0 Type) (x1 (Seq @T0)) (y1 (Seq @T1)) (z1 (Seq @T2)))
  :signature ((Seq @T2) (Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-eq-repl-no-change z1 y1 x1) (eo::define ((_v0 (_ (= (_ (= y1) z1)) false))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-eq-repl-no-change x1 y1 z1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_str-eq-repl-no-change")
; program: $eor_str-eq-repl-tgt-eq-len
(program $eor_str-eq-repl-tgt-eq-len ((@T0 Type) (@T1 Type) (@T2 Type) (y1 (Seq @T1)) (x1 (Seq @T0)) (z1 (Seq @T2)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) Bool) Bool
  (
  (($eor_str-eq-repl-tgt-eq-len x1 y1 z1 (_ (= (str.len y1)) (str.len z1))) (eo::define ((_v0 (= x1))) (_ (= (_ (= (_ (_ (str.replace x1) y1) z1)) z1)) (_ (or (_ _v0 y1)) (_ (or (_ _v0 z1)) false)))))
  )
)
; program: $eovc_str-eq-repl-tgt-eq-len
(program $eovc_str-eq-repl-tgt-eq-len ((@T2 Type) (@T1 Type) (@T0 Type) (x1 (Seq @T0)) (y1 (Seq @T1)) (z1 (Seq @T2)))
  :signature ((Seq @T2) (Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-eq-repl-tgt-eq-len z1 y1 x1) (eo::define ((_v0 (_ (= (str.len y1)) (str.len z1)))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-eq-repl-tgt-eq-len x1 y1 z1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_str-eq-repl-tgt-eq-len")
; program: $eor_str-eq-repl-len-one-emp-prefix
(program $eor_str-eq-repl-len-one-emp-prefix ((@T1 Type) (@T2 Type) (Any Type) ($ex_1 Any) (@T0 Type) (emp1 (Seq @T2)) (x1 (Seq @T0)) (y1 (Seq @T1)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) Type Any Bool) Bool
  (
  (($eor_str-eq-repl-len-one-emp-prefix x1 y1 emp1 (Seq @T0) (_ (= emp1) $ex_1) (_ (= (str.len y1)) 1)) (eo::define ((_v0 (Seq @T0))) (eo::requires $ex_1 (eo::ite (eo::is_eq _v0 (Seq Char)) "" (_ seq.empty _v0)) (_ (= (_ (= (_ (_ (str.replace x1) y1) emp1)) emp1)) (_ (str.prefixof x1) y1)))))
  )
)
; program: $eovc_str-eq-repl-len-one-emp-prefix
(program $eovc_str-eq-repl-len-one-emp-prefix ((@T1 Type) (@T2 Type) (@T0 Type) (x1 (Seq @T0)) (emp1 (Seq @T2)) (y1 (Seq @T1)))
  :signature ((Seq @T1) Type (Seq @T2) (Seq @T0)) Bool
  (
  (($eovc_str-eq-repl-len-one-emp-prefix y1 @T0 emp1 x1) (eo::define ((_v0 (_ (= (str.len y1)) 1))) (eo::define ((_v1 (Seq @T0))) (eo::define ((_v2 (_ (= emp1) (eo::ite (eo::is_eq _v1 (Seq Char)) "" (_ seq.empty _v1))))) ($eo_requires_true ($eo_model_sat _v2) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-eq-repl-len-one-emp-prefix x1 y1 emp1 _v1 _v2 _v0)) true)))))))
  )
)
(echo "smt-meta $eovc_str-eq-repl-len-one-emp-prefix")
; program: $eor_str-eq-repl-emp-tgt-nemp
(program $eor_str-eq-repl-emp-tgt-nemp ((@T1 Type) (@T2 Type) (@T3 Type) (Any Type) ($ex_1 Any) (@T0 Type) (z1 (Seq @T2)) (x1 (Seq @T0)) (y1 (Seq @T1)) (emp1 (Seq @T3)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) (Seq @T3) Type Any Bool) Bool
  (
  (($eor_str-eq-repl-emp-tgt-nemp x1 y1 z1 emp1 (Seq @T0) (_ (= emp1) $ex_1) (_ (= (_ (= z1) emp1)) false)) (eo::define ((_v0 (Seq @T0))) (eo::requires $ex_1 (eo::ite (eo::is_eq _v0 (Seq Char)) "" (_ seq.empty _v0)) (_ (= (_ (= (_ (_ (str.replace x1) y1) z1)) emp1)) (_ (and (_ (= x1) emp1)) (_ (and (not (_ (= y1) emp1))) true))))))
  )
)
; program: $eovc_str-eq-repl-emp-tgt-nemp
(program $eovc_str-eq-repl-emp-tgt-nemp ((@T3 Type) (@T2 Type) (@T1 Type) (@T0 Type) (x1 (Seq @T0)) (y1 (Seq @T1)) (z1 (Seq @T2)) (emp1 (Seq @T3)))
  :signature ((Seq @T3) (Seq @T2) Type (Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-eq-repl-emp-tgt-nemp emp1 z1 @T0 y1 x1) (eo::define ((_v0 (_ (= (_ (= z1) emp1)) false))) (eo::define ((_v1 (Seq @T0))) (eo::define ((_v2 (_ (= emp1) (eo::ite (eo::is_eq _v1 (Seq Char)) "" (_ seq.empty _v1))))) ($eo_requires_true ($eo_model_sat _v2) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-eq-repl-emp-tgt-nemp x1 y1 z1 emp1 _v1 _v2 _v0)) true)))))))
  )
)
(echo "smt-meta $eovc_str-eq-repl-emp-tgt-nemp")
; program: $eor_str-eq-repl-nemp-src-emp
(program $eor_str-eq-repl-nemp-src-emp ((@T1 Type) (@T2 Type) (@T3 Type) (Any Type) ($ex_1 Any) (@T0 Type) (x1 (Seq @T0)) (emp1 (Seq @T3)) (y1 (Seq @T1)) (z1 (Seq @T2)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) (Seq @T3) Type Any Bool) Bool
  (
  (($eor_str-eq-repl-nemp-src-emp x1 y1 z1 emp1 (Seq @T0) (_ (= emp1) $ex_1) (_ (= (_ (= z1) emp1)) false)) (eo::define ((_v0 (Seq @T0))) (eo::requires $ex_1 (eo::ite (eo::is_eq _v0 (Seq Char)) "" (_ seq.empty _v0)) (_ (= (_ (= (_ (_ (str.replace emp1) x1) y1)) z1)) (_ (and (_ (= x1) emp1)) (_ (and (_ (= y1) z1)) true))))))
  )
)
; program: $eovc_str-eq-repl-nemp-src-emp
(program $eovc_str-eq-repl-nemp-src-emp ((@T3 Type) (@T2 Type) (@T1 Type) (@T0 Type) (x1 (Seq @T0)) (y1 (Seq @T1)) (z1 (Seq @T2)) (emp1 (Seq @T3)))
  :signature ((Seq @T3) (Seq @T2) Type (Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-eq-repl-nemp-src-emp emp1 z1 @T0 y1 x1) (eo::define ((_v0 (_ (= (_ (= z1) emp1)) false))) (eo::define ((_v1 (Seq @T0))) (eo::define ((_v2 (_ (= emp1) (eo::ite (eo::is_eq _v1 (Seq Char)) "" (_ seq.empty _v1))))) ($eo_requires_true ($eo_model_sat _v2) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-eq-repl-nemp-src-emp x1 y1 z1 emp1 _v1 _v2 _v0)) true)))))))
  )
)
(echo "smt-meta $eovc_str-eq-repl-nemp-src-emp")
; program: $eor_str-eq-repl-self-src
(program $eor_str-eq-repl-self-src ((@T0 Type) (@T1 Type) (x1 (Seq @T0)) (y1 (Seq @T1)))
  :signature ((Seq @T0) (Seq @T1)) Bool
  (
  (($eor_str-eq-repl-self-src x1 y1) (_ (= (_ (= (_ (_ (str.replace x1) y1) x1)) y1)) (_ (= x1) y1)))
  )
)
; program: $eovc_str-eq-repl-self-src
(program $eovc_str-eq-repl-self-src ((@T1 Type) (@T0 Type) (x1 (Seq @T0)) (y1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-eq-repl-self-src y1 x1) ($eo_requires_false ($eo_model_sat ($eor_str-eq-repl-self-src x1 y1)) true))
  )
)
(echo "smt-meta $eovc_str-eq-repl-self-src")
; program: $eor_seq-len-unit
(program $eor_seq-len-unit ((@T0 Type) (x1 @T0))
  :signature (@T0) Bool
  (
  (($eor_seq-len-unit x1) (_ (= (str.len (seq.unit x1))) 1))
  )
)
; program: $eovc_seq-len-unit
(program $eovc_seq-len-unit ((@T0 Type) (x1 @T0))
  :signature (@T0) Bool
  (
  (($eovc_seq-len-unit x1) ($eo_requires_false ($eo_model_sat ($eor_seq-len-unit x1)) true))
  )
)
(echo "smt-meta $eovc_seq-len-unit")
; program: $eor_seq-nth-unit
(program $eor_seq-nth-unit ((@T0 Type) (x1 @T0))
  :signature (@T0) Bool
  (
  (($eor_seq-nth-unit x1) (_ (= (_ (seq.nth (seq.unit x1)) 0)) x1))
  )
)
; program: $eovc_seq-nth-unit
(program $eovc_seq-nth-unit ((@T0 Type) (x1 @T0))
  :signature (@T0) Bool
  (
  (($eovc_seq-nth-unit x1) ($eo_requires_false ($eo_model_sat ($eor_seq-nth-unit x1)) true))
  )
)
(echo "smt-meta $eovc_seq-nth-unit")
; program: $eor_seq-rev-unit
(program $eor_seq-rev-unit ((@T0 Type) (x1 @T0))
  :signature (@T0) Bool
  (
  (($eor_seq-rev-unit x1) (eo::define ((_v0 (seq.unit x1))) (_ (= (str.rev _v0)) _v0)))
  )
)
; program: $eovc_seq-rev-unit
(program $eovc_seq-rev-unit ((@T0 Type) (x1 @T0))
  :signature (@T0) Bool
  (
  (($eovc_seq-rev-unit x1) ($eo_requires_false ($eo_model_sat ($eor_seq-rev-unit x1)) true))
  )
)
(echo "smt-meta $eovc_seq-rev-unit")
; program: $eor_seq-len-empty
(program $eor_seq-len-empty ((Any Type) ($ex_1 Any) (@T0 Type) (x1 (Seq @T0)))
  :signature ((Seq @T0) Type Any) Bool
  (
  (($eor_seq-len-empty x1 (Seq @T0) (_ (= x1) $ex_1)) (eo::define ((_v0 (Seq @T0))) (eo::requires $ex_1 (eo::ite (eo::is_eq _v0 (Seq Char)) "" (_ seq.empty _v0)) (_ (= (str.len x1)) 0))))
  )
)
; program: $eovc_seq-len-empty
(program $eovc_seq-len-empty ((@T0 Type) (x1 (Seq @T0)))
  :signature (Type (Seq @T0)) Bool
  (
  (($eovc_seq-len-empty @T0 x1) (eo::define ((_v0 (Seq @T0))) (eo::define ((_v1 (_ (= x1) (eo::ite (eo::is_eq _v0 (Seq Char)) "" (_ seq.empty _v0))))) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_false ($eo_model_sat ($eor_seq-len-empty x1 _v0 _v1)) true)))))
  )
)
(echo "smt-meta $eovc_seq-len-empty")
; program: $eor_re-in-empty
(program $eor_re-in-empty ((t1 (Seq Char)))
  :signature ((Seq Char)) Bool
  (
  (($eor_re-in-empty t1) (_ (= (_ (str.in_re t1) re.none)) false))
  )
)
; program: $eovc_re-in-empty
(program $eovc_re-in-empty ((t1 (Seq Char)))
  :signature ((Seq Char)) Bool
  (
  (($eovc_re-in-empty t1) ($eo_requires_false ($eo_model_sat ($eor_re-in-empty t1)) true))
  )
)
(echo "smt-meta $eovc_re-in-empty")
; program: $eor_re-in-sigma
(program $eor_re-in-sigma ((t1 (Seq Char)))
  :signature ((Seq Char)) Bool
  (
  (($eor_re-in-sigma t1) (_ (= (_ (str.in_re t1) re.allchar)) (_ (= (str.len t1)) 1)))
  )
)
; program: $eovc_re-in-sigma
(program $eovc_re-in-sigma ((t1 (Seq Char)))
  :signature ((Seq Char)) Bool
  (
  (($eovc_re-in-sigma t1) ($eo_requires_false ($eo_model_sat ($eor_re-in-sigma t1)) true))
  )
)
(echo "smt-meta $eovc_re-in-sigma")
; program: $eor_re-in-sigma-star
(program $eor_re-in-sigma-star ((t1 (Seq Char)))
  :signature ((Seq Char)) Bool
  (
  (($eor_re-in-sigma-star t1) (_ (= (_ (str.in_re t1) (re.* re.allchar))) true))
  )
)
; program: $eovc_re-in-sigma-star
(program $eovc_re-in-sigma-star ((t1 (Seq Char)))
  :signature ((Seq Char)) Bool
  (
  (($eovc_re-in-sigma-star t1) ($eo_requires_false ($eo_model_sat ($eor_re-in-sigma-star t1)) true))
  )
)
(echo "smt-meta $eovc_re-in-sigma-star")
; program: $eor_re-in-cstring
(program $eor_re-in-cstring ((t1 (Seq Char)) (s1 (Seq Char)))
  :signature ((Seq Char) (Seq Char)) Bool
  (
  (($eor_re-in-cstring t1 s1) (_ (= (_ (str.in_re t1) (str.to_re s1))) (_ (= t1) s1)))
  )
)
; program: $eovc_re-in-cstring
(program $eovc_re-in-cstring ((t1 (Seq Char)) (s1 (Seq Char)))
  :signature ((Seq Char) (Seq Char)) Bool
  (
  (($eovc_re-in-cstring s1 t1) ($eo_requires_false ($eo_model_sat ($eor_re-in-cstring t1 s1)) true))
  )
)
(echo "smt-meta $eovc_re-in-cstring")
; program: $eor_re-in-comp
(program $eor_re-in-comp ((t1 (Seq Char)) (r1 RegLan))
  :signature ((Seq Char) RegLan) Bool
  (
  (($eor_re-in-comp t1 r1) (eo::define ((_v0 (str.in_re t1))) (_ (= (_ _v0 (re.comp r1))) (not (_ _v0 r1)))))
  )
)
; program: $eovc_re-in-comp
(program $eovc_re-in-comp ((t1 (Seq Char)) (r1 RegLan))
  :signature (RegLan (Seq Char)) Bool
  (
  (($eovc_re-in-comp r1 t1) ($eo_requires_false ($eo_model_sat ($eor_re-in-comp t1 r1)) true))
  )
)
(echo "smt-meta $eovc_re-in-comp")
; program: $eor_str-in-re-union-elim
(program $eor_str-in-re-union-elim ((r1 RegLan) (s1 (Seq Char)) (r2 RegLan) (rs1 RegLan))
  :signature ((Seq Char) RegLan RegLan RegLan) Bool
  (
  (($eor_str-in-re-union-elim s1 r1 r2 rs1) (eo::define ((_v0 (_ (re.union r2) rs1))) (eo::define ((_v1 (str.in_re s1))) (_ (= (_ _v1 (_ (re.union r1) _v0))) (_ (or (_ _v1 r1)) (_ (or (_ _v1 ($singleton_elim _v0))) false))))))
  )
)
; program: $eovc_str-in-re-union-elim
(program $eovc_str-in-re-union-elim ((s1 (Seq Char)) (r1 RegLan) (r2 RegLan) (rs1 RegLan))
  :signature (RegLan RegLan RegLan (Seq Char)) Bool
  (
  (($eovc_str-in-re-union-elim rs1 r2 r1 s1) ($eo_requires_false ($eo_model_sat ($eor_str-in-re-union-elim s1 r1 r2 rs1)) true))
  )
)
(echo "smt-meta $eovc_str-in-re-union-elim")
; program: $eor_str-in-re-inter-elim
(program $eor_str-in-re-inter-elim ((r1 RegLan) (s1 (Seq Char)) (r2 RegLan) (rs1 RegLan))
  :signature ((Seq Char) RegLan RegLan RegLan) Bool
  (
  (($eor_str-in-re-inter-elim s1 r1 r2 rs1) (eo::define ((_v0 (_ (re.inter r2) rs1))) (eo::define ((_v1 (str.in_re s1))) (_ (= (_ _v1 (_ (re.inter r1) _v0))) (_ (and (_ _v1 r1)) (_ (and (_ _v1 ($singleton_elim _v0))) true))))))
  )
)
; program: $eovc_str-in-re-inter-elim
(program $eovc_str-in-re-inter-elim ((s1 (Seq Char)) (r1 RegLan) (r2 RegLan) (rs1 RegLan))
  :signature (RegLan RegLan RegLan (Seq Char)) Bool
  (
  (($eovc_str-in-re-inter-elim rs1 r2 r1 s1) ($eo_requires_false ($eo_model_sat ($eor_str-in-re-inter-elim s1 r1 r2 rs1)) true))
  )
)
(echo "smt-meta $eovc_str-in-re-inter-elim")
; program: $eor_str-in-re-range-elim
(program $eor_str-in-re-range-elim ((c1 (Seq Char)) (s1 (Seq Char)) (c2 (Seq Char)))
  :signature ((Seq Char) (Seq Char) (Seq Char) Bool Bool) Bool
  (
  (($eor_str-in-re-range-elim s1 c1 c2 (_ (= (str.len c1)) 1) (_ (= (str.len c2)) 1)) (eo::define ((_v0 (str.to_code s1))) (_ (= (_ (str.in_re s1) (_ (re.range c1) c2))) (_ (and (_ (<= (str.to_code c1)) _v0)) (_ (and (_ (<= _v0) (str.to_code c2))) true)))))
  )
)
; program: $eovc_str-in-re-range-elim
(program $eovc_str-in-re-range-elim ((s1 (Seq Char)) (c1 (Seq Char)) (c2 (Seq Char)))
  :signature ((Seq Char) (Seq Char) (Seq Char)) Bool
  (
  (($eovc_str-in-re-range-elim c2 c1 s1) (eo::define ((_v0 (_ (= (str.len c2)) 1))) (eo::define ((_v1 (_ (= (str.len c1)) 1))) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-in-re-range-elim s1 c1 c2 _v1 _v0)) true))))))
  )
)
(echo "smt-meta $eovc_str-in-re-range-elim")
; program: $eor_str-in-re-contains
(program $eor_str-in-re-contains ((t1 (Seq Char)) (s1 (Seq Char)))
  :signature ((Seq Char) (Seq Char)) Bool
  (
  (($eor_str-in-re-contains t1 s1) (eo::define ((_v0 (re.++ (re.* re.allchar)))) (_ (= (_ (str.in_re t1) (_ _v0 (_ (re.++ (str.to_re s1)) (_ _v0 (str.to_re "")))))) (_ (str.contains t1) s1))))
  )
)
; program: $eovc_str-in-re-contains
(program $eovc_str-in-re-contains ((t1 (Seq Char)) (s1 (Seq Char)))
  :signature ((Seq Char) (Seq Char)) Bool
  (
  (($eovc_str-in-re-contains s1 t1) ($eo_requires_false ($eo_model_sat ($eor_str-in-re-contains t1 s1)) true))
  )
)
(echo "smt-meta $eovc_str-in-re-contains")
; program: $eor_str-in-re-from-int-nemp-dig-range
(program $eor_str-in-re-from-int-nemp-dig-range ((n1 Int))
  :signature (Int Bool) Bool
  (
  (($eor_str-in-re-from-int-nemp-dig-range n1 (_ (= (_ (>= n1) 0)) true)) (eo::define ((_v0 (_ (re.range "0") "9"))) (_ (= (_ (str.in_re (str.from_int n1)) (_ (re.++ _v0) (_ (re.++ (re.* _v0)) (str.to_re ""))))) true)))
  )
)
; program: $eovc_str-in-re-from-int-nemp-dig-range
(program $eovc_str-in-re-from-int-nemp-dig-range ((n1 Int))
  :signature (Int) Bool
  (
  (($eovc_str-in-re-from-int-nemp-dig-range n1) (eo::define ((_v0 (_ (= (_ (>= n1) 0)) true))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_str-in-re-from-int-nemp-dig-range n1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_str-in-re-from-int-nemp-dig-range")
; program: $eor_str-in-re-from-int-dig-range
(program $eor_str-in-re-from-int-dig-range ((n1 Int))
  :signature (Int) Bool
  (
  (($eor_str-in-re-from-int-dig-range n1) (_ (= (_ (str.in_re (str.from_int n1)) (re.* (_ (re.range "0") "9")))) true))
  )
)
; program: $eovc_str-in-re-from-int-dig-range
(program $eovc_str-in-re-from-int-dig-range ((n1 Int))
  :signature (Int) Bool
  (
  (($eovc_str-in-re-from-int-dig-range n1) ($eo_requires_false ($eo_model_sat ($eor_str-in-re-from-int-dig-range n1)) true))
  )
)
(echo "smt-meta $eovc_str-in-re-from-int-dig-range")
; program: $eor_eq-refl
(program $eor_eq-refl ((@T0 Type) (t1 @T0))
  :signature (@T0) Bool
  (
  (($eor_eq-refl t1) (_ (= (_ (= t1) t1)) true))
  )
)
; program: $eovc_eq-refl
(program $eovc_eq-refl ((@T0 Type) (t1 @T0))
  :signature (@T0) Bool
  (
  (($eovc_eq-refl t1) ($eo_requires_false ($eo_model_sat ($eor_eq-refl t1)) true))
  )
)
(echo "smt-meta $eovc_eq-refl")
; program: $eor_eq-symm
(program $eor_eq-symm ((@T0 Type) (@T1 Type) (s1 @T1) (t1 @T0))
  :signature (@T0 @T1) Bool
  (
  (($eor_eq-symm t1 s1) (_ (= (_ (= t1) s1)) (_ (= s1) t1)))
  )
)
; program: $eovc_eq-symm
(program $eovc_eq-symm ((@T1 Type) (@T0 Type) (t1 @T0) (s1 @T1))
  :signature (@T1 @T0) Bool
  (
  (($eovc_eq-symm s1 t1) ($eo_requires_false ($eo_model_sat ($eor_eq-symm t1 s1)) true))
  )
)
(echo "smt-meta $eovc_eq-symm")
; program: $eor_eq-cond-deq
(program $eor_eq-cond-deq ((@T0 Type) (@T1 Type) (@T2 Type) (s1 @T1) (t1 @T0) (r1 @T2))
  :signature (@T0 @T1 @T2 Bool) Bool
  (
  (($eor_eq-cond-deq t1 s1 r1 (_ (= (_ (= s1) r1)) false)) (eo::define ((_v0 (= t1))) (eo::define ((_v1 (_ _v0 r1))) (eo::define ((_v2 (_ _v0 s1))) (_ (= (_ (= _v2) _v1)) (_ (and (not _v2)) (_ (and (not _v1)) true)))))))
  )
)
; program: $eovc_eq-cond-deq
(program $eovc_eq-cond-deq ((@T2 Type) (@T1 Type) (@T0 Type) (t1 @T0) (s1 @T1) (r1 @T2))
  :signature (@T2 @T1 @T0) Bool
  (
  (($eovc_eq-cond-deq r1 s1 t1) (eo::define ((_v0 (_ (= (_ (= s1) r1)) false))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_eq-cond-deq t1 s1 r1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_eq-cond-deq")
; program: $eor_eq-ite-lift
(program $eor_eq-ite-lift ((@T0 Type) (@T1 Type) (@T2 Type) (C1 Bool) (t1 @T0) (s1 @T1) (r1 @T2))
  :signature (Bool @T0 @T1 @T2) Bool
  (
  (($eor_eq-ite-lift C1 t1 s1 r1) (eo::define ((_v0 (ite C1))) (_ (= (_ (= (_ (_ _v0 t1) s1)) r1)) (_ (_ _v0 (_ (= t1) r1)) (_ (= s1) r1)))))
  )
)
; program: $eovc_eq-ite-lift
(program $eovc_eq-ite-lift ((@T2 Type) (@T1 Type) (@T0 Type) (C1 Bool) (t1 @T0) (s1 @T1) (r1 @T2))
  :signature (@T2 @T1 @T0 Bool) Bool
  (
  (($eovc_eq-ite-lift r1 s1 t1 C1) ($eo_requires_false ($eo_model_sat ($eor_eq-ite-lift C1 t1 s1 r1)) true))
  )
)
(echo "smt-meta $eovc_eq-ite-lift")
; program: $eor_distinct-binary-elim
(program $eor_distinct-binary-elim ((@T0 Type) (@T1 Type) (t1 @T0) (s1 @T1))
  :signature (@T0 @T1) Bool
  (
  (($eor_distinct-binary-elim t1 s1) (_ (= (_ (distinct t1) s1)) (not (_ (= t1) s1))))
  )
)
; program: $eovc_distinct-binary-elim
(program $eovc_distinct-binary-elim ((@T1 Type) (@T0 Type) (t1 @T0) (s1 @T1))
  :signature (@T1 @T0) Bool
  (
  (($eovc_distinct-binary-elim s1 t1) ($eo_requires_false ($eo_model_sat ($eor_distinct-binary-elim t1 s1)) true))
  )
)
(echo "smt-meta $eovc_distinct-binary-elim")
; program: $eor_uf-bv2nat-int2bv
(program $eor_uf-bv2nat-int2bv ((@n0 Int) (w1 Int) (t1 (BitVec @n0)))
  :signature (Int (BitVec @n0) Bool) Bool
  (
  (($eor_uf-bv2nat-int2bv w1 t1 (_ (= (@bvsize t1)) w1)) (_ (= (_ (int_to_bv w1) (ubv_to_int t1))) t1))
  )
)
; program: $eovc_uf-bv2nat-int2bv
(program $eovc_uf-bv2nat-int2bv ((@n0 Int) (t1 (BitVec @n0)) (w1 Int))
  :signature (Int (BitVec @n0)) Bool
  (
  (($eovc_uf-bv2nat-int2bv w1 t1) (eo::define ((_v0 (_ (= (@bvsize t1)) w1))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_uf-bv2nat-int2bv w1 t1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_uf-bv2nat-int2bv")
; program: $eor_uf-bv2nat-int2bv-extend
(program $eor_uf-bv2nat-int2bv-extend ((@n0 Int) (w1 Int) (n1 Int) (t1 (BitVec @n0)))
  :signature (Int (BitVec @n0) Int Bool Bool) Bool
  (
  ((eo::define ((_v0 (@bvsize t1))) ($eor_uf-bv2nat-int2bv-extend w1 t1 n1 (_ (= (_ (> w1) _v0)) true) (_ (= n1) (_ (- w1) _v0)))) (_ (= (_ (int_to_bv w1) (ubv_to_int t1))) (_ (concat (_ (@bv 0) n1)) (_ (concat t1) (eo::to_bin 0 0)))))
  )
)
; program: $eovc_uf-bv2nat-int2bv-extend
(program $eovc_uf-bv2nat-int2bv-extend ((@n0 Int) (n1 Int) (w1 Int) (t1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int) Bool
  (
  (($eovc_uf-bv2nat-int2bv-extend t1 w1 n1) (eo::define ((_v0 (@bvsize t1))) (eo::define ((_v1 (_ (= n1) (_ (- w1) _v0)))) (eo::define ((_v2 (_ (= (_ (> w1) _v0)) true))) ($eo_requires_true ($eo_model_sat _v2) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_false ($eo_model_sat ($eor_uf-bv2nat-int2bv-extend w1 t1 n1 _v2 _v1)) true)))))))
  )
)
(echo "smt-meta $eovc_uf-bv2nat-int2bv-extend")
; program: $eor_uf-bv2nat-int2bv-extract
(program $eor_uf-bv2nat-int2bv-extract ((@n0 Int) (w1 Int) (wm1 Int) (t1 (BitVec @n0)))
  :signature (Int (BitVec @n0) Int Bool Bool) Bool
  (
  (($eor_uf-bv2nat-int2bv-extract w1 t1 wm1 (_ (= (_ (< w1) (@bvsize t1))) true) (_ (= wm1) (_ (- w1) 1))) (_ (= (_ (int_to_bv w1) (ubv_to_int t1))) (_ (_ (extract wm1) 0) t1)))
  )
)
; program: $eovc_uf-bv2nat-int2bv-extract
(program $eovc_uf-bv2nat-int2bv-extract ((@n0 Int) (t1 (BitVec @n0)) (wm1 Int) (w1 Int))
  :signature (Int Int (BitVec @n0)) Bool
  (
  (($eovc_uf-bv2nat-int2bv-extract w1 wm1 t1) (eo::define ((_v0 (_ (= wm1) (_ (- w1) 1)))) (eo::define ((_v1 (_ (= (_ (< w1) (@bvsize t1))) true))) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_uf-bv2nat-int2bv-extract w1 t1 wm1 _v1 _v0)) true))))))
  )
)
(echo "smt-meta $eovc_uf-bv2nat-int2bv-extract")
; program: $eor_uf-int2bv-bv2nat
(program $eor_uf-int2bv-bv2nat ((t1 Int) (w1 Int))
  :signature (Int Int) Bool
  (
  (($eor_uf-int2bv-bv2nat w1 t1) (_ (= (ubv_to_int (_ (int_to_bv w1) t1))) (_ (mod_total t1) (int.pow2 w1))))
  )
)
; program: $eovc_uf-int2bv-bv2nat
(program $eovc_uf-int2bv-bv2nat ((w1 Int) (t1 Int))
  :signature (Int Int) Bool
  (
  (($eovc_uf-int2bv-bv2nat t1 w1) ($eo_requires_false ($eo_model_sat ($eor_uf-int2bv-bv2nat w1 t1)) true))
  )
)
(echo "smt-meta $eovc_uf-int2bv-bv2nat")
; program: $eor_uf-bv2nat-geq-elim
(program $eor_uf-bv2nat-geq-elim ((@n0 Int) (x1 (BitVec @n0)) (w1 Int) (n1 Int))
  :signature ((BitVec @n0) Int Int Bool) Bool
  (
  (($eor_uf-bv2nat-geq-elim x1 n1 w1 (_ (= w1) (@bvsize x1))) (_ (= (_ (>= (ubv_to_int x1)) n1)) (_ (_ (ite (_ (>= n1) w1)) false) (_ (_ (ite (_ (< n1) 0)) true) (_ (bvuge x1) (_ (int_to_bv w1) n1))))))
  )
)
; program: $eovc_uf-bv2nat-geq-elim
(program $eovc_uf-bv2nat-geq-elim ((@n0 Int) (n1 Int) (w1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int) Bool
  (
  (($eovc_uf-bv2nat-geq-elim x1 w1 n1) (eo::define ((_v0 (_ (= w1) (@bvsize x1)))) ($eo_requires_true ($eo_model_sat _v0) ($eo_requires_false ($eo_model_sat ($eor_uf-bv2nat-geq-elim x1 n1 w1 _v0)) true))))
  )
)
(echo "smt-meta $eovc_uf-bv2nat-geq-elim")
; program: $eor_uf-int2bv-bvult-equiv
(program $eor_uf-int2bv-bvult-equiv ((@n0 Int) (@n1 Int) (t1 (BitVec @n0)) (s1 (BitVec @n1)))
  :signature ((BitVec @n0) (BitVec @n1)) Bool
  (
  (($eor_uf-int2bv-bvult-equiv t1 s1) (_ (= (_ (bvult t1) s1)) (_ (< (ubv_to_int t1)) (ubv_to_int s1))))
  )
)
; program: $eovc_uf-int2bv-bvult-equiv
(program $eovc_uf-int2bv-bvult-equiv ((@n1 Int) (@n0 Int) (t1 (BitVec @n0)) (s1 (BitVec @n1)))
  :signature ((BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_uf-int2bv-bvult-equiv s1 t1) ($eo_requires_false ($eo_model_sat ($eor_uf-int2bv-bvult-equiv t1 s1)) true))
  )
)
(echo "smt-meta $eovc_uf-int2bv-bvult-equiv")
; program: $eor_uf-int2bv-bvule-equiv
(program $eor_uf-int2bv-bvule-equiv ((@n0 Int) (@n1 Int) (t1 (BitVec @n0)) (s1 (BitVec @n1)))
  :signature ((BitVec @n0) (BitVec @n1)) Bool
  (
  (($eor_uf-int2bv-bvule-equiv t1 s1) (_ (= (_ (bvule t1) s1)) (_ (<= (ubv_to_int t1)) (ubv_to_int s1))))
  )
)
; program: $eovc_uf-int2bv-bvule-equiv
(program $eovc_uf-int2bv-bvule-equiv ((@n1 Int) (@n0 Int) (t1 (BitVec @n0)) (s1 (BitVec @n1)))
  :signature ((BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_uf-int2bv-bvule-equiv s1 t1) ($eo_requires_false ($eo_model_sat ($eor_uf-int2bv-bvule-equiv t1 s1)) true))
  )
)
(echo "smt-meta $eovc_uf-int2bv-bvule-equiv")
; program: $eor_uf-sbv-to-int-elim
(program $eor_uf-sbv-to-int-elim ((@n0 Int) (wm1 Int) (t1 (BitVec @n0)) (n1 Int))
  :signature ((BitVec @n0) Int Int Bool Bool) Bool
  (
  ((eo::define ((_v0 (@bvsize t1))) ($eor_uf-sbv-to-int-elim t1 wm1 n1 (_ (= wm1) (_ (- _v0) 1)) (_ (= n1) (int.pow2 _v0)))) (eo::define ((_v0 (ubv_to_int t1))) (_ (= (sbv_to_int t1)) (_ (_ (ite (_ (= (_ (_ (extract wm1) wm1) t1)) (_ (@bv 0) 1))) _v0) (_ (- _v0) n1)))))
  )
)
; program: $eovc_uf-sbv-to-int-elim
(program $eovc_uf-sbv-to-int-elim ((@n0 Int) (wm1 Int) (n1 Int) (t1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int) Bool
  (
  (($eovc_uf-sbv-to-int-elim t1 n1 wm1) (eo::define ((_v0 (@bvsize t1))) (eo::define ((_v1 (_ (= n1) (int.pow2 _v0)))) (eo::define ((_v2 (_ (= wm1) (_ (- _v0) 1)))) ($eo_requires_true ($eo_model_sat _v2) ($eo_requires_true ($eo_model_sat _v1) ($eo_requires_false ($eo_model_sat ($eor_uf-sbv-to-int-elim t1 wm1 n1 _v2 _v1)) true)))))))
  )
)
(echo "smt-meta $eovc_uf-sbv-to-int-elim")
; program: $eor_evaluate
(program $eor_evaluate ((U Type) (t U))
  :signature (U) Bool
  (
  (($eor_evaluate t) (_ (= t) ($run_evaluate t)))
  )
)
; program: $eovc_evaluate
(program $eovc_evaluate ((U Type) (t U))
  :signature (U) Bool
  (
  (($eovc_evaluate t) ($eo_requires_false ($eo_model_sat ($eor_evaluate t)) true))
  )
)
(echo "smt-meta $eovc_evaluate")
; program: $eor_distinct_values
(program $eor_distinct_values ((U Type) (t U) (s U))
  :signature (U U) Bool
  (
  (($eor_distinct_values t s) (eo::requires (eo::ite (eo::eq t s) false ($are_distinct_terms_list (_ ($eo_List_cons t) (_ ($eo_List_cons s) $eo_List_nil)) (eo::typeof t))) true (not (_ (= t) s))))
  )
)
; program: $eovc_distinct_values
(program $eovc_distinct_values ((U Type) (t U) (s U))
  :signature (U U) Bool
  (
  (($eovc_distinct_values s t) ($eo_requires_false ($eo_model_sat ($eor_distinct_values t s)) true))
  )
)
(echo "smt-meta $eovc_distinct_values")
; program: $eor_aci_norm
(program $eor_aci_norm ((U Type) (a U) (b U))
  :signature (Bool) Bool
  (
  (($eor_aci_norm (_ (= a) b)) (eo::define ((_v0 ($get_aci_normal_form b))) (eo::define ((_v1 ($get_aci_normal_form a))) (eo::requires (eo::ite ($aci_norm_eq _v1 b) true (eo::ite ($aci_norm_eq _v0 a) true ($aci_norm_eq _v1 _v0))) true (_ (= a) b)))))
  )
)
; program: $eovc_aci_norm
(program $eovc_aci_norm ((U Type) (a U) (b U))
  :signature (U U) Bool
  (
  (($eovc_aci_norm b a) ($eo_requires_false ($eo_model_sat ($eor_aci_norm (_ (= a) b))) true))
  )
)
(echo "smt-meta $eovc_aci_norm")
; program: $eor_absorb
(program $eor_absorb ((U Type) (t U) (zero U))
  :signature (Bool) Bool
  (
  (($eor_absorb (_ (= t) zero)) (eo::requires ($get_zero t) zero (eo::requires ($is_absorb t zero) true (_ (= t) zero))))
  )
)
; program: $eovc_absorb
(program $eovc_absorb ((U Type) (t U) (zero U))
  :signature (U U) Bool
  (
  (($eovc_absorb zero t) ($eo_requires_false ($eo_model_sat ($eor_absorb (_ (= t) zero))) true))
  )
)
(echo "smt-meta $eovc_absorb")
; program: $eor_distinct-card-conflict
(program $eor_distinct-card-conflict ((D Bool))
  :signature (Bool) Bool
  (
  (($eor_distinct-card-conflict (_ (= D) false)) (eo::define ((_v0 ($extract_pairwise_args distinct and D))) (eo::requires (eo::gt (eo::list_len $eo_List_cons _v0) ($compute_card ($assoc_nil_nth_type $eo_List_cons _v0 0))) true (_ (= D) false))))
  )
)
; program: $eovc_distinct-card-conflict
(program $eovc_distinct-card-conflict ((D Bool))
  :signature (Bool) Bool
  (
  (($eovc_distinct-card-conflict D) ($eo_requires_false ($eo_model_sat ($eor_distinct-card-conflict (_ (= D) false))) true))
  )
)
(echo "smt-meta $eovc_distinct-card-conflict")
; program: $eor_trust
(program $eor_trust ((P Bool) (F Bool))
  :signature (Bool Bool) Bool
  (
  (($eor_trust F P) F)
  )
)
(echo "smt-meta $eovc_trust")

