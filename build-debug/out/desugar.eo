; This file is used for bootstrapping the semantics of Eunoia.
; We use a naming convention where eo:: operators are defined as ordinary
; programs with prefix $eo_. We additionally setup further desugaring
; to be done in later stages. Overall, this includes:
; 1. Definition of the builtin Eunoia list.
; 2. A definition of $eo_eq.
; 3. Definition of derived list operators.
; 4. Definition of $eo_cons and (a template for) $eo_nil.
; 5. Definition of a template of $eo_typeof_main, which is used in
;    part to define $eo_typeof.
; 6. Templates for $eo_dt_constructors and $eo_dt_selectors.
; 7. A placeholder command (echo "include eo_builtin_smt") to specify
;    where further eo:: builtins should be defined.
; 8. Placeholders for defining a test environment for analyzing properties
;    of proof rules ($eo_model_sat/$eo_model_typeof).
; This file contains templates $EO_*$ which are automatically filled in
; by user definitions. This includes:
; 1. The literal type definitions (EO_LITERAL_TYPE_DECL).
; 2. All user declarations and definitions (EO_DEFS).
; 3. Cases of $eo_dt_constructors, $eo_dt_selectors, $eo_nil, $eo_typeof_main.
; 4. A verification condition (EO_VC).

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; literal types

; declare: Int
(declare-const Int Type)
; type-rules: NUMERAL
(declare-consts <numeral> Int)
; declare: Real
(declare-const Real Type)
; type-rules: RATIONAL
(declare-consts <rational> Real)
; declare: Char
(declare-const Char Type)
; declare: Seq
(declare-const Seq (-> Type Type))
; type-rules: STRING
(declare-consts <string> (Seq Char))
(define $eo_Numeral () Int)
(define $eo_Rational () Real)
(define $eo_String () (Seq Char))
(define $eo_Binary () Type)
; decimal and hexadecimal omitted for now.


;;; forward declarations

; forward declaration
(program $eo_nil ((T Type) (U Type) (V Type) (W Type))
  :signature ((-> T U V) (eo::quote W)) W)

; forward declaration
(program $eo_typeof ((T Type))
  :signature (T) Type)

;;; core utilities

; The methods in this section are temporary definitions to eliminate
; dependencies on other builtin constructs.

; note: Used to intentionally specify a stuck evaluation.
(program $eo_fail_prog ()
  :signature (Bool) Bool
  (
  (($eo_fail_prog true) true)
  )
)
(define $eo_fail () ($eo_fail_prog false))

; note: This is used to ensure this signature does not depend on not.
(program $eo_if_not ()
  :signature (Bool) Bool
  (
  (($eo_if_not true)  false)
  (($eo_if_not false) true)
  )
)

; note: This is used to ensure this signature does not depend on and.
(program $eo_if_both ((b1 Bool) (b2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eo_if_both true true)  true)
  (($eo_if_both b1 b2)      false)
  )
)

; note: This is used to ensure signature does not depend on requires.
; program: $eo_requires_eq
; note: This is a helper, and not the official semantics for requires.
;       The difference is that x3 should not be evaluated if the arguments
;       to requires are disequal. Nevertheless, we use this method as a
;       helper e.g. when we are sure that x3 will not be stuck.
(program $eo_requires_eq ((T Type) (U Type) (x1 T) (x3 U))
  :signature (T T U) U
  (
  (($eo_requires_eq x1 x1 x3) x3)
  )
)
; program: $eo_requires_deq
; return: x3 if x1 and x2 are disequal, or gets stuck otherwise.
(program $eo_requires_deq ((T Type) (U Type) (x1 T) (x2 T) (x3 U))
  :signature (T T U) U
  (
  (($eo_requires_deq x1 x1 x3) $eo_fail)
  (($eo_requires_deq x1 x2 x3) x3)
  )
)

; note: This is used to ensure signature does not depend on ite.
(program $eo_prepend_if ((T Type) (V Type) (x T) (f (-> T V V)) (res V))
  :signature (Bool (-> T V V) V V) V
  (
  (($eo_prepend_if true f x res)  (f x res))
  (($eo_prepend_if false f x res) res)
  )
)

;;; Core SMT-like builtins

; We use a "lazy" include style that allows this file to
; be parsable without including the file.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; eo_builtin_smt

; This will contain the definitions of eo::add, etc.
; It is (for now) specific to a deep embedding into SMT.
(echo "include eo_builtin_smt")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; desugar core

;;; $eo_List

; The builtin Eunoia list.
(declare-const $eo_List Type)
(declare-const $eo_List_nil $eo_List)
(declare-parameterized-const $eo_List_cons ((T Type :implicit))
  (-> T $eo_List $eo_List)
  :right-assoc-nil $eo_List_nil)

;;; $eo_eq

; program: $eo_eq
; implements: eo::eq
(program $eo_eq ((T Type) (S Type) (t T) (s S))
  :signature (T S) Bool
  (
  (($eo_eq t t) true)
  (($eo_eq t s) false)
  )
)

;;;;;; List operators

;;; $eo_is_list

; Note: a helper for $eo_is_list.
(program $eo_is_list_rec
  ((T Type) (U Type) (V Type) (W Type) (X Type)
   (f (-> T U V)) (x T) (y U) (nil W) (z X))
  :signature ((-> T U V) W X) Bool
  (
  (($eo_is_list_rec f nil (f x y)) ($eo_is_list_rec f nil y))
  (($eo_is_list_rec f nil nil)     true)
  (($eo_is_list_rec f nil z)       false)
  )
)

; Note: >
;   This does not correspond to a builtin operator. It is used as a helper
;   to define the preconditions for most of the operators below.
(define $eo_is_list
  ((T Type :implicit) (U Type :implicit) (V Type :implicit) (W Type :implicit)
   (f (-> T U V)) (x W))
  ($eo_is_list_rec f ($eo_nil f ($eo_typeof x)) x))

;;; $eo_cons

; define: $eo_cons
; implements: eo::cons
(define $eo_cons
  ((T Type :implicit) (U Type :implicit) (V Type :implicit)
   (W1 Type :implicit) (W2 Type :implicit)
   (f (-> T U V)) (e W1) (a W2))
  ($eo_requires_eq ($eo_is_list f a) true (f e a)))

;;; $eo_get_elements

; Note: a helper for $eo_get_elements.
(program $eo_get_elements_rec
  ((T Type) (U Type) (V Type) (W Type) (W1 Type) (W2 Type) (X Type)
   (f (-> T U V)) (x W1) (y W2) (z X) (nil W))
  :signature ((-> T U V) W X) $eo_List
  (
  (($eo_get_elements_rec f nil (f x y)) ($eo_cons $eo_List_cons x ($eo_get_elements_rec f nil y)))
  (($eo_get_elements_rec f nil nil)     $eo_List_nil)
  )
)

; Note: >
;   This does not correspond to a builtin operator. It is used as a helper
;   to define eo_list_minclude below.
(define $eo_get_elements
  ((T Type :implicit) (U Type :implicit) (V Type :implicit) (W Type :implicit)
   (f (-> T U V)) (a W))
  ($eo_requires_eq ($eo_is_list f a) true
    ($eo_get_elements_rec f ($eo_nil f ($eo_typeof a)) a)))

;;; $eo_list_len

; Note: a helper for $eo_list_len.
; TODO: uses eo::add
(program $eo_list_len_rec
  ((T Type) (U Type) (V Type) (W Type) (f (-> T U V)) (x T) (y U) (nil W))
  :signature ((-> T U V) W) $eo_Numeral
  (
  (($eo_list_len_rec f (f x y))  (eo::add 1 ($eo_list_len_rec f y)))
  (($eo_list_len_rec f nil)      0)
  )
)

; define: $eo_list_len
; implements: eo::list_len
(define $eo_list_len
  ((T Type :implicit) (U Type :implicit) (V Type :implicit) (W Type :implicit)
   (f (-> T U V)) (a W))
  ($eo_requires_eq ($eo_is_list f a) true
    ($eo_list_len_rec f a)))

;;; $eo_list_concat

; Note: a helper for $eo_list_concat.
(program $eo_list_concat_rec
  ((T Type) (U Type) (V Type) (W Type) (f (-> T V V)) (x W) (y U) (z U) (nil U))
  :signature ((-> T V V) U U) U
  (
  (($eo_list_concat_rec f (f x y) z)  (f x ($eo_list_concat_rec f y z)))
  (($eo_list_concat_rec f nil z)      z)
  )
)

; define: $eo_list_concat
; implements: eo::list_concat
(define $eo_list_concat
  ((T Type :implicit) (U Type :implicit) (V Type :implicit)
   (f (-> T V V)) (a U) (b U))
  ($eo_requires_eq ($eo_is_list f a) true
  ($eo_requires_eq ($eo_is_list f b) true
    ($eo_list_concat_rec f a b))))

;;; $eo_list_nth

; Note: a helper for $eo_list_nth.
; TODO: uses eo::add
(program $eo_list_nth_rec
  ((T Type) (U Type) (f (-> T T T)) (x U) (y U) (n $eo_Numeral))
  :signature ((-> T T T) U $eo_Numeral) U
  (
  (($eo_list_nth_rec f (f x y) 0)  x)
  (($eo_list_nth_rec f (f x y) n)  ($eo_list_nth_rec f y (eo::add n -1)))
  )
)

; define: $eo_list_nth
; implements: eo::list_nth
(define $eo_list_nth
  ((T Type :implicit) (U Type :implicit)
   (f (-> T T T)) (a U) (n $eo_Numeral))
  ($eo_requires_eq ($eo_is_list f a) true
    ($eo_list_nth_rec f a n)))

;;; $eo_list_find

; Note: a helper for $eo_list_find.
; TODO: uses add
(program $eo_list_find_rec
  ((T Type) (U Type) (V Type) (W Type) (X Type)
   (f (-> T U V)) (x W) (z W) (y U) (z X) (nil W) (n $eo_Numeral))
  :signature ((-> T U V) W X $eo_Numeral) $eo_Numeral
  (
  (($eo_list_find_rec f (f x y) x n)  n)
  (($eo_list_find_rec f (f x y) z n)  ($eo_list_find_rec f y z (eo::add n 1)))
  (($eo_list_find_rec f nil z n)      -1)
  )
)

; define: $eo_list_find
; implements: eo::list_find
(define $eo_list_find
  ((T Type :implicit) (U Type :implicit) (V Type :implicit)
   (W1 Type :implicit) (W2 Type :implicit)
   (f (-> T U V)) (a W1) (e W2))
  ($eo_requires_eq ($eo_is_list f a) true
    ($eo_list_find_rec f a e 0)))

;;; $eo_list_rev

; Note: a helper for $eo_list_rev.
(program $eo_list_rev_rec
  ((T Type) (U Type) (V Type) (W Type)
   (f (-> T V V)) (x W) (y U) (nil U) (acc U))
  :signature ((-> T V V) U U) U
  (
    (($eo_list_rev_rec f (f x y) acc) ($eo_list_rev_rec f y (f x acc)))
    (($eo_list_rev_rec f nil acc)      acc)
  )
)

; define: $eo_list_rev
; implements: eo::list_rev
(define $eo_list_rev
  ((T Type :implicit) (U Type :implicit) (V Type :implicit)
   (f (-> T V V)) (a U))
  ($eo_requires_eq ($eo_is_list f a) true
    ($eo_list_rev_rec f a ($eo_nil f ($eo_typeof a)))))

;;; $eo_list_erase

; Note: a helper for $eo_list_erase.
(program $eo_list_erase_rec
  ((T Type) (U Type) (V Type) (W Type) (X Type)
   (f (-> T V V)) (x W) (y U) (z X) (nil U))
  ((-> T V V) U X) U
  (
  (($eo_list_erase_rec f (f x y) x)   y)
  (($eo_list_erase_rec f (f x y) z)   (f x ($eo_list_erase_rec f y z)))
  (($eo_list_erase_rec f nil z)       nil)
  )
)

; define: $eo_list_erase
; implements: eo::list_erase
(define $eo_list_erase
  ((T Type :implicit) (U Type :implicit) (V Type :implicit) (W Type :implicit)
   (f (-> T V V)) (a U) (e W))
  ($eo_requires_eq ($eo_is_list f a) true
    ($eo_list_erase_rec f a e)))

;;; $eo_list_erase_all

; Note: a helper for $eo_list_erase_all.
(program $eo_list_erase_all_rec
  ((T Type) (U Type) (V Type) (W Type) (X Type)
   (f (-> T V V)) (x W) (y U) (z X) (nil W))
  ((-> T V V) U X) U
  (
  (($eo_list_erase_all_rec f (f x y) z)  ($eo_prepend_if ($eo_if_not ($eo_eq z x))
                                              f x ($eo_list_erase_all_rec f y z)))
  (($eo_list_erase_all_rec f nil z)       nil)
  )
)

; define: $eo_list_erase_all
; implements: eo::list_erase_all
(define $eo_list_erase_all
  ((T Type :implicit) (U Type :implicit) (V Type :implicit) (W Type :implicit)
   (f (-> T V V)) (a U) (e W))
  ($eo_requires_eq ($eo_is_list f a) true
    ($eo_list_erase_all_rec f a e)))

;;; $eo_list_setof

; Note: a helper for $eo_list_setof.
(program $eo_list_setof_rec
  ((T Type) (U Type) (V Type) (W Type)
   (f (-> T V V)) (x W) (y U) (nil U))
  ((-> T V V) U) U
  (
  (($eo_list_setof_rec f (f x y))  (f x ($eo_list_setof_rec f ($eo_list_erase_all f y x))))
  (($eo_list_setof_rec f nil)      nil)
  )
)

; define: $eo_list_setof
; implements: eo::list_setof
(define $eo_list_setof
  ((T Type :implicit) (U Type :implicit) (V Type :implicit) (f (-> T V V)) (a U))
  ($eo_requires_eq ($eo_is_list f a) true
    ($eo_list_setof_rec f a)))

;;; $eo_list_minclude

; program: $eo_list_minclude_rec
; - y $eo_List: The first list.
; - z $eo_List: The second list.
; - rmLast Bool: false if we failed to remove the last element of y from z.
; return: true iff we successfully remove all elements of y from z.
; note: a helper for $eo_list_minclude.
(program $eo_list_minclude_rec
  ((T Type) (x T) (y $eo_List :list) (z $eo_List))
  ($eo_List $eo_List Bool) Bool
  (
  (($eo_list_minclude_rec y z false)            false)
  (($eo_list_minclude_rec ($eo_List_cons x y) z true)
    (eo::define ((res ($eo_list_erase $eo_List_cons z x)))
      ; pass true iff we successfully removed x from z.
      ($eo_list_minclude_rec y res ($eo_if_not ($eo_eq res z)))))
  (($eo_list_minclude_rec $eo_List_nil z true)  true)
  )
)

; define: $eo_list_minclude
; implements: eo::list_minclude
; Note: >
;   Since $eo_list_erase is a key submethod for defining $eo_list_minclude,
;   and $eo_list_erase requires functions (-> T V V), we convert the elements
;   of both lists to builtin lists $eo_List using the auxiliary method
;   $eo_get_elements in this definition.
(define $eo_list_minclude
  ((T Type :implicit) (U Type :implicit) (V Type :implicit)
   (W1 Type :implicit) (W2 Type :implicit)
   (f (-> T U V)) (a W1) (b W2))
  ($eo_requires_eq ($eo_is_list f a) true
  ($eo_requires_eq ($eo_is_list f b) true
    ($eo_list_minclude_rec ($eo_get_elements f a) ($eo_get_elements f b) true))))

;;; $eo_list_meq

; define: $eo_list_meq
; implements: eo::list_meq
(define $eo_list_meq
  ((T Type :implicit) (U Type :implicit) (V Type :implicit)
   (W1 Type :implicit) (W2 Type :implicit)
   (f (-> T U V)) (a W1) (b W2))
  ($eo_if_both ($eo_list_minclude f a b) ($eo_list_minclude f b a)))

;;; $eo_list_diff

; Note: a helper for $eo_list_diff.
(program $eo_list_diff_rec
  ((T Type) (V Type) (x T) (y V) (f (-> T V V)) (nil V) (z V))
  :signature ((-> T V V) V V) V
  (
  (($eo_list_diff_rec f (f x y) z)  (eo::define ((res ($eo_list_erase $eo_List_cons z x)))
                                    ($eo_prepend_if ($eo_eq res z)
                                      f x ($eo_list_diff_rec y res))))
  (($eo_list_diff_rec f nil z)      nil)
  )
)

; define: $eo_list_diff
; implements: eo::list_diff
(define $eo_list_diff
  ((T Type :implicit) (V Type :implicit)
   (f (-> T V V)) (a V) (b V))
  ($eo_requires_eq ($eo_is_list f a) true
  ($eo_requires_eq ($eo_is_list f b) true
    ($eo_list_diff_rec f a b))))

;;; $eo_list_inter

; Note: a helper for $eo_list_inter
(program $eo_list_inter_rec
  ((T Type) (V Type) (x T) (y V) (f (-> T V V)) (nil V) (z V))
  :signature ((-> T V V) V V) V
  (
  (($eo_list_inter_rec f (f x y) z) (eo::define ((res ($eo_list_erase $eo_List_cons z x)))
                                    ($eo_prepend_if ($eo_if_not ($eo_eq res z))
                                      f x ($eo_list_inter_rec y res))))
  (($eo_list_inter_rec f nil z)     nil)
  )
)

; define: $eo_list_inter
; implements: eo::list_inter
(define $eo_list_inter
  ((T Type :implicit) (V Type :implicit)
   (f (-> T V V)) (a V) (b V))
  ($eo_requires_eq ($eo_is_list f a) true
  ($eo_requires_eq ($eo_is_list f b) true
    ($eo_list_inter_rec f a b))))

; all further definitions

; declare: @Pair
(declare-const @Pair (-> Type (-> Type Type)))
; declare: @pair
(declare-parameterized-const @pair ((U Type :implicit) ($eo_x_1 U) (T Type :implicit) ($eo_x_2 T)) (_ (@Pair U) T))
; program: $pair_first
(program $pair_first ((S Type) (T Type) (s S) (t T))
  :signature ((_ (@Pair T) S)) T
  (
  (($pair_first (_ (@pair t) s)) t)
  )
)
; program: $pair_second
(program $pair_second ((T Type) (S Type) (t T) (s S))
  :signature ((_ (@Pair T) S)) S
  (
  (($pair_second (_ (@pair t) s)) s)
  )
)
; fwd-decl: $evaluate_list
(program $evaluate_list ()
  :signature ($eo_List) $eo_List
)
; program: $evaluate_internal
(program $evaluate_internal ((T Type) (t T) (tev T))
  :signature (T $eo_List) T
  (
  (($evaluate_internal t (_ ($eo_List_cons tev) $eo_List_nil)) tev)
  )
)
; program: $get_arg_list_rec
(program $get_arg_list_rec ((S Type) (T Type) (f (-> T S)) (x T) (y S) (acc $eo_List))
  :signature (S $eo_List) $eo_List
  (
  (($get_arg_list_rec (f x) acc) ($get_arg_list_rec f (eo::cons $eo_List_cons x acc)))
  (($get_arg_list_rec y acc) acc)
  )
)
; program: $is_app
(program $is_app ((T Type) (U Type) (S Type) (g (-> T S)) (f (-> T U)) (x T))
  :signature ((-> T U) S) Bool
  (
  (($is_app f (g x)) ($is_app f g))
  (($is_app f x) (eo::eq f x))
  )
)
; program: $singleton_elim.fev1
(program $singleton_elim.fev1 ((T Type) (U Type) (S Type) (f (-> T (-> U S))) (x1 S) (x2 T))
  :signature (T S (-> T (-> U S)) Bool) S
  (
  (($singleton_elim.fev1 x2 x1 f true) x1)
  (($singleton_elim.fev1 x2 x1 f false) (_ (f x1) x2))
  )
)
; program: $singleton_elim
(program $singleton_elim ((S Type) (T Type) (U Type) (f (-> T (-> U S))) (x1 S) (x2 T) (x S))
  :signature (S) S
  (
  (($singleton_elim (_ (f x1) x2)) ($singleton_elim.fev1 x2 x1 f (eo::eq x2 (eo::nil f (eo::typeof (_ (f x1) x2))))))
  (($singleton_elim x) x)
  )
)
; declare: @result.null
(declare-const @result.null Bool)
; declare: @result.invalid
(declare-const @result.invalid Bool)
; program: $result_combine
(program $result_combine ((b1 Bool) (b2 Bool))
  :signature (Bool Bool) Bool
  (
  (($result_combine b1 @result.null) b1)
  (($result_combine b1 b1) b1)
  (($result_combine b1 b2) @result.invalid)
  )
)
; fwd-decl: $is_pairwise
(program $is_pairwise ((T Type) (U Type))
  :signature ((-> T (-> T U)) (-> U (-> U U)) T $eo_List U $eo_List) Bool
)
; program: $is_pairwise.fev1
(program $is_pairwise.fev1 ((T Type) (U Type) (a T) (op (-> U (-> U U))) (nil U) ($eo_2 Bool))
  :signature (T (-> U (-> U U)) U Bool Bool) Bool
  (
  (($is_pairwise.fev1 a op nil $eo_2 $eo_2) true)
  )
)
; program: $is_pairwise
(program $is_pairwise ((T Type) (U Type) (bs $eo_List) (b T) (B U) (rem $eo_List) (f (-> T (-> T U))) (nil U) (op (-> U (-> U U))) (a T))
  :signature ((-> T (-> T U)) (-> U (-> U U)) T $eo_List U $eo_List) Bool
  (
  (($is_pairwise f op a (_ ($eo_List_cons b) bs) (_ (op (_ (f a) b)) B) rem) ($is_pairwise f op a bs B rem))
  (($is_pairwise f op a $eo_List_nil B (_ ($eo_List_cons b) rem)) ($is_pairwise f op b rem B rem))
  (($is_pairwise f op a $eo_List_nil nil $eo_List_nil) ($is_pairwise.fev1 a op nil nil (eo::nil op (eo::typeof a))))
  )
)
; program: $extract_pairwise_args_rec
(program $extract_pairwise_args_rec ((T Type) (U Type) (c T) (f (-> T (-> T U))) (op (-> U (-> U U))) (a T) (B U))
  :signature ((-> T (-> T U)) (-> U (-> U U)) T U) $eo_List
  (
  (($extract_pairwise_args_rec f op a (_ (op (_ (f a) c)) B)) (eo::cons $eo_List_cons c ($extract_pairwise_args_rec f op a B)))
  (($extract_pairwise_args_rec f op a B) $eo_List_nil)
  )
)
; program: $extract_pairwise_args.fev1
(program $extract_pairwise_args.fev1 ((U Type) (T Type) ($eo_2 T) (op (-> U (-> U U))) (f (-> T (-> T U))) (a T) (b T) (B U))
  :signature (U T T (-> T (-> T U)) (-> U (-> U U)) T T) T
  (
  (($extract_pairwise_args.fev1 B b a f op $eo_2 $eo_2) (eo::cons $eo_List_cons a ($extract_pairwise_args_rec f op a (_ (op (_ (f a) b)) B))))
  )
)
; program: $extract_pairwise_args
(program $extract_pairwise_args ((T Type) (U Type) (B U) (op (-> U (-> U U))) (f (-> T (-> T U))) (a T) (b T))
  :signature ((-> T (-> T U)) (-> U (-> U U)) U) $eo_List
  (
  (($extract_pairwise_args f op (_ (op (_ (f a) b)) B)) (eo::define ((_v0 (_ (op (_ (f a) b)) B))) (eo::define ((_v1 ($extract_pairwise_args_rec f op a _v0))) ($extract_pairwise_args.fev1 B b a f op ($is_pairwise f op a _v1 _v0 _v1) true))))
  (($extract_pairwise_args f op (_ (f a) b)) (_ ($eo_List_cons a) (_ ($eo_List_cons b) $eo_List_nil)))
  )
)
; declare: ite
(declare-parameterized-const ite (($eo_x_1 Bool) (A Type :implicit) ($eo_x_2 A) ($eo_x_3 A)) A)
; declare: not
(declare-const not (-> Bool Bool))
; declare: or
(declare-const or (-> Bool (-> Bool Bool)))
; declare: and
(declare-const and (-> Bool (-> Bool Bool)))
; declare: =>
(declare-const => (-> Bool (-> Bool Bool)))
; declare: xor
(declare-const xor (-> Bool (-> Bool Bool)))
; declare: =
(declare-parameterized-const = ((A Type :implicit) ($eo_x_1 A) ($eo_x_2 A)) Bool)
; fwd-decl: $get_lambda_type
(program $get_lambda_type ()
  :signature ($eo_List Type) Type
)
; program: $get_lambda_type.fev1
(program $get_lambda_type.fev1 ((B Type) (xs $eo_List) (x $eo_List) ($eo_2 Type) ($eo_1 Type))
  :signature (Type $eo_List $eo_List Type Type) Type
  (
  (($get_lambda_type.fev1 B xs x $eo_1 $eo_2) (-> $eo_2 $eo_1))
  )
)
; program: $get_lambda_type
(program $get_lambda_type ((xs $eo_List) (x $eo_List) (B Type))
  :signature ($eo_List Type) Type
  (
  (($get_lambda_type (_ ($eo_List_cons x) xs) B) ($get_lambda_type.fev1 B xs x ($get_lambda_type xs B) (eo::typeof x)))
  (($get_lambda_type $eo_List_nil B) B)
  )
)
; declare: lambda
(declare-parameterized-const lambda ((L $eo_List) (B Type :implicit) ($eo_x_1 B)) ($get_lambda_type L B))
; declare: distinct
(declare-parameterized-const distinct ((A Type :implicit) ($eo_x_1 A) ($eo_x_2 A)) Bool)
; declare: @purify
(declare-parameterized-const @purify ((A Type :implicit) (t A :opaque)) A)
; program: $extract_antec_rec
(program $extract_antec_rec ((F1 Bool) (F2 Bool) (C Bool))
  :signature (Bool Bool) Bool
  (
  (($extract_antec_rec C C) true)
  (($extract_antec_rec (_ (=> F1) F2) C) (eo::cons and F1 ($extract_antec_rec F2 C)))
  )
)
; program: $extract_antec
(program $extract_antec ((F Bool) (C Bool))
  :signature (Bool Bool) Bool
  (
  (($extract_antec (_ (=> F) C) C) F)
  (($extract_antec F C) ($extract_antec_rec F C))
  )
)
; program: $run_process_scope.fev2
(program $run_process_scope.fev2 ((F Bool) ($eo_2 Bool) (C Bool))
  :signature (Bool Bool Bool) Bool
  (
  (($run_process_scope.fev2 C F $eo_2) (_ (=> $eo_2) C))
  )
)
; program: $run_process_scope.fev1
(program $run_process_scope.fev1 ((F Bool) ($eo_1 Bool))
  :signature (Bool Bool) Bool
  (
  (($run_process_scope.fev1 F $eo_1) (not $eo_1))
  )
)
; program: $run_process_scope
(program $run_process_scope ((F Bool) (C Bool))
  :signature (Bool Bool) Bool
  (
  (($run_process_scope F false) ($run_process_scope.fev1 F ($extract_antec F false)))
  (($run_process_scope F C) ($run_process_scope.fev2 C F ($extract_antec F C)))
  )
)
; program: $arith_typeunion
(program $arith_typeunion ()
  :signature (Type Type) Type
  (
  (($arith_typeunion Int Int) Int)
  (($arith_typeunion Real Real) Real)
  (($arith_typeunion Real Int) Real)
  (($arith_typeunion Int Real) Real)
  )
)
; program: $is_arith_type
(program $is_arith_type ()
  :signature (Type) Bool
  (
  (($is_arith_type Int) true)
  (($is_arith_type Real) true)
  )
)
; declare: +
(declare-parameterized-const + ((T Type :implicit) ($eo_x_1 T) (U Type :implicit) ($eo_x_2 U)) ($arith_typeunion T U))
; declare: -
(declare-parameterized-const - ((T Type :implicit) ($eo_x_1 T) (U Type :implicit) ($eo_x_2 U)) ($arith_typeunion T U))
; declare: *
(declare-parameterized-const * ((T Type :implicit) ($eo_x_1 T) (U Type :implicit) ($eo_x_2 U)) ($arith_typeunion T U))
; declare: <
(declare-parameterized-const < ((T Type :implicit) ($eo_x_1 T) (U Type :implicit) ($eo_x_2 U)) Bool)
; declare: <=
(declare-parameterized-const <= ((T Type :implicit) ($eo_x_1 T) (U Type :implicit) ($eo_x_2 U)) Bool)
; declare: >
(declare-parameterized-const > ((T Type :implicit) ($eo_x_1 T) (U Type :implicit) ($eo_x_2 U)) Bool)
; declare: >=
(declare-parameterized-const >= ((T Type :implicit) ($eo_x_1 T) (U Type :implicit) ($eo_x_2 U)) Bool)
; declare: to_real
(declare-parameterized-const to_real ((T Type :implicit) ($eo_x_1 T)) Real)
; declare: to_int
(declare-parameterized-const to_int ((T Type :implicit) ($eo_x_1 T)) Int)
; declare: is_int
(declare-parameterized-const is_int ((T Type :implicit) ($eo_x_1 T)) Bool)
; declare: abs
(declare-parameterized-const abs ((T Type :implicit) ($eo_x_1 T)) T)
; declare: ^
(declare-parameterized-const ^ ((T Type :implicit) ($eo_x_1 T) ($eo_x_2 T)) T)
; declare: -
(declare-parameterized-const $eoo_-.2 ((T Type :implicit) ($eo_x_1 T)) T)
; declare: div
(declare-const div (-> Int (-> Int Int)))
; declare: mod
(declare-const mod (-> Int (-> Int Int)))
; declare: divisible
(declare-const divisible (-> Int (-> Int Bool)))
; declare: int.pow2
(declare-const int.pow2 (-> Int Int))
; declare: int.log2
(declare-const int.log2 (-> Int Int))
; declare: int.ispow2
(declare-const int.ispow2 (-> Int Bool))
; declare: div_total
(declare-const div_total (-> Int (-> Int Int)))
; declare: mod_total
(declare-const mod_total (-> Int (-> Int Int)))
; declare: @int_div_by_zero
(declare-const @int_div_by_zero (-> Int Int))
; declare: @mod_by_zero
(declare-const @mod_by_zero (-> Int Int))
; program: $assoc_nil_nth_type
(program $assoc_nil_nth_type ((T Type) (U Type) (V Type) (W Type) (W1 Type) (x1 W1) (f (-> T (-> U V))) (W2 Type) (x2 W2) (n Int))
  :signature ((-> T (-> U V)) W Int) Type
  (
  (($assoc_nil_nth_type f (_ (f x1) x2) 0) (eo::typeof x1))
  (($assoc_nil_nth_type f (_ (f x1) x2) n) ($assoc_nil_nth_type f x2 (eo::add n -1)))
  )
)
; program: $assoc_nil_nth
(program $assoc_nil_nth ((W Type) (x W) (W1 Type) (x1 W1) (T Type) (U Type) (V Type) (f (-> T (-> U V))) (W2 Type) (x2 W2) (n Int))
  :signature ((eo::quote f) (eo::quote x) (eo::quote n)) ($assoc_nil_nth_type f x n)
  (
  (($assoc_nil_nth f (_ (f x1) x2) 0) x1)
  (($assoc_nil_nth f (_ (f x1) x2) n) ($assoc_nil_nth f x2 (eo::add n -1)))
  )
)
; program: $to_clause
(program $to_clause ((F2 Bool) (F1 Bool))
  :signature (Bool) Bool
  (
  (($to_clause (_ (or F1) F2)) (_ (or F1) F2))
  (($to_clause false) false)
  (($to_clause F1) (_ (or F1) false))
  )
)
; program: $from_clause.fev1
(program $from_clause.fev1 ((F1 Bool) (F2 Bool))
  :signature (Bool Bool Bool) Bool
  (
  (($from_clause.fev1 F2 F1 true) F1)
  (($from_clause.fev1 F2 F1 false) (_ (or F1) F2))
  )
)
; program: $from_clause
(program $from_clause ((F2 Bool) (F1 Bool))
  :signature (Bool) Bool
  (
  (($from_clause (_ (or F1) F2)) ($from_clause.fev1 F2 F1 (eo::eq F2 false)))
  (($from_clause F1) F1)
  )
)
; fwd-decl: $chain_resolve_rec
(program $chain_resolve_rec ()
  :signature (Bool Bool $eo_List $eo_List) Bool
)
; program: $chain_resolve_rec.fev3
(program $chain_resolve_rec.fev3 ((lits $eo_List) (pols $eo_List) (Cs Bool) (pol Bool) (C2 Bool) (C1 Bool) (L Bool))
  :signature ($eo_List $eo_List Bool Bool Bool Bool Bool Bool) Bool
  (
  (($chain_resolve_rec.fev3 lits pols Cs L pol C2 C1 true) L)
  (($chain_resolve_rec.fev3 lits pols Cs L pol C2 C1 false) (not L))
  )
)
; program: $chain_resolve_rec.fev2
(program $chain_resolve_rec.fev2 ((lits $eo_List) (pols $eo_List) (Cs Bool) (pol Bool) (C2 Bool) (C1 Bool) (L Bool))
  :signature ($eo_List $eo_List Bool Bool Bool Bool Bool Bool) Bool
  (
  (($chain_resolve_rec.fev2 lits pols Cs L pol C2 C1 true) (not L))
  (($chain_resolve_rec.fev2 lits pols Cs L pol C2 C1 false) L)
  )
)
; program: $chain_resolve_rec.fev8
(program $chain_resolve_rec.fev8 ((pol Bool) (C1 Bool) (L Bool))
  :signature (Bool Bool Bool Bool) Bool
  (
  (($chain_resolve_rec.fev8 L pol C1 true) L)
  (($chain_resolve_rec.fev8 L pol C1 false) (not L))
  )
)
; program: $chain_resolve_rec.fev7
(program $chain_resolve_rec.fev7 ((L Bool) (pol Bool) (C1 Bool) ($eo_5 Bool))
  :signature (Bool Bool Bool Bool) Bool
  (
  (($chain_resolve_rec.fev7 L pol C1 $eo_5) (eo::list_erase or C1 $eo_5))
  )
)
; program: $chain_resolve_rec.fev6
(program $chain_resolve_rec.fev6 ((lits $eo_List) (pols $eo_List) (Cs Bool) (C2 Bool) ($eo_1 Bool) ($eo_2 Bool) (L Bool) (C1 Bool) (pol Bool))
  :signature ($eo_List $eo_List Bool Bool Bool Bool Bool Bool Bool Bool) Bool
  (
  (($chain_resolve_rec.fev6 lits pols Cs L pol C2 $eo_1 C1 $eo_2 true) false)
  (($chain_resolve_rec.fev6 lits pols Cs L pol C2 $eo_1 C1 $eo_2 false) ($chain_resolve_rec.fev7 L pol C1 ($chain_resolve_rec.fev8 L pol C1 pol)))
  )
)
; program: $chain_resolve_rec.fev10
(program $chain_resolve_rec.fev10 ((pol Bool) (C2 Bool) (L Bool))
  :signature (Bool Bool Bool Bool) Bool
  (
  (($chain_resolve_rec.fev10 L pol C2 true) (not L))
  (($chain_resolve_rec.fev10 L pol C2 false) L)
  )
)
; program: $chain_resolve_rec.fev9
(program $chain_resolve_rec.fev9 ((L Bool) (pol Bool) (C2 Bool) ($eo_6 Bool))
  :signature (Bool Bool Bool Bool) Bool
  (
  (($chain_resolve_rec.fev9 L pol C2 $eo_6) (eo::list_erase or C2 $eo_6))
  )
)
; program: $chain_resolve_rec.fev5
(program $chain_resolve_rec.fev5 ((lits $eo_List) (pols $eo_List) (Cs Bool) ($eo_1 Bool) (C1 Bool) ($eo_2 Bool) (L Bool) (C2 Bool) (pol Bool))
  :signature ($eo_List $eo_List Bool Bool Bool Bool Bool Bool Bool Bool) Bool
  (
  (($chain_resolve_rec.fev5 lits pols Cs L pol C2 $eo_1 C1 $eo_2 true) false)
  (($chain_resolve_rec.fev5 lits pols Cs L pol C2 $eo_1 C1 $eo_2 false) ($chain_resolve_rec.fev9 L pol C2 ($chain_resolve_rec.fev10 L pol C2 pol)))
  )
)
; program: $chain_resolve_rec.fev4
(program $chain_resolve_rec.fev4 ((L Bool) (pol Bool) (C2 Bool) ($eo_1 Bool) (C1 Bool) ($eo_2 Bool) ($eo_4 Bool) ($eo_3 Bool) (Cs Bool) (pols $eo_List) (lits $eo_List))
  :signature ($eo_List $eo_List Bool Bool Bool Bool Bool Bool Bool Bool Bool) Bool
  (
  (($chain_resolve_rec.fev4 lits pols Cs L pol C2 $eo_1 C1 $eo_2 $eo_3 $eo_4) ($chain_resolve_rec (eo::list_concat or $eo_4 $eo_3) Cs pols lits))
  )
)
; program: $chain_resolve_rec.fev1
(program $chain_resolve_rec.fev1 ((lits $eo_List) (pols $eo_List) (Cs Bool) (L Bool) (pol Bool) (C2 Bool) ($eo_1 Bool) ($eo_2 Bool) (C1 Bool))
  :signature ($eo_List $eo_List Bool Bool Bool Bool Bool Bool Bool) Bool
  (
  (($chain_resolve_rec.fev1 lits pols Cs L pol C2 C1 $eo_1 $eo_2) ($chain_resolve_rec.fev4 lits pols Cs L pol C2 $eo_1 C1 $eo_2 ($chain_resolve_rec.fev5 lits pols Cs L pol C2 $eo_1 C1 $eo_2 (eo::eq $eo_1 C2)) ($chain_resolve_rec.fev6 lits pols Cs L pol C2 $eo_1 C1 $eo_2 (eo::eq $eo_2 C1))))
  )
)
; program: $chain_resolve_rec
(program $chain_resolve_rec ((lits $eo_List) (pols $eo_List) (Cs Bool) (L Bool) (C2 Bool) (C1 Bool) (pol Bool))
  :signature (Bool Bool $eo_List $eo_List) Bool
  (
  (($chain_resolve_rec C1 true $eo_List_nil $eo_List_nil) ($from_clause C1))
  (($chain_resolve_rec C1 (_ (and C2) Cs) (_ ($eo_List_cons pol) pols) (_ ($eo_List_cons L) lits)) ($chain_resolve_rec.fev1 lits pols Cs L pol C2 C1 ($chain_resolve_rec.fev2 lits pols Cs L pol C2 C1 pol) ($chain_resolve_rec.fev3 lits pols Cs L pol C2 C1 pol)))
  )
)
; program: $lower_not_and
(program $lower_not_and ((l Bool) (ls Bool))
  :signature (Bool) Bool
  (
  (($lower_not_and true) false)
  (($lower_not_and (_ (and l) ls)) (eo::cons or (not l) ($lower_not_and ls)))
  )
)
; declare: Array
(declare-const Array (-> Type (-> Type Type)))
; declare: select
(declare-parameterized-const select ((U Type :implicit) (T Type :implicit) ($eo_x_1 (_ (Array U) T)) ($eo_x_2 U)) T)
; declare: store
(declare-parameterized-const store ((U Type :implicit) (T Type :implicit) ($eo_x_1 (_ (Array U) T)) ($eo_x_2 U) ($eo_x_3 T)) (_ (Array U) T))
; declare: @array_deq_diff
(declare-parameterized-const @array_deq_diff ((T Type :implicit) (U Type :implicit) (a (_ (Array T) U) :opaque) (b (_ (Array T) U) :opaque)) T)
; program: $mk_symm
(program $mk_symm ((T Type) (t2 T) (t1 T))
  :signature (Bool) Bool
  (
  (($mk_symm (_ (= t1) t2)) (_ (= t2) t1))
  (($mk_symm (not (_ (= t1) t2))) (not (_ (= t2) t1)))
  )
)
; fwd-decl: $mk_trans
(program $mk_trans ((U Type))
  :signature (U U Bool) Bool
)
; program: $mk_trans.fev1
(program $mk_trans.fev1 ((U Type) (t3 U) (t2 U) ($eo_2 Bool) (t1 U) (t4 U) (tail Bool))
  :signature (Bool U U U U Bool Bool) Bool
  (
  (($mk_trans.fev1 tail t4 t1 t3 t2 $eo_2 $eo_2) ($mk_trans t1 t4 tail))
  )
)
; program: $mk_trans
(program $mk_trans ((U Type) (tail Bool) (t4 U) (t3 U) (t1 U) (t2 U))
  :signature (U U Bool) Bool
  (
  (($mk_trans t1 t2 (_ (and (_ (= t3) t4)) tail)) ($mk_trans.fev1 tail t4 t1 t3 t2 t2 t3))
  (($mk_trans t1 t2 true) (_ (= t1) t2))
  )
)
; fwd-decl: $mk_cong_rhs
(program $mk_cong_rhs ((U Type))
  :signature (U Bool) U
)
; program: $mk_cong_rhs.fev1
(program $mk_cong_rhs.fev1 ((T Type) (U Type) (tail Bool) (f (-> T U)) ($eo_1 (-> T U)) (t2 U))
  :signature (U Bool (-> T U) (-> T U)) U
  (
  (($mk_cong_rhs.fev1 t2 tail f $eo_1) ($eo_1 t2))
  )
)
; program: $mk_cong_rhs
(program $mk_cong_rhs ((U Type) (t1 U) (t2 U) (tail Bool) (T Type) (f (-> T U)))
  :signature (U Bool) U
  (
  (($mk_cong_rhs (f t1) (_ (and (_ (= t1) t2)) tail)) ($mk_cong_rhs.fev1 t2 tail f ($mk_cong_rhs f tail)))
  (($mk_cong_rhs f true) f)
  )
)
; program: $mk_nary_cong_rhs
(program $mk_nary_cong_rhs ((U Type) (s1 U) (f (-> U (-> U U))) (s2 U) (t U) (tail Bool) (nil U))
  :signature (U Bool) U
  (
  (($mk_nary_cong_rhs (_ (f s1) t) (_ (and (_ (= s1) s2)) tail)) (eo::cons f s2 ($mk_nary_cong_rhs t tail)))
  (($mk_nary_cong_rhs nil true) nil)
  )
)
; program: $mk_ho_cong
(program $mk_ho_cong ((U Type) (T Type) (f1 (-> T U)) (f2 (-> T U)) (tail Bool) (t1 U) (t2 U))
  :signature (U U Bool) Bool
  (
  (($mk_ho_cong f1 f2 (_ (and (_ (= t1) t2)) tail)) ($mk_ho_cong (f1 t1) (f2 t2) tail))
  (($mk_ho_cong t1 t2 true) (_ (= t1) t2))
  )
)
; program: $mk_distinct-elim
(program $mk_distinct-elim ((b Bool) (T Type) (x T) (y T))
  :signature (Bool) Bool
  (
  (($mk_distinct-elim (_ (and (_ (distinct x) y)) b)) (eo::cons and (not (_ (= x) y)) ($mk_distinct-elim b)))
  (($mk_distinct-elim true) true)
  (($mk_distinct-elim (_ (distinct x) y)) (not (_ (= x) y)))
  )
)
; declare: /
(declare-parameterized-const / ((T Type :implicit) ($eo_x_1 T) (U Type :implicit) ($eo_x_2 U)) Real)
; declare: /_total
(declare-parameterized-const /_total ((T Type :implicit) ($eo_x_1 T) (U Type :implicit) ($eo_x_2 U)) Real)
; declare: @div_by_zero
(declare-const @div_by_zero (-> Real Real))
; program: $arith_eval_int_log_2_rec
(program $arith_eval_int_log_2_rec ((x Int))
  :signature (Int) Int
  (
  (($arith_eval_int_log_2_rec 1) 0)
  (($arith_eval_int_log_2_rec x) (eo::add 1 ($arith_eval_int_log_2_rec (eo::zdiv x 2))))
  )
)
; program: $arith_eval_int_pow_2_rec
(program $arith_eval_int_pow_2_rec ((x Int))
  :signature (Int) Int
  (
  (($arith_eval_int_pow_2_rec 0) 1)
  (($arith_eval_int_pow_2_rec x) (eo::mul 2 ($arith_eval_int_pow_2_rec (eo::add x -1))))
  )
)
; fwd-decl: $arith_eval_int_is_pow_2_rec
(program $arith_eval_int_is_pow_2_rec ()
  :signature (Int) Bool
)
; program: $arith_eval_int_is_pow_2_rec.fev1
(program $arith_eval_int_is_pow_2_rec.fev1 ((x Int))
  :signature (Int Bool) Bool
  (
  (($arith_eval_int_is_pow_2_rec.fev1 x true) ($arith_eval_int_is_pow_2_rec (eo::zdiv x 2)))
  (($arith_eval_int_is_pow_2_rec.fev1 x false) false)
  )
)
; program: $arith_eval_int_is_pow_2_rec
(program $arith_eval_int_is_pow_2_rec ((x Int))
  :signature (Int) Bool
  (
  (($arith_eval_int_is_pow_2_rec 1) true)
  (($arith_eval_int_is_pow_2_rec x) ($arith_eval_int_is_pow_2_rec.fev1 x (eo::eq (eo::zmod x 2) 0)))
  )
)
; program: $arith_unfold_pow_rec.fev1
(program $arith_unfold_pow_rec.fev1 ((n Int) (T Type))
  :signature (Type Int Bool) Type
  (
  (($arith_unfold_pow_rec.fev1 T n true) Int)
  (($arith_unfold_pow_rec.fev1 T n false) T)
  )
)
; program: $arith_unfold_pow_rec
(program $arith_unfold_pow_rec ((T Type) (n Int) (a T))
  :signature ((eo::quote n) T) ($arith_unfold_pow_rec.fev1 T n (eo::eq n 0))
  (
  (($arith_unfold_pow_rec 0 a) 1)
  (($arith_unfold_pow_rec n a) (eo::cons * a ($arith_unfold_pow_rec (eo::add n -1) a)))
  )
)
; declare: BitVec
(declare-const BitVec (-> Int Type))
; program: $bv_bitwidth
(program $bv_bitwidth ((n Int))
  :signature (Type) Int
  (
  (($bv_bitwidth (BitVec n)) n)
  )
)
; declare: @bvsize
(declare-parameterized-const @bvsize ((m Int :implicit) ($eo_x_1 (BitVec m))) Int)
; declare: concat
(declare-parameterized-const concat ((n Int :implicit) ($eo_x_1 (BitVec n)) (m Int :implicit) ($eo_x_2 (BitVec m))) (BitVec (eo::add n m)))
; declare: extract
(declare-parameterized-const extract ((h Int) (l Int) (n Int :implicit) ($eo_x_1 (BitVec n))) (BitVec (eo::add 1 (eo::neg l))))
; declare: repeat
(declare-parameterized-const repeat ((i Int) (n Int :implicit) ($eo_x_1 (BitVec n))) (BitVec (eo::mul i n)))
; declare: bvnot
(declare-parameterized-const bvnot ((m Int :implicit) ($eo_x_1 (BitVec m))) (BitVec m))
; declare: bvand
(declare-parameterized-const bvand ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) (BitVec m))
; declare: bvor
(declare-parameterized-const bvor ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) (BitVec m))
; declare: bvnand
(declare-parameterized-const bvnand ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) (BitVec m))
; declare: bvnor
(declare-parameterized-const bvnor ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) (BitVec m))
; declare: bvxor
(declare-parameterized-const bvxor ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) (BitVec m))
; declare: bvxnor
(declare-parameterized-const bvxnor ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) (BitVec m))
; declare: bvcomp
(declare-parameterized-const bvcomp ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) (BitVec 1))
; declare: bvneg
(declare-parameterized-const bvneg ((m Int :implicit) ($eo_x_1 (BitVec m))) (BitVec m))
; declare: bvadd
(declare-parameterized-const bvadd ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) (BitVec m))
; declare: bvmul
(declare-parameterized-const bvmul ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) (BitVec m))
; declare: bvudiv
(declare-parameterized-const bvudiv ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) (BitVec m))
; declare: bvurem
(declare-parameterized-const bvurem ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) (BitVec m))
; declare: bvsub
(declare-parameterized-const bvsub ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) (BitVec m))
; declare: bvsdiv
(declare-parameterized-const bvsdiv ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) (BitVec m))
; declare: bvsrem
(declare-parameterized-const bvsrem ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) (BitVec m))
; declare: bvsmod
(declare-parameterized-const bvsmod ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) (BitVec m))
; declare: bvult
(declare-parameterized-const bvult ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) Bool)
; declare: bvule
(declare-parameterized-const bvule ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) Bool)
; declare: bvugt
(declare-parameterized-const bvugt ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) Bool)
; declare: bvuge
(declare-parameterized-const bvuge ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) Bool)
; declare: bvslt
(declare-parameterized-const bvslt ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) Bool)
; declare: bvsle
(declare-parameterized-const bvsle ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) Bool)
; declare: bvsgt
(declare-parameterized-const bvsgt ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) Bool)
; declare: bvsge
(declare-parameterized-const bvsge ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) Bool)
; declare: bvshl
(declare-parameterized-const bvshl ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) (BitVec m))
; declare: bvlshr
(declare-parameterized-const bvlshr ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) (BitVec m))
; declare: bvashr
(declare-parameterized-const bvashr ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) (BitVec m))
; declare: zero_extend
(declare-parameterized-const zero_extend ((i Int) (m Int :implicit) ($eo_x_1 (BitVec m))) (BitVec (eo::add m i)))
; declare: sign_extend
(declare-parameterized-const sign_extend ((i Int) (m Int :implicit) ($eo_x_1 (BitVec m))) (BitVec (eo::add m i)))
; declare: rotate_left
(declare-parameterized-const rotate_left (($eo_x_1 Int) (m Int :implicit) ($eo_x_2 (BitVec m))) (BitVec m))
; declare: rotate_right
(declare-parameterized-const rotate_right (($eo_x_1 Int) (m Int :implicit) ($eo_x_2 (BitVec m))) (BitVec m))
; declare: reduce_and
(declare-parameterized-const reduce_and ((m Int :implicit) ($eo_x_1 (BitVec m))) (BitVec 1))
; declare: reduce_or
(declare-parameterized-const reduce_or ((m Int :implicit) ($eo_x_1 (BitVec m))) (BitVec 1))
; declare: reduce_xor
(declare-parameterized-const reduce_xor ((m Int :implicit) ($eo_x_1 (BitVec m))) (BitVec 1))
; declare: bvite
(declare-parameterized-const bvite (($eo_x_1 (BitVec 1)) (T Type :implicit) ($eo_x_2 T) ($eo_x_3 T)) T)
; declare: bv1ult
(declare-parameterized-const bv1ult ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) (BitVec 1))
; declare: bvuaddo
(declare-parameterized-const bvuaddo ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) Bool)
; declare: bvnego
(declare-parameterized-const bvnego ((m Int :implicit) ($eo_x_1 (BitVec m))) Bool)
; declare: bvsaddo
(declare-parameterized-const bvsaddo ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) Bool)
; declare: bvumulo
(declare-parameterized-const bvumulo ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) Bool)
; declare: bvsmulo
(declare-parameterized-const bvsmulo ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) Bool)
; declare: bvusubo
(declare-parameterized-const bvusubo ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) Bool)
; declare: bvssubo
(declare-parameterized-const bvssubo ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) Bool)
; declare: bvsdivo
(declare-parameterized-const bvsdivo ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) Bool)
; declare: bvultbv
(declare-parameterized-const bvultbv ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) (BitVec 1))
; declare: bvsltbv
(declare-parameterized-const bvsltbv ((m Int :implicit) ($eo_x_1 (BitVec m)) ($eo_x_2 (BitVec m))) (BitVec 1))
; declare: bvredand
(declare-parameterized-const bvredand ((m Int :implicit) ($eo_x_1 (BitVec m))) (BitVec 1))
; declare: bvredor
(declare-parameterized-const bvredor ((m Int :implicit) ($eo_x_1 (BitVec m))) (BitVec 1))
; declare: @bit
(declare-parameterized-const @bit (($eo_x_1 Int) (m Int :implicit) ($eo_x_2 (BitVec m))) Bool)
; declare: @from_bools
(declare-parameterized-const @from_bools (($eo_x_1 Bool) (n Int :implicit) ($eo_x_2 (BitVec n))) (BitVec (eo::add 1 n)))
; declare: @bv
(declare-parameterized-const @bv ((value Int) (w Int)) (BitVec w))
; declare: @Monomial
(declare-const @Monomial Type)
; declare: @mon
(declare-parameterized-const @mon ((T Type :implicit) ($eo_x_1 T) ($eo_x_2 Real)) @Monomial)
; declare: @Polynomial
(declare-const @Polynomial Type)
; declare: @poly.zero
(declare-const @poly.zero @Polynomial)
; declare: @poly
(declare-const @poly (-> @Monomial (-> @Polynomial @Polynomial)))
; fwd-decl: $poly_neg
(program $poly_neg ()
  :signature (@Polynomial) @Polynomial
)
; program: $poly_neg.fev1
(program $poly_neg.fev1 ((T Type) (p @Polynomial) (c Real) (a T) ($eo_2 Real) ($eo_1 @Polynomial))
  :signature (@Polynomial Real T @Polynomial Real) @Monomial
  (
  (($poly_neg.fev1 p c a $eo_1 $eo_2) (eo::cons @poly (_ (@mon a) $eo_2) $eo_1))
  )
)
; program: $poly_neg
(program $poly_neg ((T Type) (a T) (p @Polynomial) (c Real))
  :signature (@Polynomial) @Polynomial
  (
  (($poly_neg @poly.zero) @poly.zero)
  (($poly_neg (_ (@poly (_ (@mon a) c)) p)) ($poly_neg.fev1 p c a ($poly_neg p) (eo::neg c)))
  )
)
; fwd-decl: $poly_mod_coeffs
(program $poly_mod_coeffs ()
  :signature (@Polynomial Int) @Polynomial
)
; program: $poly_mod_coeffs.fev2
(program $poly_mod_coeffs.fev2 ((T Type) (w Int) (p @Polynomial) (c Real) (a T) ($eo_3 Real) ($eo_2 @Polynomial))
  :signature (Int @Polynomial Real T @Polynomial Real) @Monomial
  (
  (($poly_mod_coeffs.fev2 w p c a $eo_2 $eo_3) (eo::cons @poly (_ (@mon a) $eo_3) $eo_2))
  )
)
; program: $poly_mod_coeffs.fev1
(program $poly_mod_coeffs.fev1 ((T Type) (a T) (p @Polynomial) (c Real) (w Int))
  :signature (Int @Polynomial Real T Bool) @Polynomial
  (
  (($poly_mod_coeffs.fev1 w p c a true) ($poly_mod_coeffs p w))
  (($poly_mod_coeffs.fev1 w p c a false) ($poly_mod_coeffs.fev2 w p c a ($poly_mod_coeffs p w) (eo::to_q (eo::zmod (eo::to_z c) w))))
  )
)
; program: $poly_mod_coeffs
(program $poly_mod_coeffs ((p @Polynomial) (T Type) (a T) (c Real) (w Int))
  :signature (@Polynomial Int) @Polynomial
  (
  (($poly_mod_coeffs @poly.zero w) @poly.zero)
  (($poly_mod_coeffs (_ (@poly (_ (@mon a) c)) p) w) ($poly_mod_coeffs.fev1 w p c a (eo::eq (eo::zmod (eo::to_z c) w) 0)))
  )
)
; fwd-decl: $poly_add
(program $poly_add ()
  :signature (@Polynomial @Polynomial) @Polynomial
)
; program: $poly_add.fev3
(program $poly_add.fev3 ((T Type) (U Type) (a2 U) (c2 Real) (a1 T) (c1 Real) (p1 @Polynomial) (p2 @Polynomial))
  :signature (@Polynomial @Polynomial Real T Real U Bool) @Monomial
  (
  (($poly_add.fev3 p2 p1 c1 a1 c2 a2 true) (eo::cons @poly (_ (@mon a1) c1) ($poly_add p1 (_ (@poly (_ (@mon a2) c2)) p2))))
  (($poly_add.fev3 p2 p1 c1 a1 c2 a2 false) (eo::cons @poly (_ (@mon a2) c2) ($poly_add (_ (@poly (_ (@mon a1) c1)) p1) p2)))
  )
)
; program: $poly_add.fev4
(program $poly_add.fev4 ((T Type) (p2 @Polynomial) (p1 @Polynomial) (c2 Real) (c1 Real) (a1 T) ($eo_5 Real) ($eo_4 @Polynomial))
  :signature (@Polynomial @Polynomial Real Real T @Polynomial Real) @Monomial
  (
  (($poly_add.fev4 p2 p1 c2 c1 a1 $eo_4 $eo_5) (eo::cons @poly (_ (@mon a1) $eo_5) $eo_4))
  )
)
; program: $poly_add.fev2
(program $poly_add.fev2 ((T Type) (a1 T) (p1 @Polynomial) (p2 @Polynomial) (c1 Real) (c2 Real))
  :signature (@Polynomial @Polynomial Real Real T Bool) @Polynomial
  (
  (($poly_add.fev2 p2 p1 c2 c1 a1 true) ($poly_add p1 p2))
  (($poly_add.fev2 p2 p1 c2 c1 a1 false) ($poly_add.fev4 p2 p1 c2 c1 a1 ($poly_add p1 p2) (eo::add c1 c2)))
  )
)
; program: $poly_add.fev1
(program $poly_add.fev1 ((T Type) (U Type) (p2 @Polynomial) (p1 @Polynomial) (c1 Real) (c2 Real) (a2 U) (a1 T))
  :signature (@Polynomial @Polynomial Real T Real U Bool) @Polynomial
  (
  (($poly_add.fev1 p2 p1 c1 a1 c2 a2 true) ($poly_add.fev2 p2 p1 c2 c1 a1 (eo::eq (eo::add c1 c2) 0/1)))
  (($poly_add.fev1 p2 p1 c1 a1 c2 a2 false) ($poly_add.fev3 p2 p1 c1 a1 c2 a2 (eo::cmp a2 a1)))
  )
)
; program: $poly_add
(program $poly_add ((p2 @Polynomial) (p1 @Polynomial) (c1 Real) (c2 Real) (T Type) (a1 T) (U Type) (a2 U) (p @Polynomial))
  :signature (@Polynomial @Polynomial) @Polynomial
  (
  (($poly_add (_ (@poly (_ (@mon a1) c1)) p1) (_ (@poly (_ (@mon a2) c2)) p2)) ($poly_add.fev1 p2 p1 c1 a1 c2 a2 (eo::eq a1 a2)))
  (($poly_add @poly.zero p) p)
  (($poly_add p @poly.zero) p)
  )
)
; program: $mvar_mul_mvar.fev1
(program $mvar_mul_mvar.fev1 ((X Type) (Y Type))
  :signature (Type Type Bool) Type
  (
  (($mvar_mul_mvar.fev1 Y X true) X)
  (($mvar_mul_mvar.fev1 Y X false) ($arith_typeunion X Y))
  )
)
; fwd-decl: $mvar_mul_mvar
(program $mvar_mul_mvar ((X Type) (Y Type))
  :signature (X Y) ($mvar_mul_mvar.fev1 Y X (eo::eq X Y))
)
; program: $mvar_mul_mvar.fev7
(program $mvar_mul_mvar.fev7 ((m Int) (bc1 (BitVec m)) ($eo_11 (BitVec m)) (ba1 (BitVec m)))
  :signature ((BitVec m) (BitVec m) (BitVec m) (BitVec m)) (BitVec m)
  (
  (($mvar_mul_mvar.fev7 ba1 bc1 $eo_11 $eo_11) ba1)
  )
)
; program: $mvar_mul_mvar.fev6
(program $mvar_mul_mvar.fev6 ((m Int) ($eo_9 (BitVec m)) (ba1 (BitVec m)) (bc1 (BitVec m)))
  :signature ((BitVec m) (BitVec m) (BitVec m) (BitVec m)) (BitVec m)
  (
  (($mvar_mul_mvar.fev6 ba1 bc1 $eo_9 $eo_9) ($mvar_mul_mvar.fev7 ba1 bc1 (eo::to_z bc1) 1))
  )
)
; program: $mvar_mul_mvar.fev5
(program $mvar_mul_mvar.fev5 ((m Int) (ba1 (BitVec m)) ($eo_7 (BitVec m)) (bc1 (BitVec m)) (bc2 (BitVec m)))
  :signature ((BitVec m) (BitVec m) (BitVec m) (BitVec m) (BitVec m)) (BitVec m)
  (
  (($mvar_mul_mvar.fev5 bc2 bc1 ba1 $eo_7 $eo_7) (_ (bvmul bc1) bc2))
  )
)
; program: $mvar_mul_mvar.fev4
(program $mvar_mul_mvar.fev4 ((m Int) (bc1 (BitVec m)) ($eo_5 (BitVec m)) (ba1 (BitVec m)) (ba2 (BitVec m)))
  :signature ((BitVec m) (BitVec m) (BitVec m) (BitVec m) (BitVec m)) (BitVec m)
  (
  (($mvar_mul_mvar.fev4 ba2 ba1 bc1 $eo_5 $eo_5) (_ (bvmul ba1) ba2))
  )
)
; program: $mvar_mul_mvar.fev3
(program $mvar_mul_mvar.fev3 ((m Int) (bc1 (BitVec m)) (ba1 (BitVec m)) (ba2 (BitVec m)) (bc2 (BitVec m)))
  :signature ((BitVec m) (BitVec m) (BitVec m) (BitVec m) Bool) (BitVec m)
  (
  (($mvar_mul_mvar.fev3 bc2 ba2 ba1 bc1 true) (eo::cons bvmul ba1 ($mvar_mul_mvar ba2 (_ (bvmul bc1) bc2))))
  (($mvar_mul_mvar.fev3 bc2 ba2 ba1 bc1 false) (eo::cons bvmul bc1 ($mvar_mul_mvar (_ (bvmul ba1) ba2) bc2)))
  )
)
; program: $mvar_mul_mvar.fev2
(program $mvar_mul_mvar.fev2 ((W Type) (U Type) (V Type) (T Type) (c1 V) (a1 T) (a2 U) (c2 W))
  :signature (W U T V Bool) T
  (
  (($mvar_mul_mvar.fev2 c2 a2 a1 c1 true) (eo::cons * a1 ($mvar_mul_mvar a2 (_ (* c1) c2))))
  (($mvar_mul_mvar.fev2 c2 a2 a1 c1 false) (eo::cons * c1 ($mvar_mul_mvar (_ (* a1) a2) c2)))
  )
)
; program: $mvar_mul_mvar
(program $mvar_mul_mvar ((X Type) (Y Type) (T Type) (a1 T) (U Type) (a2 U) (V Type) (c1 V) (W Type) (c2 W) (m Int) (ba2 (BitVec m)) (bc2 (BitVec m)) (bc1 (BitVec m)) (ba1 (BitVec m)))
  :signature (X Y) ($mvar_mul_mvar.fev1 Y X (eo::eq X Y))
  (
  (($mvar_mul_mvar (_ (* a1) a2) (_ (* c1) c2)) ($mvar_mul_mvar.fev2 c2 a2 a1 c1 (eo::cmp c1 a1)))
  (($mvar_mul_mvar (_ (* a1) a2) 1) (_ (* a1) a2))
  (($mvar_mul_mvar 1 (_ (* c1) c2)) (_ (* c1) c2))
  (($mvar_mul_mvar (_ (bvmul ba1) ba2) (_ (bvmul bc1) bc2)) ($mvar_mul_mvar.fev3 bc2 ba2 ba1 bc1 (eo::cmp bc1 ba1)))
  (($mvar_mul_mvar (_ (bvmul ba1) ba2) bc1) ($mvar_mul_mvar.fev4 ba2 ba1 bc1 (eo::to_z bc1) 1))
  (($mvar_mul_mvar ba1 (_ (bvmul bc1) bc2)) ($mvar_mul_mvar.fev5 bc2 bc1 ba1 (eo::to_z ba1) 1))
  (($mvar_mul_mvar ba1 bc1) ($mvar_mul_mvar.fev6 ba1 bc1 (eo::to_z ba1) 1))
  )
)
; program: $mon_mul_mon.fev1
(program $mon_mul_mon.fev1 ((U Type) (T Type) ($eoT.fev2 Type) (c2 Real) (c1 Real) (a2 U) (a1 T) ($eo_3 $eoT.fev2) ($eo_1 Real))
  :signature (Real Real U T Real $eoT.fev2) @Monomial
  (
  (($mon_mul_mon.fev1 c2 c1 a2 a1 $eo_1 $eo_3) (_ (@mon $eo_3) $eo_1))
  )
)
; program: $mon_mul_mon
(program $mon_mul_mon ((c1 Real) (c2 Real) (T Type) (a1 T) (U Type) (a2 U))
  :signature (@Monomial @Monomial) @Monomial
  (
  (($mon_mul_mon (_ (@mon a1) c1) (_ (@mon a2) c2)) ($mon_mul_mon.fev1 c2 c1 a2 a1 (eo::mul c1 c2) ($mvar_mul_mvar a1 a2)))
  )
)
; fwd-decl: $poly_mul_mon
(program $poly_mul_mon ()
  :signature (@Monomial @Polynomial) @Polynomial
)
; program: $poly_mul_mon.fev1
(program $poly_mul_mon.fev1 ((p2 @Polynomial) (m1 @Monomial) (m2 @Monomial) ($eo_2 @Monomial) ($eo_1 @Polynomial))
  :signature (@Polynomial @Monomial @Monomial @Polynomial @Monomial) @Polynomial
  (
  (($poly_mul_mon.fev1 p2 m1 m2 $eo_1 $eo_2) ($poly_add (_ (@poly $eo_2) @poly.zero) $eo_1))
  )
)
; program: $poly_mul_mon
(program $poly_mul_mon ((p2 @Polynomial) (m2 @Monomial) (m1 @Monomial))
  :signature (@Monomial @Polynomial) @Polynomial
  (
  (($poly_mul_mon m1 (_ (@poly m2) p2)) ($poly_mul_mon.fev1 p2 m1 m2 ($poly_mul_mon m1 p2) ($mon_mul_mon m1 m2)))
  (($poly_mul_mon m1 @poly.zero) @poly.zero)
  )
)
; program: $poly_mul
(program $poly_mul ((m @Monomial) (p1 @Polynomial) (p @Polynomial))
  :signature (@Polynomial @Polynomial) @Polynomial
  (
  (($poly_mul (_ (@poly m) p1) p) ($poly_add ($poly_mul_mon m p) ($poly_mul p1 p)))
  (($poly_mul @poly.zero p) @poly.zero)
  (($poly_mul p @poly.zero) @poly.zero)
  )
)
; fwd-decl: $get_arith_poly_norm
(program $get_arith_poly_norm ((T Type))
  :signature (T) @Polynomial
)
; program: $get_arith_poly_norm.fev7
(program $get_arith_poly_norm.fev7 ((T Type) (a T) ($eo_5 Real))
  :signature (T Real) @Polynomial
  (
  (($get_arith_poly_norm.fev7 a $eo_5) (_ (@poly (_ (@mon 1) $eo_5)) @poly.zero))
  )
)
; program: $get_arith_poly_norm.fev6
(program $get_arith_poly_norm.fev6 ((T Type) (a T))
  :signature (T Bool) @Polynomial
  (
  (($get_arith_poly_norm.fev6 a true) @poly.zero)
  (($get_arith_poly_norm.fev6 a false) ($get_arith_poly_norm.fev7 a (eo::to_q a)))
  )
)
; program: $get_arith_poly_norm.fev5
(program $get_arith_poly_norm.fev5 ((T Type) (a T))
  :signature (T Bool) @Polynomial
  (
  (($get_arith_poly_norm.fev5 a true) ($get_arith_poly_norm.fev6 a (eo::is_eq (eo::to_q a) 0/1)))
  (($get_arith_poly_norm.fev5 a false) (_ (@poly (_ (@mon (_ (* a) 1)) 1/1)) @poly.zero))
  )
)
; program: $get_arith_poly_norm.fev4
(program $get_arith_poly_norm.fev4 ((V Type) (U Type) (a2 V) (a1 U))
  :signature (V U Bool) Bool
  (
  (($get_arith_poly_norm.fev4 a2 a1 true) (eo::not (eo::eq (eo::to_q a2) 0/1)))
  (($get_arith_poly_norm.fev4 a2 a1 false) false)
  )
)
; program: $get_arith_poly_norm.fev9
(program $get_arith_poly_norm.fev9 ((U Type) (V Type) (a1 U) (a2 V) ($eo_8 Real) ($eo_7 @Polynomial))
  :signature (U V @Polynomial Real) @Polynomial
  (
  (($get_arith_poly_norm.fev9 a1 a2 $eo_7 $eo_8) ($poly_mul_mon (_ (@mon 1) $eo_8) $eo_7))
  )
)
; program: $get_arith_poly_norm.fev8
(program $get_arith_poly_norm.fev8 ((V Type) (U Type) ($eo_2 Bool) (a1 U) (a2 V))
  :signature (V U Bool Bool) @Polynomial
  (
  (($get_arith_poly_norm.fev8 a2 a1 $eo_2 true) ($get_arith_poly_norm.fev9 a1 a2 ($get_arith_poly_norm a1) (eo::qdiv 1/1 (eo::to_q a2))))
  (($get_arith_poly_norm.fev8 a2 a1 $eo_2 false) (_ (@poly (_ (@mon (_ (* (_ (/ a1) a2)) 1)) 1/1)) @poly.zero))
  )
)
; program: $get_arith_poly_norm.fev3
(program $get_arith_poly_norm.fev3 ((V Type) (U Type) (a2 V) (a1 U) ($eo_2 Bool))
  :signature (V U Bool) @Polynomial
  (
  (($get_arith_poly_norm.fev3 a2 a1 $eo_2) ($get_arith_poly_norm.fev8 a2 a1 $eo_2 $eo_2))
  )
)
; program: $get_arith_poly_norm.fev2
(program $get_arith_poly_norm.fev2 ((V Type) (U Type) (a2 V) (a1 U))
  :signature (V U Bool) Bool
  (
  (($get_arith_poly_norm.fev2 a2 a1 true) (eo::not (eo::eq (eo::to_q a2) 0/1)))
  (($get_arith_poly_norm.fev2 a2 a1 false) false)
  )
)
; program: $get_arith_poly_norm.fev11
(program $get_arith_poly_norm.fev11 ((U Type) (V Type) (a1 U) (a2 V) ($eo_11 Real) ($eo_10 @Polynomial))
  :signature (U V @Polynomial Real) @Polynomial
  (
  (($get_arith_poly_norm.fev11 a1 a2 $eo_10 $eo_11) ($poly_mul_mon (_ (@mon 1) $eo_11) $eo_10))
  )
)
; program: $get_arith_poly_norm.fev10
(program $get_arith_poly_norm.fev10 ((V Type) (U Type) ($eo_1 Bool) (a1 U) (a2 V))
  :signature (V U Bool Bool) @Polynomial
  (
  (($get_arith_poly_norm.fev10 a2 a1 $eo_1 true) ($get_arith_poly_norm.fev11 a1 a2 ($get_arith_poly_norm a1) (eo::qdiv 1/1 (eo::to_q a2))))
  (($get_arith_poly_norm.fev10 a2 a1 $eo_1 false) (_ (@poly (_ (@mon (_ (* (_ (/ a1) a2)) 1)) 1/1)) @poly.zero))
  )
)
; program: $get_arith_poly_norm.fev1
(program $get_arith_poly_norm.fev1 ((V Type) (U Type) (a2 V) (a1 U) ($eo_1 Bool))
  :signature (V U Bool) @Polynomial
  (
  (($get_arith_poly_norm.fev1 a2 a1 $eo_1) ($get_arith_poly_norm.fev10 a2 a1 $eo_1 $eo_1))
  )
)
; program: $get_arith_poly_norm
(program $get_arith_poly_norm ((T Type) (V Type) (a2 V) (U Type) (a1 U) (a T))
  :signature (T) @Polynomial
  (
  (($get_arith_poly_norm ($eoo_-.2 a1)) ($poly_neg ($get_arith_poly_norm a1)))
  (($get_arith_poly_norm (_ (+ a1) a2)) ($poly_add ($get_arith_poly_norm a1) ($get_arith_poly_norm a2)))
  (($get_arith_poly_norm (_ (- a1) a2)) ($poly_add ($get_arith_poly_norm a1) ($poly_neg ($get_arith_poly_norm a2))))
  (($get_arith_poly_norm (_ (* a1) a2)) ($poly_mul ($get_arith_poly_norm a1) ($get_arith_poly_norm a2)))
  (($get_arith_poly_norm (_ (/ a1) a2)) ($get_arith_poly_norm.fev1 a2 a1 ($get_arith_poly_norm.fev2 a2 a1 (eo::is_q (eo::to_q a2)))))
  (($get_arith_poly_norm (_ (/_total a1) a2)) ($get_arith_poly_norm.fev3 a2 a1 ($get_arith_poly_norm.fev4 a2 a1 (eo::is_q (eo::to_q a2)))))
  (($get_arith_poly_norm (to_real a1)) ($get_arith_poly_norm a1))
  (($get_arith_poly_norm a) ($get_arith_poly_norm.fev5 a (eo::is_q (eo::to_q a))))
  )
)
; fwd-decl: $get_bv_poly_norm_rec
(program $get_bv_poly_norm_rec ((m Int))
  :signature ((BitVec m)) @Polynomial
)
; program: $get_bv_poly_norm_rec.fev3
(program $get_bv_poly_norm_rec.fev3 ((m Int) ($eoT.fev5 Type) ($eoT.fev7 Type) (b (BitVec m)) ($eo_6 $eoT.fev5))
  :signature ((BitVec m) $eoT.fev5) $eoT.fev7
  (
  (($get_bv_poly_norm_rec.fev3 b $eo_6) (_ (@poly (_ (@mon (_ (bvmul b) $eo_6)) 1/1)) @poly.zero))
  )
)
; program: $get_bv_poly_norm_rec.fev4
(program $get_bv_poly_norm_rec.fev4 ((m Int) ($eoT.fev9 Type) (b (BitVec m)) ($eo_10 $eoT.fev9) ($eo_8 Real))
  :signature ((BitVec m) Real $eoT.fev9) @Polynomial
  (
  (($get_bv_poly_norm_rec.fev4 b $eo_8 $eo_10) (_ (@poly (_ (@mon $eo_10) $eo_8)) @poly.zero))
  )
)
; program: $get_bv_poly_norm_rec.fev2
(program $get_bv_poly_norm_rec.fev2 ((m Int) (b (BitVec m)))
  :signature ((BitVec m) Bool) @Polynomial
  (
  (($get_bv_poly_norm_rec.fev2 b true) @poly.zero)
  (($get_bv_poly_norm_rec.fev2 b false) ($get_bv_poly_norm_rec.fev4 b (eo::to_q (eo::to_z b)) (eo::to_bin ($bv_bitwidth (eo::typeof b)) 1)))
  )
)
; program: $get_bv_poly_norm_rec.fev1
(program $get_bv_poly_norm_rec.fev1 ((m Int) ($eoT.fev3 Type) (b (BitVec m)))
  :signature ((BitVec m) Bool) $eoT.fev3
  (
  (($get_bv_poly_norm_rec.fev1 b true) ($get_bv_poly_norm_rec.fev2 b (eo::is_eq (eo::to_z b) 0)))
  (($get_bv_poly_norm_rec.fev1 b false) ($get_bv_poly_norm_rec.fev3 b (eo::nil bvmul (eo::typeof b))))
  )
)
; program: $get_bv_poly_norm_rec
(program $get_bv_poly_norm_rec ((m Int) (b1 (BitVec m)) (b2 (BitVec m)) (b (BitVec m)))
  :signature ((BitVec m)) @Polynomial
  (
  (($get_bv_poly_norm_rec (bvneg b1)) ($poly_neg ($get_bv_poly_norm_rec b1)))
  (($get_bv_poly_norm_rec (_ (bvadd b1) b2)) ($poly_add ($get_bv_poly_norm_rec b1) ($get_bv_poly_norm_rec b2)))
  (($get_bv_poly_norm_rec (_ (bvsub b1) b2)) ($poly_add ($get_bv_poly_norm_rec b1) ($poly_neg ($get_bv_poly_norm_rec b2))))
  (($get_bv_poly_norm_rec (_ (bvmul b1) b2)) ($poly_mul ($get_bv_poly_norm_rec b1) ($get_bv_poly_norm_rec b2)))
  (($get_bv_poly_norm_rec b) ($get_bv_poly_norm_rec.fev1 b (eo::is_bin b)))
  )
)
; fwd-decl: $arith_poly_to_term_rec
(program $arith_poly_to_term_rec ()
  :signature (@Polynomial) Real
)
; program: $arith_poly_to_term_rec.fev1
(program $arith_poly_to_term_rec.fev1 ((T Type) ($eoT.fev2 Type) (p @Polynomial) (c Real) (a T) ($eo_1 Real))
  :signature (@Polynomial T Real Real) $eoT.fev2
  (
  (($arith_poly_to_term_rec.fev1 p a c $eo_1) (_ (+ (_ (* c) (_ (* a) 1))) (_ (+ $eo_1) 0)))
  )
)
; program: $arith_poly_to_term_rec
(program $arith_poly_to_term_rec ((T Type) (a T) (c Real) (p @Polynomial))
  :signature (@Polynomial) Real
  (
  (($arith_poly_to_term_rec @poly.zero) 0/1)
  (($arith_poly_to_term_rec (_ (@poly (_ (@mon a) c)) p)) ($arith_poly_to_term_rec.fev1 p a c ($arith_poly_to_term_rec p)))
  )
)
; program: $arith_rel_sum
(program $arith_rel_sum ((T Type) (U Type) (V Type) (W Type) (a V) (b W))
  :signature (T U V W) Bool
  (
  (($arith_rel_sum < < a b) (_ (< a) b))
  (($arith_rel_sum < = a b) (_ (< a) b))
  (($arith_rel_sum < <= a b) (_ (< a) b))
  (($arith_rel_sum <= < a b) (_ (< a) b))
  (($arith_rel_sum <= = a b) (_ (<= a) b))
  (($arith_rel_sum <= <= a b) (_ (<= a) b))
  (($arith_rel_sum = < a b) (_ (< a) b))
  (($arith_rel_sum = = a b) (_ (<= a) b))
  (($arith_rel_sum = <= a b) (_ (<= a) b))
  )
)
; program: $mk_arith_sum_ub
(program $mk_arith_sum_ub ((acc Bool) (tail Bool) (T Type) (U Type) (r1 (-> T (-> U Bool))) (S Type) (V Type) (r2 (-> S (-> V Bool))) (a1 T) (a2 S) (b1 U) (b2 V))
  :signature (Bool Bool) Bool
  (
  (($mk_arith_sum_ub true acc) acc)
  (($mk_arith_sum_ub (_ (and (_ (r1 a1) b1)) tail) (_ (r2 a2) b2)) ($mk_arith_sum_ub tail ($arith_rel_sum r1 r2 (_ (+ a1) a2) (_ (+ b1) b2))))
  )
)
; program: $mk_arith_mult_pos
(program $mk_arith_mult_pos ((S Type) (T Type) (U Type) (r (-> T (-> U Bool))) (a T) (m S) (b U))
  :signature (S Bool) Bool
  (
  (($mk_arith_mult_pos m (_ (r a) b)) (eo::define ((_v0 (* m))) (_ (r (_ _v0 (_ (* a) 1))) (_ _v0 (_ (* b) 1)))))
  )
)
; program: $arith_rel_inv
(program $arith_rel_inv ((T Type) (U Type) (V Type) (a U) (b V))
  :signature (T U V) Bool
  (
  (($arith_rel_inv = a b) (_ (= a) b))
  (($arith_rel_inv < a b) (_ (> a) b))
  (($arith_rel_inv <= a b) (_ (>= a) b))
  (($arith_rel_inv > a b) (_ (< a) b))
  (($arith_rel_inv >= a b) (_ (<= a) b))
  )
)
; program: $mk_arith_mult_neg
(program $mk_arith_mult_neg ((S Type) (T Type) (U Type) (r (-> T (-> U Bool))) (a T) (m S) (b U))
  :signature (S Bool) Bool
  (
  (($mk_arith_mult_neg m (_ (r a) b)) (eo::define ((_v0 (* m))) ($arith_rel_inv r (_ _v0 (_ (* a) 1)) (_ _v0 (_ (* b) 1)))))
  )
)
; program: $arith_rel_trichotomy
(program $arith_rel_trichotomy ((T Type) (U Type) (V Type) (W Type) (a V) (b W))
  :signature (T U V W) Bool
  (
  (($arith_rel_trichotomy = < a b) (_ (> a) b))
  (($arith_rel_trichotomy = > a b) (_ (< a) b))
  (($arith_rel_trichotomy > = a b) (_ (< a) b))
  (($arith_rel_trichotomy < = a b) (_ (> a) b))
  (($arith_rel_trichotomy > < a b) (_ (= a) b))
  (($arith_rel_trichotomy < > a b) (_ (= a) b))
  )
)
; program: $arith_rel_neg
(program $arith_rel_neg ((T Type) (U Type) (V Type) (a U) (b V))
  :signature (T U V) Bool
  (
  (($arith_rel_neg < a b) (_ (>= a) b))
  (($arith_rel_neg <= a b) (_ (> a) b))
  (($arith_rel_neg > a b) (_ (<= a) b))
  (($arith_rel_neg >= a b) (_ (< a) b))
  )
)
; program: $arith_normalize_lit
(program $arith_normalize_lit ((T Type) (U Type) (r (-> T (-> U Bool))) (a T) (b U))
  :signature (Bool) Bool
  (
  (($arith_normalize_lit (not (not (_ (r a) b)))) (_ (r a) b))
  (($arith_normalize_lit (not (_ (r a) b))) ($arith_rel_neg r a b))
  (($arith_normalize_lit (_ (r a) b)) (_ (r a) b))
  )
)
; program: $mk_arith_trichotomy
(program $mk_arith_trichotomy ((T Type) (U Type) (r1 (-> T (-> U Bool))) (r2 (-> T (-> U Bool))) (a T) (b U))
  :signature (Bool Bool) Bool
  (
  (($mk_arith_trichotomy (_ (r1 a) b) (_ (r2 a) b)) ($arith_rel_trichotomy r1 r2 a b))
  )
)
; program: $greatest_int_lt.fev1
(program $greatest_int_lt.fev1 ((R Type) (c R))
  :signature (R Bool) Int
  (
  (($greatest_int_lt.fev1 c true) (eo::add -1 (eo::to_z c)))
  (($greatest_int_lt.fev1 c false) (eo::to_z c))
  )
)
; program: $greatest_int_lt
(program $greatest_int_lt ((R Type) (c R))
  :signature (R) Int
  (
  (($greatest_int_lt c) ($greatest_int_lt.fev1 c (eo::eq (eo::to_q c) (eo::to_q (eo::to_z c)))))
  )
)
; program: $least_int_gt
(program $least_int_gt ((R Type) (c R))
  :signature (R) Int
  (
  (($least_int_gt c) (eo::add 1 (eo::to_z c)))
  )
)
; program: $strip_even_exponent
(program $strip_even_exponent ((T Type) (U Type) (t T) (V Type) (m V))
  :signature (T U) U
  (
  ((eo::define ((_v0 (* t))) ($strip_even_exponent t (_ _v0 (_ _v0 m)))) ($strip_even_exponent t m))
  (($strip_even_exponent t m) m)
  )
)
; fwd-decl: $mk_arith_mult_sign_sgn
(program $mk_arith_mult_sign_sgn ((T Type))
  :signature (Bool Bool T) Bool
)
; program: $mk_arith_mult_sign_sgn.fev3
(program $mk_arith_mult_sign_sgn.fev3 ((V Type) (T Type) (U Type) (z U) ($eo_6 Bool) (sgn Bool) (F Bool) (t T) (m V))
  :signature (V T Bool Bool U Bool Bool) Bool
  (
  (($mk_arith_mult_sign_sgn.fev3 m t F sgn z $eo_6 $eo_6) ($mk_arith_mult_sign_sgn (eo::not sgn) F ($strip_even_exponent t m)))
  )
)
; program: $mk_arith_mult_sign_sgn.fev2
(program $mk_arith_mult_sign_sgn.fev2 ((V Type) (T Type) (U Type) (z U) ($eo_4 Bool) (sgn Bool) (F Bool) (t T) (m V))
  :signature (V T Bool Bool U Bool Bool) Bool
  (
  (($mk_arith_mult_sign_sgn.fev2 m t F sgn z $eo_4 $eo_4) ($mk_arith_mult_sign_sgn sgn F ($strip_even_exponent t m)))
  )
)
; program: $mk_arith_mult_sign_sgn.fev1
(program $mk_arith_mult_sign_sgn.fev1 ((V Type) (T Type) (U Type) (z U) ($eo_2 Bool) (sgn Bool) (F Bool) (t T) (m V))
  :signature (V T Bool Bool U Bool Bool) Bool
  (
  (($mk_arith_mult_sign_sgn.fev1 m t F sgn z $eo_2 $eo_2) ($mk_arith_mult_sign_sgn sgn F ($strip_even_exponent t m)))
  )
)
; program: $mk_arith_mult_sign_sgn
(program $mk_arith_mult_sign_sgn ((T Type) (t T) (F Bool) (U Type) (z U) (sgn Bool) (l Bool) (V Type) (m V))
  :signature (Bool Bool T) Bool
  (
  ((eo::define ((_v0 (* t))) ($mk_arith_mult_sign_sgn sgn (_ (and (not (_ (= t) z))) F) (_ _v0 (_ _v0 m)))) ($mk_arith_mult_sign_sgn.fev1 m t F sgn z (eo::to_z z) 0))
  (($mk_arith_mult_sign_sgn sgn (_ (and (_ (> t) z)) F) (_ (* t) m)) ($mk_arith_mult_sign_sgn.fev2 m t F sgn z (eo::to_z z) 0))
  (($mk_arith_mult_sign_sgn sgn (_ (and (_ (< t) z)) F) (_ (* t) m)) ($mk_arith_mult_sign_sgn.fev3 m t F sgn z (eo::to_z z) 0))
  (($mk_arith_mult_sign_sgn sgn true 1) sgn)
  (($mk_arith_mult_sign_sgn sgn l m) ($mk_arith_mult_sign_sgn sgn (eo::cons and l true) m))
  )
)
; fwd-decl: $mk_arith_mult_abs_comparison_rec
(program $mk_arith_mult_abs_comparison_rec ()
  :signature (Bool Bool) Bool
)
; program: $mk_arith_mult_abs_comparison_rec.fev3
(program $mk_arith_mult_abs_comparison_rec.fev3 ((U Type) (T Type) (X Type) (W Type) ($eoT.fev9 Type) (u U) (b X) (t T) (a W) (B Bool) ($eo_8 W) ($eo_7 X))
  :signature (U X T W Bool X W) $eoT.fev9
  (
  (($mk_arith_mult_abs_comparison_rec.fev3 u b t a B $eo_7 $eo_8) ($mk_arith_mult_abs_comparison_rec B (_ (> $eo_8) $eo_7)))
  )
)
; program: $mk_arith_mult_abs_comparison_rec.fev2
(program $mk_arith_mult_abs_comparison_rec.fev2 ((U Type) (X Type) (T Type) (W Type) (V Type) ($eoT.fev5 Type) (z V) ($eo_6 $eoT.fev5) (B Bool) (b X) (u U) (a W) (t T))
  :signature (U X T W Bool V $eoT.fev5 $eoT.fev5) $eoT.fev5
  (
  (($mk_arith_mult_abs_comparison_rec.fev2 u b t a B z $eo_6 $eo_6) ($mk_arith_mult_abs_comparison_rec.fev3 u b t a B (eo::list_concat * b (_ (* u) 1)) (eo::list_concat * a (_ (* t) 1))))
  )
)
; program: $mk_arith_mult_abs_comparison_rec.fev1
(program $mk_arith_mult_abs_comparison_rec.fev1 ((U Type) (T Type) (X Type) (W Type) (u U) (b X) (t T) (a W) (B Bool) (r (-> W (-> X Bool))) ($eo_2 W) ($eo_1 X))
  :signature (U X T W (-> W (-> X Bool)) Bool X W) Bool
  (
  (($mk_arith_mult_abs_comparison_rec.fev1 u b t a r B $eo_1 $eo_2) ($mk_arith_mult_abs_comparison_rec B (_ (r $eo_2) $eo_1)))
  )
)
; program: $mk_arith_mult_abs_comparison_rec
(program $mk_arith_mult_abs_comparison_rec ((U Type) (u U) (T Type) (t T) (B Bool) (V Type) (z V) (W Type) (X Type) (r (-> W (-> X Bool))) (a W) (b X))
  :signature (Bool Bool) Bool
  (
  (($mk_arith_mult_abs_comparison_rec (_ (and (_ (r (abs t)) (abs u))) B) (_ (r a) b)) ($mk_arith_mult_abs_comparison_rec.fev1 u b t a r B (eo::list_concat * b (_ (* u) 1)) (eo::list_concat * a (_ (* t) 1))))
  (($mk_arith_mult_abs_comparison_rec (_ (and (_ (and (_ (= (abs t)) (abs u))) (_ (and (not (_ (= t) z))) true))) B) (_ (> a) b)) ($mk_arith_mult_abs_comparison_rec.fev2 u b t a B z (eo::to_z z) 0))
  (($mk_arith_mult_abs_comparison_rec true (_ (r a) b)) (_ (r (abs a)) (abs b)))
  )
)
; program: $mk_arith_mult_abs_comparison
(program $mk_arith_mult_abs_comparison ((B Bool) (T Type) (t T) (U Type) (u U))
  :signature (Bool) Bool
  (
  (($mk_arith_mult_abs_comparison (_ (and (_ (> (abs t)) (abs u))) B)) ($mk_arith_mult_abs_comparison_rec B (_ (> (_ (* t) 1)) (_ (* u) 1))))
  (($mk_arith_mult_abs_comparison (_ (and (_ (= (abs t)) (abs u))) B)) ($mk_arith_mult_abs_comparison_rec B (_ (= (_ (* t) 1)) (_ (* u) 1))))
  )
)
; program: $arith_reduction_pred.fev12
(program $arith_reduction_pred.fev12 ((U Type) (u U) ($eo_13 Real))
  :signature (U Real Real) Real
  (
  (($arith_reduction_pred.fev12 u $eo_13 $eo_13) 0/1)
  )
)
; program: $arith_reduction_pred.fev11
(program $arith_reduction_pred.fev11 ((U Type) (u U))
  :signature (U Bool) Int
  (
  (($arith_reduction_pred.fev11 u true) 0)
  (($arith_reduction_pred.fev11 u false) ($arith_reduction_pred.fev12 u (eo::typeof u) Real))
  )
)
; program: $arith_reduction_pred.fev10
(program $arith_reduction_pred.fev10 ((U Type) ($eoT.fev11 Type) ($eo_10 Int) (u U))
  :signature (U Int) $eoT.fev11
  (
  (($arith_reduction_pred.fev10 u $eo_10) (_ (= (abs u)) (_ (_ (ite (_ (< u) $eo_10)) ($eoo_-.2 u)) u)))
  )
)
; program: $arith_reduction_pred.fev15
(program $arith_reduction_pred.fev15 ((b Int) (a Int))
  :signature (Int Int Bool) Int
  (
  (($arith_reduction_pred.fev15 b a true) -1)
  (($arith_reduction_pred.fev15 b a false) 1)
  )
)
; program: $arith_reduction_pred.fev14
(program $arith_reduction_pred.fev14 ((a Int) (b Int) ($eo_16 Int))
  :signature (Int Int Int) Bool
  (
  (($arith_reduction_pred.fev14 b a $eo_16) (eo::define ((_v0 (@purify (_ (div_total a) b)))) (eo::define ((_v1 (* b))) (_ (and (_ (<= (_ _v1 (_ (* _v0) 1))) a)) (_ (and (_ (< a) (_ _v1 (_ (* (_ (+ _v0) (_ (+ $eo_16) 0))) 1)))) true)))))
  )
)
; program: $arith_reduction_pred.fev13
(program $arith_reduction_pred.fev13 (($eo_15 Bool) (a Int) (b Int))
  :signature (Int Int Bool Bool) Bool
  (
  (($arith_reduction_pred.fev13 b a $eo_15 $eo_15) ($arith_reduction_pred.fev14 b a ($arith_reduction_pred.fev15 b a (eo::is_neg b))))
  )
)
; program: $arith_reduction_pred.fev9
(program $arith_reduction_pred.fev9 ((a Int) (b Int))
  :signature (Int Int Bool) Bool
  (
  (($arith_reduction_pred.fev9 b a true) ($arith_reduction_pred.fev13 b a (eo::eq b 0) false))
  (($arith_reduction_pred.fev9 b a false) (eo::define ((_v0 (@purify (_ (div_total a) b)))) (eo::define ((_v1 (+ _v0))) (eo::define ((_v2 (* b))) (eo::define ((_v3 (< a))) (eo::define ((_v4 (and (_ (<= (_ _v2 (_ (* _v0) 1))) a)))) (_ (and (_ (=> (_ (> b) 0)) (_ _v4 (_ (and (_ _v3 (_ _v2 (_ (* (_ _v1 (_ (+ 1) 0))) 1)))) true)))) (_ (and (_ (=> (_ (< b) 0)) (_ _v4 (_ (and (_ _v3 (_ _v2 (_ (* (_ _v1 (_ (+ -1) 0))) 1)))) true)))) true))))))))
  )
)
; program: $arith_reduction_pred.fev8
(program $arith_reduction_pred.fev8 ((a Int) (b Int) ($eo_9 Bool))
  :signature (Int Int Bool) Bool
  (
  (($arith_reduction_pred.fev8 b a $eo_9) (_ (and (_ (= (_ (mod_total a) b)) (_ (- a) (_ (* b) (_ (* (@purify (_ (div_total a) b))) 1))))) (_ (and $eo_9) true)))
  )
)
; program: $arith_reduction_pred.fev18
(program $arith_reduction_pred.fev18 ((b Int) (a Int))
  :signature (Int Int Bool) Int
  (
  (($arith_reduction_pred.fev18 b a true) -1)
  (($arith_reduction_pred.fev18 b a false) 1)
  )
)
; program: $arith_reduction_pred.fev17
(program $arith_reduction_pred.fev17 ((a Int) (b Int) ($eo_19 Int))
  :signature (Int Int Int) Bool
  (
  (($arith_reduction_pred.fev17 b a $eo_19) (eo::define ((_v0 (@purify (_ (div_total a) b)))) (eo::define ((_v1 (* b))) (_ (and (_ (<= (_ _v1 (_ (* _v0) 1))) a)) (_ (and (_ (< a) (_ _v1 (_ (* (_ (+ _v0) (_ (+ $eo_19) 0))) 1)))) true)))))
  )
)
; program: $arith_reduction_pred.fev16
(program $arith_reduction_pred.fev16 (($eo_18 Bool) (a Int) (b Int))
  :signature (Int Int Bool Bool) Bool
  (
  (($arith_reduction_pred.fev16 b a $eo_18 $eo_18) ($arith_reduction_pred.fev17 b a ($arith_reduction_pred.fev18 b a (eo::is_neg b))))
  )
)
; program: $arith_reduction_pred.fev7
(program $arith_reduction_pred.fev7 ((a Int) (b Int))
  :signature (Int Int Bool) Bool
  (
  (($arith_reduction_pred.fev7 b a true) ($arith_reduction_pred.fev16 b a (eo::eq b 0) false))
  (($arith_reduction_pred.fev7 b a false) (eo::define ((_v0 (@purify (_ (div_total a) b)))) (eo::define ((_v1 (+ _v0))) (eo::define ((_v2 (* b))) (eo::define ((_v3 (< a))) (eo::define ((_v4 (and (_ (<= (_ _v2 (_ (* _v0) 1))) a)))) (_ (and (_ (=> (_ (> b) 0)) (_ _v4 (_ (and (_ _v3 (_ _v2 (_ (* (_ _v1 (_ (+ 1) 0))) 1)))) true)))) (_ (and (_ (=> (_ (< b) 0)) (_ _v4 (_ (and (_ _v3 (_ _v2 (_ (* (_ _v1 (_ (+ -1) 0))) 1)))) true)))) true))))))))
  )
)
; program: $arith_reduction_pred.fev6
(program $arith_reduction_pred.fev6 ((a Int) (b Int) ($eo_8 Bool))
  :signature (Int Int Bool) Bool
  (
  (($arith_reduction_pred.fev6 b a $eo_8) (eo::define ((_v0 (_ (div_total a) b))) (_ (and (_ (= _v0) (@purify _v0))) (_ (and $eo_8) true))))
  )
)
; program: $arith_reduction_pred.fev19
(program $arith_reduction_pred.fev19 ((V Type) (v V) ($eo_21 Real))
  :signature (V Real Real) Real
  (
  (($arith_reduction_pred.fev19 v $eo_21 $eo_21) 0/1)
  )
)
; program: $arith_reduction_pred.fev5
(program $arith_reduction_pred.fev5 ((U Type) (V Type) (u U) (v V))
  :signature (U V Bool) Int
  (
  (($arith_reduction_pred.fev5 u v true) 0)
  (($arith_reduction_pred.fev5 u v false) ($arith_reduction_pred.fev19 v (eo::typeof v) Real))
  )
)
; program: $arith_reduction_pred.fev4
(program $arith_reduction_pred.fev4 ((U Type) (V Type) ($eoT.fev7 Type) ($eo_6 Int) (v V) (u U))
  :signature (U V Int) $eoT.fev7
  (
  (($arith_reduction_pred.fev4 u v $eo_6) (eo::define ((_v0 (_ (/_total u) v))) (eo::define ((_v1 (@purify _v0))) (_ (and (_ (= _v0) _v1)) (_ (and (_ (=> (not (_ (= v) $eo_6))) (_ (= (_ (* v) (_ (* _v1) 1))) u))) true)))))
  )
)
; program: $arith_reduction_pred.fev20
(program $arith_reduction_pred.fev20 ((V Type) (v V) ($eo_23 Real))
  :signature (V Real Real) Real
  (
  (($arith_reduction_pred.fev20 v $eo_23 $eo_23) 0/1)
  )
)
; program: $arith_reduction_pred.fev3
(program $arith_reduction_pred.fev3 ((V Type) (U Type) (u U) (v V))
  :signature (V U Bool) Int
  (
  (($arith_reduction_pred.fev3 v u true) 0)
  (($arith_reduction_pred.fev3 v u false) ($arith_reduction_pred.fev20 v (eo::typeof v) Real))
  )
)
; program: $arith_reduction_pred.fev2
(program $arith_reduction_pred.fev2 ((V Type) (U Type) ($eoT.fev5 Type) (v V) (u U))
  :signature (V U Bool) $eoT.fev5
  (
  (($arith_reduction_pred.fev2 v u true) (to_real u))
  (($arith_reduction_pred.fev2 v u false) u)
  )
)
; program: $arith_reduction_pred.fev1
(program $arith_reduction_pred.fev1 ((V Type) (U Type) ($eoT.fev1 Type) ($eoT.fev4 Type) ($eo_3 Int) ($eo_2 $eoT.fev1) (u U) (v V))
  :signature (V U $eoT.fev1 Int) $eoT.fev4
  (
  (($arith_reduction_pred.fev1 v u $eo_2 $eo_3) (_ (= (_ (/ u) v)) (_ (_ (ite (_ (= v) $eo_3)) (@div_by_zero $eo_2)) (_ (/_total u) v))))
  )
)
; program: $arith_reduction_pred
(program $arith_reduction_pred ((T Type) (V Type) (v V) (a Int) (b Int) (U Type) (u U))
  :signature (T) Bool
  (
  (($arith_reduction_pred (is_int u)) (eo::define ((_v0 (_ (- u) (@purify (to_int u))))) (_ (and (_ (= (is_int u)) (_ (= _v0) 0/1))) (_ (and (_ (and (_ (<= 0/1) _v0)) (_ (and (_ (< _v0) 1/1)) true))) true))))
  (($arith_reduction_pred (to_int u)) (eo::define ((_v0 (to_int u))) (eo::define ((_v1 (@purify _v0))) (eo::define ((_v2 (_ (- u) _v1))) (_ (and (_ (= _v0) _v1)) (_ (and (_ (and (_ (<= 0/1) _v2)) (_ (and (_ (< _v2) 1/1)) true))) true))))))
  (($arith_reduction_pred (_ (/ u) v)) ($arith_reduction_pred.fev1 v u ($arith_reduction_pred.fev2 v u (eo::eq (eo::typeof u) Int)) ($arith_reduction_pred.fev3 v u (eo::is_eq (eo::typeof v) Int))))
  (($arith_reduction_pred (_ (div a) b)) (_ (= (_ (div a) b)) (_ (_ (ite (_ (= b) 0)) (@int_div_by_zero a)) (_ (div_total a) b))))
  (($arith_reduction_pred (_ (mod a) b)) (_ (= (_ (mod a) b)) (_ (_ (ite (_ (= b) 0)) (@mod_by_zero a)) (_ (mod_total a) b))))
  (($arith_reduction_pred (_ (/_total u) v)) ($arith_reduction_pred.fev4 u v ($arith_reduction_pred.fev5 u v (eo::is_eq (eo::typeof v) Int))))
  (($arith_reduction_pred (_ (div_total a) b)) ($arith_reduction_pred.fev6 b a ($arith_reduction_pred.fev7 b a (eo::is_z b))))
  (($arith_reduction_pred (_ (mod_total a) b)) ($arith_reduction_pred.fev8 b a ($arith_reduction_pred.fev9 b a (eo::is_z b))))
  (($arith_reduction_pred (abs u)) ($arith_reduction_pred.fev10 u ($arith_reduction_pred.fev11 u (eo::is_eq (eo::typeof u) Int))))
  )
)
; program: $is_poly_norm_rel_consts.fev13
(program $is_poly_norm_rel_consts.fev13 ((T Type) (cx T))
  :signature (T Bool) Int
  (
  (($is_poly_norm_rel_consts.fev13 cx true) 1)
  (($is_poly_norm_rel_consts.fev13 cx false) 0)
  )
)
; program: $is_poly_norm_rel_consts.fev12
(program $is_poly_norm_rel_consts.fev12 ((U Type) (T Type) (cy U) (cx T))
  :signature (U T Bool) Int
  (
  (($is_poly_norm_rel_consts.fev12 cy cx true) -1)
  (($is_poly_norm_rel_consts.fev12 cy cx false) ($is_poly_norm_rel_consts.fev13 cx (eo::is_neg (eo::neg cx))))
  )
)
; program: $is_poly_norm_rel_consts.fev14
(program $is_poly_norm_rel_consts.fev14 ((U Type) (cy U))
  :signature (U Bool) Int
  (
  (($is_poly_norm_rel_consts.fev14 cy true) 1)
  (($is_poly_norm_rel_consts.fev14 cy false) 0)
  )
)
; program: $is_poly_norm_rel_consts.fev11
(program $is_poly_norm_rel_consts.fev11 ((U Type) (T Type) (cx T) (cy U))
  :signature (U T Bool) Int
  (
  (($is_poly_norm_rel_consts.fev11 cy cx true) -1)
  (($is_poly_norm_rel_consts.fev11 cy cx false) ($is_poly_norm_rel_consts.fev14 cy (eo::is_neg (eo::neg cy))))
  )
)
; program: $is_poly_norm_rel_consts.fev10
(program $is_poly_norm_rel_consts.fev10 ((U Type) (T Type) (cy U) (cx T) ($eo_8 Int) ($eo_7 Int))
  :signature (U T Int Int) Bool
  (
  (($is_poly_norm_rel_consts.fev10 cy cx $eo_7 $eo_8) (eo::eq $eo_8 $eo_7))
  )
)
; program: $is_poly_norm_rel_consts.fev15
(program $is_poly_norm_rel_consts.fev15 ((T Type) (cx T))
  :signature (T Bool) Int
  (
  (($is_poly_norm_rel_consts.fev15 cx true) 1)
  (($is_poly_norm_rel_consts.fev15 cx false) 0)
  )
)
; program: $is_poly_norm_rel_consts.fev9
(program $is_poly_norm_rel_consts.fev9 ((U Type) (T Type) (cy U) (cx T))
  :signature (U T Bool) Int
  (
  (($is_poly_norm_rel_consts.fev9 cy cx true) -1)
  (($is_poly_norm_rel_consts.fev9 cy cx false) ($is_poly_norm_rel_consts.fev15 cx (eo::is_neg (eo::neg cx))))
  )
)
; program: $is_poly_norm_rel_consts.fev16
(program $is_poly_norm_rel_consts.fev16 ((U Type) (cy U))
  :signature (U Bool) Int
  (
  (($is_poly_norm_rel_consts.fev16 cy true) 1)
  (($is_poly_norm_rel_consts.fev16 cy false) 0)
  )
)
; program: $is_poly_norm_rel_consts.fev8
(program $is_poly_norm_rel_consts.fev8 ((U Type) (T Type) (cx T) (cy U))
  :signature (U T Bool) Int
  (
  (($is_poly_norm_rel_consts.fev8 cy cx true) -1)
  (($is_poly_norm_rel_consts.fev8 cy cx false) ($is_poly_norm_rel_consts.fev16 cy (eo::is_neg (eo::neg cy))))
  )
)
; program: $is_poly_norm_rel_consts.fev7
(program $is_poly_norm_rel_consts.fev7 ((U Type) (T Type) (cy U) (cx T) ($eo_6 Int) ($eo_5 Int))
  :signature (U T Int Int) Bool
  (
  (($is_poly_norm_rel_consts.fev7 cy cx $eo_5 $eo_6) (eo::eq $eo_6 $eo_5))
  )
)
; program: $is_poly_norm_rel_consts.fev17
(program $is_poly_norm_rel_consts.fev17 ((T Type) (cx T))
  :signature (T Bool) Int
  (
  (($is_poly_norm_rel_consts.fev17 cx true) 1)
  (($is_poly_norm_rel_consts.fev17 cx false) 0)
  )
)
; program: $is_poly_norm_rel_consts.fev6
(program $is_poly_norm_rel_consts.fev6 ((U Type) (T Type) (cy U) (cx T))
  :signature (U T Bool) Int
  (
  (($is_poly_norm_rel_consts.fev6 cy cx true) -1)
  (($is_poly_norm_rel_consts.fev6 cy cx false) ($is_poly_norm_rel_consts.fev17 cx (eo::is_neg (eo::neg cx))))
  )
)
; program: $is_poly_norm_rel_consts.fev18
(program $is_poly_norm_rel_consts.fev18 ((U Type) (cy U))
  :signature (U Bool) Int
  (
  (($is_poly_norm_rel_consts.fev18 cy true) 1)
  (($is_poly_norm_rel_consts.fev18 cy false) 0)
  )
)
; program: $is_poly_norm_rel_consts.fev5
(program $is_poly_norm_rel_consts.fev5 ((U Type) (T Type) (cx T) (cy U))
  :signature (U T Bool) Int
  (
  (($is_poly_norm_rel_consts.fev5 cy cx true) -1)
  (($is_poly_norm_rel_consts.fev5 cy cx false) ($is_poly_norm_rel_consts.fev18 cy (eo::is_neg (eo::neg cy))))
  )
)
; program: $is_poly_norm_rel_consts.fev4
(program $is_poly_norm_rel_consts.fev4 ((U Type) (T Type) (cy U) (cx T) ($eo_4 Int) ($eo_3 Int))
  :signature (U T Int Int) Bool
  (
  (($is_poly_norm_rel_consts.fev4 cy cx $eo_3 $eo_4) (eo::eq $eo_4 $eo_3))
  )
)
; program: $is_poly_norm_rel_consts.fev19
(program $is_poly_norm_rel_consts.fev19 ((T Type) (cx T))
  :signature (T Bool) Int
  (
  (($is_poly_norm_rel_consts.fev19 cx true) 1)
  (($is_poly_norm_rel_consts.fev19 cx false) 0)
  )
)
; program: $is_poly_norm_rel_consts.fev3
(program $is_poly_norm_rel_consts.fev3 ((U Type) (T Type) (cy U) (cx T))
  :signature (U T Bool) Int
  (
  (($is_poly_norm_rel_consts.fev3 cy cx true) -1)
  (($is_poly_norm_rel_consts.fev3 cy cx false) ($is_poly_norm_rel_consts.fev19 cx (eo::is_neg (eo::neg cx))))
  )
)
; program: $is_poly_norm_rel_consts.fev20
(program $is_poly_norm_rel_consts.fev20 ((U Type) (cy U))
  :signature (U Bool) Int
  (
  (($is_poly_norm_rel_consts.fev20 cy true) 1)
  (($is_poly_norm_rel_consts.fev20 cy false) 0)
  )
)
; program: $is_poly_norm_rel_consts.fev2
(program $is_poly_norm_rel_consts.fev2 ((U Type) (T Type) (cx T) (cy U))
  :signature (U T Bool) Int
  (
  (($is_poly_norm_rel_consts.fev2 cy cx true) -1)
  (($is_poly_norm_rel_consts.fev2 cy cx false) ($is_poly_norm_rel_consts.fev20 cy (eo::is_neg (eo::neg cy))))
  )
)
; program: $is_poly_norm_rel_consts.fev1
(program $is_poly_norm_rel_consts.fev1 ((U Type) (T Type) (cy U) (cx T) ($eo_2 Int) ($eo_1 Int))
  :signature (U T Int Int) Bool
  (
  (($is_poly_norm_rel_consts.fev1 cy cx $eo_1 $eo_2) (eo::eq $eo_2 $eo_1))
  )
)
; program: $is_poly_norm_rel_consts
(program $is_poly_norm_rel_consts ((U Type) (cy U) (T Type) (cx T) (b Bool))
  :signature (Bool) Bool
  (
  (($is_poly_norm_rel_consts (_ (< cx) cy)) ($is_poly_norm_rel_consts.fev1 cy cx ($is_poly_norm_rel_consts.fev2 cy cx (eo::is_neg cy)) ($is_poly_norm_rel_consts.fev3 cy cx (eo::is_neg cx))))
  (($is_poly_norm_rel_consts (_ (<= cx) cy)) ($is_poly_norm_rel_consts.fev4 cy cx ($is_poly_norm_rel_consts.fev5 cy cx (eo::is_neg cy)) ($is_poly_norm_rel_consts.fev6 cy cx (eo::is_neg cx))))
  (($is_poly_norm_rel_consts (_ (= cx) cy)) true)
  (($is_poly_norm_rel_consts (_ (>= cx) cy)) ($is_poly_norm_rel_consts.fev7 cy cx ($is_poly_norm_rel_consts.fev8 cy cx (eo::is_neg cy)) ($is_poly_norm_rel_consts.fev9 cy cx (eo::is_neg cx))))
  (($is_poly_norm_rel_consts (_ (> cx) cy)) ($is_poly_norm_rel_consts.fev10 cy cx ($is_poly_norm_rel_consts.fev11 cy cx (eo::is_neg cy)) ($is_poly_norm_rel_consts.fev12 cy cx (eo::is_neg cx))))
  (($is_poly_norm_rel_consts b) false)
  )
)
; program: $is_eq_maybe_to_real
(program $is_eq_maybe_to_real ((U Type) (T Type) (x U))
  :signature (U T) Bool
  (
  (($is_eq_maybe_to_real x x) true)
  (($is_eq_maybe_to_real (to_real x) x) true)
  )
)
; program: $bv_unfold_repeat_rec.fev1
(program $bv_unfold_repeat_rec.fev1 ((m Int) (n Int) ($eo_1 Int))
  :signature (Int Int Int) Type
  (
  (($bv_unfold_repeat_rec.fev1 m n $eo_1) (BitVec $eo_1))
  )
)
; program: $bv_unfold_repeat_rec
(program $bv_unfold_repeat_rec ((m Int) (n Int) (b (BitVec m)))
  :signature ((eo::quote n) (BitVec m)) ($bv_unfold_repeat_rec.fev1 m n (eo::mul n m))
  (
  (($bv_unfold_repeat_rec 0 b) (eo::to_bin 0 0))
  (($bv_unfold_repeat_rec n b) (eo::cons concat b ($bv_unfold_repeat_rec (eo::add n -1) b)))
  )
)
; fwd-decl: $bv_get_first_const_child
(program $bv_get_first_const_child ((n Int))
  :signature ((BitVec n)) (BitVec n)
)
; program: $bv_get_first_const_child.fev1
(program $bv_get_first_const_child.fev1 ((n Int) (a (BitVec n)) (b (BitVec n)))
  :signature ((BitVec n) (BitVec n) Bool) (BitVec n)
  (
  (($bv_get_first_const_child.fev1 b a true) a)
  (($bv_get_first_const_child.fev1 b a false) ($bv_get_first_const_child b))
  )
)
; program: $bv_get_first_const_child
(program $bv_get_first_const_child ((n Int) (f (eo::define ((_v0 (BitVec n))) (-> _v0 (-> _v0 _v0)))) (b (BitVec n)) (a (BitVec n)))
  :signature ((BitVec n)) (BitVec n)
  (
  (($bv_get_first_const_child (_ (f a) b)) ($bv_get_first_const_child.fev1 b a (eo::is_bin a)))
  )
)
; program: $bv_bitblast_concat.fev1
(program $bv_bitblast_concat.fev1 ((m Int) (n Int) ($eo_1 Int))
  :signature (Int Int Int) Type
  (
  (($bv_bitblast_concat.fev1 m n $eo_1) (BitVec $eo_1))
  )
)
; program: $bv_bitblast_concat
(program $bv_bitblast_concat ((n Int) (m Int) (x Bool) (k Int) (y (BitVec k)) (z (BitVec m)))
  :signature ((BitVec n) (BitVec m)) ($bv_bitblast_concat.fev1 m n (eo::add n m))
  (
  (($bv_bitblast_concat (_ (@from_bools x) y) z) (eo::cons @from_bools x ($bv_bitblast_concat y z)))
  (($bv_bitblast_concat (eo::to_bin 0 0) z) z)
  )
)
; program: $bv_bitblast_binary_app
(program $bv_bitblast_binary_app ((T Type) (a Bool) (b Bool))
  :signature ((-> T (-> T Bool)) Bool Bool) Bool
  (
  (($bv_bitblast_binary_app and a b) (_ (and a) (_ (and b) true)))
  (($bv_bitblast_binary_app or a b) (_ (or a) (_ (or b) false)))
  (($bv_bitblast_binary_app xor a b) (_ (xor a) b))
  (($bv_bitblast_binary_app = a b) (_ (= a) b))
  )
)
; program: $bv_bitblast_repeat
(program $bv_bitblast_repeat ((b Bool) (n Int))
  :signature (Bool (eo::quote n)) (BitVec n)
  (
  (($bv_bitblast_repeat b 0) (eo::to_bin 0 0))
  (($bv_bitblast_repeat b n) (eo::cons @from_bools b ($bv_bitblast_repeat b (eo::add n -1))))
  )
)
; program: $bv_bitblast_prefix.fev2
(program $bv_bitblast_prefix.fev2 ((n Int) (l Int))
  :signature (Int Int Bool) Int
  (
  (($bv_bitblast_prefix.fev2 l n true) n)
  (($bv_bitblast_prefix.fev2 l n false) l)
  )
)
; program: $bv_bitblast_prefix.fev1
(program $bv_bitblast_prefix.fev1 ((l Int) (n Int) ($eo_1 Int))
  :signature (Int Int Int) Type
  (
  (($bv_bitblast_prefix.fev1 l n $eo_1) (BitVec $eo_1))
  )
)
; program: $bv_bitblast_prefix
(program $bv_bitblast_prefix ((n Int) (t (BitVec n)) (b Bool) (l Int) (a (BitVec n)))
  :signature ((eo::quote l) (BitVec n)) ($bv_bitblast_prefix.fev1 l n ($bv_bitblast_prefix.fev2 l n (eo::gt l n)))
  (
  (($bv_bitblast_prefix 0 t) (eo::to_bin 0 0))
  (($bv_bitblast_prefix l (eo::to_bin 0 0)) (eo::to_bin 0 0))
  (($bv_bitblast_prefix l (_ (@from_bools b) a)) (eo::cons @from_bools b ($bv_bitblast_prefix (eo::add l -1) a)))
  )
)
; program: $bv_bitblast_head
(program $bv_bitblast_head ((n Int) (a (BitVec n)) (b Bool))
  :signature ((BitVec n)) Bool
  (
  (($bv_bitblast_head (_ (@from_bools b) a)) b)
  )
)
; program: $bv_bitblast_tail.fev1
(program $bv_bitblast_tail.fev1 ((n Int) ($eo_1 Int))
  :signature (Int Int) Type
  (
  (($bv_bitblast_tail.fev1 n $eo_1) (BitVec $eo_1))
  )
)
; program: $bv_bitblast_tail
(program $bv_bitblast_tail ((n Int) (b Bool) (a (BitVec n)))
  :signature ((BitVec n)) ($bv_bitblast_tail.fev1 n (eo::add n -1))
  (
  (($bv_bitblast_tail (_ (@from_bools b) a)) a)
  )
)
; program: $bv_bitblast_subsequence.fev1
(program $bv_bitblast_subsequence.fev1 ((l Int) (u Int) ($eo_1 Int))
  :signature (Int Int Int) Type
  (
  (($bv_bitblast_subsequence.fev1 l u $eo_1) (BitVec $eo_1))
  )
)
; program: $bv_bitblast_subsequence
(program $bv_bitblast_subsequence ((n Int) (t (BitVec n)) (b Bool) (l Int) (u Int) (a (BitVec n)))
  :signature ((eo::quote l) (eo::quote u) (BitVec n)) ($bv_bitblast_subsequence.fev1 l u (eo::add u (eo::neg l)))
  (
  (($bv_bitblast_subsequence l u (eo::to_bin 0 0)) (eo::to_bin 0 0))
  (($bv_bitblast_subsequence 0 u t) ($bv_bitblast_prefix (eo::add u 1) t))
  (($bv_bitblast_subsequence l u (_ (@from_bools b) a)) ($bv_bitblast_subsequence (eo::add l -1) (eo::add u -1) a))
  )
)
; program: $bv_bitblast_apply_unary
(program $bv_bitblast_apply_unary ((n Int) (b1 Bool) (f (-> Bool Bool)) (m Int) (a1 (BitVec m)))
  :signature ((-> Bool Bool) (BitVec n)) (BitVec n)
  (
  (($bv_bitblast_apply_unary f (eo::to_bin 0 0)) (eo::to_bin 0 0))
  (($bv_bitblast_apply_unary f (_ (@from_bools b1) a1)) (eo::cons @from_bools (f b1) ($bv_bitblast_apply_unary f a1)))
  )
)
; program: $bv_bitblast_apply_binary
(program $bv_bitblast_apply_binary ((T Type) (n Int) (b1 Bool) (b2 Bool) (f (-> T (-> T Bool))) (m Int) (a1 (BitVec m)) (a2 (BitVec m)))
  :signature ((-> T (-> T Bool)) (BitVec n) (BitVec n)) (BitVec n)
  (
  (($bv_bitblast_apply_binary f (eo::to_bin 0 0) (eo::to_bin 0 0)) (eo::to_bin 0 0))
  (($bv_bitblast_apply_binary f (_ (@from_bools b1) a1) (_ (@from_bools b2) a2)) (eo::cons @from_bools ($bv_bitblast_binary_app f b1 b2) ($bv_bitblast_apply_binary f a1 a2)))
  )
)
; program: $bv_bitblast_apply_ite
(program $bv_bitblast_apply_ite ((n Int) (b1 Bool) (b2 Bool) (bc Bool) (m Int) (a1 (BitVec m)) (a2 (BitVec m)))
  :signature (Bool (BitVec n) (BitVec n)) (BitVec n)
  (
  (($bv_bitblast_apply_ite bc (eo::to_bin 0 0) (eo::to_bin 0 0)) (eo::to_bin 0 0))
  (($bv_bitblast_apply_ite bc (_ (@from_bools b1) a1) (_ (@from_bools b2) a2)) (eo::cons @from_bools (_ (_ (ite bc) b1) b2) ($bv_bitblast_apply_ite bc a1 a2)))
  )
)
; program: $bv_mk_bitblast_step_eq_rec
(program $bv_mk_bitblast_step_eq_rec ((n Int) (b1 Bool) (b2 Bool) (nm1 Int) (a1 (BitVec nm1)) (a2 (BitVec nm1)))
  :signature ((BitVec n) (BitVec n)) Bool
  (
  (($bv_mk_bitblast_step_eq_rec (eo::to_bin 0 0) (eo::to_bin 0 0)) true)
  (($bv_mk_bitblast_step_eq_rec (_ (@from_bools b1) a1) (_ (@from_bools b2) a2)) (eo::cons and (_ (= b1) b2) ($bv_mk_bitblast_step_eq_rec a1 a2)))
  )
)
; program: $bv_bitblast_ult_rec
(program $bv_bitblast_ult_rec ((n Int) (a1 (BitVec n)) (a2 (BitVec n)) (res Bool) (b1 Bool) (b2 Bool))
  :signature ((BitVec n) (BitVec n) Bool) Bool
  (
  (($bv_bitblast_ult_rec (eo::to_bin 0 0) (eo::to_bin 0 0) res) res)
  (($bv_bitblast_ult_rec (_ (@from_bools b1) a1) (_ (@from_bools b2) a2) res) ($bv_bitblast_ult_rec a1 a2 (_ (or (_ (and (_ (= b1) b2)) (_ (and res) true))) (_ (or (_ (and (not b1)) (_ (and b2) true))) false))))
  )
)
; program: $bv_bitblast_ult
(program $bv_bitblast_ult ((n Int) (orEqual Bool) (a1 (BitVec n)) (a2 (BitVec n)) (b1 Bool) (b2 Bool))
  :signature ((BitVec n) (BitVec n) Bool) Bool
  (
  (($bv_bitblast_ult (_ (@from_bools b1) a1) (_ (@from_bools b2) a2) orEqual) ($bv_bitblast_ult_rec a1 a2 (_ (and (not b1)) (_ (and b2) true))))
  )
)
; program: $bv_bitblast_slt_impl.fev2
(program $bv_bitblast_slt_impl.fev2 ((n Int) (orEqual Bool) (a2 (BitVec n)) (a1 (BitVec n)) ($eo_2 Bool) (b1 Bool) (b2 Bool))
  :signature (Bool Bool Bool (BitVec n) (BitVec n) Bool) Bool
  (
  (($bv_bitblast_slt_impl.fev2 b2 b1 orEqual a2 a1 $eo_2) (_ (or (_ (and (_ (= b1) b2)) (_ (and $eo_2) true))) (_ (or (_ (and b1) (_ (and (not b2)) true))) false)))
  )
)
; program: $bv_bitblast_slt_impl.fev1
(program $bv_bitblast_slt_impl.fev1 ((orEqual Bool) (b1 Bool) (b2 Bool))
  :signature (Bool Bool Bool Bool) Bool
  (
  (($bv_bitblast_slt_impl.fev1 b2 b1 orEqual true) (_ (or (_ (= b1) b2)) (_ (or (_ (and b1) (_ (and (not b2)) true))) false)))
  (($bv_bitblast_slt_impl.fev1 b2 b1 orEqual false) (_ (and b1) (_ (and (not b2)) true)))
  )
)
; program: $bv_bitblast_slt_impl
(program $bv_bitblast_slt_impl ((n Int) (b2 Bool) (b1 Bool) (a1 (BitVec n)) (a2 (BitVec n)) (orEqual Bool))
  :signature ((BitVec n) (BitVec n) Bool) Bool
  (
  (($bv_bitblast_slt_impl (_ (@from_bools b1) (eo::to_bin 0 0)) (_ (@from_bools b2) (eo::to_bin 0 0)) orEqual) ($bv_bitblast_slt_impl.fev1 b2 b1 orEqual orEqual))
  (($bv_bitblast_slt_impl (_ (@from_bools b1) a1) (_ (@from_bools b2) a2) orEqual) ($bv_bitblast_slt_impl.fev2 b2 b1 orEqual a2 a1 ($bv_bitblast_ult (eo::list_rev @from_bools a1) (eo::list_rev @from_bools a2) orEqual)))
  )
)
; program: $bv_mk_bitblast_step_concat
(program $bv_mk_bitblast_step_concat ((n Int) (m Int) (a2 (BitVec m)) (a1 (BitVec n)))
  :signature ((BitVec n)) (BitVec n)
  (
  (($bv_mk_bitblast_step_concat (eo::to_bin 0 0)) (eo::to_bin 0 0))
  (($bv_mk_bitblast_step_concat (_ (concat a1) a2)) ($bv_bitblast_concat ($bv_mk_bitblast_step_concat a2) a1))
  )
)
; program: $bv_mk_bitblast_step_bitwise
(program $bv_mk_bitblast_step_bitwise ((n Int) (T Type) (m Int) (a1 (BitVec m)) (bf (eo::define ((_v0 (BitVec n))) (-> _v0 (-> _v0 _v0)))) (f (-> T (-> T Bool))) (a2 (BitVec m)) (ac (BitVec m)))
  :signature ((eo::define ((_v0 (BitVec n))) (-> _v0 (-> _v0 _v0))) (-> T (-> T Bool)) (BitVec m) (BitVec m)) (BitVec m)
  (
  (($bv_mk_bitblast_step_bitwise bf f (_ (bf a1) a2) ac) ($bv_mk_bitblast_step_bitwise bf f a2 ($bv_bitblast_apply_binary f ac a1)))
  (($bv_mk_bitblast_step_bitwise bf f a2 ac) ac)
  )
)
; program: $bv_ripple_carry_adder_2.fev1
(program $bv_ripple_carry_adder_2.fev1 ((m Int) (n Int) ($eo_1 Int))
  :signature (Int Int Int) Type
  (
  (($bv_ripple_carry_adder_2.fev1 m n $eo_1) (_ (@Pair Bool) (BitVec $eo_1)))
  )
)
; fwd-decl: $bv_ripple_carry_adder_2
(program $bv_ripple_carry_adder_2 ((n Int) (m Int))
  :signature ((BitVec n) (BitVec n) Bool (BitVec m)) ($bv_ripple_carry_adder_2.fev1 m n (eo::add n m))
)
; program: $bv_ripple_carry_adder_2.fev2
(program $bv_ripple_carry_adder_2.fev2 ((m Int) (res (BitVec m)) (carry Bool) ($eo_2 (BitVec m)))
  :signature ((BitVec m) Bool (BitVec m)) (_ (@Pair Bool) (BitVec m))
  (
  (($bv_ripple_carry_adder_2.fev2 res carry $eo_2) (_ (@pair carry) $eo_2))
  )
)
; program: $bv_ripple_carry_adder_2
(program $bv_ripple_carry_adder_2 ((n Int) (m Int) (a1 (BitVec n)) (a2 (BitVec n)) (b1 Bool) (b2 Bool) (carry Bool) (res (BitVec m)))
  :signature ((BitVec n) (BitVec n) Bool (BitVec m)) ($bv_ripple_carry_adder_2.fev1 m n (eo::add n m))
  (
  (($bv_ripple_carry_adder_2 (_ (@from_bools b1) a1) (_ (@from_bools b2) a2) carry res) (eo::define ((_v0 (_ (xor b1) b2))) ($bv_ripple_carry_adder_2 a1 a2 (_ (or (_ (and b1) (_ (and b2) true))) (_ (or (_ (and _v0) (_ (and carry) true))) false)) (eo::cons @from_bools (_ (xor _v0) carry) res))))
  (($bv_ripple_carry_adder_2 (eo::to_bin 0 0) (eo::to_bin 0 0) carry res) ($bv_ripple_carry_adder_2.fev2 res carry (eo::list_rev @from_bools res)))
  )
)
; program: $bv_mk_bitblast_step_add
(program $bv_mk_bitblast_step_add ((n Int) (a1 (BitVec n)) (a2 (BitVec n)) (ac (BitVec n)))
  :signature ((BitVec n) (BitVec n)) (BitVec n)
  (
  (($bv_mk_bitblast_step_add (_ (bvadd a1) a2) ac) ($bv_mk_bitblast_step_add a2 ($pair_second ($bv_ripple_carry_adder_2 ac a1 false (eo::to_bin 0 0)))))
  (($bv_mk_bitblast_step_add a2 ac) ac)
  )
)
; program: $bv_shift_add_multiplier_rec_step
(program $bv_shift_add_multiplier_rec_step ((n Int) (np Int) (b2 Bool) (br Bool) (b1 Bool) (a2 (BitVec n)) (k Int) (m Int) (ar (BitVec m)) (carry Bool))
  :signature (Bool (BitVec n) Int (BitVec np) Bool) (BitVec np)
  (
  (($bv_shift_add_multiplier_rec_step b1 a2 0 (eo::to_bin 0 0) carry) (eo::to_bin 0 0))
  (($bv_shift_add_multiplier_rec_step b1 (_ (@from_bools b2) a2) 0 (_ (@from_bools br) ar) carry) (eo::define ((_v0 (_ (and b1) (_ (and b2) true)))) (eo::define ((_v1 (_ (xor br) _v0))) (eo::cons @from_bools (_ (xor _v1) carry) ($bv_shift_add_multiplier_rec_step b1 a2 0 ar (_ (or (_ (and br) (_ (and _v0) true))) (_ (or (_ (and _v1) (_ (and carry) true))) false)))))))
  (($bv_shift_add_multiplier_rec_step b1 a2 k (_ (@from_bools br) ar) carry) (eo::cons @from_bools br ($bv_shift_add_multiplier_rec_step b1 a2 (eo::add k -1) ar carry)))
  )
)
; program: $bv_shift_add_multiplier_rec
(program $bv_shift_add_multiplier_rec ((m Int) (n Int) (mm1 Int) (a1 (BitVec mm1)) (b1 Bool) (a2 (BitVec n)) (k Int) (res (BitVec n)))
  :signature ((BitVec m) (BitVec n) Int (BitVec n)) (BitVec n)
  (
  (($bv_shift_add_multiplier_rec (eo::to_bin 0 0) a2 k res) res)
  (($bv_shift_add_multiplier_rec (_ (@from_bools b1) a1) a2 k res) ($bv_shift_add_multiplier_rec a1 a2 (eo::add k 1) ($bv_shift_add_multiplier_rec_step b1 a2 k res false)))
  )
)
; program: $bv_shift_add_multiplier
(program $bv_shift_add_multiplier ((m Int) (n Int) (k Int) (a1 (BitVec k)) (b1 Bool) (a2 (BitVec n)))
  :signature ((BitVec n) (BitVec m)) (BitVec n)
  (
  (($bv_shift_add_multiplier a2 (_ (@from_bools b1) a1)) ($bv_shift_add_multiplier_rec a1 a2 1 ($bv_bitblast_apply_binary and ($bv_bitblast_repeat b1 ($bv_bitwidth (eo::typeof a2))) a2)))
  )
)
; program: $bv_mk_bitblast_step_mul
(program $bv_mk_bitblast_step_mul ((n Int) (a1 (BitVec n)) (a2 (BitVec n)) (ac (BitVec n)))
  :signature ((BitVec n) (BitVec n)) (BitVec n)
  (
  (($bv_mk_bitblast_step_mul (_ (bvmul a1) a2) ac) ($bv_mk_bitblast_step_mul a2 ($bv_shift_add_multiplier ac a1)))
  (($bv_mk_bitblast_step_mul a2 ac) ac)
  )
)
; fwd-decl: $bv_div_mod_impl
(program $bv_div_mod_impl ((n Int))
  :signature ((BitVec n) (BitVec n) (BitVec n) Int) (eo::define ((_v0 (BitVec n))) (_ (@Pair _v0) _v0))
)
; program: $bv_div_mod_impl.fev3
(program $bv_div_mod_impl.fev3 (($eoT.fev11 Type) ($eoT.fev13 Type) ($eoT.fev15 Type) ($eoT.fev6 Type) ($eoT.fev8 Type) (n Int) ($eoT.fev20 Type) ($eoT.fev18 Type) ($eo_12 $eoT.fev11) ($eo_14 $eoT.fev13) ($eo_16 $eoT.fev15) (a1 (BitVec n)) ($eo_5 Bool) ($eo_7 $eoT.fev6) ($eo_9 $eoT.fev8) (zero (BitVec n)) ($eo_21 $eoT.fev20) ($eo_19 $eoT.fev18))
  :signature ($eoT.fev11 $eoT.fev13 $eoT.fev15 (BitVec n) Bool $eoT.fev6 $eoT.fev8 (BitVec n) $eoT.fev18 $eoT.fev20) (_ (@Pair $eoT.fev20) $eoT.fev18)
  (
  (($bv_div_mod_impl.fev3 $eo_12 $eo_14 $eo_16 a1 $eo_5 $eo_7 $eo_9 zero $eo_19 $eo_21) (_ (@pair $eo_21) $eo_19))
  )
)
; program: $bv_div_mod_impl.fev2
(program $bv_div_mod_impl.fev2 (($eoT.fev3 Type) (n Int) ($eoT.fev6 Type) ($eoT.fev8 Type) ($eoT.fev11 Type) ($eoT.fev13 Type) ($eoT.fev15 Type) ($eoT.fev17 Type) ($eo_1 (BitVec n)) ($eo_2 Bool) ($eo_4 $eoT.fev3) (a1 (BitVec n)) ($eo_14 $eoT.fev13) ($eo_12 $eoT.fev11) ($eo_5 Bool) (zero (BitVec n)) ($eo_16 $eoT.fev15) ($eo_9 $eoT.fev8) ($eo_7 $eoT.fev6))
  :signature ((BitVec n) Bool (BitVec n) $eoT.fev3 (BitVec n) Bool $eoT.fev6 $eoT.fev8 $eoT.fev11 $eoT.fev13 $eoT.fev15) $eoT.fev17
  (
  (($bv_div_mod_impl.fev2 $eo_1 $eo_2 zero $eo_4 a1 $eo_5 $eo_7 $eo_9 $eo_12 $eo_14 $eo_16) (eo::define ((_v0 (not $eo_16))) (eo::define ((_v1 (not $eo_5))) ($bv_div_mod_impl.fev3 $eo_12 $eo_14 $eo_16 a1 $eo_5 $eo_7 $eo_9 zero ($bv_bitblast_apply_ite _v1 a1 ($bv_bitblast_apply_ite _v0 $eo_14 $eo_12)) ($bv_bitblast_apply_ite _v1 zero (eo::cons @from_bools (_ (_ (ite _v0) $eo_9) true) $eo_7))))))
  )
)
; program: $bv_div_mod_impl.fev1
(program $bv_div_mod_impl.fev1 ((n Int) ($eoT.fev3 Type) ($eoT.fev6 Type) ($eoT.fev8 Type) ($eoT.fev10 Type) (a2 (BitVec n)) (sz Int) (a1 (BitVec n)) ($eo_5 Bool) ($eo_7 $eoT.fev6) ($eo_9 $eoT.fev8) ($eo_4 $eoT.fev3) (zero (BitVec n)) ($eo_2 Bool) ($eo_1 (BitVec n)))
  :signature ((BitVec n) (BitVec n) (BitVec n) Int (BitVec n) Bool $eoT.fev3 Bool $eoT.fev6 $eoT.fev8) $eoT.fev10
  (
  (($bv_div_mod_impl.fev1 a2 a1 zero sz $eo_1 $eo_2 $eo_4 $eo_5 $eo_7 $eo_9) (eo::define ((_v0 ($pair_second ($bv_ripple_carry_adder_2 $eo_4 zero (_ (_ (ite (_ (= $eo_2) true)) true) false) (eo::to_bin 0 0))))) (eo::define ((_v1 ($bv_ripple_carry_adder_2 _v0 $eo_1 true (eo::to_bin 0 0)))) ($bv_div_mod_impl.fev2 $eo_1 $eo_2 zero $eo_4 a1 $eo_5 $eo_7 $eo_9 ($pair_second _v1) _v0 ($pair_first _v1)))))
  )
)
; program: $bv_div_mod_impl
(program $bv_div_mod_impl ((n Int) (a1 (BitVec n)) (a2 (BitVec n)) (zero (BitVec n)) (sz Int))
  :signature ((BitVec n) (BitVec n) (BitVec n) Int) (eo::define ((_v0 (BitVec n))) (_ (@Pair _v0) _v0))
  (
  (($bv_div_mod_impl a1 a2 zero 0) (_ (@pair zero) zero))
  (($bv_div_mod_impl zero a2 zero sz) (_ (@pair zero) zero))
  (($bv_div_mod_impl a1 a2 zero sz) (eo::define ((_v0 (_ (@from_bools false) (eo::to_bin 0 0)))) (eo::define ((_v1 ($bv_div_mod_impl ($bv_bitblast_concat ($bv_bitblast_subsequence 1 (eo::list_len @from_bools a1) a1) _v0) a2 zero (eo::add sz -1)))) (eo::define ((_v2 ($bv_bitblast_concat _v0 ($bv_bitblast_subsequence 0 -2 ($pair_first _v1))))) (eo::define ((_v3 ($bv_bitblast_apply_unary not a2))) ($bv_div_mod_impl.fev1 a2 a1 zero sz _v3 ($bv_bitblast_head a1) ($bv_bitblast_concat _v0 ($bv_bitblast_subsequence 0 -2 ($pair_second _v1))) ($pair_first ($bv_ripple_carry_adder_2 a1 _v3 true (eo::to_bin 0 0))) ($bv_bitblast_tail _v2) ($bv_bitblast_head _v2)))))))
  )
)
; program: $bv_mk_bitblast_step_ite
(program $bv_mk_bitblast_step_ite ((n Int) (b1 Bool) (b2 Bool) (a1 (BitVec n)) (a2 (BitVec n)) (bc Bool))
  :signature ((BitVec 1) (BitVec n) (BitVec n)) (BitVec n)
  (
  (($bv_mk_bitblast_step_ite (_ (@from_bools bc) (eo::to_bin 0 0)) (_ (@from_bools b1) a1) (_ (@from_bools b2) a2)) (eo::cons @from_bools (_ (and (_ (or (not bc)) (_ (or b1) false))) (_ (and (_ (or bc) (_ (or b2) false))) true)) ($bv_mk_bitblast_step_ite (_ (@from_bools bc) (eo::to_bin 0 0)) a1 a2)))
  (($bv_mk_bitblast_step_ite (_ (@from_bools bc) (eo::to_bin 0 0)) (eo::to_bin 0 0) (eo::to_bin 0 0)) (eo::to_bin 0 0))
  )
)
; program: $bv_const_to_bitlist_rec.fev1
(program $bv_const_to_bitlist_rec.fev1 ((i Int) (n Int) ($eo_1 Int))
  :signature (Int Int Int) Type
  (
  (($bv_const_to_bitlist_rec.fev1 i n $eo_1) (BitVec $eo_1))
  )
)
; program: $bv_const_to_bitlist_rec
(program $bv_const_to_bitlist_rec ((n Int) (c (BitVec n)) (i Int))
  :signature ((BitVec n) (eo::quote i) Int) ($bv_const_to_bitlist_rec.fev1 i n (eo::add n (eo::neg i)))
  (
  (($bv_const_to_bitlist_rec c n n) (eo::to_bin 0 0))
  (($bv_const_to_bitlist_rec c i n) (eo::cons @from_bools (eo::eq (eo::extract c i i) #b1) ($bv_const_to_bitlist_rec c (eo::add i 1) n)))
  )
)
; program: $bv_mk_bitblast_step_shl_rec_step
(program $bv_mk_bitblast_step_shl_rec_step ((n Int) (m Int) (b1c Bool) (b1 Bool) (mm1 Int) (a1 (BitVec mm1)) (a1c (BitVec n)) (i Int) (b2 Bool))
  :signature ((BitVec m) (BitVec n) Int Bool) (BitVec m)
  (
  (($bv_mk_bitblast_step_shl_rec_step (eo::to_bin 0 0) a1c i b2) (eo::to_bin 0 0))
  (($bv_mk_bitblast_step_shl_rec_step (_ (@from_bools b1) a1) (_ (@from_bools b1c) a1c) 0 b2) (eo::cons @from_bools (_ (_ (ite b2) b1c) b1) ($bv_mk_bitblast_step_shl_rec_step a1 a1c 0 b2)))
  (($bv_mk_bitblast_step_shl_rec_step (_ (@from_bools b1) a1) a1c i b2) (eo::cons @from_bools (_ (_ (ite b2) false) b1) ($bv_mk_bitblast_step_shl_rec_step a1 a1c (eo::add i -1) b2)))
  )
)
; fwd-decl: $bv_mk_bitblast_step_shl_rec
(program $bv_mk_bitblast_step_shl_rec ((m Int) (n Int))
  :signature ((BitVec n) (BitVec m) Int Int) (BitVec n)
)
; program: $bv_mk_bitblast_step_shl_rec.fev3
(program $bv_mk_bitblast_step_shl_rec.fev3 ((s Int))
  :signature (Int Bool) Int
  (
  (($bv_mk_bitblast_step_shl_rec.fev3 s true) 0)
  (($bv_mk_bitblast_step_shl_rec.fev3 s false) ($arith_eval_int_pow_2_rec s))
  )
)
; program: $bv_mk_bitblast_step_shl_rec.fev2
(program $bv_mk_bitblast_step_shl_rec.fev2 ((m Int) (n Int) (lsz Int) (a2 (BitVec m)) (b2 Bool) (a1 (BitVec n)) (s Int))
  :signature (Int Int (BitVec m) Bool (BitVec n) Bool) Int
  (
  (($bv_mk_bitblast_step_shl_rec.fev2 lsz s a2 b2 a1 true) ($bv_mk_bitblast_step_shl_rec.fev3 s (eo::is_neg s)))
  (($bv_mk_bitblast_step_shl_rec.fev2 lsz s a2 b2 a1 false) (int.pow2 s))
  )
)
; program: $bv_mk_bitblast_step_shl_rec.fev1
(program $bv_mk_bitblast_step_shl_rec.fev1 ((m Int) (n Int) (s Int) (a1 (BitVec n)) ($eo_2 Int) (b2 Bool) (a2 (BitVec m)) ($eo_1 Int) (lsz Int))
  :signature (Int Int (BitVec m) Bool (BitVec n) Int Int) (BitVec n)
  (
  (($bv_mk_bitblast_step_shl_rec.fev1 lsz s a2 b2 a1 $eo_1 $eo_2) ($bv_mk_bitblast_step_shl_rec ($bv_mk_bitblast_step_shl_rec_step a1 a1 $eo_2 b2) a2 $eo_1 lsz))
  )
)
; program: $bv_mk_bitblast_step_shl_rec
(program $bv_mk_bitblast_step_shl_rec ((m Int) (n Int) (lsz Int) (a2 (BitVec m)) (b2 Bool) (a1 (BitVec n)) (s Int))
  :signature ((BitVec n) (BitVec m) Int Int) (BitVec n)
  (
  (($bv_mk_bitblast_step_shl_rec a1 a2 lsz lsz) a1)
  (($bv_mk_bitblast_step_shl_rec a1 (_ (@from_bools b2) a2) s lsz) ($bv_mk_bitblast_step_shl_rec.fev1 lsz s a2 b2 a1 (eo::add s 1) ($bv_mk_bitblast_step_shl_rec.fev2 lsz s a2 b2 a1 (eo::is_z s))))
  )
)
; program: $bv_mk_bitblast_step_shr_rec_step
(program $bv_mk_bitblast_step_shr_rec_step ((n Int) (m Int) (b1 Bool) (b1c Bool) (mm1 Int) (a1 (BitVec mm1)) (a1c (BitVec n)) (i Int) (b2 Bool) (sbit Bool))
  :signature ((BitVec m) (BitVec n) Int Bool Bool) (BitVec m)
  (
  (($bv_mk_bitblast_step_shr_rec_step (eo::to_bin 0 0) a1c i b2 sbit) (eo::to_bin 0 0))
  (($bv_mk_bitblast_step_shr_rec_step (_ (@from_bools b1) a1) (_ (@from_bools b1c) a1c) 0 b2 sbit) (eo::cons @from_bools (_ (_ (ite (not b2)) b1) b1c) ($bv_mk_bitblast_step_shr_rec_step a1 a1c 0 b2 sbit)))
  (($bv_mk_bitblast_step_shr_rec_step (_ (@from_bools b1) a1) (eo::to_bin 0 0) 0 b2 sbit) (eo::cons @from_bools (_ (_ (ite b2) sbit) b1) ($bv_mk_bitblast_step_shr_rec_step a1 (eo::to_bin 0 0) 0 b2 sbit)))
  (($bv_mk_bitblast_step_shr_rec_step a1 (_ (@from_bools b1c) a1c) i b2 sbit) ($bv_mk_bitblast_step_shr_rec_step a1 a1c (eo::add i -1) b2 sbit))
  )
)
; fwd-decl: $bv_mk_bitblast_step_shr_rec
(program $bv_mk_bitblast_step_shr_rec ((m Int) (n Int))
  :signature ((BitVec n) (BitVec m) Int Int Bool) (BitVec n)
)
; program: $bv_mk_bitblast_step_shr_rec.fev3
(program $bv_mk_bitblast_step_shr_rec.fev3 ((s Int))
  :signature (Int Bool) Int
  (
  (($bv_mk_bitblast_step_shr_rec.fev3 s true) 0)
  (($bv_mk_bitblast_step_shr_rec.fev3 s false) ($arith_eval_int_pow_2_rec s))
  )
)
; program: $bv_mk_bitblast_step_shr_rec.fev2
(program $bv_mk_bitblast_step_shr_rec.fev2 ((m Int) (n Int) (sbit Bool) (lsz Int) (a2 (BitVec m)) (b2 Bool) (a1 (BitVec n)) (s Int))
  :signature (Bool Int Int (BitVec m) Bool (BitVec n) Bool) Int
  (
  (($bv_mk_bitblast_step_shr_rec.fev2 sbit lsz s a2 b2 a1 true) ($bv_mk_bitblast_step_shr_rec.fev3 s (eo::is_neg s)))
  (($bv_mk_bitblast_step_shr_rec.fev2 sbit lsz s a2 b2 a1 false) (int.pow2 s))
  )
)
; program: $bv_mk_bitblast_step_shr_rec.fev1
(program $bv_mk_bitblast_step_shr_rec.fev1 ((m Int) (n Int) (s Int) (a1 (BitVec n)) ($eo_2 Int) (b2 Bool) (a2 (BitVec m)) ($eo_1 Int) (lsz Int) (sbit Bool))
  :signature (Bool Int Int (BitVec m) Bool (BitVec n) Int Int) (BitVec n)
  (
  (($bv_mk_bitblast_step_shr_rec.fev1 sbit lsz s a2 b2 a1 $eo_1 $eo_2) ($bv_mk_bitblast_step_shr_rec ($bv_mk_bitblast_step_shr_rec_step a1 a1 $eo_2 b2 sbit) a2 $eo_1 lsz sbit))
  )
)
; program: $bv_mk_bitblast_step_shr_rec
(program $bv_mk_bitblast_step_shr_rec ((m Int) (n Int) (sbit Bool) (lsz Int) (a2 (BitVec m)) (b2 Bool) (a1 (BitVec n)) (s Int))
  :signature ((BitVec n) (BitVec m) Int Int Bool) (BitVec n)
  (
  (($bv_mk_bitblast_step_shr_rec a1 a2 lsz lsz sbit) a1)
  (($bv_mk_bitblast_step_shr_rec a1 (_ (@from_bools b2) a2) s lsz sbit) ($bv_mk_bitblast_step_shr_rec.fev1 sbit lsz s a2 b2 a1 (eo::add s 1) ($bv_mk_bitblast_step_shr_rec.fev2 sbit lsz s a2 b2 a1 (eo::is_z s))))
  )
)
; program: $bv_mk_bitblast_step_var_rec.fev1
(program $bv_mk_bitblast_step_var_rec.fev1 ((i Int) ($eo_1 Int))
  :signature (Int Int) Type
  (
  (($bv_mk_bitblast_step_var_rec.fev1 i $eo_1) (BitVec $eo_1))
  )
)
; program: $bv_mk_bitblast_step_var_rec
(program $bv_mk_bitblast_step_var_rec ((n Int) (a (BitVec n)) (i Int))
  :signature ((BitVec n) (eo::quote i)) ($bv_mk_bitblast_step_var_rec.fev1 i (eo::add i 1))
  (
  (($bv_mk_bitblast_step_var_rec a -1) (eo::to_bin 0 0))
  (($bv_mk_bitblast_step_var_rec a i) (eo::cons @from_bools (_ (@bit i) a) ($bv_mk_bitblast_step_var_rec a (eo::add i -1))))
  )
)
; program: $bv_mk_bitblast_step.fev10
(program $bv_mk_bitblast_step.fev10 ((n Int) ($eoT.fev25 Type) (a1 (BitVec n)))
  :signature ((BitVec n) Bool) $eoT.fev25
  (
  (($bv_mk_bitblast_step.fev10 a1 true) ($bv_const_to_bitlist_rec a1 0 (eo::len a1)))
  (($bv_mk_bitblast_step.fev10 a1 false) (eo::list_rev @from_bools ($bv_mk_bitblast_step_var_rec a1 (eo::add ($bv_bitwidth (eo::typeof a1)) -1))))
  )
)
; program: $bv_mk_bitblast_step.fev9
(program $bv_mk_bitblast_step.fev9 ((n Int) (a2 (BitVec n)) (a1 (BitVec n)) ($eo_22 Bool))
  :signature ((BitVec n) (BitVec n) Bool) (BitVec 1)
  (
  (($bv_mk_bitblast_step.fev9 a2 a1 $eo_22) (_ (@from_bools $eo_22) (eo::to_bin 0 0)))
  )
)
; program: $bv_mk_bitblast_step.fev8
(program $bv_mk_bitblast_step.fev8 ((n Int) (a2 (BitVec n)) (a1 (BitVec n)) ($eo_21 Bool))
  :signature ((BitVec n) (BitVec n) Bool) (BitVec 1)
  (
  (($bv_mk_bitblast_step.fev8 a2 a1 $eo_21) (_ (@from_bools $eo_21) (eo::to_bin 0 0)))
  )
)
; program: $bv_mk_bitblast_step.fev7
(program $bv_mk_bitblast_step.fev7 ((n Int) (a2 (BitVec n)) (a1 (BitVec n)) ($eo_20 Bool))
  :signature ((BitVec n) (BitVec n) Bool) (BitVec 1)
  (
  (($bv_mk_bitblast_step.fev7 a2 a1 $eo_20) (_ (@from_bools $eo_20) (eo::to_bin 0 0)))
  )
)
; program: $bv_mk_bitblast_step.fev12
(program $bv_mk_bitblast_step.fev12 ((n Int) (a1 (BitVec n)) ($eo_27 Int))
  :signature ((BitVec n) Int) Bool
  (
  (($bv_mk_bitblast_step.fev12 a1 $eo_27) (int.ispow2 $eo_27))
  )
)
; program: $bv_mk_bitblast_step.fev11
(program $bv_mk_bitblast_step.fev11 ((n Int) (a1 (BitVec n)))
  :signature ((BitVec n) Bool) Bool
  (
  (($bv_mk_bitblast_step.fev11 a1 true) false)
  (($bv_mk_bitblast_step.fev11 a1 false) ($arith_eval_int_is_pow_2_rec ($bv_bitwidth (eo::typeof a1))))
  )
)
; program: $bv_mk_bitblast_step.fev6
(program $bv_mk_bitblast_step.fev6 ((n Int) (a2 (BitVec n)) (a1 (BitVec n)))
  :signature ((BitVec n) (BitVec n) Bool) Bool
  (
  (($bv_mk_bitblast_step.fev6 a1 a2 true) ($bv_mk_bitblast_step.fev11 a1 (eo::is_neg ($bv_bitwidth (eo::typeof a1)))))
  (($bv_mk_bitblast_step.fev6 a1 a2 false) ($bv_mk_bitblast_step.fev12 a1 ($bv_bitwidth (eo::typeof a1))))
  )
)
; program: $bv_mk_bitblast_step.fev18
(program $bv_mk_bitblast_step.fev18 ((n Int) (a1 (BitVec n)) ($eo_32 Int))
  :signature ((BitVec n) Int) Int
  (
  (($bv_mk_bitblast_step.fev18 a1 $eo_32) (int.log2 $eo_32))
  )
)
; program: $bv_mk_bitblast_step.fev17
(program $bv_mk_bitblast_step.fev17 ((n Int) (a1 (BitVec n)))
  :signature ((BitVec n) Bool) Int
  (
  (($bv_mk_bitblast_step.fev17 a1 true) ($arith_eval_int_log_2_rec ($bv_bitwidth (eo::typeof a1))))
  (($bv_mk_bitblast_step.fev17 a1 false) ($bv_mk_bitblast_step.fev18 a1 ($bv_bitwidth (eo::typeof a1))))
  )
)
; program: $bv_mk_bitblast_step.fev16
(program $bv_mk_bitblast_step.fev16 ((n Int) (a1 (BitVec n)) ($eo_31 Int))
  :signature ((BitVec n) Int) Int
  (
  (($bv_mk_bitblast_step.fev16 a1 $eo_31) (eo::add $eo_31 1))
  )
)
; program: $bv_mk_bitblast_step.fev19
(program $bv_mk_bitblast_step.fev19 ((n Int) (a1 (BitVec n)) ($eo_33 Int))
  :signature ((BitVec n) Int) Int
  (
  (($bv_mk_bitblast_step.fev19 a1 $eo_33) (int.log2 $eo_33))
  )
)
; program: $bv_mk_bitblast_step.fev15
(program $bv_mk_bitblast_step.fev15 ((n Int) (a1 (BitVec n)))
  :signature ((BitVec n) Bool) Int
  (
  (($bv_mk_bitblast_step.fev15 a1 true) ($arith_eval_int_log_2_rec ($bv_bitwidth (eo::typeof a1))))
  (($bv_mk_bitblast_step.fev15 a1 false) ($bv_mk_bitblast_step.fev19 a1 ($bv_bitwidth (eo::typeof a1))))
  )
)
; program: $bv_mk_bitblast_step.fev14
(program $bv_mk_bitblast_step.fev14 (($eoT.fev14 Type) (n Int) ($eoT.fev17 Type) ($eo_15 $eoT.fev14) ($eo_16 Bool) (a2 (BitVec n)) ($eo_18 $eoT.fev17) (a1 (BitVec n)))
  :signature ($eoT.fev14 (BitVec n) Bool (BitVec n) $eoT.fev17 Bool) Int
  (
  (($bv_mk_bitblast_step.fev14 $eo_15 a1 $eo_16 a2 $eo_18 true) ($bv_mk_bitblast_step.fev15 a1 (eo::is_neg (eo::neg ($bv_bitwidth (eo::typeof a1))))))
  (($bv_mk_bitblast_step.fev14 $eo_15 a1 $eo_16 a2 $eo_18 false) ($bv_mk_bitblast_step.fev16 a1 ($bv_mk_bitblast_step.fev17 a1 (eo::is_neg (eo::neg ($bv_bitwidth (eo::typeof a1)))))))
  )
)
; program: $bv_mk_bitblast_step.fev13
(program $bv_mk_bitblast_step.fev13 (($eoT.fev14 Type) (n Int) ($eoT.fev17 Type) ($eoT.fev29 Type) ($eo_16 Bool) ($eo_18 $eoT.fev17) (a1 (BitVec n)) (a2 (BitVec n)) ($eo_28 Int) ($eo_15 $eoT.fev14))
  :signature ($eoT.fev14 (BitVec n) Bool (BitVec n) $eoT.fev17 Int) $eoT.fev29
  (
  (($bv_mk_bitblast_step.fev13 $eo_15 a1 $eo_16 a2 $eo_18 $eo_28) ($bv_bitblast_apply_ite $eo_18 ($bv_mk_bitblast_step_shl_rec a1 a2 0 $eo_28) $eo_15))
  )
)
; program: $bv_mk_bitblast_step.fev5
(program $bv_mk_bitblast_step.fev5 ((n Int) ($eoT.fev14 Type) ($eoT.fev17 Type) ($eoT.fev19 Type) ($eo_15 $eoT.fev14) (a1 (BitVec n)) (a2 (BitVec n)) ($eo_18 $eoT.fev17) ($eo_16 Bool))
  :signature ((BitVec n) (BitVec n) $eoT.fev14 Bool $eoT.fev17) $eoT.fev19
  (
  (($bv_mk_bitblast_step.fev5 a1 a2 $eo_15 $eo_16 $eo_18) ($bv_mk_bitblast_step.fev13 $eo_15 a1 $eo_16 a2 $eo_18 ($bv_mk_bitblast_step.fev14 $eo_15 a1 $eo_16 a2 $eo_18 $eo_16)))
  )
)
; program: $bv_mk_bitblast_step.fev21
(program $bv_mk_bitblast_step.fev21 ((n Int) (a1 (BitVec n)) ($eo_35 Int))
  :signature ((BitVec n) Int) Bool
  (
  (($bv_mk_bitblast_step.fev21 a1 $eo_35) (int.ispow2 $eo_35))
  )
)
; program: $bv_mk_bitblast_step.fev20
(program $bv_mk_bitblast_step.fev20 ((n Int) (a1 (BitVec n)))
  :signature ((BitVec n) Bool) Bool
  (
  (($bv_mk_bitblast_step.fev20 a1 true) false)
  (($bv_mk_bitblast_step.fev20 a1 false) ($arith_eval_int_is_pow_2_rec ($bv_bitwidth (eo::typeof a1))))
  )
)
; program: $bv_mk_bitblast_step.fev4
(program $bv_mk_bitblast_step.fev4 ((n Int) (a2 (BitVec n)) (a1 (BitVec n)))
  :signature ((BitVec n) (BitVec n) Bool) Bool
  (
  (($bv_mk_bitblast_step.fev4 a1 a2 true) ($bv_mk_bitblast_step.fev20 a1 (eo::is_neg ($bv_bitwidth (eo::typeof a1)))))
  (($bv_mk_bitblast_step.fev4 a1 a2 false) ($bv_mk_bitblast_step.fev21 a1 ($bv_bitwidth (eo::typeof a1))))
  )
)
; program: $bv_mk_bitblast_step.fev27
(program $bv_mk_bitblast_step.fev27 ((n Int) (a1 (BitVec n)) ($eo_40 Int))
  :signature ((BitVec n) Int) Int
  (
  (($bv_mk_bitblast_step.fev27 a1 $eo_40) (int.log2 $eo_40))
  )
)
; program: $bv_mk_bitblast_step.fev26
(program $bv_mk_bitblast_step.fev26 ((n Int) (a1 (BitVec n)))
  :signature ((BitVec n) Bool) Int
  (
  (($bv_mk_bitblast_step.fev26 a1 true) ($arith_eval_int_log_2_rec ($bv_bitwidth (eo::typeof a1))))
  (($bv_mk_bitblast_step.fev26 a1 false) ($bv_mk_bitblast_step.fev27 a1 ($bv_bitwidth (eo::typeof a1))))
  )
)
; program: $bv_mk_bitblast_step.fev25
(program $bv_mk_bitblast_step.fev25 ((n Int) (a1 (BitVec n)) ($eo_39 Int))
  :signature ((BitVec n) Int) Int
  (
  (($bv_mk_bitblast_step.fev25 a1 $eo_39) (eo::add $eo_39 1))
  )
)
; program: $bv_mk_bitblast_step.fev28
(program $bv_mk_bitblast_step.fev28 ((n Int) (a1 (BitVec n)) ($eo_41 Int))
  :signature ((BitVec n) Int) Int
  (
  (($bv_mk_bitblast_step.fev28 a1 $eo_41) (int.log2 $eo_41))
  )
)
; program: $bv_mk_bitblast_step.fev24
(program $bv_mk_bitblast_step.fev24 ((n Int) (a1 (BitVec n)))
  :signature ((BitVec n) Bool) Int
  (
  (($bv_mk_bitblast_step.fev24 a1 true) ($arith_eval_int_log_2_rec ($bv_bitwidth (eo::typeof a1))))
  (($bv_mk_bitblast_step.fev24 a1 false) ($bv_mk_bitblast_step.fev28 a1 ($bv_bitwidth (eo::typeof a1))))
  )
)
; program: $bv_mk_bitblast_step.fev23
(program $bv_mk_bitblast_step.fev23 (($eoT.fev8 Type) (n Int) ($eoT.fev11 Type) ($eo_9 $eoT.fev8) ($eo_10 Bool) (a2 (BitVec n)) ($eo_12 $eoT.fev11) (a1 (BitVec n)))
  :signature ($eoT.fev8 (BitVec n) Bool (BitVec n) $eoT.fev11 Bool) Int
  (
  (($bv_mk_bitblast_step.fev23 $eo_9 a1 $eo_10 a2 $eo_12 true) ($bv_mk_bitblast_step.fev24 a1 (eo::is_neg (eo::neg ($bv_bitwidth (eo::typeof a1))))))
  (($bv_mk_bitblast_step.fev23 $eo_9 a1 $eo_10 a2 $eo_12 false) ($bv_mk_bitblast_step.fev25 a1 ($bv_mk_bitblast_step.fev26 a1 (eo::is_neg (eo::neg ($bv_bitwidth (eo::typeof a1)))))))
  )
)
; program: $bv_mk_bitblast_step.fev22
(program $bv_mk_bitblast_step.fev22 (($eoT.fev8 Type) (n Int) ($eoT.fev11 Type) ($eoT.fev37 Type) ($eo_10 Bool) ($eo_12 $eoT.fev11) (a1 (BitVec n)) (a2 (BitVec n)) ($eo_36 Int) ($eo_9 $eoT.fev8))
  :signature ($eoT.fev8 (BitVec n) Bool (BitVec n) $eoT.fev11 Int) $eoT.fev37
  (
  (($bv_mk_bitblast_step.fev22 $eo_9 a1 $eo_10 a2 $eo_12 $eo_36) ($bv_bitblast_apply_ite $eo_12 ($bv_mk_bitblast_step_shr_rec a1 a2 0 $eo_36 false) $eo_9))
  )
)
; program: $bv_mk_bitblast_step.fev3
(program $bv_mk_bitblast_step.fev3 ((n Int) ($eoT.fev8 Type) ($eoT.fev11 Type) ($eoT.fev13 Type) ($eo_9 $eoT.fev8) (a1 (BitVec n)) (a2 (BitVec n)) ($eo_12 $eoT.fev11) ($eo_10 Bool))
  :signature ((BitVec n) (BitVec n) $eoT.fev8 Bool $eoT.fev11) $eoT.fev13
  (
  (($bv_mk_bitblast_step.fev3 a1 a2 $eo_9 $eo_10 $eo_12) ($bv_mk_bitblast_step.fev22 $eo_9 a1 $eo_10 a2 $eo_12 ($bv_mk_bitblast_step.fev23 $eo_9 a1 $eo_10 a2 $eo_12 $eo_10)))
  )
)
; program: $bv_mk_bitblast_step.fev30
(program $bv_mk_bitblast_step.fev30 ((n Int) (a1 (BitVec n)) ($eo_43 Int))
  :signature ((BitVec n) Int) Bool
  (
  (($bv_mk_bitblast_step.fev30 a1 $eo_43) (int.ispow2 $eo_43))
  )
)
; program: $bv_mk_bitblast_step.fev29
(program $bv_mk_bitblast_step.fev29 ((n Int) (a1 (BitVec n)))
  :signature ((BitVec n) Bool) Bool
  (
  (($bv_mk_bitblast_step.fev29 a1 true) false)
  (($bv_mk_bitblast_step.fev29 a1 false) ($arith_eval_int_is_pow_2_rec ($bv_bitwidth (eo::typeof a1))))
  )
)
; program: $bv_mk_bitblast_step.fev2
(program $bv_mk_bitblast_step.fev2 ((n Int) (a2 (BitVec n)) (a1 (BitVec n)))
  :signature ((BitVec n) (BitVec n) Bool) Bool
  (
  (($bv_mk_bitblast_step.fev2 a1 a2 true) ($bv_mk_bitblast_step.fev29 a1 (eo::is_neg ($bv_bitwidth (eo::typeof a1)))))
  (($bv_mk_bitblast_step.fev2 a1 a2 false) ($bv_mk_bitblast_step.fev30 a1 ($bv_bitwidth (eo::typeof a1))))
  )
)
; program: $bv_mk_bitblast_step.fev36
(program $bv_mk_bitblast_step.fev36 ((n Int) (a1 (BitVec n)) ($eo_48 Int))
  :signature ((BitVec n) Int) Int
  (
  (($bv_mk_bitblast_step.fev36 a1 $eo_48) (int.log2 $eo_48))
  )
)
; program: $bv_mk_bitblast_step.fev35
(program $bv_mk_bitblast_step.fev35 ((n Int) (a1 (BitVec n)))
  :signature ((BitVec n) Bool) Int
  (
  (($bv_mk_bitblast_step.fev35 a1 true) ($arith_eval_int_log_2_rec ($bv_bitwidth (eo::typeof a1))))
  (($bv_mk_bitblast_step.fev35 a1 false) ($bv_mk_bitblast_step.fev36 a1 ($bv_bitwidth (eo::typeof a1))))
  )
)
; program: $bv_mk_bitblast_step.fev34
(program $bv_mk_bitblast_step.fev34 ((n Int) (a1 (BitVec n)) ($eo_47 Int))
  :signature ((BitVec n) Int) Int
  (
  (($bv_mk_bitblast_step.fev34 a1 $eo_47) (eo::add $eo_47 1))
  )
)
; program: $bv_mk_bitblast_step.fev37
(program $bv_mk_bitblast_step.fev37 ((n Int) (a1 (BitVec n)) ($eo_49 Int))
  :signature ((BitVec n) Int) Int
  (
  (($bv_mk_bitblast_step.fev37 a1 $eo_49) (int.log2 $eo_49))
  )
)
; program: $bv_mk_bitblast_step.fev33
(program $bv_mk_bitblast_step.fev33 ((n Int) (a1 (BitVec n)))
  :signature ((BitVec n) Bool) Int
  (
  (($bv_mk_bitblast_step.fev33 a1 true) ($arith_eval_int_log_2_rec ($bv_bitwidth (eo::typeof a1))))
  (($bv_mk_bitblast_step.fev33 a1 false) ($bv_mk_bitblast_step.fev37 a1 ($bv_bitwidth (eo::typeof a1))))
  )
)
; program: $bv_mk_bitblast_step.fev32
(program $bv_mk_bitblast_step.fev32 (($eoT.fev1 Type) (n Int) ($eoT.fev5 Type) ($eo_2 $eoT.fev1) ($eo_3 Bool) ($eo_4 Bool) (a2 (BitVec n)) ($eo_6 $eoT.fev5) (a1 (BitVec n)))
  :signature ($eoT.fev1 Bool (BitVec n) Bool (BitVec n) $eoT.fev5 Bool) Int
  (
  (($bv_mk_bitblast_step.fev32 $eo_2 $eo_3 a1 $eo_4 a2 $eo_6 true) ($bv_mk_bitblast_step.fev33 a1 (eo::is_neg (eo::neg ($bv_bitwidth (eo::typeof a1))))))
  (($bv_mk_bitblast_step.fev32 $eo_2 $eo_3 a1 $eo_4 a2 $eo_6 false) ($bv_mk_bitblast_step.fev34 a1 ($bv_mk_bitblast_step.fev35 a1 (eo::is_neg (eo::neg ($bv_bitwidth (eo::typeof a1)))))))
  )
)
; program: $bv_mk_bitblast_step.fev31
(program $bv_mk_bitblast_step.fev31 (($eoT.fev1 Type) (n Int) ($eoT.fev5 Type) ($eoT.fev45 Type) ($eo_4 Bool) ($eo_6 $eoT.fev5) (a1 (BitVec n)) (a2 (BitVec n)) ($eo_44 Int) ($eo_3 Bool) ($eo_2 $eoT.fev1))
  :signature ($eoT.fev1 Bool (BitVec n) Bool (BitVec n) $eoT.fev5 Int) $eoT.fev45
  (
  (($bv_mk_bitblast_step.fev31 $eo_2 $eo_3 a1 $eo_4 a2 $eo_6 $eo_44) ($bv_bitblast_apply_ite $eo_6 ($bv_mk_bitblast_step_shr_rec a1 a2 0 $eo_44 $eo_3) $eo_2))
  )
)
; program: $bv_mk_bitblast_step.fev1
(program $bv_mk_bitblast_step.fev1 ((n Int) ($eoT.fev1 Type) ($eoT.fev5 Type) ($eoT.fev7 Type) ($eo_2 $eoT.fev1) ($eo_3 Bool) (a1 (BitVec n)) (a2 (BitVec n)) ($eo_6 $eoT.fev5) ($eo_4 Bool))
  :signature ((BitVec n) (BitVec n) $eoT.fev1 Bool Bool $eoT.fev5) $eoT.fev7
  (
  (($bv_mk_bitblast_step.fev1 a1 a2 $eo_2 $eo_3 $eo_4 $eo_6) ($bv_mk_bitblast_step.fev31 $eo_2 $eo_3 a1 $eo_4 a2 $eo_6 ($bv_mk_bitblast_step.fev32 $eo_2 $eo_3 a1 $eo_4 a2 $eo_6 $eo_4)))
  )
)
; program: $bv_mk_bitblast_step
(program $bv_mk_bitblast_step ((T Type) (l Int) (u Int) (m Int) (a3 (BitVec m)) (ac (BitVec 1)) (n Int) (a2 (BitVec n)) (a1 (BitVec n)))
  :signature (T) T
  (
  (($bv_mk_bitblast_step (bvnot a1)) ($bv_bitblast_apply_unary not a1))
  (($bv_mk_bitblast_step (_ (= a1) a2)) ($singleton_elim ($bv_mk_bitblast_step_eq_rec a1 a2)))
  (($bv_mk_bitblast_step (_ (bvult a1) a2)) ($bv_bitblast_ult a1 a2 false))
  (($bv_mk_bitblast_step (_ (bvule a1) a2)) ($bv_bitblast_ult a1 a2 true))
  (($bv_mk_bitblast_step (_ (bvslt a1) a2)) ($bv_bitblast_slt_impl (eo::list_rev @from_bools a1) (eo::list_rev @from_bools a2) false))
  (($bv_mk_bitblast_step (_ (bvsle a1) a2)) ($bv_bitblast_slt_impl (eo::list_rev @from_bools a1) (eo::list_rev @from_bools a2) true))
  (($bv_mk_bitblast_step (_ (_ (extract u) l) a1)) ($bv_bitblast_subsequence l u a1))
  (($bv_mk_bitblast_step (_ (concat a1) a3)) ($bv_mk_bitblast_step_concat (_ (concat a1) a3)))
  (($bv_mk_bitblast_step (_ (bvor a1) a2)) ($bv_mk_bitblast_step_bitwise bvor or a2 a1))
  (($bv_mk_bitblast_step (_ (bvand a1) a2)) ($bv_mk_bitblast_step_bitwise bvand and a2 a1))
  (($bv_mk_bitblast_step (_ (bvxor a1) a2)) ($bv_mk_bitblast_step_bitwise bvxor xor a2 a1))
  (($bv_mk_bitblast_step (_ (bvxnor a1) a2)) ($bv_bitblast_apply_binary = a1 a2))
  (($bv_mk_bitblast_step (_ (bvadd a1) a2)) ($bv_mk_bitblast_step_add a2 a1))
  (($bv_mk_bitblast_step (_ (bvmul a1) a2)) ($bv_mk_bitblast_step_mul a2 a1))
  (($bv_mk_bitblast_step (_ (bvudiv a1) a2)) (eo::define ((_v0 ($bv_bitwidth (eo::typeof a1)))) (eo::define ((_v1 ($bv_bitblast_repeat false _v0))) ($bv_bitblast_apply_ite ($singleton_elim ($bv_mk_bitblast_step_eq_rec a2 _v1)) ($bv_bitblast_repeat true _v0) ($pair_first ($bv_div_mod_impl a1 a2 _v1 _v0))))))
  (($bv_mk_bitblast_step (_ (bvurem a1) a2)) (eo::define ((_v0 ($bv_bitwidth (eo::typeof a1)))) (eo::define ((_v1 ($bv_bitblast_repeat false _v0))) ($bv_bitblast_apply_ite ($singleton_elim ($bv_mk_bitblast_step_eq_rec a2 _v1)) a1 ($pair_second ($bv_div_mod_impl a1 a2 _v1 _v0))))))
  (($bv_mk_bitblast_step (_ (bvsub a1) a2)) ($pair_second ($bv_ripple_carry_adder_2 a1 ($bv_bitblast_apply_unary not a2) true (eo::to_bin 0 0))))
  (($bv_mk_bitblast_step (bvneg a1)) ($pair_second ($bv_ripple_carry_adder_2 ($bv_bitblast_apply_unary not a1) ($bv_bitblast_repeat false ($bv_bitwidth (eo::typeof a1))) true (eo::to_bin 0 0))))
  (($bv_mk_bitblast_step (_ (_ (bvite ac) a1) a2)) ($bv_mk_bitblast_step_ite ac a1 a2))
  (($bv_mk_bitblast_step (_ (bvashr a1) a2)) (eo::define ((_v0 ($bv_bitwidth (eo::typeof a1)))) (eo::define ((_v1 (eo::to_bin _v0 _v0))) (eo::define ((_v2 ($bv_bitblast_head (eo::list_rev @from_bools a1)))) ($bv_mk_bitblast_step.fev1 a1 a2 ($bv_bitblast_repeat _v2 _v0) _v2 ($bv_mk_bitblast_step.fev2 a1 a2 (eo::is_z _v0)) ($bv_bitblast_ult a2 ($bv_const_to_bitlist_rec _v1 0 (eo::len _v1)) false))))))
  (($bv_mk_bitblast_step (_ (bvlshr a1) a2)) (eo::define ((_v0 ($bv_bitwidth (eo::typeof a1)))) (eo::define ((_v1 (eo::to_bin _v0 _v0))) ($bv_mk_bitblast_step.fev3 a1 a2 ($bv_bitblast_repeat false _v0) ($bv_mk_bitblast_step.fev4 a1 a2 (eo::is_z _v0)) ($bv_bitblast_ult a2 ($bv_const_to_bitlist_rec _v1 0 (eo::len _v1)) false)))))
  (($bv_mk_bitblast_step (_ (bvshl a1) a2)) (eo::define ((_v0 ($bv_bitwidth (eo::typeof a1)))) (eo::define ((_v1 (eo::to_bin _v0 _v0))) ($bv_mk_bitblast_step.fev5 a1 a2 ($bv_bitblast_repeat false _v0) ($bv_mk_bitblast_step.fev6 a1 a2 (eo::is_z _v0)) ($bv_bitblast_ult a2 ($bv_const_to_bitlist_rec _v1 0 (eo::len _v1)) false)))))
  (($bv_mk_bitblast_step (_ (bvcomp a1) a2)) ($bv_mk_bitblast_step.fev7 a2 a1 ($singleton_elim ($bv_mk_bitblast_step_eq_rec a1 a2))))
  (($bv_mk_bitblast_step (_ (bvultbv a1) a2)) ($bv_mk_bitblast_step.fev8 a2 a1 ($bv_bitblast_ult a1 a2 false)))
  (($bv_mk_bitblast_step (_ (bvsltbv a1) a2)) ($bv_mk_bitblast_step.fev9 a2 a1 ($bv_bitblast_slt_impl (eo::list_rev @from_bools a1) (eo::list_rev @from_bools a2) false)))
  (($bv_mk_bitblast_step (_ (sign_extend n) a1)) ($bv_bitblast_concat a1 ($bv_bitblast_repeat ($bv_bitblast_head (eo::list_rev @from_bools a1)) n)))
  (($bv_mk_bitblast_step a1) ($bv_mk_bitblast_step.fev10 a1 (eo::is_bin a1)))
  )
)
; fwd-decl: $bv_smulo_elim_rec
(program $bv_smulo_elim_rec ((n Int))
  :signature ((BitVec n) (BitVec n) (BitVec 1) (BitVec 1) Int Int) (BitVec 1)
)
; program: $bv_smulo_elim_rec.fev2
(program $bv_smulo_elim_rec.fev2 ((n Int) ($eoT.fev4 Type) ($eoT.fev6 Type) (res (BitVec 1)) (xb (BitVec n)) (ppc (BitVec 1)) ($eo_2 Int) (xa (BitVec n)) ($eo_5 $eoT.fev4) ($eo_1 Int) (nm2 Int))
  :signature (Int Int (BitVec n) (BitVec n) Int (BitVec 1) (BitVec 1) $eoT.fev4) $eoT.fev6
  (
  (($bv_smulo_elim_rec.fev2 nm2 $eo_1 xb xa $eo_2 ppc res $eo_5) (eo::define ((_v0 (_ (bvor ppc) (_ (bvor (_ (_ (extract $eo_2) $eo_2) xa)) #b0)))) ($bv_smulo_elim_rec xa xb _v0 (_ (bvor res) (_ (bvor (_ (bvand (_ (_ (extract $eo_1) $eo_1) xb)) (_ (bvand _v0) $eo_5))) #b0)) $eo_1 nm2)))
  )
)
; program: $bv_smulo_elim_rec.fev1
(program $bv_smulo_elim_rec.fev1 ((n Int) ($eoT.fev3 Type) (i Int) (nm2 Int) (xa (BitVec n)) ($eo_2 Int) (ppc (BitVec 1)) (res (BitVec 1)) ($eo_1 Int) (xb (BitVec n)))
  :signature (Int Int (BitVec n) (BitVec n) (BitVec 1) (BitVec 1) Int Int) $eoT.fev3
  (
  (($bv_smulo_elim_rec.fev1 nm2 i xb xa ppc res $eo_1 $eo_2) ($bv_smulo_elim_rec.fev2 nm2 $eo_1 xb xa $eo_2 ppc res (eo::nil bvand (eo::typeof (_ (_ (extract $eo_1) $eo_1) xb)))))
  )
)
; program: $bv_smulo_elim_rec
(program $bv_smulo_elim_rec ((n Int) (xb (BitVec n)) (xa (BitVec n)) (ppc (BitVec 1)) (res (BitVec 1)) (nm2 Int) (i Int))
  :signature ((BitVec n) (BitVec n) (BitVec 1) (BitVec 1) Int Int) (BitVec 1)
  (
  (($bv_smulo_elim_rec xa xb ppc res nm2 nm2) res)
  (($bv_smulo_elim_rec xa xb ppc res i nm2) ($bv_smulo_elim_rec.fev1 nm2 i xb xa ppc res (eo::add i 1) (eo::add nm2 (eo::neg i))))
  )
)
; fwd-decl: $bv_umulo_elim_rec
(program $bv_umulo_elim_rec ((n Int))
  :signature ((BitVec n) (BitVec n) (BitVec 1) (BitVec 1) Int Int) (BitVec 1)
)
; program: $bv_umulo_elim_rec.fev2
(program $bv_umulo_elim_rec.fev2 (($eoT.fev3 Type) ($eoT.fev6 Type) ($eoT.fev8 Type) (i Int) ($eo_4 $eoT.fev3) (n Int) (b (BitVec n)) ($eo_2 Int) (a (BitVec n)) (uppc (BitVec 1)) ($eo_7 $eoT.fev6) (res (BitVec 1)) ($eo_1 Int))
  :signature (Int Int (BitVec 1) (BitVec n) Int (BitVec 1) (BitVec n) $eoT.fev3 Int $eoT.fev6) $eoT.fev8
  (
  (($bv_umulo_elim_rec.fev2 n $eo_1 res a $eo_2 uppc b $eo_4 i $eo_7) (eo::cons bvor (_ (bvand (_ (_ (extract i) i) b)) (_ (bvand uppc) $eo_4)) ($bv_umulo_elim_rec a b (_ (bvor (_ (_ (extract $eo_2) $eo_2) a)) (_ (bvor uppc) $eo_7)) res $eo_1 n)))
  )
)
; program: $bv_umulo_elim_rec.fev1
(program $bv_umulo_elim_rec.fev1 (($eoT.fev3 Type) ($eoT.fev5 Type) (n Int) ($eo_1 Int) (res (BitVec 1)) (uppc (BitVec 1)) (b (BitVec n)) ($eo_4 $eoT.fev3) (i Int) ($eo_2 Int) (a (BitVec n)))
  :signature (Int Int (BitVec 1) (BitVec n) (BitVec 1) (BitVec n) Int Int $eoT.fev3) $eoT.fev5
  (
  (($bv_umulo_elim_rec.fev1 n i res a uppc b $eo_1 $eo_2 $eo_4) ($bv_umulo_elim_rec.fev2 n $eo_1 res a $eo_2 uppc b $eo_4 i (eo::nil bvor (eo::typeof (_ (_ (extract $eo_2) $eo_2) a)))))
  )
)
; program: $bv_umulo_elim_rec
(program $bv_umulo_elim_rec ((n Int) (res (BitVec 1)) (a (BitVec n)) (uppc (BitVec 1)) (i Int) (b (BitVec n)))
  :signature ((BitVec n) (BitVec n) (BitVec 1) (BitVec 1) Int Int) (BitVec 1)
  (
  (($bv_umulo_elim_rec a b uppc res n n) res)
  (($bv_umulo_elim_rec a b uppc res i n) ($bv_umulo_elim_rec.fev1 n i res a uppc b (eo::add i 1) (eo::add (eo::neg i) -1) (eo::nil bvand (eo::typeof (_ (_ (extract i) i) b)))))
  )
)
; fwd-decl: $bv_mk_bitwise_slicing_rec
(program $bv_mk_bitwise_slicing_rec ((n Int) (m Int) (k Int))
  :signature ((eo::define ((_v0 (BitVec n))) (-> _v0 (-> _v0 _v0))) (BitVec k) (BitVec k) (BitVec m) Bool Int Int) (BitVec k)
)
; program: $bv_mk_bitwise_slicing_rec.fev4
(program $bv_mk_bitwise_slicing_rec.fev4 ((n Int) ($eoT.fev10 Type) ($eoT.fev12 Type) (c (BitVec n)) (f (eo::define ((_v0 (BitVec n))) (-> _v0 (-> _v0 _v0)))) (start Int) ($eo_8 Int) (a (BitVec n)) ($eo_11 $eoT.fev10) ($eo_7 (BitVec n)))
  :signature ((BitVec n) (BitVec n) Int Int (eo::define ((_v0 (BitVec n))) (-> _v0 (-> _v0 _v0))) (BitVec n) $eoT.fev10) $eoT.fev12
  (
  (($bv_mk_bitwise_slicing_rec.fev4 $eo_7 c $eo_8 start f a $eo_11) (eo::define ((_v0 (_ (extract start) $eo_8))) (eo::cons concat (_ (f (_ _v0 c)) (_ (f (_ _v0 a)) $eo_11)) $eo_7)))
  )
)
; program: $bv_mk_bitwise_slicing_rec.fev3
(program $bv_mk_bitwise_slicing_rec.fev3 ((m Int) (n Int) ($eoT.fev9 Type) (end Int) (b Bool) (bs (BitVec m)) ($eo_7 (BitVec n)) (a (BitVec n)) (f (eo::define ((_v0 (BitVec n))) (-> _v0 (-> _v0 _v0)))) (start Int) ($eo_8 Int) (c (BitVec n)))
  :signature (Int Bool (BitVec m) (BitVec n) (BitVec n) (eo::define ((_v0 (BitVec n))) (-> _v0 (-> _v0 _v0))) Int (BitVec n) Int) $eoT.fev9
  (
  (($bv_mk_bitwise_slicing_rec.fev3 end b bs a c f start $eo_7 $eo_8) ($bv_mk_bitwise_slicing_rec.fev4 $eo_7 c $eo_8 start f a (eo::nil f (eo::typeof (_ (_ (extract start) $eo_8) c)))))
  )
)
; program: $bv_mk_bitwise_slicing_rec.fev2
(program $bv_mk_bitwise_slicing_rec.fev2 ((m Int) (n Int) ($eoT.fev6 Type) (bn Bool) (start Int) (f (eo::define ((_v0 (BitVec n))) (-> _v0 (-> _v0 _v0)))) (c (BitVec n)) (a (BitVec n)) (bs (BitVec m)) (b Bool) (end Int))
  :signature (Int Bool (BitVec m) (BitVec n) (BitVec n) (eo::define ((_v0 (BitVec n))) (-> _v0 (-> _v0 _v0))) Int Bool Bool) $eoT.fev6
  (
  (($bv_mk_bitwise_slicing_rec.fev2 end b bs a c f start bn true) ($bv_mk_bitwise_slicing_rec f c a bs b start (eo::add end -1)))
  (($bv_mk_bitwise_slicing_rec.fev2 end b bs a c f start bn false) ($bv_mk_bitwise_slicing_rec.fev3 end b bs a c f start ($bv_mk_bitwise_slicing_rec f c a bs b end (eo::add end -1)) (eo::add end 1)))
  )
)
; program: $bv_mk_bitwise_slicing_rec.fev1
(program $bv_mk_bitwise_slicing_rec.fev1 ((n Int) ($eoT.fev1 Type) ($eoT.fev3 Type) (c (BitVec n)) (f (eo::define ((_v0 (BitVec n))) (-> _v0 (-> _v0 _v0)))) (start Int) (a (BitVec n)) ($eo_2 $eoT.fev1))
  :signature ((BitVec n) Int (eo::define ((_v0 (BitVec n))) (-> _v0 (-> _v0 _v0))) (BitVec n) $eoT.fev1) $eoT.fev3
  (
  (($bv_mk_bitwise_slicing_rec.fev1 c start f a $eo_2) (eo::define ((_v0 (_ (extract start) 0))) (eo::cons concat (_ (f (_ _v0 c)) (_ (f (_ _v0 a)) $eo_2)) (eo::to_bin 0 0))))
  )
)
; program: $bv_mk_bitwise_slicing_rec
(program $bv_mk_bitwise_slicing_rec ((n Int) (m Int) (k Int) (end Int) (bs (BitVec m)) (a (BitVec n)) (c (BitVec n)) (f (eo::define ((_v0 (BitVec n))) (-> _v0 (-> _v0 _v0)))) (start Int) (b Bool) (bn Bool))
  :signature ((eo::define ((_v0 (BitVec n))) (-> _v0 (-> _v0 _v0))) (BitVec k) (BitVec k) (BitVec m) Bool Int Int) (BitVec k)
  (
  (($bv_mk_bitwise_slicing_rec f c a bs bn start -1) ($bv_mk_bitwise_slicing_rec.fev1 c start f a (eo::nil f (eo::typeof (_ (_ (extract start) 0) c)))))
  (($bv_mk_bitwise_slicing_rec f c a (_ (@from_bools b) bs) bn start end) ($bv_mk_bitwise_slicing_rec.fev2 end b bs a c f start bn (eo::eq b bn)))
  )
)
; program: $bv_mk_bitwise_slicing.fev2
(program $bv_mk_bitwise_slicing.fev2 ((m Int) (n Int) ($eo_2 (BitVec n)) (f (eo::define ((_v0 (BitVec m))) (-> _v0 (-> _v0 _v0)))) (a1 (BitVec n)) (a2 (BitVec n)))
  :signature ((BitVec n) (BitVec n) (eo::define ((_v0 (BitVec m))) (-> _v0 (-> _v0 _v0))) (BitVec n) (BitVec n)) (BitVec n)
  (
  (($bv_mk_bitwise_slicing.fev2 a2 a1 f $eo_2 $eo_2) (eo::define ((_v0 (_ (f a1) a2))) (eo::define ((_v1 ($bv_get_first_const_child _v0))) (eo::define ((_v2 (eo::len _v1))) (eo::define ((_v3 (eo::add _v2 -1))) ($bv_mk_bitwise_slicing_rec f _v1 ($singleton_elim (eo::list_erase f _v0 _v1)) (eo::list_rev @from_bools ($bv_const_to_bitlist_rec _v1 0 _v2)) (eo::eq (eo::extract _v1 _v3 _v3) #b1) _v3 _v3))))))
  )
)
; program: $bv_mk_bitwise_slicing.fev1
(program $bv_mk_bitwise_slicing.fev1 ((m Int) (n Int) (a2 (BitVec n)) (a1 (BitVec n)) (f (eo::define ((_v0 (BitVec m))) (-> _v0 (-> _v0 _v0)))) ($eo_1 (BitVec n)))
  :signature ((BitVec n) (BitVec n) (eo::define ((_v0 (BitVec m))) (-> _v0 (-> _v0 _v0))) (BitVec n)) (BitVec n)
  (
  (($bv_mk_bitwise_slicing.fev1 a2 a1 f $eo_1) ($singleton_elim $eo_1))
  )
)
; program: $bv_mk_bitwise_slicing
(program $bv_mk_bitwise_slicing ((n Int) (a2 (BitVec n)) (a1 (BitVec n)) (m Int) (f (eo::define ((_v0 (BitVec m))) (-> _v0 (-> _v0 _v0)))))
  :signature ((BitVec n)) (BitVec n)
  (
  (($bv_mk_bitwise_slicing (_ (f a1) a2)) ($bv_mk_bitwise_slicing.fev1 a2 a1 f ($bv_mk_bitwise_slicing.fev2 a2 a1 f (eo::or (eo::eq f bvxor) (eo::eq f bvor)) true)))
  )
)
; declare: RegLan
(declare-const RegLan Type)
; declare: seq.empty
(declare-parameterized-const seq.empty ((T Type :implicit)) (Seq T))
; program: $seq_empty
(program $seq_empty ((T Type))
  :signature ((eo::quote T)) T
  (
  (($seq_empty (Seq Char)) "")
  (($seq_empty T) (as seq.empty T))
  )
)
; declare: str.len
(declare-parameterized-const str.len ((T Type :implicit) ($eo_x_1 (Seq T))) Int)
; declare: str.++
(declare-parameterized-const str.++ ((T Type :implicit) ($eo_x_1 (Seq T)) ($eo_x_2 (Seq T))) (Seq T))
; declare: str.substr
(declare-parameterized-const str.substr ((T Type :implicit) ($eo_x_1 (Seq T)) ($eo_x_2 Int) ($eo_x_3 Int)) (Seq T))
; declare: str.contains
(declare-parameterized-const str.contains ((T Type :implicit) ($eo_x_1 (Seq T)) ($eo_x_2 (Seq T))) Bool)
; declare: str.replace
(declare-parameterized-const str.replace ((T Type :implicit) ($eo_x_1 (Seq T)) ($eo_x_2 (Seq T)) ($eo_x_3 (Seq T))) (Seq T))
; declare: str.indexof
(declare-parameterized-const str.indexof ((T Type :implicit) ($eo_x_1 (Seq T)) ($eo_x_2 (Seq T)) ($eo_x_3 Int)) Int)
; declare: str.at
(declare-parameterized-const str.at ((T Type :implicit) ($eo_x_1 (Seq T)) ($eo_x_2 Int)) (Seq T))
; declare: str.prefixof
(declare-parameterized-const str.prefixof ((T Type :implicit) ($eo_x_1 (Seq T)) ($eo_x_2 (Seq T))) Bool)
; declare: str.suffixof
(declare-parameterized-const str.suffixof ((T Type :implicit) ($eo_x_1 (Seq T)) ($eo_x_2 (Seq T))) Bool)
; declare: str.rev
(declare-parameterized-const str.rev ((T Type :implicit) ($eo_x_1 (Seq T))) (Seq T))
; declare: str.unit
(declare-const str.unit (-> Int (Seq Char)))
; declare: str.update
(declare-parameterized-const str.update ((T Type :implicit) ($eo_x_1 (Seq T)) ($eo_x_2 Int) ($eo_x_3 (Seq T))) (Seq T))
; declare: str.to_lower
(declare-const str.to_lower (eo::define ((_v0 (Seq Char))) (-> _v0 _v0)))
; declare: str.to_upper
(declare-const str.to_upper (eo::define ((_v0 (Seq Char))) (-> _v0 _v0)))
; declare: str.to_code
(declare-const str.to_code (-> (Seq Char) Int))
; declare: str.from_code
(declare-const str.from_code (-> Int (Seq Char)))
; declare: str.is_digit
(declare-const str.is_digit (-> (Seq Char) Bool))
; declare: str.to_int
(declare-const str.to_int (-> (Seq Char) Int))
; declare: str.from_int
(declare-const str.from_int (-> Int (Seq Char)))
; declare: str.<
(declare-const str.< (eo::define ((_v0 (Seq Char))) (-> _v0 (-> _v0 Bool))))
; declare: str.<=
(declare-const str.<= (eo::define ((_v0 (Seq Char))) (-> _v0 (-> _v0 Bool))))
; declare: str.replace_all
(declare-parameterized-const str.replace_all ((T Type :implicit) ($eo_x_1 (Seq T)) ($eo_x_2 (Seq T)) ($eo_x_3 (Seq T))) (Seq T))
; declare: str.replace_re
(declare-const str.replace_re (eo::define ((_v0 (Seq Char))) (-> _v0 (-> RegLan (-> _v0 _v0)))))
; declare: str.replace_re_all
(declare-const str.replace_re_all (eo::define ((_v0 (Seq Char))) (-> _v0 (-> RegLan (-> _v0 _v0)))))
; declare: str.indexof_re
(declare-const str.indexof_re (-> (Seq Char) (-> RegLan (-> Int Int))))
; declare: re.allchar
(declare-const re.allchar RegLan)
; declare: re.none
(declare-const re.none RegLan)
; declare: re.all
(declare-const re.all RegLan)
; declare: str.to_re
(declare-const str.to_re (-> (Seq Char) RegLan))
; declare: re.*
(declare-const re.* (-> RegLan RegLan))
; declare: re.+
(declare-const re.+ (-> RegLan RegLan))
; declare: re.opt
(declare-const re.opt (-> RegLan RegLan))
; declare: re.comp
(declare-const re.comp (-> RegLan RegLan))
; declare: re.range
(declare-const re.range (eo::define ((_v0 (Seq Char))) (-> _v0 (-> _v0 RegLan))))
; declare: re.++
(declare-const re.++ (-> RegLan (-> RegLan RegLan)))
; declare: re.inter
(declare-const re.inter (-> RegLan (-> RegLan RegLan)))
; declare: re.union
(declare-const re.union (-> RegLan (-> RegLan RegLan)))
; declare: re.diff
(declare-const re.diff (-> RegLan (-> RegLan RegLan)))
; declare: re.loop
(declare-const re.loop (-> Int (-> Int (-> RegLan RegLan))))
; declare: str.in_re
(declare-const str.in_re (-> (Seq Char) (-> RegLan Bool)))
; declare: seq.unit
(declare-parameterized-const seq.unit ((T Type :implicit) ($eo_x_1 T)) (Seq T))
; declare: seq.nth
(declare-parameterized-const seq.nth ((T Type :implicit) ($eo_x_1 (Seq T)) ($eo_x_2 Int)) T)
; declare: @re_unfold_pos_component
(declare-const @re_unfold_pos_component (Seq Char))
; declare: @strings_deq_diff
(declare-const @strings_deq_diff Int)
; declare: @strings_stoi_result
(declare-const @strings_stoi_result (-> Int Int))
; declare: @strings_stoi_non_digit
(declare-const @strings_stoi_non_digit Int)
; declare: @strings_itos_result
(declare-const @strings_itos_result (-> Int Int))
; declare: @strings_num_occur
(declare-parameterized-const @strings_num_occur ((T Type :implicit) (s (Seq T)) (t (Seq T))) Int)
; declare: @strings_num_occur_re
(declare-const @strings_num_occur_re Int)
; declare: @strings_occur_index
(declare-parameterized-const @strings_occur_index ((T Type :implicit) (s (Seq T)) (t (Seq T)) ($eo_x_1 Int)) Int)
; declare: @strings_occur_index_re
(declare-const @strings_occur_index_re (-> Int Int))
; declare: @strings_occur_len_re
(declare-const @strings_occur_len_re (-> Int Int))
; declare: @strings_replace_all_result
(declare-parameterized-const @strings_replace_all_result ((T Type :implicit) (t (Seq T) :opaque) ($eo_x_1 Int)) (Seq T))
; declare: @re_first_match_pre
(declare-const @re_first_match_pre (Seq Char))
; declare: @re_first_match
(declare-const @re_first_match (Seq Char))
; declare: @re_first_match_post
(declare-const @re_first_match_post (Seq Char))
; declare: @witness_string_length
(declare-parameterized-const @witness_string_length ((T Type) ($eo_x_1 Int) ($eo_x_2 Int)) T)
; declare: forall
(declare-const forall (-> $eo_List (-> Bool Bool)))
; declare: exists
(declare-const exists (-> $eo_List (-> Bool Bool)))
; program: $get_var_list
(program $get_var_list ((Q (-> $eo_List (-> Bool Bool))) (G Bool) (xs $eo_List))
  :signature (Bool) $eo_List
  (
  (($get_var_list (_ (Q xs) G)) xs)
  )
)
; declare: @quantifiers_skolemize
(declare-parameterized-const @quantifiers_skolemize ((F Bool :opaque) (i Int :opaque)) ($assoc_nil_nth_type $eo_List_cons ($get_var_list F) i))
; declare: @witness_inv_condition
(declare-parameterized-const @witness_inv_condition ((F Bool :opaque)) ($assoc_nil_nth_type $eo_List_cons ($get_var_list F) 0))
; fwd-decl: $substitute
(program $substitute ((S Type) (U Type))
  :signature (S S U) U
)
; program: $substitute.fev1
(program $substitute.fev1 ((S Type) (T Type) (U Type) (a T) (y S) (x S) (f (-> T U)) ($eo_2 (-> T U)) ($eo_1 T))
  :signature (T S S (-> T U) T (-> T U)) U
  (
  (($substitute.fev1 a y x f $eo_1 $eo_2) ($eo_2 $eo_1))
  )
)
; program: $substitute
(program $substitute ((S Type) (U Type) (T Type) (a T) (f (-> T U)) (x S) (y S) (z U))
  :signature (S S U) U
  (
  (($substitute x y (f a)) ($substitute.fev1 a y x f ($substitute x y a) ($substitute x y f)))
  (($substitute x y x) y)
  (($substitute x y z) z)
  )
)
; fwd-decl: $contains_subterm
(program $contains_subterm ((S Type) (U Type))
  :signature (S U) Bool
)
; program: $contains_subterm.fev1
(program $contains_subterm.fev1 ((U Type) (T Type) (S Type) (f (-> T S)) (a T) (x U))
  :signature (U T (-> T S) Bool) Bool
  (
  (($contains_subterm.fev1 x a f true) true)
  (($contains_subterm.fev1 x a f false) ($contains_subterm a x))
  )
)
; program: $contains_subterm
(program $contains_subterm ((S Type) (U Type) (T Type) (a T) (f (-> T S)) (x U) (y S))
  :signature (S U) Bool
  (
  (($contains_subterm x x) true)
  (($contains_subterm (f a) x) ($contains_subterm.fev1 x a f ($contains_subterm f x)))
  (($contains_subterm x y) false)
  )
)
; fwd-decl: $contains_subterm_list
(program $contains_subterm_list ((T Type))
  :signature (T $eo_List) Bool
)
; program: $contains_subterm_list.fev1
(program $contains_subterm_list.fev1 ((T Type) (U Type) (x U) (t T) (xs $eo_List))
  :signature ($eo_List T U Bool) Bool
  (
  (($contains_subterm_list.fev1 xs t x true) true)
  (($contains_subterm_list.fev1 xs t x false) ($contains_subterm_list t xs))
  )
)
; program: $contains_subterm_list
(program $contains_subterm_list ((T Type) (xs $eo_List) (U Type) (x U) (t T))
  :signature (T $eo_List) Bool
  (
  (($contains_subterm_list t (_ ($eo_List_cons x) xs)) ($contains_subterm_list.fev1 xs t x ($contains_subterm t x)))
  (($contains_subterm_list t $eo_List_nil) false)
  )
)
; fwd-decl: $contains_aterm_list
(program $contains_aterm_list ((T Type))
  :signature (T $eo_List) Bool
)
; program: $contains_aterm_list.fev1
(program $contains_aterm_list.fev1 ((T Type) (S Type) (f (-> T S)) (a T) (xs $eo_List))
  :signature ($eo_List T (-> T S) Bool) Bool
  (
  (($contains_aterm_list.fev1 xs a f true) true)
  (($contains_aterm_list.fev1 xs a f false) ($contains_aterm_list a xs))
  )
)
; program: $contains_aterm_list
(program $contains_aterm_list ((T Type) (a T) (S Type) (f (-> T S)) (xs $eo_List) (U Type) (x U))
  :signature (T $eo_List) Bool
  (
  (($contains_aterm_list (f a) xs) ($contains_aterm_list.fev1 xs a f ($contains_aterm_list f xs)))
  (($contains_aterm_list x xs) (eo::not (eo::is_neg (eo::list_find $eo_List_cons xs x))))
  )
)
; fwd-decl: $substitute_simul
(program $substitute_simul ((S Type))
  :signature (S $eo_List $eo_List) S
)
; program: $substitute_simul.fev2
(program $substitute_simul.fev2 ((S Type) (ss $eo_List) (xs $eo_List) (x S))
  :signature (S $eo_List $eo_List Bool) S
  (
  (($substitute_simul.fev2 x xs ss true) x)
  (($substitute_simul.fev2 x xs ss false) ($assoc_nil_nth $eo_List_cons ss (eo::list_find $eo_List_cons xs x)))
  )
)
; program: $substitute_simul.fev1
(program $substitute_simul.fev1 ((T Type) (S Type) (ss $eo_List) (xs $eo_List) (a T) (f (-> T S)) ($eo_2 (-> T S)) ($eo_1 T))
  :signature ($eo_List $eo_List T (-> T S) T (-> T S)) S
  (
  (($substitute_simul.fev1 ss xs a f $eo_1 $eo_2) ($eo_2 $eo_1))
  )
)
; program: $substitute_simul
(program $substitute_simul ((S Type) (T Type) (a T) (f (-> T S)) (ss $eo_List) (xs $eo_List) (x S))
  :signature (S $eo_List $eo_List) S
  (
  (($substitute_simul (f a) xs ss) ($substitute_simul.fev1 ss xs a f ($substitute_simul a xs ss) ($substitute_simul f xs ss)))
  (($substitute_simul x xs ss) ($substitute_simul.fev2 x xs ss (eo::is_neg (eo::list_find $eo_List_cons xs x))))
  )
)
; program: $beta_reduce_type
(program $beta_reduce_type ((T Type) (x T) (U Type) (xs $eo_List))
  :signature (Type $eo_List) Type
  (
  (($beta_reduce_type (-> T U) (_ ($eo_List_cons x) xs)) ($beta_reduce_type U xs))
  (($beta_reduce_type T $eo_List_nil) T)
  )
)
; fwd-decl: $beta_reduce
(program $beta_reduce ((U Type) (u U) (ss $eo_List))
  :signature ((eo::quote u) (eo::quote ss)) ($beta_reduce_type (eo::typeof u) ss)
)
; program: $beta_reduce.fev2
(program $beta_reduce.fev2 ((T Type) (S Type) ($eoT.fev3 Type) (t S) (a T) (x T) (xs $eo_List) ($eo_2 S))
  :signature (S T T $eo_List S) $eoT.fev3
  (
  (($beta_reduce.fev2 t a x xs $eo_2) (_ (lambda xs) $eo_2))
  )
)
; program: $beta_reduce.fev1
(program $beta_reduce.fev1 ((T Type) (S Type) (xs $eo_List) (x T) (a T) (t S))
  :signature (S T T $eo_List Bool) S
  (
  (($beta_reduce.fev1 t a x xs true) ($substitute x a t))
  (($beta_reduce.fev1 t a x xs false) ($beta_reduce.fev2 t a x xs ($substitute x a t)))
  )
)
; program: $beta_reduce
(program $beta_reduce ((U Type) (u U) (T Type) (x T) (S Type) (t S) (xs $eo_List) (f (-> T U)) (a T) (ss $eo_List))
  :signature ((eo::quote u) (eo::quote ss)) ($beta_reduce_type (eo::typeof u) ss)
  (
  (($beta_reduce (_ (_ (lambda (_ ($eo_List_cons x) xs)) t) a) $eo_List_nil) ($beta_reduce.fev1 t a x xs (eo::eq xs $eo_List_nil)))
  (($beta_reduce (_ (lambda xs) t) ss) ($substitute_simul t xs ss))
  (($beta_reduce (f a) ss) ($beta_reduce f (_ ($eo_List_cons a) ss)))
  )
)
; declare: is
(declare-parameterized-const is ((C Type :implicit) ($eo_x_1 C) (D Type :implicit) ($eo_x_2 D)) Bool)
; declare: update
(declare-parameterized-const update ((S Type :implicit) ($eo_x_1 S) (D Type :implicit) ($eo_x_2 D) (T Type :implicit) ($eo_x_3 T)) D)
; declare: UnitTuple
(declare-const UnitTuple Type)
; declare: Tuple
(declare-const Tuple (-> Type (-> Type Type)))
; declare: tuple.unit
(declare-const tuple.unit UnitTuple)
; declare: tuple
(declare-parameterized-const tuple ((T Type :implicit) ($eo_x_1 T) (U Type :implicit) ($eo_x_2 U)) (eo::cons Tuple T U))
; declare: tuple.select
(declare-parameterized-const tuple.select ((i Int) (T Type :implicit) ($eo_x_1 T)) (eo::list_nth Tuple T i))
; declare: tuple.update
(declare-parameterized-const tuple.update ((i Int) (T Type :implicit) ($eo_x_1 T) ($eo_x_2 (eo::list_nth Tuple T i))) T)
; declare: Set
(declare-const Set (-> Type Type))
; declare: set.empty
(declare-parameterized-const set.empty ((T Type :implicit)) (Set T))
; declare: set.singleton
(declare-parameterized-const set.singleton ((T Type :implicit) ($eo_x_1 T)) (Set T))
; declare: set.union
(declare-parameterized-const set.union ((T Type :implicit) ($eo_x_1 (Set T)) ($eo_x_2 (Set T))) (Set T))
; declare: set.inter
(declare-parameterized-const set.inter ((T Type :implicit) ($eo_x_1 (Set T)) ($eo_x_2 (Set T))) (Set T))
; declare: set.minus
(declare-parameterized-const set.minus ((T Type :implicit) ($eo_x_1 (Set T)) ($eo_x_2 (Set T))) (Set T))
; declare: set.member
(declare-parameterized-const set.member ((T Type :implicit) ($eo_x_1 T) ($eo_x_2 (Set T))) Bool)
; declare: set.subset
(declare-parameterized-const set.subset ((T Type :implicit) ($eo_x_1 (Set T)) ($eo_x_2 (Set T))) Bool)
; declare: set.choose
(declare-parameterized-const set.choose ((T Type :implicit) ($eo_x_1 (Set T))) T)
; declare: set.is_empty
(declare-parameterized-const set.is_empty ((T Type :implicit) ($eo_x_1 (Set T))) Bool)
; declare: set.is_singleton
(declare-parameterized-const set.is_singleton ((T Type :implicit) ($eo_x_1 (Set T))) Bool)
; declare: set.insert
(declare-parameterized-const set.insert (($eo_x_1 $eo_List) (T Type :implicit) ($eo_x_2 (Set T))) (Set T))
; declare: @sets_deq_diff
(declare-parameterized-const @sets_deq_diff ((T Type :implicit) (s (Set T) :opaque) (t (Set T) :opaque)) T)
; program: $dt_get_constructors
(program $dt_get_constructors ((U Type) (T1 Type) (T2 Type) (T Type) (DC (-> Type Type)) (D Type))
  :signature (U) $eo_List
  (
  (($dt_get_constructors (_ (Tuple T1) T2)) (_ ($eo_List_cons tuple) $eo_List_nil))
  (($dt_get_constructors UnitTuple) (_ ($eo_List_cons tuple.unit) $eo_List_nil))
  (($dt_get_constructors (DC T)) ($dt_get_constructors DC))
  (($dt_get_constructors D) (eo::dt_constructors D))
  )
)
; program: $tuple_get_selectors_rec
(program $tuple_get_selectors_rec ((T1 Type) (T2 Type) (n Int))
  :signature (Type Int) $eo_List
  (
  (($tuple_get_selectors_rec UnitTuple n) $eo_List_nil)
  (($tuple_get_selectors_rec (_ (Tuple T1) T2) n) (eo::cons $eo_List_cons (tuple.select n) ($tuple_get_selectors_rec T2 (eo::add n 1))))
  )
)
; program: $dt_get_selectors
(program $dt_get_selectors ((T Type) (T1 Type) (T2 Type) (D Type) (c Type))
  :signature (Type T) $eo_List
  (
  (($dt_get_selectors (_ (Tuple T1) T2) tuple) ($tuple_get_selectors_rec (_ (Tuple T1) T2) 0))
  (($dt_get_selectors UnitTuple tuple.unit) $eo_List_nil)
  (($dt_get_selectors D c) (eo::dt_selectors c))
  )
)
; program: $dt_get_selectors_of_app
(program $dt_get_selectors_of_app ((U Type) (T Type) (f (-> U T)) (a U))
  :signature (Type T) $eo_List
  (
  (($dt_get_selectors_of_app T (f a)) ($dt_get_selectors_of_app T f))
  (($dt_get_selectors_of_app T a) ($dt_get_selectors T a))
  )
)
; program: $dt_arg_list
(program $dt_arg_list ((T Type) (V Type) (t1 V) (W Type) (t2 W) (t T))
  :signature (T) $eo_List
  (
  (($dt_arg_list (_ (tuple t1) t2)) (eo::cons $eo_List_cons t1 ($dt_arg_list t2)))
  (($dt_arg_list t) ($get_arg_list_rec t $eo_List_nil))
  )
)
; fwd-decl: $dt_eq_cons
(program $dt_eq_cons ((T Type) (V Type))
  :signature (T V) Bool
)
; program: $dt_eq_cons.fev2
(program $dt_eq_cons.fev2 ((V Type) (T Type) (cs V) (ct T))
  :signature (V T Bool) Bool
  (
  (($dt_eq_cons.fev2 cs ct true) true)
  (($dt_eq_cons.fev2 cs ct false) (eo::is_ok (eo::dt_selectors ct)))
  )
)
; program: $dt_eq_cons.fev6
(program $dt_eq_cons.fev6 ((V Type) (cs V))
  :signature (V Bool) Bool
  (
  (($dt_eq_cons.fev6 cs true) true)
  (($dt_eq_cons.fev6 cs false) (eo::is_ok (eo::dt_selectors cs)))
  )
)
; program: $dt_eq_cons.fev7
(program $dt_eq_cons.fev7 (($eo_5 Bool) ($eo_7 Bool))
  :signature (Bool Bool Bool) Bool
  (
  (($dt_eq_cons.fev7 $eo_5 $eo_7 $eo_7) false)
  )
)
; program: $dt_eq_cons.fev5
(program $dt_eq_cons.fev5 ((V Type) (cs V) ($eo_5 Bool))
  :signature (V Bool) Bool
  (
  (($dt_eq_cons.fev5 cs $eo_5) ($dt_eq_cons.fev7 $eo_5 $eo_5 true))
  )
)
; program: $dt_eq_cons.fev4
(program $dt_eq_cons.fev4 ((V Type) (T Type) (ct T) (cs V))
  :signature (V T Bool) Bool
  (
  (($dt_eq_cons.fev4 cs ct true) true)
  (($dt_eq_cons.fev4 cs ct false) ($dt_eq_cons.fev5 cs ($dt_eq_cons.fev6 cs (eo::is_eq cs tuple))))
  )
)
; program: $dt_eq_cons.fev3
(program $dt_eq_cons.fev3 ((V Type) (T Type) ($eo_1 Bool) ($eo_3 Bool) (ct T) (cs V))
  :signature (V T Bool Bool Bool) Bool
  (
  (($dt_eq_cons.fev3 cs ct $eo_1 $eo_3 $eo_3) ($dt_eq_cons.fev4 cs ct (eo::eq ct cs)))
  )
)
; program: $dt_eq_cons.fev1
(program $dt_eq_cons.fev1 ((V Type) (T Type) (cs V) (ct T) ($eo_1 Bool))
  :signature (V T Bool) Bool
  (
  (($dt_eq_cons.fev1 cs ct $eo_1) ($dt_eq_cons.fev3 cs ct $eo_1 $eo_1 true))
  )
)
; program: $dt_eq_cons
(program $dt_eq_cons ((T Type) (V Type) (U Type) (a U) (W Type) (f (-> U W)) (cs V) (ct T))
  :signature (T V) Bool
  (
  (($dt_eq_cons (f a) cs) ($dt_eq_cons f cs))
  (($dt_eq_cons ct (f a)) ($dt_eq_cons ct f))
  (($dt_eq_cons ct cs) ($dt_eq_cons.fev1 cs ct ($dt_eq_cons.fev2 cs ct (eo::is_eq ct tuple))))
  )
)
; program: $tuple_nth
(program $tuple_nth ((T Type) (S Type) (s S) (U Type) (ts U) (n Int))
  :signature (T (eo::quote n)) (eo::list_nth Tuple T n)
  (
  (($tuple_nth (_ (tuple s) ts) 0) s)
  (($tuple_nth (_ (tuple s) ts) n) ($tuple_nth ts (eo::add n -1)))
  )
)
; fwd-decl: $are_distinct_terms_list
(program $are_distinct_terms_list ()
  :signature ($eo_List Type) Bool
)
; fwd-decl: $some_pairwise_distinct_term
(program $some_pairwise_distinct_term ()
  :signature ($eo_List $eo_List) Bool
)
; program: $some_pairwise_distinct_term.fev2
(program $some_pairwise_distinct_term.fev2 ((U Type) (ss $eo_List) (ts $eo_List) (s U) (t U))
  :signature ($eo_List $eo_List U U Bool) Bool
  (
  (($some_pairwise_distinct_term.fev2 ss ts t s true) false)
  (($some_pairwise_distinct_term.fev2 ss ts t s false) ($are_distinct_terms_list (_ ($eo_List_cons t) (_ ($eo_List_cons s) $eo_List_nil)) (eo::typeof t)))
  )
)
; program: $some_pairwise_distinct_term.fev3
(program $some_pairwise_distinct_term.fev3 (($eo_1 Bool) (ts $eo_List) (ss $eo_List))
  :signature ($eo_List $eo_List Bool Bool) Bool
  (
  (($some_pairwise_distinct_term.fev3 ss ts $eo_1 true) true)
  (($some_pairwise_distinct_term.fev3 ss ts $eo_1 false) ($some_pairwise_distinct_term ts ss))
  )
)
; program: $some_pairwise_distinct_term.fev1
(program $some_pairwise_distinct_term.fev1 ((U Type) (t U) (s U) (ss $eo_List) (ts $eo_List) ($eo_1 Bool))
  :signature ($eo_List $eo_List U U Bool) Bool
  (
  (($some_pairwise_distinct_term.fev1 ss ts t s $eo_1) ($some_pairwise_distinct_term.fev3 ss ts $eo_1 $eo_1))
  )
)
; program: $some_pairwise_distinct_term
(program $some_pairwise_distinct_term ((ss $eo_List) (ts $eo_List) (U Type) (t U) (s U))
  :signature ($eo_List $eo_List) Bool
  (
  (($some_pairwise_distinct_term (_ ($eo_List_cons t) ts) (_ ($eo_List_cons s) ss)) ($some_pairwise_distinct_term.fev1 ss ts t s ($some_pairwise_distinct_term.fev2 ss ts t s (eo::eq t s))))
  (($some_pairwise_distinct_term $eo_List_nil $eo_List_nil) false)
  )
)
; fwd-decl: $set_is_not_subset
(program $set_is_not_subset ((T Type))
  :signature ((Set T) (Set T)) Bool
)
; program: $set_is_not_subset.fev4
(program $set_is_not_subset.fev4 ((T Type) (e1 T) (ts (Set T)) (s (Set T)))
  :signature ((Set T) (Set T) T Bool) Bool
  (
  (($set_is_not_subset.fev4 s ts e1 true) true)
  (($set_is_not_subset.fev4 s ts e1 false) ($set_is_not_subset ts s))
  )
)
; program: $set_is_not_subset.fev3
(program $set_is_not_subset.fev3 ((T Type) (ss (Set T)) (e2 T) (e1 T))
  :signature ((Set T) T T Bool) Bool
  (
  (($set_is_not_subset.fev3 ss e1 e2 true) false)
  (($set_is_not_subset.fev3 ss e1 e2 false) ($are_distinct_terms_list (_ ($eo_List_cons e1) (_ ($eo_List_cons e2) $eo_List_nil)) (eo::typeof e1)))
  )
)
; program: $set_is_not_subset.fev5
(program $set_is_not_subset.fev5 ((T Type) (ss (Set T)) (e1 T) ($eo_2 Bool))
  :signature ((Set T) T Bool Bool) Bool
  (
  (($set_is_not_subset.fev5 ss e1 $eo_2 true) ($set_is_not_subset (set.singleton e1) ss))
  (($set_is_not_subset.fev5 ss e1 $eo_2 false) false)
  )
)
; program: $set_is_not_subset.fev2
(program $set_is_not_subset.fev2 ((T Type) (e2 T) (ss (Set T)) (e1 T) ($eo_2 Bool))
  :signature ((Set T) T T Bool) Bool
  (
  (($set_is_not_subset.fev2 ss e1 e2 $eo_2) ($set_is_not_subset.fev5 ss e1 $eo_2 $eo_2))
  )
)
; program: $set_is_not_subset.fev1
(program $set_is_not_subset.fev1 ((T Type) (e2 T) (e1 T))
  :signature (T T Bool) Bool
  (
  (($set_is_not_subset.fev1 e1 e2 true) false)
  (($set_is_not_subset.fev1 e1 e2 false) ($are_distinct_terms_list (_ ($eo_List_cons e1) (_ ($eo_List_cons e2) $eo_List_nil)) (eo::typeof e1)))
  )
)
; program: $set_is_not_subset
(program $set_is_not_subset ((T Type) (ss (Set T)) (e2 T) (ts (Set T)) (e1 T) (s (Set T)))
  :signature ((Set T) (Set T)) Bool
  (
  (($set_is_not_subset (as set.empty (Set T)) s) false)
  (($set_is_not_subset (set.singleton e1) (as set.empty (Set T))) true)
  (($set_is_not_subset (set.singleton e1) (set.singleton e2)) ($set_is_not_subset.fev1 e1 e2 (eo::eq e1 e2)))
  (($set_is_not_subset (set.singleton e1) (_ (set.union (set.singleton e2)) ss)) ($set_is_not_subset.fev2 ss e1 e2 ($set_is_not_subset.fev3 ss e1 e2 (eo::eq e1 e2))))
  (($set_is_not_subset (_ (set.union (set.singleton e1)) ts) s) ($set_is_not_subset.fev4 s ts e1 ($set_is_not_subset (set.singleton e1) s)))
  )
)
; fwd-decl: $seq_distinct_terms
(program $seq_distinct_terms ((T Type))
  :signature ((Seq T) (Seq T)) Bool
)
; program: $seq_distinct_terms.fev4
(program $seq_distinct_terms.fev4 ((T Type) (ss (Seq T)) (ts (Seq T)) (e2 T) (e1 T))
  :signature ((Seq T) (Seq T) T T Bool) Bool
  (
  (($seq_distinct_terms.fev4 ss ts e1 e2 true) false)
  (($seq_distinct_terms.fev4 ss ts e1 e2 false) ($are_distinct_terms_list (_ ($eo_List_cons e1) (_ ($eo_List_cons e2) $eo_List_nil)) (eo::typeof e1)))
  )
)
; program: $seq_distinct_terms.fev5
(program $seq_distinct_terms.fev5 ((T Type) ($eo_7 Bool) (ts (Seq T)) (ss (Seq T)))
  :signature ((Seq T) (Seq T) Bool Bool) Bool
  (
  (($seq_distinct_terms.fev5 ss ts $eo_7 true) true)
  (($seq_distinct_terms.fev5 ss ts $eo_7 false) ($seq_distinct_terms ts ss))
  )
)
; program: $seq_distinct_terms.fev3
(program $seq_distinct_terms.fev3 ((T Type) (e1 T) (e2 T) (ss (Seq T)) (ts (Seq T)) ($eo_7 Bool))
  :signature ((Seq T) (Seq T) T T Bool) Bool
  (
  (($seq_distinct_terms.fev3 ss ts e1 e2 $eo_7) ($seq_distinct_terms.fev5 ss ts $eo_7 $eo_7))
  )
)
; program: $seq_distinct_terms.fev2
(program $seq_distinct_terms.fev2 ((T Type) ($eoT.fev4 Type) ($eoT.fev6 Type) (t (Seq T)) (e2 T) ($eo_5 $eoT.fev4))
  :signature (T (Seq T) $eoT.fev4) $eoT.fev6
  (
  (($seq_distinct_terms.fev2 e2 t $eo_5) ($seq_distinct_terms t (_ (str.++ (seq.unit e2)) $eo_5)))
  )
)
; program: $seq_distinct_terms.fev1
(program $seq_distinct_terms.fev1 ((T Type) ($eoT.fev1 Type) ($eoT.fev3 Type) (e1 T) ($eo_2 $eoT.fev1) (s (Seq T)))
  :signature ((Seq T) T $eoT.fev1) $eoT.fev3
  (
  (($seq_distinct_terms.fev1 s e1 $eo_2) ($seq_distinct_terms (_ (str.++ (seq.unit e1)) $eo_2) s))
  )
)
; program: $seq_distinct_terms
(program $seq_distinct_terms ((T Type) (ss (Seq T)) (ts (Seq T)) (e1 T) (e2 T) (t (Seq T)) (s (Seq T)))
  :signature ((Seq T) (Seq T)) Bool
  (
  (($seq_distinct_terms (seq.unit e1) s) ($seq_distinct_terms.fev1 s e1 (eo::nil str.++ (eo::typeof (seq.unit e1)))))
  (($seq_distinct_terms t (seq.unit e2)) ($seq_distinct_terms.fev2 e2 t (eo::nil str.++ (eo::typeof (seq.unit e2)))))
  (($seq_distinct_terms (_ (str.++ (seq.unit e1)) ts) (_ (str.++ (seq.unit e2)) ss)) ($seq_distinct_terms.fev3 ss ts e1 e2 ($seq_distinct_terms.fev4 ss ts e1 e2 (eo::eq e1 e2))))
  (($seq_distinct_terms t t) false)
  (($seq_distinct_terms t s) true)
  )
)
; fwd-decl: $dt_distinct_terms_rec
(program $dt_distinct_terms_rec ((T Type) (V Type))
  :signature (T V $eo_List $eo_List) Bool
)
; program: $dt_distinct_terms_rec.fev2
(program $dt_distinct_terms_rec.fev2 ((V Type) (T Type) (cs V) (l2 $eo_List) (l1 $eo_List) (ct T))
  :signature (V $eo_List $eo_List T Bool) Bool
  (
  (($dt_distinct_terms_rec.fev2 cs l2 l1 ct true) true)
  (($dt_distinct_terms_rec.fev2 cs l2 l1 ct false) (eo::is_ok (eo::dt_selectors ct)))
  )
)
; program: $dt_distinct_terms_rec.fev6
(program $dt_distinct_terms_rec.fev6 ((V Type) (cs V))
  :signature (V Bool) Bool
  (
  (($dt_distinct_terms_rec.fev6 cs true) true)
  (($dt_distinct_terms_rec.fev6 cs false) (eo::is_ok (eo::dt_selectors cs)))
  )
)
; program: $dt_distinct_terms_rec.fev5
(program $dt_distinct_terms_rec.fev5 ((V Type) (cs V) ($eo_4 Bool))
  :signature (V Bool) Bool
  (
  (($dt_distinct_terms_rec.fev5 cs $eo_4) (eo::eq $eo_4 true))
  )
)
; program: $dt_distinct_terms_rec.fev4
(program $dt_distinct_terms_rec.fev4 ((V Type) (T Type) (l2 $eo_List) (l1 $eo_List) (ct T) (cs V))
  :signature (V $eo_List $eo_List T Bool) Bool
  (
  (($dt_distinct_terms_rec.fev4 cs l2 l1 ct true) ($some_pairwise_distinct_term l1 l2))
  (($dt_distinct_terms_rec.fev4 cs l2 l1 ct false) ($dt_distinct_terms_rec.fev5 cs ($dt_distinct_terms_rec.fev6 cs (eo::is_eq cs tuple))))
  )
)
; program: $dt_distinct_terms_rec.fev3
(program $dt_distinct_terms_rec.fev3 ((V Type) (T Type) (cs V) (l2 $eo_List) (l1 $eo_List) (ct T) ($eo_1 Bool))
  :signature (V $eo_List $eo_List T Bool Bool) Bool
  (
  (($dt_distinct_terms_rec.fev3 cs l2 l1 ct $eo_1 true) ($dt_distinct_terms_rec.fev4 cs l2 l1 ct (eo::eq ct cs)))
  (($dt_distinct_terms_rec.fev3 cs l2 l1 ct $eo_1 false) false)
  )
)
; program: $dt_distinct_terms_rec.fev1
(program $dt_distinct_terms_rec.fev1 ((V Type) (T Type) (cs V) (l2 $eo_List) (l1 $eo_List) (ct T) ($eo_1 Bool))
  :signature (V $eo_List $eo_List T Bool) Bool
  (
  (($dt_distinct_terms_rec.fev1 cs l2 l1 ct $eo_1) ($dt_distinct_terms_rec.fev3 cs l2 l1 ct $eo_1 (eo::eq $eo_1 true)))
  )
)
; program: $dt_distinct_terms_rec
(program $dt_distinct_terms_rec ((T Type) (V Type) (U Type) (W Type) (f (-> U W)) (a U) (cs V) (l2 $eo_List) (l1 $eo_List) (ct T))
  :signature (T V $eo_List $eo_List) Bool
  (
  (($dt_distinct_terms_rec (f a) cs l1 l2) ($dt_distinct_terms_rec f cs (eo::cons $eo_List_cons a l1) l2))
  (($dt_distinct_terms_rec ct (f a) l1 l2) ($dt_distinct_terms_rec ct f l1 (eo::cons $eo_List_cons a l2)))
  (($dt_distinct_terms_rec ct cs l1 l2) ($dt_distinct_terms_rec.fev1 cs l2 l1 ct ($dt_distinct_terms_rec.fev2 cs l2 l1 ct (eo::is_eq ct tuple))))
  )
)
; program: $are_distinct_terms_type
(program $are_distinct_terms_type ((n Int) (U Type) (ss (Set U)) (st (Set U)) (sst (Seq U)) (sss (Seq U)) (T Type) (t T) (s T))
  :signature (T T Type) Bool
  (
  (($are_distinct_terms_type t t T) false)
  (($are_distinct_terms_type t s Int) (eo::and (eo::is_z t) (eo::is_z s)))
  (($are_distinct_terms_type t s Real) (eo::and (eo::is_q t) (eo::is_q s)))
  (($are_distinct_terms_type t s (Seq Char)) (eo::and (eo::is_str t) (eo::is_str s)))
  (($are_distinct_terms_type t s (BitVec n)) (eo::and (eo::is_bin t) (eo::is_bin s)))
  (($are_distinct_terms_type t s Bool) (eo::and (eo::is_bool t) (eo::is_bool s)))
  (($are_distinct_terms_type st ss (Set U)) (eo::or ($set_is_not_subset st ss) ($set_is_not_subset ss st)))
  (($are_distinct_terms_type sst sss (Seq U)) ($seq_distinct_terms sst sss))
  (($are_distinct_terms_type t s T) ($dt_distinct_terms_rec t s $eo_List_nil $eo_List_nil))
  )
)
; fwd-decl: $are_distinct_terms_list_rec
(program $are_distinct_terms_list_rec ((T Type))
  :signature (T $eo_List Type) Bool
)
; program: $are_distinct_terms_list_rec.fev1
(program $are_distinct_terms_list_rec.fev1 ((T Type) (xs $eo_List) (t T) (s T))
  :signature (Type $eo_List T T Bool) Bool
  (
  (($are_distinct_terms_list_rec.fev1 T xs t s true) ($are_distinct_terms_list_rec t xs T))
  (($are_distinct_terms_list_rec.fev1 T xs t s false) false)
  )
)
; program: $are_distinct_terms_list_rec
(program $are_distinct_terms_list_rec ((xs $eo_List) (T Type) (s T) (t T))
  :signature (T $eo_List Type) Bool
  (
  (($are_distinct_terms_list_rec t (_ ($eo_List_cons s) xs) T) ($are_distinct_terms_list_rec.fev1 T xs t s ($are_distinct_terms_type t s T)))
  (($are_distinct_terms_list_rec t $eo_List_nil T) true)
  )
)
; fwd-decl: $are_distinct_terms_list
(program $are_distinct_terms_list ()
  :signature ($eo_List Type) Bool
)
; program: $are_distinct_terms_list.fev1
(program $are_distinct_terms_list.fev1 ((T Type) (xs $eo_List) (t T))
  :signature (Type $eo_List T Bool) Bool
  (
  (($are_distinct_terms_list.fev1 T xs t true) ($are_distinct_terms_list xs T))
  (($are_distinct_terms_list.fev1 T xs t false) false)
  )
)
; program: $are_distinct_terms_list
(program $are_distinct_terms_list ((T Type) (t T) (xs $eo_List))
  :signature ($eo_List Type) Bool
  (
  (($are_distinct_terms_list $eo_List_nil T) true)
  (($are_distinct_terms_list (_ ($eo_List_cons t) xs) T) ($are_distinct_terms_list.fev1 T xs t ($are_distinct_terms_list_rec t xs T)))
  )
)
; declare: @Nfa
(declare-const @Nfa Type)
; declare: @nfa.decline
(declare-const @nfa.decline @Nfa)
; declare: @nfa.accept
(declare-const @nfa.accept @Nfa)
; declare: @nfa.list
(declare-const @nfa.list (-> @Nfa (-> @Nfa @Nfa)))
; declare: @nfa.trans
(declare-const @nfa.trans (-> (Seq Char) (-> @Nfa @Nfa)))
; declare: @nfa.allchar
(declare-const @nfa.allchar (Seq Char))
; declare: @nfa.range
(declare-const @nfa.range (-> Int (-> Int (Seq Char))))
; declare: @nfa.push
(declare-const @nfa.push (-> @Nfa @Nfa))
; declare: @nfa.pop
(declare-const @nfa.pop (-> @Nfa @Nfa))
; fwd-decl: $build_nfa
(program $build_nfa ()
  :signature (RegLan @Nfa) @Nfa
)
; program: $build_nfa.fev4
(program $build_nfa.fev4 ((tail @Nfa) ($eo_4 (Seq Char)) ($eo_5 (Seq Char)) ($eo_6 @Nfa))
  :signature (@Nfa (Seq Char) (Seq Char) @Nfa) @Nfa
  (
  (($build_nfa.fev4 tail $eo_4 $eo_5 $eo_6) (_ (@nfa.list (_ (@nfa.trans $eo_5) $eo_6)) @nfa.decline))
  )
)
; program: $build_nfa.fev3
(program $build_nfa.fev3 ((s (Seq Char)) ($eo_5 (Seq Char)) ($eo_4 (Seq Char)) (tail @Nfa))
  :signature (@Nfa (Seq Char) (Seq Char) (Seq Char)) @Nfa
  (
  (($build_nfa.fev3 tail s $eo_4 $eo_5) ($build_nfa.fev4 tail $eo_4 $eo_5 ($build_nfa (str.to_re $eo_4) tail)))
  )
)
; program: $build_nfa.fev2
(program $build_nfa.fev2 ((c1 (Seq Char)) (c0 (Seq Char)) ($eo_3 Int) ($eo_2 Int) (tail @Nfa))
  :signature (@Nfa (Seq Char) (Seq Char) Int Int) @Nfa
  (
  (($build_nfa.fev2 tail c1 c0 $eo_2 $eo_3) (_ (@nfa.list (_ (@nfa.trans (_ (@nfa.range $eo_3) $eo_2)) tail)) @nfa.decline))
  )
)
; program: $build_nfa.fev1
(program $build_nfa.fev1 ((r1 RegLan) ($eo_1 @Nfa) (tail @Nfa))
  :signature (@Nfa RegLan @Nfa) @Nfa
  (
  (($build_nfa.fev1 tail r1 $eo_1) (eo::cons @nfa.list (@nfa.push $eo_1) tail))
  )
)
; program: $build_nfa
(program $build_nfa ((r1 RegLan) (rr RegLan) (c1 (Seq Char)) (c0 (Seq Char)) (s (Seq Char)) (tail @Nfa))
  :signature (RegLan @Nfa) @Nfa
  (
  (($build_nfa (re.* r1) tail) ($build_nfa.fev1 tail r1 ($build_nfa r1 (_ (@nfa.list (@nfa.pop tail)) @nfa.decline))))
  (($build_nfa re.allchar tail) (_ (@nfa.list (_ (@nfa.trans @nfa.allchar) tail)) @nfa.decline))
  (($build_nfa re.none tail) @nfa.decline)
  (($build_nfa (_ (re.union r1) rr) tail) (eo::list_concat @nfa.list ($build_nfa r1 tail) ($build_nfa rr tail)))
  (($build_nfa (_ (re.++ r1) rr) tail) ($build_nfa r1 ($build_nfa rr tail)))
  (($build_nfa (str.to_re "") tail) tail)
  (($build_nfa (_ (re.range c0) c1) tail) ($build_nfa.fev2 tail c1 c0 (eo::to_z c1) (eo::to_z c0)))
  (($build_nfa (str.to_re s) tail) ($build_nfa.fev3 tail s (eo::extract s 1 (eo::len s)) (eo::extract s 0 0)))
  (($build_nfa re.all tail) ($build_nfa (re.* re.allchar) tail))
  )
)
; fwd-decl: $add_to_nexts
(program $add_to_nexts ()
  :signature (@Nfa @Nfa @Nfa) @Nfa
)
; program: $add_to_nexts.fev2
(program $add_to_nexts.fev2 ((t @Nfa) (tt @Nfa) (st @Nfa) (nexts @Nfa))
  :signature (@Nfa @Nfa @Nfa @Nfa Bool) @Nfa
  (
  (($add_to_nexts.fev2 nexts st tt t true) ($add_to_nexts tt st (eo::cons @nfa.list (_ (@nfa.list t) (_ (@nfa.list st) @nfa.decline)) nexts)))
  (($add_to_nexts.fev2 nexts st tt t false) ($add_to_nexts tt st nexts))
  )
)
; program: $add_to_nexts.fev1
(program $add_to_nexts.fev1 ((t @Nfa) (tt @Nfa) (st @Nfa) (stt @Nfa) (nexts @Nfa))
  :signature (@Nfa @Nfa @Nfa @Nfa @Nfa Bool) @Nfa
  (
  (($add_to_nexts.fev1 nexts stt st tt t true) (eo::define ((_v0 (_ (@nfa.list st) stt))) ($add_to_nexts (eo::list_concat @nfa.list st tt) _v0 (eo::cons @nfa.list (_ (@nfa.list (@nfa.pop t)) (_ (@nfa.list _v0) @nfa.decline)) ($add_to_nexts t stt nexts)))))
  (($add_to_nexts.fev1 nexts stt st tt t false) ($add_to_nexts tt (_ (@nfa.list st) stt) nexts))
  )
)
; program: $add_to_nexts
(program $add_to_nexts ((stt @Nfa) (tt @Nfa) (nexts @Nfa) (t @Nfa) (st @Nfa))
  :signature (@Nfa @Nfa @Nfa) @Nfa
  (
  (($add_to_nexts @nfa.decline st nexts) nexts)
  (($add_to_nexts (_ (@nfa.list (@nfa.push t)) tt) st nexts) ($add_to_nexts tt st ($add_to_nexts t (eo::cons @nfa.list t st) nexts)))
  (($add_to_nexts (_ (@nfa.list (@nfa.pop t)) tt) (_ (@nfa.list st) stt) nexts) ($add_to_nexts.fev1 nexts stt st tt t (eo::is_neg (eo::list_find @nfa.list nexts (_ (@nfa.list (@nfa.pop t)) (_ (@nfa.list (_ (@nfa.list st) stt)) @nfa.decline))))))
  (($add_to_nexts (_ (@nfa.list t) tt) st nexts) ($add_to_nexts.fev2 nexts st tt t (eo::is_neg (eo::list_find @nfa.list nexts (_ (@nfa.list t) (_ (@nfa.list st) @nfa.decline))))))
  )
)
; fwd-decl: $nfa_match
(program $nfa_match ()
  :signature ((Seq Char) (Seq Char) @Nfa @Nfa) Bool
)
; program: $nfa_match.fev3
(program $nfa_match.fev3 ((nexts @Nfa) (tt @Nfa) (s (Seq Char)) (st @Nfa) (t @Nfa) (z1 Int) (c (Seq Char)) (z0 Int))
  :signature (@Nfa @Nfa (Seq Char) (Seq Char) @Nfa @Nfa Int Int Bool) Bool
  (
  (($nfa_match.fev3 nexts tt s c st t z1 z0 true) true)
  (($nfa_match.fev3 nexts tt s c st t z1 z0 false) (eo::gt (eo::to_z c) z0))
  )
)
; program: $nfa_match.fev2
(program $nfa_match.fev2 ((nexts @Nfa) (tt @Nfa) (s (Seq Char)) (st @Nfa) (t @Nfa) (z0 Int) (z1 Int) (c (Seq Char)))
  :signature (@Nfa @Nfa (Seq Char) (Seq Char) @Nfa @Nfa Int Int Bool) Bool
  (
  (($nfa_match.fev2 nexts tt s c st t z1 z0 true) true)
  (($nfa_match.fev2 nexts tt s c st t z1 z0 false) (eo::gt z1 (eo::to_z c)))
  )
)
; program: $nfa_match.fev4
(program $nfa_match.fev4 ((st @Nfa) (t @Nfa) ($eo_1 Bool) ($eo_2 Bool) (c (Seq Char)) (s (Seq Char)) (tt @Nfa) (nexts @Nfa))
  :signature (@Nfa @Nfa (Seq Char) (Seq Char) @Nfa @Nfa Bool Bool Bool) Bool
  (
  (($nfa_match.fev4 nexts tt s c st t $eo_1 $eo_2 true) ($nfa_match c s tt ($add_to_nexts t st nexts)))
  (($nfa_match.fev4 nexts tt s c st t $eo_1 $eo_2 false) ($nfa_match c s tt nexts))
  )
)
; program: $nfa_match.fev1
(program $nfa_match.fev1 ((z1 Int) (z0 Int) (nexts @Nfa) (tt @Nfa) (s (Seq Char)) (c (Seq Char)) (st @Nfa) (t @Nfa) ($eo_2 Bool) ($eo_1 Bool))
  :signature (@Nfa @Nfa (Seq Char) (Seq Char) @Nfa @Nfa Int Int Bool Bool) Bool
  (
  (($nfa_match.fev1 nexts tt s c st t z1 z0 $eo_1 $eo_2) ($nfa_match.fev4 nexts tt s c st t $eo_1 $eo_2 (eo::and $eo_2 $eo_1)))
  )
)
; program: $nfa_match
(program $nfa_match ((st @Nfa) (z1 Int) (z0 Int) (t @Nfa) (c (Seq Char)) (s (Seq Char)) (tt @Nfa) (nexts @Nfa))
  :signature ((Seq Char) (Seq Char) @Nfa @Nfa) Bool
  (
  (($nfa_match c s @nfa.decline @nfa.decline) false)
  (($nfa_match c "" @nfa.decline nexts) (eo::not (eo::is_neg (eo::list_find @nfa.list nexts (_ (@nfa.list @nfa.accept) (_ (@nfa.list @nfa.decline) @nfa.decline))))))
  (($nfa_match "" s t @nfa.decline) ($nfa_match "" s @nfa.decline ($add_to_nexts t @nfa.decline @nfa.decline)))
  (($nfa_match c s @nfa.decline nexts) ($nfa_match (eo::extract s 0 0) (eo::extract s 1 (eo::len s)) nexts @nfa.decline))
  (($nfa_match c s (_ (@nfa.list (_ (@nfa.list (_ (@nfa.trans c) t)) (_ (@nfa.list st) @nfa.decline))) tt) nexts) ($nfa_match c s tt ($add_to_nexts t st nexts)))
  (($nfa_match c s (_ (@nfa.list (_ (@nfa.list (_ (@nfa.trans @nfa.allchar) t)) (_ (@nfa.list st) @nfa.decline))) tt) nexts) ($nfa_match c s tt ($add_to_nexts t st nexts)))
  (($nfa_match c s (_ (@nfa.list (_ (@nfa.list (_ (@nfa.trans (_ (@nfa.range z0) z1)) t)) (_ (@nfa.list st) @nfa.decline))) tt) nexts) (eo::define ((_v0 (eo::to_z c))) ($nfa_match.fev1 nexts tt s c st t z1 z0 ($nfa_match.fev2 nexts tt s c st t z1 z0 (eo::eq z1 _v0)) ($nfa_match.fev3 nexts tt s c st t z1 z0 (eo::eq _v0 z0)))))
  (($nfa_match c s (_ (@nfa.list t) tt) nexts) ($nfa_match c s tt nexts))
  )
)
; program: $str_is_empty
(program $str_is_empty ((U Type) (x (Seq U)))
  :signature ((Seq U)) Bool
  (
  (($str_is_empty (as seq.empty (Seq U))) true)
  (($str_is_empty "") true)
  (($str_is_empty x) false)
  )
)
; program: $seq_element_of_unit
(program $seq_element_of_unit ((U Type) (x U))
  :signature ((Seq U)) U
  (
  (($seq_element_of_unit (seq.unit x)) x)
  )
)
; fwd-decl: $str_value_len
(program $str_value_len ((T Type))
  :signature ((Seq T)) Int
)
; program: $str_value_len.fev1
(program $str_value_len.fev1 ((T Type) ($eo_2 Int) (s (Seq T)))
  :signature ((Seq T) Int Int) Int
  (
  (($str_value_len.fev1 s $eo_2 $eo_2) (eo::len s))
  )
)
; program: $str_value_len
(program $str_value_len ((T Type) (ss (Seq T)) (e T) (s (Seq T)))
  :signature ((Seq T)) Int
  (
  (($str_value_len (_ (str.++ (seq.unit e)) ss)) (eo::add 1 ($str_value_len ss)))
  (($str_value_len (as seq.empty (Seq T))) 0)
  (($str_value_len (seq.unit e)) 1)
  (($str_value_len s) ($str_value_len.fev1 s (eo::is_str s) true))
  )
)
; program: $char_type_of
(program $char_type_of ((U Type))
  :signature (Type) Type
  (
  (($char_type_of (Seq U)) U)
  )
)
; fwd-decl: $str_fixed_len_re
(program $str_fixed_len_re ()
  :signature (RegLan) Int
)
; program: $str_fixed_len_re.fev3
(program $str_fixed_len_re.fev3 ((r1 RegLan) ($eo_4 Int) (r RegLan))
  :signature (RegLan RegLan Int Int) Int
  (
  (($str_fixed_len_re.fev3 r r1 $eo_4 $eo_4) ($str_fixed_len_re r))
  )
)
; program: $str_fixed_len_re.fev2
(program $str_fixed_len_re.fev2 ((r1 RegLan) (r RegLan))
  :signature (RegLan RegLan Bool) Int
  (
  (($str_fixed_len_re.fev2 r r1 true) ($str_fixed_len_re r))
  (($str_fixed_len_re.fev2 r r1 false) ($str_fixed_len_re.fev3 r r1 ($str_fixed_len_re r1) ($str_fixed_len_re r)))
  )
)
; program: $str_fixed_len_re.fev4
(program $str_fixed_len_re.fev4 ((r1 RegLan) ($eo_6 Int) (r RegLan))
  :signature (RegLan RegLan Int Int) Int
  (
  (($str_fixed_len_re.fev4 r r1 $eo_6 $eo_6) ($str_fixed_len_re r))
  )
)
; program: $str_fixed_len_re.fev1
(program $str_fixed_len_re.fev1 ((r1 RegLan) (r RegLan))
  :signature (RegLan RegLan Bool) Int
  (
  (($str_fixed_len_re.fev1 r r1 true) ($str_fixed_len_re r))
  (($str_fixed_len_re.fev1 r r1 false) ($str_fixed_len_re.fev4 r r1 ($str_fixed_len_re r1) ($str_fixed_len_re r)))
  )
)
; program: $str_fixed_len_re
(program $str_fixed_len_re ((s2 (Seq Char)) (s1 (Seq Char)) (r RegLan) (r1 RegLan))
  :signature (RegLan) Int
  (
  (($str_fixed_len_re (_ (re.++ r) r1)) (eo::add ($str_fixed_len_re r) ($str_fixed_len_re r1)))
  (($str_fixed_len_re re.allchar) 1)
  (($str_fixed_len_re (_ (re.range s1) s2)) 1)
  (($str_fixed_len_re (str.to_re s1)) (eo::len s1))
  (($str_fixed_len_re (_ (re.union r) r1)) ($str_fixed_len_re.fev1 r r1 (eo::eq r1 re.none)))
  (($str_fixed_len_re (_ (re.inter r) r1)) ($str_fixed_len_re.fev2 r r1 (eo::eq r1 re.all)))
  )
)
; program: $str_membership_str
(program $str_membership_str ((r RegLan) (s (Seq Char)))
  :signature (Bool) (Seq Char)
  (
  (($str_membership_str (_ (str.in_re s) r)) s)
  )
)
; program: $str_membership_re
(program $str_membership_re ((s (Seq Char)) (r RegLan))
  :signature (Bool) RegLan
  (
  (($str_membership_re (_ (str.in_re s) r)) r)
  )
)
; declare: @re.null
(declare-const @re.null RegLan)
; fwd-decl: $str_eval_str_in_re_rec
(program $str_eval_str_in_re_rec ()
  :signature ((Seq Char) Int RegLan RegLan) Bool
)
; program: $str_eval_str_in_re_rec.fev7
(program $str_eval_str_in_re_rec.fev7 ((r2 RegLan) (s (Seq Char)) (n Int))
  :signature (RegLan (Seq Char) Int Bool) Bool
  (
  (($str_eval_str_in_re_rec.fev7 r2 s n true) true)
  (($str_eval_str_in_re_rec.fev7 r2 s n false) false)
  )
)
; program: $str_eval_str_in_re_rec.fev6
(program $str_eval_str_in_re_rec.fev6 ((r2 RegLan) (r1 RegLan) (n Int) (s (Seq Char)))
  :signature (RegLan RegLan Int (Seq Char) Bool) Bool
  (
  (($str_eval_str_in_re_rec.fev6 r2 r1 n s true) ($str_eval_str_in_re_rec.fev7 r2 s n ($str_eval_str_in_re_rec (eo::extract s n (eo::len s)) 0 r2 @re.null)))
  (($str_eval_str_in_re_rec.fev6 r2 r1 n s false) false)
  )
)
; program: $str_eval_str_in_re_rec.fev9
(program $str_eval_str_in_re_rec.fev9 ((s (Seq Char)) (n Int) (r1 RegLan) (r2 RegLan))
  :signature (RegLan RegLan Int (Seq Char) Bool) Bool
  (
  (($str_eval_str_in_re_rec.fev9 r2 r1 n s true) false)
  (($str_eval_str_in_re_rec.fev9 r2 r1 n s false) ($str_eval_str_in_re_rec s (eo::add n 1) r1 r2))
  )
)
; program: $str_eval_str_in_re_rec.fev8
(program $str_eval_str_in_re_rec.fev8 (($eo_6 Bool) (r2 RegLan) (r1 RegLan) (n Int) (s (Seq Char)))
  :signature (RegLan RegLan Int (Seq Char) Bool Bool) Bool
  (
  (($str_eval_str_in_re_rec.fev8 r2 r1 n s $eo_6 true) true)
  (($str_eval_str_in_re_rec.fev8 r2 r1 n s $eo_6 false) ($str_eval_str_in_re_rec.fev9 r2 r1 n s (eo::eq n (eo::len s))))
  )
)
; program: $str_eval_str_in_re_rec.fev5
(program $str_eval_str_in_re_rec.fev5 ((r2 RegLan) (r1 RegLan) (n Int) (s (Seq Char)) ($eo_6 Bool))
  :signature (RegLan RegLan Int (Seq Char) Bool) Bool
  (
  (($str_eval_str_in_re_rec.fev5 r2 r1 n s $eo_6) ($str_eval_str_in_re_rec.fev8 r2 r1 n s $eo_6 $eo_6))
  )
)
; program: $str_eval_str_in_re_rec.fev13
(program $str_eval_str_in_re_rec.fev13 ((s2 (Seq Char)) (s (Seq Char)) (s1 (Seq Char)))
  :signature ((Seq Char) (Seq Char) (Seq Char) Bool) Bool
  (
  (($str_eval_str_in_re_rec.fev13 s s2 s1 true) true)
  (($str_eval_str_in_re_rec.fev13 s s2 s1 false) (eo::gt (eo::to_z s) (eo::to_z s1)))
  )
)
; program: $str_eval_str_in_re_rec.fev12
(program $str_eval_str_in_re_rec.fev12 ((s1 (Seq Char)) (s2 (Seq Char)) (s (Seq Char)))
  :signature ((Seq Char) (Seq Char) (Seq Char) Bool) Bool
  (
  (($str_eval_str_in_re_rec.fev12 s s2 s1 true) true)
  (($str_eval_str_in_re_rec.fev12 s s2 s1 false) (eo::gt (eo::to_z s2) (eo::to_z s)))
  )
)
; program: $str_eval_str_in_re_rec.fev11
(program $str_eval_str_in_re_rec.fev11 ((s (Seq Char)) (s2 (Seq Char)) (s1 (Seq Char)) ($eo_12 Bool) ($eo_11 Bool))
  :signature ((Seq Char) (Seq Char) (Seq Char) Bool Bool) Bool
  (
  (($str_eval_str_in_re_rec.fev11 s s2 s1 $eo_11 $eo_12) (eo::and $eo_12 $eo_11))
  )
)
; program: $str_eval_str_in_re_rec.fev10
(program $str_eval_str_in_re_rec.fev10 ((s (Seq Char)) (s2 (Seq Char)) (s1 (Seq Char)))
  :signature ((Seq Char) (Seq Char) (Seq Char) Bool) Bool
  (
  (($str_eval_str_in_re_rec.fev10 s s2 s1 true) (eo::define ((_v0 (eo::to_z s))) ($str_eval_str_in_re_rec.fev11 s s2 s1 ($str_eval_str_in_re_rec.fev12 s s2 s1 (eo::eq (eo::to_z s2) _v0)) ($str_eval_str_in_re_rec.fev13 s s2 s1 (eo::eq _v0 (eo::to_z s1))))))
  (($str_eval_str_in_re_rec.fev10 s s2 s1 false) false)
  )
)
; program: $str_eval_str_in_re_rec.fev4
(program $str_eval_str_in_re_rec.fev4 (($eo_5 Bool) (s2 (Seq Char)) (s1 (Seq Char)) (s (Seq Char)))
  :signature ((Seq Char) (Seq Char) (Seq Char) Bool Bool) Bool
  (
  (($str_eval_str_in_re_rec.fev4 s s2 s1 $eo_5 $eo_5) ($str_eval_str_in_re_rec.fev10 s s2 s1 (eo::eq (eo::len s) 1)))
  )
)
; program: $str_eval_str_in_re_rec.fev3
(program $str_eval_str_in_re_rec.fev3 ((s (Seq Char)) (r1 RegLan))
  :signature (RegLan (Seq Char) Bool) Bool
  (
  (($str_eval_str_in_re_rec.fev3 r1 s true) true)
  (($str_eval_str_in_re_rec.fev3 r1 s false) ($str_eval_str_in_re_rec s 1 r1 (re.* r1)))
  )
)
; program: $str_eval_str_in_re_rec.fev2
(program $str_eval_str_in_re_rec.fev2 ((r1 RegLan) (s (Seq Char)) (rr RegLan))
  :signature (RegLan (Seq Char) RegLan Bool) Bool
  (
  (($str_eval_str_in_re_rec.fev2 rr s r1 true) true)
  (($str_eval_str_in_re_rec.fev2 rr s r1 false) ($str_eval_str_in_re_rec s 0 rr @re.null))
  )
)
; program: $str_eval_str_in_re_rec.fev1
(program $str_eval_str_in_re_rec.fev1 ((rr RegLan) (s (Seq Char)) (r1 RegLan))
  :signature (RegLan (Seq Char) RegLan Bool) Bool
  (
  (($str_eval_str_in_re_rec.fev1 rr s r1 true) ($str_eval_str_in_re_rec s 0 rr @re.null))
  (($str_eval_str_in_re_rec.fev1 rr s r1 false) false)
  )
)
; program: $str_eval_str_in_re_rec
(program $str_eval_str_in_re_rec ((rr RegLan) (sr (Seq Char)) (s1 (Seq Char)) (s2 (Seq Char)) (r2 RegLan) (s (Seq Char)) (n Int) (r1 RegLan))
  :signature ((Seq Char) Int RegLan RegLan) Bool
  (
  (($str_eval_str_in_re_rec s 0 (_ (re.++ r1) rr) @re.null) ($str_eval_str_in_re_rec s 0 r1 rr))
  (($str_eval_str_in_re_rec s 0 (_ (re.inter r1) rr) @re.null) ($str_eval_str_in_re_rec.fev1 rr s r1 ($str_eval_str_in_re_rec s 0 r1 @re.null)))
  (($str_eval_str_in_re_rec s 0 (_ (re.union r1) rr) @re.null) ($str_eval_str_in_re_rec.fev2 rr s r1 ($str_eval_str_in_re_rec s 0 r1 @re.null)))
  (($str_eval_str_in_re_rec s 0 (re.* r1) @re.null) ($str_eval_str_in_re_rec.fev3 r1 s (eo::eq s "")))
  (($str_eval_str_in_re_rec s 0 (str.to_re sr) @re.null) (eo::eq s sr))
  (($str_eval_str_in_re_rec s 0 (_ (re.range s1) s2) @re.null) ($str_eval_str_in_re_rec.fev4 s s2 s1 (eo::and (eo::is_eq (eo::len s1) 1) (eo::is_eq (eo::len s2) 1)) true))
  (($str_eval_str_in_re_rec s 0 re.allchar @re.null) (eo::eq (eo::len s) 1))
  (($str_eval_str_in_re_rec s 0 re.all @re.null) true)
  (($str_eval_str_in_re_rec s 0 re.none @re.null) false)
  (($str_eval_str_in_re_rec s 0 (re.comp r1) @re.null) (eo::not ($str_eval_str_in_re_rec s 0 r1 @re.null)))
  (($str_eval_str_in_re_rec s n r1 r2) ($str_eval_str_in_re_rec.fev5 r2 r1 n s ($str_eval_str_in_re_rec.fev6 r2 r1 n s ($str_eval_str_in_re_rec (eo::extract s 0 (eo::add n -1)) 0 r1 @re.null))))
  )
)
; fwd-decl: $str_first_match_rec_smallest
(program $str_first_match_rec_smallest ()
  :signature ((Seq Char) RegLan Int Int) Int
)
; program: $str_first_match_rec_smallest.fev4
(program $str_first_match_rec_smallest.fev4 ((m Int) (s (Seq Char)) ($eo_3 (Seq Char)) (r RegLan))
  :signature (RegLan Int (Seq Char) (Seq Char)) Bool
  (
  (($str_first_match_rec_smallest.fev4 r m s $eo_3) (_ (str.in_re $eo_3) r))
  )
)
; program: $str_first_match_rec_smallest.fev3
(program $str_first_match_rec_smallest.fev3 ((s (Seq Char)) (m Int) (r RegLan))
  :signature (RegLan Int (Seq Char) Bool) Bool
  (
  (($str_first_match_rec_smallest.fev3 r m s true) ($nfa_match "" (eo::extract s 0 (eo::add m -1)) ($build_nfa r (_ (@nfa.list @nfa.accept) @nfa.decline)) @nfa.decline))
  (($str_first_match_rec_smallest.fev3 r m s false) ($str_eval_str_in_re_rec (eo::extract s 0 (eo::add m -1)) 0 r @re.null))
  )
)
; program: $str_first_match_rec_smallest.fev2
(program $str_first_match_rec_smallest.fev2 ((lens Int) (r RegLan) (s (Seq Char)) (m Int))
  :signature (Int Int RegLan (Seq Char) Bool) Bool
  (
  (($str_first_match_rec_smallest.fev2 lens m r s true) ($str_first_match_rec_smallest.fev3 r m s (eo::is_ok ($build_nfa r (_ (@nfa.list @nfa.accept) @nfa.decline)))))
  (($str_first_match_rec_smallest.fev2 lens m r s false) ($str_first_match_rec_smallest.fev4 r m s (eo::extract s 0 (eo::add m -1))))
  )
)
; program: $str_first_match_rec_smallest.fev6
(program $str_first_match_rec_smallest.fev6 (($eo_6 Int) (s (Seq Char)) (r RegLan) (m Int) (lens Int))
  :signature (Int Int RegLan (Seq Char) Int Int) Int
  (
  (($str_first_match_rec_smallest.fev6 lens m r s $eo_6 $eo_6) ($str_first_match_rec_smallest s r (eo::add m 1) lens))
  )
)
; program: $str_first_match_rec_smallest.fev5
(program $str_first_match_rec_smallest.fev5 (($eo_1 Bool) (r RegLan) (s (Seq Char)) (m Int) (lens Int))
  :signature (Int Int RegLan (Seq Char) Bool Bool) Int
  (
  (($str_first_match_rec_smallest.fev5 lens m r s $eo_1 true) m)
  (($str_first_match_rec_smallest.fev5 lens m r s $eo_1 false) ($str_first_match_rec_smallest.fev6 lens m r s (eo::eq m lens) false))
  )
)
; program: $str_first_match_rec_smallest.fev1
(program $str_first_match_rec_smallest.fev1 ((lens Int) (m Int) (r RegLan) (s (Seq Char)) ($eo_1 Bool))
  :signature (Int Int RegLan (Seq Char) Bool) Int
  (
  (($str_first_match_rec_smallest.fev1 lens m r s $eo_1) ($str_first_match_rec_smallest.fev5 lens m r s $eo_1 $eo_1))
  )
)
; program: $str_first_match_rec_smallest
(program $str_first_match_rec_smallest ((lens Int) (r RegLan) (s (Seq Char)) (m Int))
  :signature ((Seq Char) RegLan Int Int) Int
  (
  (($str_first_match_rec_smallest s r m lens) ($str_first_match_rec_smallest.fev1 lens m r s ($str_first_match_rec_smallest.fev2 lens m r s (eo::is_str (eo::extract s 0 (eo::add m -1))))))
  )
)
; fwd-decl: $str_first_match_rec
(program $str_first_match_rec ()
  :signature ((Seq Char) RegLan RegLan Int Int) (_ (@Pair Int) Int)
)
; program: $str_first_match_rec.fev3
(program $str_first_match_rec.fev3 ((s (Seq Char)) (rs RegLan))
  :signature (RegLan (Seq Char) Bool) Bool
  (
  (($str_first_match_rec.fev3 rs s true) ($nfa_match "" s ($build_nfa rs (_ (@nfa.list @nfa.accept) @nfa.decline)) @nfa.decline))
  (($str_first_match_rec.fev3 rs s false) ($str_eval_str_in_re_rec s 0 rs @re.null))
  )
)
; program: $str_first_match_rec.fev2
(program $str_first_match_rec.fev2 ((lens Int) (n Int) (r RegLan) (s (Seq Char)) (rs RegLan))
  :signature (Int Int RegLan RegLan (Seq Char) Bool) Bool
  (
  (($str_first_match_rec.fev2 lens n rs r s true) ($str_first_match_rec.fev3 rs s (eo::is_ok ($build_nfa rs (_ (@nfa.list @nfa.accept) @nfa.decline)))))
  (($str_first_match_rec.fev2 lens n rs r s false) (_ (str.in_re s) rs))
  )
)
; program: $str_first_match_rec.fev6
(program $str_first_match_rec.fev6 ((s (Seq Char)) (r RegLan) (rs RegLan) (n Int) (lens Int))
  :signature (Int Int RegLan RegLan (Seq Char) Bool) (_ (@Pair Int) Int)
  (
  (($str_first_match_rec.fev6 lens n rs r s true) (_ (@pair -1) -1))
  (($str_first_match_rec.fev6 lens n rs r s false) (eo::define ((_v0 (eo::add lens -1))) ($str_first_match_rec (eo::extract s 1 _v0) r rs (eo::add n 1) _v0)))
  )
)
; program: $str_first_match_rec.fev5
(program $str_first_match_rec.fev5 ((lens Int) (r RegLan) (s (Seq Char)) (n Int) ($eo_4 Int))
  :signature (Int RegLan (Seq Char) Int Int) (_ (@Pair Int) Int)
  (
  (($str_first_match_rec.fev5 lens r s n $eo_4) (_ (@pair n) $eo_4))
  )
)
; program: $str_first_match_rec.fev4
(program $str_first_match_rec.fev4 (($eo_1 Bool) (n Int) (rs RegLan) (r RegLan) (s (Seq Char)) (lens Int))
  :signature (Int Int RegLan RegLan (Seq Char) Bool Bool) (_ (@Pair Int) Int)
  (
  (($str_first_match_rec.fev4 lens n rs r s $eo_1 true) ($str_first_match_rec.fev5 lens r s n (eo::add n ($str_first_match_rec_smallest s r 0 lens))))
  (($str_first_match_rec.fev4 lens n rs r s $eo_1 false) ($str_first_match_rec.fev6 lens n rs r s (eo::eq lens 0)))
  )
)
; program: $str_first_match_rec.fev1
(program $str_first_match_rec.fev1 ((lens Int) (n Int) (rs RegLan) (r RegLan) (s (Seq Char)) ($eo_1 Bool))
  :signature (Int Int RegLan RegLan (Seq Char) Bool) (_ (@Pair Int) Int)
  (
  (($str_first_match_rec.fev1 lens n rs r s $eo_1) ($str_first_match_rec.fev4 lens n rs r s $eo_1 $eo_1))
  )
)
; program: $str_first_match_rec
(program $str_first_match_rec ((lens Int) (n Int) (rs RegLan) (r RegLan) (s (Seq Char)))
  :signature ((Seq Char) RegLan RegLan Int Int) (_ (@Pair Int) Int)
  (
  (($str_first_match_rec s r rs n lens) ($str_first_match_rec.fev1 lens n rs r s ($str_first_match_rec.fev2 lens n rs r s (eo::is_str s))))
  )
)
; program: $str_unify_split
(program $str_unify_split ((U Type) (s (Seq U)) (t (Seq U)))
  :signature ((Seq U) (Seq U) Bool) (Seq U)
  (
  (($str_unify_split t s true) (eo::define ((_v0 (str.len t))) (eo::define ((_v1 (str.len s))) (_ (_ (ite (_ (>= _v0) _v1)) (_ (_ (str.substr t) 0) (_ (- _v0) _v1))) (_ (_ (str.substr s) 0) (_ (- _v1) _v0))))))
  (($str_unify_split t s false) (eo::define ((_v0 (str.len t))) (eo::define ((_v1 (str.len s))) (_ (_ (ite (_ (>= _v0) _v1)) (_ (_ (str.substr t) _v1) (_ (- _v0) _v1))) (_ (_ (str.substr s) _v0) (_ (- _v1) _v0))))))
  )
)
; program: $str_nary_intro.fev1
(program $str_nary_intro.fev1 ((T Type) (t (Seq T)))
  :signature ((Seq T) Bool) (Seq T)
  (
  (($str_nary_intro.fev1 t true) t)
  (($str_nary_intro.fev1 t false) (eo::cons str.++ t ($seq_empty (eo::typeof t))))
  )
)
; program: $str_nary_intro
(program $str_nary_intro ((T Type) (ss (Seq T)) (t (Seq T)))
  :signature ((Seq T)) (Seq T)
  (
  (($str_nary_intro (_ (str.++ t) ss)) (_ (str.++ t) ss))
  (($str_nary_intro t) ($str_nary_intro.fev1 t (eo::eq t ($seq_empty (eo::typeof t)))))
  )
)
; program: $re_nary_intro
(program $re_nary_intro ((ss RegLan) (t RegLan))
  :signature (RegLan) RegLan
  (
  (($re_nary_intro (_ (re.++ t) ss)) (_ (re.++ t) ss))
  (($re_nary_intro (str.to_re "")) (str.to_re ""))
  (($re_nary_intro t) (eo::cons re.++ t (str.to_re "")))
  )
)
; program: $str_nary_elim.fev2
(program $str_nary_elim.fev2 ((T Type) ($eo_3 (Seq T)) (t (Seq T)))
  :signature ((Seq T) (Seq T) (Seq T)) (Seq T)
  (
  (($str_nary_elim.fev2 t $eo_3 $eo_3) t)
  )
)
; program: $str_nary_elim.fev1
(program $str_nary_elim.fev1 ((T Type) (t (Seq T)) (ss (Seq T)))
  :signature ((Seq T) (Seq T) Bool) (Seq T)
  (
  (($str_nary_elim.fev1 ss t true) t)
  (($str_nary_elim.fev1 ss t false) (_ (str.++ t) ss))
  )
)
; program: $str_nary_elim
(program $str_nary_elim ((T Type) (ss (Seq T)) (t (Seq T)))
  :signature ((Seq T)) (Seq T)
  (
  (($str_nary_elim (_ (str.++ t) ss)) ($str_nary_elim.fev1 ss t (eo::eq ss ($seq_empty (eo::typeof t)))))
  (($str_nary_elim t) ($str_nary_elim.fev2 t t ($seq_empty (eo::typeof t))))
  )
)
; program: $re_nary_elim.fev1
(program $re_nary_elim.fev1 ((t RegLan) (ss RegLan))
  :signature (RegLan RegLan Bool) RegLan
  (
  (($re_nary_elim.fev1 ss t true) t)
  (($re_nary_elim.fev1 ss t false) (_ (re.++ t) ss))
  )
)
; program: $re_nary_elim
(program $re_nary_elim ((ss RegLan) (t RegLan))
  :signature (RegLan) RegLan
  (
  (($re_nary_elim (_ (re.++ t) ss)) ($re_nary_elim.fev1 ss t (eo::eq ss (str.to_re ""))))
  (($re_nary_elim t) t)
  )
)
; program: $str_reduction_pred.fev7
(program $str_reduction_pred.fev7 ((U Type) ($eoT.fev25 Type) ($eoT.fev27 Type) ($eoT.fev29 Type) ($eo_28 $eoT.fev27) (z (Seq U)) ($eo_26 $eoT.fev25) (x (Seq U)) (y (Seq U)))
  :signature ((Seq U) (Seq U) (Seq U) $eoT.fev25 $eoT.fev27) $eoT.fev29
  (
  (($str_reduction_pred.fev7 y x z $eo_26 $eo_28) (eo::define ((_v0 (eo::var "@var.str_index" Int))) (eo::define ((_v1 (_ (@strings_occur_index x) y))) (eo::define ((_v2 (_ _v1 _v0))) (eo::define ((_v3 (_ (str.indexof x) y))) (eo::define ((_v4 (_ _v3 _v2))) (eo::define ((_v5 (_ (+ _v0) (_ (+ 1) 0)))) (eo::define ((_v6 (_ (_ (str.replace_all x) y) z))) (eo::define ((_v7 (@strings_replace_all_result _v6))) (eo::define ((_v8 (str.substr x))) (eo::define ((_v9 (_ (@strings_num_occur x) y))) (eo::define ((_v10 (_ _v1 _v9))) (eo::define ((_v11 (= (@purify _v6)))) (_ (_ (ite (_ (= y) $eo_28)) (_ _v11 x)) (_ (and (_ (>= _v9) 0)) (_ (and (_ _v11 (_ _v7 0))) (_ (and (_ (= (_ _v7 _v9)) (_ (_ _v8 _v10) (str.len x)))) (_ (and (_ (= (_ _v1 0)) 0)) (_ (and (_ (= (_ _v3 _v10)) -1)) (_ (and (_ (forall (_ ($eo_List_cons _v0) $eo_List_nil)) (_ (or (not (_ (>= _v0) 0))) (_ (or (not (_ (< _v0) _v9))) (_ (or (_ (and (not (_ (= _v4) -1))) (_ (and (_ (= (_ _v7 _v0)) (_ (str.++ (_ (_ _v8 _v2) (_ (- _v4) _v2))) (_ (str.++ z) (_ (str.++ (_ _v7 _v5)) $eo_26))))) (_ (and (_ (= (_ _v1 _v5)) (_ (+ _v4) (_ (+ (str.len y)) 0)))) true)))) false))))) true))))))))))))))))))))
  )
)
; program: $str_reduction_pred.fev6
(program $str_reduction_pred.fev6 ((U Type) (y (Seq U)) (x (Seq U)) (n Int))
  :signature ((Seq U) (Seq U) Int Bool) (Seq U)
  (
  (($str_reduction_pred.fev6 x y n true) y)
  (($str_reduction_pred.fev6 x y n false) (_ (_ (str.substr y) 0) (_ (- (str.len x)) n)))
  )
)
; program: $str_reduction_pred.fev5
(program $str_reduction_pred.fev5 ((U Type) ($eoT.fev22 Type) ($eoT.fev24 Type) ($eo_23 $eoT.fev22) ($eo_21 (Seq U)) (n Int) (y (Seq U)) (x (Seq U)))
  :signature ((Seq U) (Seq U) Int (Seq U) $eoT.fev22) $eoT.fev24
  (
  (($str_reduction_pred.fev5 x y n $eo_21 $eo_23) (eo::define ((_v0 (= (@purify (_ (_ (str.update x) n) y))))) (eo::define ((_v1 (str.len $eo_21))) (eo::define ((_v2 (str.substr x))) (eo::define ((_v3 (@purify (_ (_ _v2 n) _v1)))) (eo::define ((_v4 (@purify (_ (_ _v2 0) n)))) (eo::define ((_v5 (_ (+ n) (_ (+ _v1) 0)))) (eo::define ((_v6 (str.len x))) (eo::define ((_v7 (_ (str.++ (@purify (_ (_ _v2 _v5) (_ (- _v6) _v5)))) $eo_23))) (eo::define ((_v8 (str.++ _v4))) (_ (_ (ite (_ (and (_ (>= n) 0)) (_ (and (_ (> _v6) n)) true))) (_ (and (_ _v0 (_ _v8 (_ (str.++ $eo_21) _v7)))) (_ (and (_ (= x) (_ _v8 (_ (str.++ _v3) _v7)))) (_ (and (_ (= (str.len _v4)) n)) (_ (and (_ (= _v1) (str.len _v3))) true))))) (_ _v0 x))))))))))))
  )
)
; program: $str_reduction_pred.fev4
(program $str_reduction_pred.fev4 ((U Type) ($eoT.fev18 Type) ($eoT.fev20 Type) ($eo_19 $eoT.fev18) (x (Seq U)) (n Int))
  :signature (Int (Seq U) $eoT.fev18) $eoT.fev20
  (
  (($str_reduction_pred.fev4 n x $eo_19) (eo::define ((_v0 (_ (+ n) (_ (+ 1) 0)))) (eo::define ((_v1 (str.len x))) (eo::define ((_v2 (_ (- _v1) _v0))) (eo::define ((_v3 (str.substr x))) (eo::define ((_v4 (@purify (_ (_ _v3 _v0) _v2)))) (eo::define ((_v5 (@purify (_ (_ _v3 0) n)))) (_ (=> (_ (and (_ (>= n) 0)) (_ (and (_ (> _v1) n)) true))) (_ (and (_ (= x) (_ (str.++ _v5) (_ (str.++ (seq.unit (@purify (_ (seq.nth x) n)))) (_ (str.++ _v4) $eo_19))))) (_ (and (_ (= (str.len _v5)) n)) (_ (and (_ (= (str.len _v4)) _v2)) true)))))))))))
  )
)
; program: $str_reduction_pred.fev3
(program $str_reduction_pred.fev3 ((U Type) ($eoT.fev11 Type) ($eoT.fev13 Type) ($eoT.fev15 Type) ($eoT.fev17 Type) ($eo_16 $eoT.fev15) ($eo_14 $eoT.fev13) ($eo_12 $eoT.fev11) (y (Seq U)) (z (Seq U)) (x (Seq U)))
  :signature ((Seq U) (Seq U) (Seq U) $eoT.fev11 $eoT.fev13 $eoT.fev15) $eoT.fev17
  (
  (($str_reduction_pred.fev3 x z y $eo_12 $eo_14 $eo_16) (eo::define ((_v0 (= (@purify (_ (_ (str.replace x) y) z))))) (eo::define ((_v1 (str.len y))) (eo::define ((_v2 (str.substr x))) (eo::define ((_v3 (@purify (_ (_ _v2 0) (_ (_ (str.indexof x) y) 0))))) (eo::define ((_v4 (str.++ _v3))) (eo::define ((_v5 (_ (+ (str.len _v3)) (_ (+ _v1) 0)))) (eo::define ((_v6 (_ (str.++ (@purify (_ (_ _v2 _v5) (_ (- (str.len x)) _v5)))) $eo_12))) (eo::define ((_v7 (str.++ z))) (_ (_ (ite (_ (= y) $eo_16)) (_ _v0 (_ _v7 (_ (str.++ x) $eo_14)))) (_ (_ (ite (_ (str.contains x) y)) (_ (and (_ (= x) (_ _v4 (_ (str.++ y) _v6)))) (_ (and (_ _v0 (_ _v4 (_ _v7 _v6)))) (_ (and (not (_ (str.contains (_ _v4 (_ (str.++ (_ (_ (str.substr y) 0) (_ (- _v1) 1))) $eo_12))) y))) true)))) (_ _v0 x))))))))))))
  )
)
; program: $str_reduction_pred.fev2
(program $str_reduction_pred.fev2 ((U Type) ($eoT.fev6 Type) ($eoT.fev8 Type) ($eoT.fev10 Type) ($eo_9 $eoT.fev8) ($eo_7 $eoT.fev6) (x (Seq U)) (n Int) (y (Seq U)))
  :signature ((Seq U) Int (Seq U) $eoT.fev6 $eoT.fev8) $eoT.fev10
  (
  (($str_reduction_pred.fev2 y n x $eo_7 $eo_9) (eo::define ((_v0 (str.len x))) (eo::define ((_v1 (_ (_ (str.substr x) n) (_ (- _v0) n)))) (eo::define ((_v2 (str.substr _v1))) (eo::define ((_v3 (@purify (_ (_ _v2 0) (_ (_ (str.indexof _v1) y) 0))))) (eo::define ((_v4 (+ (str.len _v3)))) (eo::define ((_v5 (= (@purify (_ (_ (str.indexof x) y) n))))) (eo::define ((_v6 (str.len y))) (eo::define ((_v7 (str.++ _v3))) (eo::define ((_v8 (_ _v4 (_ (+ _v6) 0)))) (_ (_ (ite (_ (or (not (_ (str.contains _v1) y))) (_ (or (_ (> n) _v0)) (_ (or (_ (> 0) n)) false)))) (_ _v5 -1)) (_ (_ (ite (_ (= y) $eo_9)) (_ _v5 n)) (_ (and (_ (= _v1) (_ _v7 (_ (str.++ y) (_ (str.++ (@purify (_ (_ _v2 _v8) (_ (- (str.len _v1)) _v8)))) $eo_7))))) (_ (and (not (_ (str.contains (_ _v7 (_ (str.++ (_ (_ (str.substr y) 0) (_ (- _v6) 1))) $eo_7))) y))) (_ (and (_ _v5 (_ (+ n) (_ _v4 0)))) true)))))))))))))))
  )
)
; program: $str_reduction_pred.fev1
(program $str_reduction_pred.fev1 ((U Type) ($eoT.fev1 Type) ($eoT.fev3 Type) ($eoT.fev5 Type) ($eo_4 $eoT.fev3) (x (Seq U)) (n Int) (m Int) ($eo_2 $eoT.fev1))
  :signature ((Seq U) Int Int $eoT.fev1 $eoT.fev3) $eoT.fev5
  (
  (($str_reduction_pred.fev1 x m n $eo_2 $eo_4) (eo::define ((_v0 (str.substr x))) (eo::define ((_v1 (@purify (_ (_ _v0 n) m)))) (eo::define ((_v2 (_ (+ n) (_ (+ m) 0)))) (eo::define ((_v3 (str.len x))) (eo::define ((_v4 (_ (- _v3) _v2))) (eo::define ((_v5 (@purify (_ (_ _v0 _v2) _v4)))) (eo::define ((_v6 (= (str.len _v5)))) (eo::define ((_v7 (@purify (_ (_ _v0 0) n)))) (_ (_ (ite (_ (and (_ (>= n) 0)) (_ (and (_ (> _v3) n)) (_ (and (_ (> m) 0)) true)))) (_ (and (_ (= x) (_ (str.++ _v7) (_ (str.++ _v1) (_ (str.++ _v5) $eo_4))))) (_ (and (_ (= (str.len _v7)) n)) (_ (and (_ (or (_ _v6 _v4)) (_ (or (_ _v6 0)) false))) (_ (and (_ (<= (str.len _v1)) m)) true))))) (_ (= _v1) $eo_2)))))))))))
  )
)
; program: $str_reduction_pred
(program $str_reduction_pred ((T Type) (m Int) (U Type) (z (Seq U)) (y (Seq U)) (n Int) (r RegLan) (t (Seq Char)) (s (Seq Char)) (x (Seq U)))
  :signature (T) Bool
  (
  (($str_reduction_pred (_ (str.contains x) y)) (eo::define ((_v0 (str.len y))) (eo::define ((_v1 (eo::var "@var.str_index" Int))) (_ (= (@purify (_ (str.contains x) y))) (not (_ (forall (_ ($eo_List_cons _v1) $eo_List_nil)) (_ (or (not (_ (>= _v1) 0))) (_ (or (not (_ (<= _v1) (_ (- (str.len x)) _v0)))) (_ (or (not (_ (= (_ (_ (str.substr x) _v1) _v0)) y))) false)))))))))
  (($str_reduction_pred (_ (_ (str.substr x) n) m)) ($str_reduction_pred.fev1 x m n ($seq_empty (eo::typeof x)) (eo::nil str.++ (eo::typeof (@purify (_ (_ (str.substr x) 0) n))))))
  (($str_reduction_pred (_ (_ (str.indexof x) y) n)) (eo::define ((_v0 (_ (_ (str.substr x) n) (_ (- (str.len x)) n)))) ($str_reduction_pred.fev2 y n x (eo::nil str.++ (eo::typeof (@purify (_ (_ (str.substr _v0) 0) (_ (_ (str.indexof _v0) y) 0))))) ($seq_empty (eo::typeof x)))))
  (($str_reduction_pred (_ (_ (str.replace x) y) z)) ($str_reduction_pred.fev3 x z y (eo::nil str.++ (eo::typeof (@purify (_ (_ (str.substr x) 0) (_ (_ (str.indexof x) y) 0))))) (eo::nil str.++ (eo::typeof z)) ($seq_empty (eo::typeof y))))
  (($str_reduction_pred (str.from_int n)) (eo::define ((_v0 (@purify (str.from_int n)))) (eo::define ((_v1 (eo::var "@var.str_index" Int))) (eo::define ((_v2 (@strings_itos_result n))) (eo::define ((_v3 (_ _v2 (_ (+ _v1) (_ (+ 1) 0))))) (eo::define ((_v4 (>= n))) (eo::define ((_v5 (_ (- (str.to_code (_ (_ (str.substr _v0) _v1) 1))) 48))) (eo::define ((_v6 (str.len _v0))) (_ (_ (ite (_ _v4 0)) (_ (and (_ (>= _v6) 1)) (_ (and (_ (= n) (_ _v2 _v6))) (_ (and (_ (= 0) (_ _v2 0))) (_ (and (_ (forall (_ ($eo_List_cons _v1) $eo_List_nil)) (_ (or (not (_ (>= _v1) 0))) (_ (or (not (_ (< _v1) _v6))) (_ (or (_ (and (_ (= _v3) (_ (+ _v5) (_ (+ (_ (* 10) (_ (* (_ _v2 _v1)) 1))) 0)))) (_ (and (_ (and (_ (>= _v5) (_ (_ (ite (_ (and (_ (= _v1) 0)) (_ (and (_ (> _v6) 1)) true))) 1) 0))) (_ (and (_ (< _v5) 10)) true))) (_ (and (_ _v4 _v3)) true)))) false))))) true))))) (_ (= _v0) ""))))))))))
  (($str_reduction_pred (str.to_int s)) (eo::define ((_v0 (eo::var "@var.str_index" Int))) (eo::define ((_v1 (@strings_stoi_result s))) (eo::define ((_v2 (_ _v1 (_ (+ _v0) (_ (+ 1) 0))))) (eo::define ((_v3 (@purify (str.to_int s)))) (eo::define ((_v4 (str.substr s))) (eo::define ((_v5 (_ (- (str.to_code (_ (_ _v4 _v0) 1))) 48))) (eo::define ((_v6 (str.len s))) (eo::define ((_v7 (= _v3))) (eo::define ((_v8 (@strings_stoi_non_digit s))) (eo::define ((_v9 (_ (- (str.to_code (_ (_ _v4 _v8) 1))) 48))) (_ (_ (ite (_ (< _v3) 0)) (_ (and (_ _v7 -1)) (_ (and (_ (or (_ (= s) "")) (_ (or (_ (and (_ (>= _v8) 0)) (_ (and (_ (< _v8) _v6)) (_ (and (_ (or (_ (< _v9) 0)) (_ (or (_ (>= _v9) 10)) false))) true)))) false))) true))) (_ (and (_ _v7 (_ _v1 _v6))) (_ (and (_ (= 0) (_ _v1 0))) (_ (and (_ (> _v6) 0)) (_ (and (_ (forall (_ ($eo_List_cons _v0) $eo_List_nil)) (_ (or (not (_ (>= _v0) 0))) (_ (or (not (_ (< _v0) _v6))) (_ (or (_ (and (_ (= _v2) (_ (+ _v5) (_ (+ (_ (* 10) (_ (* (_ _v1 _v0)) 1))) 0)))) (_ (and (_ (and (_ (>= _v5) 0)) (_ (and (_ (< _v5) 10)) true))) (_ (and (_ (>= _v3) _v2)) true)))) false))))) true))))))))))))))))
  (($str_reduction_pred (_ (seq.nth x) n)) ($str_reduction_pred.fev4 n x (eo::nil str.++ (eo::typeof (@purify (_ (_ (str.substr x) 0) n))))))
  (($str_reduction_pred (_ (_ (str.update x) n) y)) ($str_reduction_pred.fev5 x y n ($str_reduction_pred.fev6 x y n (eo::is_eq ($str_value_len y) 1)) (eo::nil str.++ (eo::typeof (@purify (_ (_ (str.substr x) 0) n))))))
  (($str_reduction_pred (_ (_ (str.replace_all x) y) z)) (eo::define ((_v0 (_ (_ (@strings_occur_index x) y) (eo::var "@var.str_index" Int)))) ($str_reduction_pred.fev7 y x z (eo::nil str.++ (eo::typeof (_ (_ (str.substr x) _v0) (_ (- (_ (_ (str.indexof x) y) _v0)) _v0)))) ($seq_empty (eo::typeof x)))))
  (($str_reduction_pred (_ (_ (str.replace_re s) r) t)) (eo::define ((_v0 (_ (str.++ (@re_first_match_post s r)) ""))) (eo::define ((_v1 (@re_first_match_pre s r))) (eo::define ((_v2 (str.++ _v1))) (eo::define ((_v3 (= (@purify (_ (_ (str.replace_re s) r) t))))) (eo::define ((_v4 (@re_first_match s r))) (eo::define ((_v5 (eo::var "@var.str_length" Int))) (eo::define ((_v6 (_ (_ (str.indexof_re s) r) 0))) (_ (_ (ite (_ (= _v6) -1)) (_ _v3 s)) (_ (and (_ (= s) (_ _v2 (_ (str.++ _v4) _v0)))) (_ (and (_ (= (str.len _v1)) _v6)) (_ (and (_ (forall (_ ($eo_List_cons _v5) $eo_List_nil)) (_ (or (not (_ (>= _v5) 0))) (_ (or (not (_ (< _v5) (str.len _v4)))) (_ (or (not (_ (str.in_re (_ (_ (str.substr _v4) 0) _v5)) r))) false))))) (_ (and (_ (str.in_re _v4) r)) (_ (and (_ _v3 (_ _v2 (_ (str.++ t) _v0)))) true))))))))))))))
  (($str_reduction_pred (_ (_ (str.replace_re_all s) r) t)) (eo::define ((_v0 (eo::var "@var.str_index" Int))) (eo::define ((_v1 (_ (+ _v0) (_ (+ 1) 0)))) (eo::define ((_v2 (_ (_ (str.replace_re_all s) r) t))) (eo::define ((_v3 (@strings_replace_all_result _v2))) (eo::define ((_v4 (@strings_occur_index_re s r))) (eo::define ((_v5 (_ _v4 _v0))) (eo::define ((_v6 (_ (@strings_occur_len_re s r) _v1))) (eo::define ((_v7 (_ _v4 _v1))) (eo::define ((_v8 (_ (- _v7) _v6))) (eo::define ((_v9 (str.substr s))) (eo::define ((_v10 (eo::var "@var.str_length" Int))) (eo::define ((_v11 (_ _v9 _v8))) (eo::define ((_v12 (_ (re.diff r) (str.to_re "")))) (eo::define ((_v13 (_ (str.indexof_re s) _v12))) (eo::define ((_v14 (@strings_num_occur_re s r))) (eo::define ((_v15 (_ (_ _v9 (_ _v4 _v14)) (str.len s)))) (eo::define ((_v16 (= (@purify _v2)))) (_ (_ (ite (_ (= (_ _v13 0)) -1)) (_ _v16 s)) (_ (and (_ (> _v14) 0)) (_ (and (_ _v16 (_ _v3 0))) (_ (and (_ (= (_ _v3 _v14)) _v15)) (_ (and (_ (= (_ _v4 0)) 0)) (_ (and (_ (= (_ (_ (str.indexof_re _v15) _v12) 0)) -1)) (_ (and (_ (forall (_ ($eo_List_cons _v0) $eo_List_nil)) (_ (or (not (_ (>= _v0) 0))) (_ (or (not (_ (< _v0) _v14))) (_ (or (_ (and (_ (> _v6) 0)) (_ (and (_ (= _v7) (_ (+ (_ _v13 _v5)) (_ (+ _v6) 0)))) (_ (and (_ (str.in_re (_ _v11 _v6)) _v12)) (_ (and (_ (forall (_ ($eo_List_cons _v10) $eo_List_nil)) (_ (or (not (_ (> _v10) 0))) (_ (or (not (_ (< _v10) _v6))) (_ (or (not (_ (str.in_re (_ _v11 _v10)) r))) false))))) (_ (and (_ (= (_ _v3 _v0)) (_ (str.++ (_ (_ _v9 _v5) (_ (- _v8) _v5))) (_ (str.++ t) (_ (str.++ (_ _v3 _v1)) ""))))) true)))))) false))))) true)))))))))))))))))))))))))
  (($str_reduction_pred (_ (_ (str.indexof_re s) r) n)) (eo::define ((_v0 (eo::var "@var.str_length" Int))) (eo::define ((_v1 (@purify (_ (_ (str.indexof_re s) r) n)))) (eo::define ((_v2 (str.substr s))) (eo::define ((_v3 (str.len s))) (eo::define ((_v4 (- _v3))) (eo::define ((_v5 (<= _v0))) (eo::define ((_v6 (_ ($eo_List_cons _v0) $eo_List_nil))) (eo::define ((_v7 (= _v1))) (eo::define ((_v8 (_ _v7 -1))) (eo::define ((_v9 (eo::var "@var.str_index" Int))) (_ (_ (ite (_ (or (_ (> n) _v3)) (_ (or (_ (> 0) n)) false))) _v8) (_ (_ (ite (_ (str.in_re "") r)) (_ _v7 n)) (_ (and (_ (forall (_ ($eo_List_cons _v9) _v6)) (_ (or (not (_ (>= _v9) n))) (_ (or (not (_ (< _v9) (_ (_ (ite _v8) _v3) _v1)))) (_ (or (not (_ (> _v0) 0))) (_ (or (not (_ _v5 (_ _v4 _v9)))) (_ (or (not (_ (str.in_re (_ (_ _v2 _v9) _v0)) r))) false))))))) (_ (and (_ (or _v8) (_ (or (_ (and (_ (>= _v1) n)) (_ (and (not (_ (forall _v6) (_ (or (not (_ (>= _v0) 0))) (_ (or (not (_ _v5 (_ _v4 _v1)))) (_ (or (not (_ (str.in_re (_ (_ _v2 _v1) _v0)) r))) false)))))) true))) false))) true)))))))))))))))
  (($str_reduction_pred (_ (str.<= s) t)) (eo::define ((_v0 (eo::var "@var.str_index" Int))) (eo::define ((_v1 (str.substr s))) (eo::define ((_v2 (str.to_code (_ (_ _v1 _v0) 1)))) (eo::define ((_v3 (str.substr t))) (eo::define ((_v4 (str.to_code (_ (_ _v3 _v0) 1)))) (eo::define ((_v5 (@purify (_ (str.<= s) t)))) (eo::define ((_v6 (<= _v0))) (_ (_ (ite (_ (= s) t)) _v5) (not (_ (forall (_ ($eo_List_cons _v0) $eo_List_nil)) (_ (or (not (_ (>= _v0) 0))) (_ (or (not (_ _v6 (str.len s)))) (_ (or (not (_ _v6 (str.len t)))) (_ (or (not (_ (= (_ (_ _v1 0) _v0)) (_ (_ _v3 0) _v0)))) (_ (or (_ (_ (ite _v5) (_ (>= _v2) _v4)) (_ (>= _v4) _v2))) false))))))))))))))))
  (($str_reduction_pred (str.to_lower s)) (eo::define ((_v0 (eo::var "@var.str_index" Int))) (eo::define ((_v1 (str.to_code (_ (_ (str.substr s) _v0) 1)))) (eo::define ((_v2 (@purify (str.to_lower s)))) (eo::define ((_v3 (str.len _v2))) (_ (and (_ (= (str.len s)) _v3)) (_ (and (_ (forall (_ ($eo_List_cons _v0) $eo_List_nil)) (_ (or (not (_ (>= _v0) 0))) (_ (or (not (_ (< _v0) _v3))) (_ (or (_ (= (str.to_code (_ (_ (str.substr _v2) _v0) 1))) (_ (_ (ite (_ (and (_ (<= 65) _v1)) (_ (and (_ (<= _v1) 90)) true))) (_ (+ _v1) (_ (+ 32) 0))) _v1))) false))))) true)))))))
  (($str_reduction_pred (str.to_upper s)) (eo::define ((_v0 (eo::var "@var.str_index" Int))) (eo::define ((_v1 (str.to_code (_ (_ (str.substr s) _v0) 1)))) (eo::define ((_v2 (@purify (str.to_upper s)))) (eo::define ((_v3 (str.len _v2))) (_ (and (_ (= (str.len s)) _v3)) (_ (and (_ (forall (_ ($eo_List_cons _v0) $eo_List_nil)) (_ (or (not (_ (>= _v0) 0))) (_ (or (not (_ (< _v0) _v3))) (_ (or (_ (= (str.to_code (_ (_ (str.substr _v2) _v0) 1))) (_ (_ (ite (_ (and (_ (<= 97) _v1)) (_ (and (_ (<= _v1) 122)) true))) (_ (+ _v1) (_ (+ -32) 0))) _v1))) false))))) true)))))))
  (($str_reduction_pred (str.rev x)) (eo::define ((_v0 (eo::var "@var.str_index" Int))) (eo::define ((_v1 (str.len x))) (eo::define ((_v2 (@purify (str.rev x)))) (eo::define ((_v3 (str.len _v2))) (_ (and (_ (= _v1) _v3)) (_ (and (_ (forall (_ ($eo_List_cons _v0) $eo_List_nil)) (_ (or (not (_ (>= _v0) 0))) (_ (or (not (_ (< _v0) _v3))) (_ (or (_ (= (_ (_ (str.substr _v2) _v0) 1)) (_ (_ (str.substr x) (_ (- _v1) (_ (+ _v0) (_ (+ 1) 0)))) 1))) false))))) true)))))))
  )
)
; program: $mk_str_eager_reduction.fev2
(program $mk_str_eager_reduction.fev2 ((r RegLan) (s (Seq Char)) ($eo_4 Int))
  :signature (RegLan (Seq Char) Int) Bool
  (
  (($mk_str_eager_reduction.fev2 r s $eo_4) (_ (=> (_ (str.in_re s) r)) (_ (= (str.len s)) $eo_4)))
  )
)
; program: $mk_str_eager_reduction.fev1
(program $mk_str_eager_reduction.fev1 ((U Type) ($eoT.fev1 Type) ($eoT.fev3 Type) ($eo_2 $eoT.fev1) (x (Seq U)) (y (Seq U)))
  :signature ((Seq U) (Seq U) $eoT.fev1) $eoT.fev3
  (
  (($mk_str_eager_reduction.fev1 y x $eo_2) (eo::define ((_v0 (= x))) (eo::define ((_v1 (str.substr x))) (eo::define ((_v2 (@purify (_ (_ _v1 0) (_ (_ (str.indexof x) y) 0))))) (eo::define ((_v3 (_ (+ (str.len _v2)) (_ (+ (str.len y)) 0)))) (_ (_ (ite (_ (str.contains x) y)) (_ _v0 (_ (str.++ _v2) (_ (str.++ y) (_ (str.++ (@purify (_ (_ _v1 _v3) (_ (- (str.len x)) _v3)))) $eo_2))))) (not (_ _v0 y))))))))
  )
)
; program: $mk_str_eager_reduction
(program $mk_str_eager_reduction ((U Type) (y (Seq U)) (x (Seq U)) (n Int) (s (Seq Char)) (r RegLan))
  :signature (U) Bool
  (
  (($mk_str_eager_reduction (str.from_code n)) (eo::define ((_v0 (@purify (str.from_code n)))) (_ (_ (ite (_ (and (_ (<= 0) n)) (_ (and (_ (< n) 196608)) true))) (_ (= n) (str.to_code _v0))) (_ (= _v0) ""))))
  (($mk_str_eager_reduction (str.to_code s)) (eo::define ((_v0 (str.to_code s))) (_ (_ (ite (_ (= (str.len s)) 1)) (_ (and (_ (>= _v0) 0)) (_ (and (_ (< _v0) 196608)) true))) (_ (= _v0) -1))))
  (($mk_str_eager_reduction (str.to_int s)) (_ (>= (str.to_int s)) -1))
  (($mk_str_eager_reduction (_ (str.contains x) y)) ($mk_str_eager_reduction.fev1 y x (eo::nil str.++ (eo::typeof (@purify (_ (_ (str.substr x) 0) (_ (_ (str.indexof x) y) 0)))))))
  (($mk_str_eager_reduction (_ (_ (str.indexof x) y) n)) (eo::define ((_v0 (_ (_ (str.indexof x) y) n))) (_ (and (_ (or (_ (= _v0) -1)) (_ (or (_ (>= _v0) n)) false))) (_ (and (_ (<= _v0) (str.len x))) true))))
  (($mk_str_eager_reduction (_ (_ (str.indexof_re s) r) n)) (eo::define ((_v0 (_ (_ (str.indexof_re s) r) n))) (_ (and (_ (or (_ (= _v0) -1)) (_ (or (_ (>= _v0) n)) false))) (_ (and (_ (<= _v0) (str.len s))) true))))
  (($mk_str_eager_reduction (_ (str.in_re s) r)) ($mk_str_eager_reduction.fev2 r s ($str_fixed_len_re r)))
  )
)
; fwd-decl: $re_unfold_pos_concat_rec
(program $re_unfold_pos_concat_rec ()
  :signature ((Seq Char) RegLan RegLan Int) (_ (@Pair (Seq Char)) Bool)
)
; program: $re_unfold_pos_concat_rec.fev2
(program $re_unfold_pos_concat_rec.fev2 ((i Int) (ro RegLan) (r2 RegLan) (t (Seq Char)) (r1 RegLan) ($eo_4 (Seq Char)) ($eo_3 Bool))
  :signature (Int RegLan RegLan (Seq Char) RegLan Bool (Seq Char)) (_ (@Pair (Seq Char)) Bool)
  (
  (($re_unfold_pos_concat_rec.fev2 i ro r2 t r1 $eo_3 $eo_4) (_ (@pair $eo_4) $eo_3))
  )
)
; program: $re_unfold_pos_concat_rec.fev1
(program $re_unfold_pos_concat_rec.fev1 ((i Int) (ro RegLan) (r2 RegLan) (t (Seq Char)) (s (Seq Char)) ($eo_2 (Seq Char)) ($eo_1 Bool))
  :signature (Int RegLan RegLan (Seq Char) (Seq Char) Bool (Seq Char)) (_ (@Pair (Seq Char)) Bool)
  (
  (($re_unfold_pos_concat_rec.fev1 i ro r2 t s $eo_1 $eo_2) (_ (@pair $eo_2) $eo_1))
  )
)
; program: $re_unfold_pos_concat_rec
(program $re_unfold_pos_concat_rec ((s (Seq Char)) (r1 RegLan) (t (Seq Char)) (r2 RegLan) (ro RegLan) (i Int))
  :signature ((Seq Char) RegLan RegLan Int) (_ (@Pair (Seq Char)) Bool)
  (
  (($re_unfold_pos_concat_rec t (str.to_re "") ro i) (_ (@pair "") true))
  (($re_unfold_pos_concat_rec t (_ (re.++ (str.to_re s)) r2) ro i) (eo::define ((_v0 ($re_unfold_pos_concat_rec t r2 ro (eo::add i 1)))) ($re_unfold_pos_concat_rec.fev1 i ro r2 t s ($pair_second _v0) (eo::cons str.++ s ($pair_first _v0)))))
  (($re_unfold_pos_concat_rec t (_ (re.++ r1) r2) ro i) (eo::define ((_v0 ($re_unfold_pos_concat_rec t r2 ro (eo::add i 1)))) (eo::define ((_v1 (@re_unfold_pos_component t ro i))) ($re_unfold_pos_concat_rec.fev2 i ro r2 t r1 (eo::cons and (_ (str.in_re _v1) r1) ($pair_second _v0)) (eo::cons str.++ _v1 ($pair_first _v0))))))
  )
)
; program: $str_flatten_word
(program $str_flatten_word ((U Type) (t (Seq U)))
  :signature ((Seq U)) (Seq U)
  (
  (($str_flatten_word "") "")
  (($str_flatten_word t) (eo::cons str.++ (eo::extract t 0 0) ($str_flatten_word (eo::extract t 1 (eo::len t)))))
  )
)
; fwd-decl: $str_flatten
(program $str_flatten ((U Type))
  :signature ((Seq U)) (Seq U)
)
; program: $str_flatten.fev2
(program $str_flatten.fev2 ((U Type) ($eo_3 (Seq U)) (t (Seq U)))
  :signature ((Seq U) (Seq U) (Seq U)) (Seq U)
  (
  (($str_flatten.fev2 t $eo_3 $eo_3) t)
  )
)
; program: $str_flatten.fev1
(program $str_flatten.fev1 ((U Type) (t (Seq U)) (tail (Seq U)))
  :signature ((Seq U) (Seq U) Bool) (Seq U)
  (
  (($str_flatten.fev1 tail t true) (eo::list_concat str.++ ($str_flatten_word t) ($str_flatten tail)))
  (($str_flatten.fev1 tail t false) (eo::cons str.++ t ($str_flatten tail)))
  )
)
; program: $str_flatten
(program $str_flatten ((U Type) (tail (Seq U)) (t (Seq U)))
  :signature ((Seq U)) (Seq U)
  (
  (($str_flatten (_ (str.++ t) tail)) ($str_flatten.fev1 tail t (eo::is_eq (eo::is_neg (eo::add 1 (eo::neg (eo::len t)))) true)))
  (($str_flatten t) ($str_flatten.fev2 t t ($seq_empty (eo::typeof t))))
  )
)
; fwd-decl: $str_collect_acc
(program $str_collect_acc ((U Type))
  :signature ((Seq U)) (eo::define ((_v0 (Seq U))) (_ (@Pair _v0) _v0))
)
; program: $str_collect_acc.fev4
(program $str_collect_acc.fev4 ((U Type) (tail (Seq U)) (t (Seq U)) ($eo_5 (Seq U)) ($eo_4 (Seq U)))
  :signature ((Seq U) (Seq U) (Seq U) (Seq U)) (eo::define ((_v0 (Seq U))) (_ (@Pair _v0) _v0))
  (
  (($str_collect_acc.fev4 tail t $eo_4 $eo_5) (_ (@pair $eo_5) $eo_4))
  )
)
; program: $str_collect_acc.fev3
(program $str_collect_acc.fev3 ((U Type) (tail (Seq U)) (t (Seq U)) ($eo_3 (Seq U)))
  :signature ((Seq U) (Seq U) (Seq U)) (eo::define ((_v0 (Seq U))) (_ (@Pair _v0) _v0))
  (
  (($str_collect_acc.fev3 tail t $eo_3) (_ (@pair t) $eo_3))
  )
)
; program: $str_collect_acc.fev2
(program $str_collect_acc.fev2 ((U Type) (t (Seq U)) (tail (Seq U)))
  :signature ((Seq U) (Seq U) Bool) (eo::define ((_v0 (Seq U))) (_ (@Pair _v0) _v0))
  (
  (($str_collect_acc.fev2 tail t true) ($str_collect_acc.fev3 tail t ($pair_second ($str_collect_acc tail))))
  (($str_collect_acc.fev2 tail t false) (eo::define ((_v0 ($str_collect_acc tail))) ($str_collect_acc.fev4 tail t ($pair_second _v0) (eo::concat t ($pair_first _v0)))))
  )
)
; program: $str_collect_acc.fev1
(program $str_collect_acc.fev1 ((U Type) (t (Seq U)) (tail (Seq U)))
  :signature ((Seq U) (Seq U) Bool) (eo::define ((_v0 (Seq U))) (_ (@Pair _v0) _v0))
  (
  (($str_collect_acc.fev1 tail t true) ($str_collect_acc.fev2 tail t (eo::eq ($pair_first ($str_collect_acc tail)) "")))
  (($str_collect_acc.fev1 tail t false) (_ (@pair "") (_ (str.++ t) tail)))
  )
)
; program: $str_collect_acc
(program $str_collect_acc ((U Type) (tail (Seq U)) (t (Seq U)))
  :signature ((Seq U)) (eo::define ((_v0 (Seq U))) (_ (@Pair _v0) _v0))
  (
  (($str_collect_acc (_ (str.++ t) tail)) ($str_collect_acc.fev1 tail t (eo::is_eq (eo::len t) 1)))
  (($str_collect_acc "") (_ (@pair "") ""))
  )
)
; fwd-decl: $str_collect
(program $str_collect ((U Type))
  :signature ((Seq U)) (Seq U)
)
; program: $str_collect.fev2
(program $str_collect.fev2 ((U Type) ($eo_3 (Seq U)) (t (Seq U)))
  :signature ((Seq U) (Seq U) (Seq U)) (Seq U)
  (
  (($str_collect.fev2 t $eo_3 $eo_3) t)
  )
)
; program: $str_collect.fev1
(program $str_collect.fev1 ((U Type) (t (Seq U)) (s (Seq U)))
  :signature ((Seq U) (Seq U) Bool) (Seq U)
  (
  (($str_collect.fev1 s t true) (eo::cons str.++ t ($str_collect s)))
  (($str_collect.fev1 s t false) (eo::define ((_v0 ($str_collect_acc (_ (str.++ t) s)))) (eo::cons str.++ ($pair_first _v0) ($str_collect ($pair_second _v0)))))
  )
)
; program: $str_collect
(program $str_collect ((U Type) (s (Seq U)) (t (Seq U)))
  :signature ((Seq U)) (Seq U)
  (
  (($str_collect (_ (str.++ t) s)) ($str_collect.fev1 s t (eo::eq ($pair_first ($str_collect_acc (_ (str.++ t) s))) "")))
  (($str_collect t) ($str_collect.fev2 t t ($seq_empty (eo::typeof t))))
  )
)
; program: $str_strip_prefix
(program $str_strip_prefix ((U Type) (t2 (Seq U)) (s2 (Seq U)) (t (Seq U)) (s (Seq U)))
  :signature ((Seq U) (Seq U)) (eo::define ((_v0 (Seq U))) (_ (@Pair _v0) _v0))
  (
  ((eo::define ((_v0 (str.++ t))) ($str_strip_prefix (_ _v0 t2) (_ _v0 s2))) ($str_strip_prefix t2 s2))
  (($str_strip_prefix t s) (_ (@pair t) s))
  )
)
; program: $str_mk_re_loop_elim_rec
(program $str_mk_re_loop_elim_rec ((n Int) (d Int) (r RegLan) (rr RegLan))
  :signature (Int Int RegLan RegLan) RegLan
  (
  (($str_mk_re_loop_elim_rec 0 0 r rr) (eo::cons re.union ($singleton_elim rr) re.none))
  (($str_mk_re_loop_elim_rec 0 d r rr) (eo::cons re.union ($singleton_elim rr) ($str_mk_re_loop_elim_rec 0 (eo::add d -1) r (_ (re.++ r) rr))))
  (($str_mk_re_loop_elim_rec n d r rr) ($str_mk_re_loop_elim_rec (eo::add n -1) d r (_ (re.++ r) rr)))
  )
)
; program: $str_mk_str_in_re_concat_star_char
(program $str_mk_str_in_re_concat_star_char ((s1 (Seq Char)) (s2 (Seq Char)) (r RegLan))
  :signature ((Seq Char) RegLan) Bool
  (
  (($str_mk_str_in_re_concat_star_char (_ (str.++ s1) s2) r) (eo::cons and (_ (str.in_re s1) r) ($str_mk_str_in_re_concat_star_char s2 r)))
  (($str_mk_str_in_re_concat_star_char "" r) true)
  )
)
; fwd-decl: $str_mk_str_in_re_sigma_rec
(program $str_mk_str_in_re_sigma_rec ()
  :signature ((Seq Char) RegLan Int Bool) Bool
)
; program: $str_mk_str_in_re_sigma_rec.fev1
(program $str_mk_str_in_re_sigma_rec.fev1 ((b Bool) (s (Seq Char)) (n Int))
  :signature (Int (Seq Char) Bool Bool) Bool
  (
  (($str_mk_str_in_re_sigma_rec.fev1 n s b true) (_ (= (str.len s)) n))
  (($str_mk_str_in_re_sigma_rec.fev1 n s b false) (_ (>= (str.len s)) n))
  )
)
; program: $str_mk_str_in_re_sigma_rec
(program $str_mk_str_in_re_sigma_rec ((b Bool) (s (Seq Char)) (r RegLan) (n Int))
  :signature ((Seq Char) RegLan Int Bool) Bool
  (
  (($str_mk_str_in_re_sigma_rec s (str.to_re "") n b) ($str_mk_str_in_re_sigma_rec.fev1 n s b b))
  (($str_mk_str_in_re_sigma_rec s (_ (re.++ re.allchar) r) n b) ($str_mk_str_in_re_sigma_rec s r (eo::add n 1) b))
  (($str_mk_str_in_re_sigma_rec s (_ (re.++ (re.* re.allchar)) r) n b) ($str_mk_str_in_re_sigma_rec s r n false))
  )
)
; program: $str_mk_str_in_re_sigma_star_rec
(program $str_mk_str_in_re_sigma_star_rec ((s (Seq Char)) (r RegLan) (n Int))
  :signature ((Seq Char) RegLan Int) Bool
  (
  (($str_mk_str_in_re_sigma_star_rec s (str.to_re "") n) (_ (= (_ (mod (str.len s)) n)) 0))
  (($str_mk_str_in_re_sigma_star_rec s (_ (re.++ re.allchar) r) n) ($str_mk_str_in_re_sigma_star_rec s r (eo::add n 1)))
  )
)
; fwd-decl: $re_str_to_flat_form
(program $re_str_to_flat_form ()
  :signature (Bool RegLan) RegLan
)
; program: $re_str_to_flat_form.fev2
(program $re_str_to_flat_form.fev2 ((r2 RegLan) (rev Bool) (s (Seq Char)))
  :signature (RegLan Bool (Seq Char) Bool) (Seq Char)
  (
  (($re_str_to_flat_form.fev2 r2 rev s true) (eo::list_rev str.++ ($str_flatten ($str_nary_intro s))))
  (($re_str_to_flat_form.fev2 r2 rev s false) ($str_flatten ($str_nary_intro s)))
  )
)
; program: $re_str_to_flat_form.fev1
(program $re_str_to_flat_form.fev1 ((r2 RegLan) (rev Bool) (s (Seq Char)) ($eo_2 (Seq Char)) ($eo_1 RegLan))
  :signature (RegLan Bool (Seq Char) RegLan (Seq Char)) RegLan
  (
  (($re_str_to_flat_form.fev1 r2 rev s $eo_1 $eo_2) (eo::cons re.++ (str.to_re $eo_2) $eo_1))
  )
)
; program: $re_str_to_flat_form
(program $re_str_to_flat_form ((s (Seq Char)) (r2 RegLan) (rev Bool) (r1 RegLan))
  :signature (Bool RegLan) RegLan
  (
  (($re_str_to_flat_form rev (_ (re.++ (str.to_re s)) r2)) ($re_str_to_flat_form.fev1 r2 rev s ($re_str_to_flat_form rev r2) ($re_str_to_flat_form.fev2 r2 rev s rev)))
  (($re_str_to_flat_form rev (_ (re.++ r1) r2)) (eo::cons re.++ r1 ($re_str_to_flat_form rev r2)))
  (($re_str_to_flat_form rev r1) r1)
  )
)
; fwd-decl: $re_str_from_flat_form
(program $re_str_from_flat_form ()
  :signature (Bool RegLan) RegLan
)
; program: $re_str_from_flat_form.fev2
(program $re_str_from_flat_form.fev2 ((r2 RegLan) (rev Bool) (s (Seq Char)))
  :signature (RegLan Bool (Seq Char) Bool) (Seq Char)
  (
  (($re_str_from_flat_form.fev2 r2 rev s true) (eo::list_rev str.++ s))
  (($re_str_from_flat_form.fev2 r2 rev s false) s)
  )
)
; program: $re_str_from_flat_form.fev3
(program $re_str_from_flat_form.fev3 (($eo_2 (Seq Char)) ($eo_3 (Seq Char)) ($eo_1 RegLan))
  :signature (RegLan (Seq Char) (Seq Char)) RegLan
  (
  (($re_str_from_flat_form.fev3 $eo_1 $eo_2 $eo_3) (eo::cons re.++ (str.to_re $eo_3) $eo_1))
  )
)
; program: $re_str_from_flat_form.fev1
(program $re_str_from_flat_form.fev1 ((r2 RegLan) (rev Bool) (s (Seq Char)) ($eo_1 RegLan) ($eo_2 (Seq Char)))
  :signature (RegLan Bool (Seq Char) RegLan (Seq Char)) RegLan
  (
  (($re_str_from_flat_form.fev1 r2 rev s $eo_1 $eo_2) ($re_str_from_flat_form.fev3 $eo_1 $eo_2 ($str_nary_elim ($str_collect $eo_2))))
  )
)
; program: $re_str_from_flat_form
(program $re_str_from_flat_form ((s (Seq Char)) (r2 RegLan) (rev Bool) (r1 RegLan))
  :signature (Bool RegLan) RegLan
  (
  (($re_str_from_flat_form rev (_ (re.++ (str.to_re s)) r2)) ($re_str_from_flat_form.fev1 r2 rev s ($re_str_from_flat_form rev r2) ($re_str_from_flat_form.fev2 r2 rev s rev)))
  (($re_str_from_flat_form rev (_ (re.++ r1) r2)) (eo::cons re.++ r1 ($re_str_from_flat_form rev r2)))
  (($re_str_from_flat_form rev r1) r1)
  )
)
; fwd-decl: $str_re_includes
(program $str_re_includes ()
  :signature (RegLan RegLan) Bool
)
; fwd-decl: $str_re_includes_lhs_union
(program $str_re_includes_lhs_union ()
  :signature (RegLan RegLan) Bool
)
; program: $str_re_includes_lhs_union.fev1
(program $str_re_includes_lhs_union.fev1 ((r1 RegLan) (r2 RegLan) (r3 RegLan))
  :signature (RegLan RegLan RegLan Bool) Bool
  (
  (($str_re_includes_lhs_union.fev1 r3 r2 r1 true) true)
  (($str_re_includes_lhs_union.fev1 r3 r2 r1 false) ($str_re_includes_lhs_union r2 r3))
  )
)
; program: $str_re_includes_lhs_union
(program $str_re_includes_lhs_union ((r2 RegLan) (r1 RegLan) (r3 RegLan))
  :signature (RegLan RegLan) Bool
  (
  (($str_re_includes_lhs_union (_ (re.union r1) r2) r3) ($str_re_includes_lhs_union.fev1 r3 r2 r1 ($str_re_includes r1 r3)))
  (($str_re_includes_lhs_union r1 r3) false)
  )
)
; fwd-decl: $str_re_includes_rhs_inter
(program $str_re_includes_rhs_inter ()
  :signature (RegLan RegLan) Bool
)
; program: $str_re_includes_rhs_inter.fev1
(program $str_re_includes_rhs_inter.fev1 ((r3 RegLan) (r1 RegLan) (r2 RegLan))
  :signature (RegLan RegLan RegLan Bool) Bool
  (
  (($str_re_includes_rhs_inter.fev1 r2 r1 r3 true) true)
  (($str_re_includes_rhs_inter.fev1 r2 r1 r3 false) ($str_re_includes_rhs_inter r1 r2))
  )
)
; program: $str_re_includes_rhs_inter
(program $str_re_includes_rhs_inter ((r2 RegLan) (r1 RegLan) (r3 RegLan))
  :signature (RegLan RegLan) Bool
  (
  (($str_re_includes_rhs_inter r1 (_ (re.inter r3) r2)) ($str_re_includes_rhs_inter.fev1 r2 r1 r3 ($str_re_includes r1 r3)))
  (($str_re_includes_rhs_inter r1 r3) false)
  )
)
; program: $str_maybe_get_star_body
(program $str_maybe_get_star_body ((r RegLan))
  :signature (RegLan) RegLan
  (
  (($str_maybe_get_star_body (re.* r)) r)
  (($str_maybe_get_star_body r) r)
  )
)
; program: $str_re_includes_lhs_star.fev1
(program $str_re_includes_lhs_star.fev1 ((r1 RegLan) (r2 RegLan))
  :signature (RegLan RegLan Bool) Bool
  (
  (($str_re_includes_lhs_star.fev1 r2 r1 true) true)
  (($str_re_includes_lhs_star.fev1 r2 r1 false) ($str_re_includes r1 ($str_maybe_get_star_body r2)))
  )
)
; program: $str_re_includes_lhs_star
(program $str_re_includes_lhs_star ((r1 RegLan) (r2 RegLan))
  :signature (RegLan RegLan) Bool
  (
  (($str_re_includes_lhs_star (re.* r1) r2) ($str_re_includes_lhs_star.fev1 r2 r1 (eo::eq r1 re.allchar)))
  (($str_re_includes_lhs_star r1 r2) false)
  )
)
; program: $str_re_includes_is_rec
(program $str_re_includes_is_rec ((r2 RegLan) (r1 RegLan) (r3 RegLan))
  :signature (RegLan RegLan) Bool
  (
  (($str_re_includes_is_rec r1 (_ (re.inter r3) r2)) false)
  (($str_re_includes_is_rec (_ (re.union r1) r2) r3) false)
  (($str_re_includes_is_rec (re.* r1) r3) false)
  (($str_re_includes_is_rec (_ (re.++ r1) r2) r3) true)
  (($str_re_includes_is_rec r3 (_ (re.++ r1) r2)) true)
  (($str_re_includes_is_rec r1 r3) false)
  )
)
; program: $re_is_unbound_wildcard
(program $re_is_unbound_wildcard ((r2 RegLan) (r1 RegLan))
  :signature (RegLan) Bool
  (
  (($re_is_unbound_wildcard (_ (re.++ (re.* re.allchar)) r2)) true)
  (($re_is_unbound_wildcard (_ (re.++ re.allchar) r2)) ($re_is_unbound_wildcard r2))
  (($re_is_unbound_wildcard r1) false)
  )
)
; fwd-decl: $str_re_includes_rec
(program $str_re_includes_rec ()
  :signature (RegLan RegLan) Bool
)
; program: $str_re_includes_rec.fev2
(program $str_re_includes_rec.fev2 ((r4 RegLan) (r3 RegLan) (r2 RegLan) (r1 RegLan))
  :signature (RegLan RegLan RegLan RegLan Bool) Bool
  (
  (($str_re_includes_rec.fev2 r4 r3 r2 r1 true) ($str_re_includes_rec r2 r4))
  (($str_re_includes_rec.fev2 r4 r3 r2 r1 false) false)
  )
)
; program: $str_re_includes_rec.fev5
(program $str_re_includes_rec.fev5 ((r4 RegLan) (r3 RegLan) (r2 RegLan) (r1 RegLan))
  :signature (RegLan RegLan RegLan RegLan Bool) Bool
  (
  (($str_re_includes_rec.fev5 r4 r3 r2 r1 true) ($str_re_includes_rec (_ (re.++ r1) r2) r4))
  (($str_re_includes_rec.fev5 r4 r3 r2 r1 false) false)
  )
)
; program: $str_re_includes_rec.fev8
(program $str_re_includes_rec.fev8 ((r4 RegLan) (r3 RegLan) (r2 RegLan) (r1 RegLan))
  :signature (RegLan RegLan RegLan RegLan Bool) Bool
  (
  (($str_re_includes_rec.fev8 r4 r3 r2 r1 true) ($str_re_includes_rec r2 (_ (re.++ r3) r4)))
  (($str_re_includes_rec.fev8 r4 r3 r2 r1 false) false)
  )
)
; program: $str_re_includes_rec.fev9
(program $str_re_includes_rec.fev9 (($eo_5 Bool))
  :signature (Bool Bool) Bool
  (
  (($str_re_includes_rec.fev9 $eo_5 true) true)
  (($str_re_includes_rec.fev9 $eo_5 false) false)
  )
)
; program: $str_re_includes_rec.fev7
(program $str_re_includes_rec.fev7 ((r4 RegLan) (r3 RegLan) (r2 RegLan) (r1 RegLan) ($eo_5 Bool))
  :signature (RegLan RegLan RegLan RegLan Bool) Bool
  (
  (($str_re_includes_rec.fev7 r4 r3 r2 r1 $eo_5) ($str_re_includes_rec.fev9 $eo_5 $eo_5))
  )
)
; program: $str_re_includes_rec.fev6
(program $str_re_includes_rec.fev6 (($eo_3 Bool) (r4 RegLan) (r3 RegLan) (r2 RegLan) (r1 RegLan))
  :signature (RegLan RegLan RegLan RegLan Bool Bool) Bool
  (
  (($str_re_includes_rec.fev6 r4 r3 r2 r1 $eo_3 true) true)
  (($str_re_includes_rec.fev6 r4 r3 r2 r1 $eo_3 false) ($str_re_includes_rec.fev7 r4 r3 r2 r1 ($str_re_includes_rec.fev8 r4 r3 r2 r1 (eo::eq r1 (re.* re.allchar)))))
  )
)
; program: $str_re_includes_rec.fev4
(program $str_re_includes_rec.fev4 ((r4 RegLan) (r3 RegLan) (r2 RegLan) (r1 RegLan) ($eo_3 Bool))
  :signature (RegLan RegLan RegLan RegLan Bool) Bool
  (
  (($str_re_includes_rec.fev4 r4 r3 r2 r1 $eo_3) ($str_re_includes_rec.fev6 r4 r3 r2 r1 $eo_3 $eo_3))
  )
)
; program: $str_re_includes_rec.fev3
(program $str_re_includes_rec.fev3 (($eo_1 Bool) (r4 RegLan) (r3 RegLan) (r1 RegLan) (r2 RegLan))
  :signature (RegLan RegLan RegLan RegLan Bool Bool) Bool
  (
  (($str_re_includes_rec.fev3 r4 r3 r2 r1 $eo_1 true) true)
  (($str_re_includes_rec.fev3 r4 r3 r2 r1 $eo_1 false) ($str_re_includes_rec.fev4 r4 r3 r2 r1 ($str_re_includes_rec.fev5 r4 r3 r2 r1 ($re_is_unbound_wildcard (_ (re.++ r1) r2)))))
  )
)
; program: $str_re_includes_rec.fev1
(program $str_re_includes_rec.fev1 ((r4 RegLan) (r3 RegLan) (r2 RegLan) (r1 RegLan) ($eo_1 Bool))
  :signature (RegLan RegLan RegLan RegLan Bool) Bool
  (
  (($str_re_includes_rec.fev1 r4 r3 r2 r1 $eo_1) ($str_re_includes_rec.fev3 r4 r3 r2 r1 $eo_1 $eo_1))
  )
)
; program: $str_re_includes_rec
(program $str_re_includes_rec ((s1 (Seq Char)) (s2 (Seq Char)) (r4 RegLan) (r2 RegLan) (r1 RegLan) (r3 RegLan))
  :signature (RegLan RegLan) Bool
  (
  (($str_re_includes_rec r1 r1) true)
  (($str_re_includes_rec (_ (re.++ (str.to_re (_ (str.++ s1) s2))) r2) r3) ($str_re_includes_rec (_ (re.++ (str.to_re s1)) (_ (re.++ (str.to_re s2)) r2)) r3))
  (($str_re_includes_rec (_ (re.++ (str.to_re "")) r2) r3) ($str_re_includes_rec r2 r3))
  (($str_re_includes_rec r1 (_ (re.++ (str.to_re (_ (str.++ s1) s2))) r4)) ($str_re_includes_rec r1 (_ (re.++ (str.to_re s1)) (_ (re.++ (str.to_re s2)) r4))))
  (($str_re_includes_rec r1 (_ (re.++ (str.to_re "")) r4)) ($str_re_includes_rec r1 r4))
  (($str_re_includes_rec (_ (re.++ r1) r2) (_ (re.++ r3) r4)) ($str_re_includes_rec.fev1 r4 r3 r2 r1 ($str_re_includes_rec.fev2 r4 r3 r2 r1 ($str_re_includes ($re_nary_elim ($re_str_from_flat_form false r1)) ($re_nary_elim ($re_str_from_flat_form false r3))))))
  (($str_re_includes_rec (_ (re.++ r1) r2) (str.to_re "")) (eo::and (eo::eq r1 (re.* re.allchar)) (eo::eq r2 (str.to_re ""))))
  (($str_re_includes_rec r1 r3) false)
  )
)
; program: $str_re_includes.fev6
(program $str_re_includes.fev6 ((r3 RegLan) (r1 RegLan))
  :signature (RegLan RegLan Bool) Bool
  (
  (($str_re_includes.fev6 r3 r1 true) ($str_re_includes_rec ($re_str_to_flat_form false ($re_nary_intro r1)) ($re_str_to_flat_form false ($re_nary_intro r3))))
  (($str_re_includes.fev6 r3 r1 false) false)
  )
)
; program: $str_re_includes.fev5
(program $str_re_includes.fev5 ((r1 RegLan) (r3 RegLan))
  :signature (RegLan RegLan Bool) Bool
  (
  (($str_re_includes.fev5 r3 r1 true) true)
  (($str_re_includes.fev5 r3 r1 false) ($str_re_includes.fev6 r3 r1 ($str_re_includes_is_rec r1 r3)))
  )
)
; program: $str_re_includes.fev4
(program $str_re_includes.fev4 ((r1 RegLan) (r3 RegLan))
  :signature (RegLan RegLan Bool) Bool
  (
  (($str_re_includes.fev4 r3 r1 true) true)
  (($str_re_includes.fev4 r3 r1 false) ($str_re_includes.fev5 r3 r1 (eo::eq ($str_re_includes_lhs_star r1 r3) true)))
  )
)
; program: $str_re_includes.fev3
(program $str_re_includes.fev3 ((r1 RegLan) (r3 RegLan))
  :signature (RegLan RegLan Bool) Bool
  (
  (($str_re_includes.fev3 r3 r1 true) true)
  (($str_re_includes.fev3 r3 r1 false) ($str_re_includes.fev4 r3 r1 (eo::eq ($str_re_includes_rhs_inter r1 r3) true)))
  )
)
; program: $str_re_includes.fev12
(program $str_re_includes.fev12 ((s3 (Seq Char)) (s4 (Seq Char)) (s1 (Seq Char)))
  :signature ((Seq Char) (Seq Char) (Seq Char) Bool) Bool
  (
  (($str_re_includes.fev12 s1 s3 s4 true) true)
  (($str_re_includes.fev12 s1 s3 s4 false) (eo::gt (eo::to_z s4) (eo::to_z s1)))
  )
)
; program: $str_re_includes.fev11
(program $str_re_includes.fev11 ((s4 (Seq Char)) (s3 (Seq Char)) (s1 (Seq Char)))
  :signature ((Seq Char) (Seq Char) (Seq Char) Bool) Bool
  (
  (($str_re_includes.fev11 s1 s3 s4 true) true)
  (($str_re_includes.fev11 s1 s3 s4 false) (eo::gt (eo::to_z s3) (eo::to_z s1)))
  )
)
; program: $str_re_includes.fev10
(program $str_re_includes.fev10 ((s1 (Seq Char)) (s3 (Seq Char)) (s4 (Seq Char)) ($eo_15 Bool) ($eo_14 Bool))
  :signature ((Seq Char) (Seq Char) (Seq Char) Bool Bool) Bool
  (
  (($str_re_includes.fev10 s1 s3 s4 $eo_14 $eo_15) (eo::and $eo_15 $eo_14))
  )
)
; program: $str_re_includes.fev9
(program $str_re_includes.fev9 (($eo_13 Bool) (s3 (Seq Char)) (s4 (Seq Char)) (s1 (Seq Char)))
  :signature ((Seq Char) (Seq Char) (Seq Char) Bool Bool) Bool
  (
  (($str_re_includes.fev9 s1 s3 s4 $eo_13 $eo_13) (eo::define ((_v0 (eo::to_z s1))) ($str_re_includes.fev10 s1 s3 s4 ($str_re_includes.fev11 s1 s3 s4 (eo::eq (eo::to_z s3) _v0)) ($str_re_includes.fev12 s1 s3 s4 (eo::eq (eo::to_z s4) _v0)))))
  )
)
; program: $str_re_includes.fev8
(program $str_re_includes.fev8 (($eo_11 Bool) (s1 (Seq Char)) (s3 (Seq Char)) (s4 (Seq Char)))
  :signature ((Seq Char) (Seq Char) (Seq Char) Bool Bool) Bool
  (
  (($str_re_includes.fev8 s1 s3 s4 $eo_11 $eo_11) ($str_re_includes.fev9 s1 s3 s4 (eo::is_neg (eo::to_z s4)) false))
  )
)
; program: $str_re_includes.fev7
(program $str_re_includes.fev7 ((s2 (Seq Char)) ($eo_9 Bool) (s1 (Seq Char)) (s4 (Seq Char)) (s3 (Seq Char)))
  :signature ((Seq Char) (Seq Char) (Seq Char) (Seq Char) Bool Bool) Bool
  (
  (($str_re_includes.fev7 s1 s3 s4 s2 $eo_9 $eo_9) ($str_re_includes.fev8 s1 s3 s4 (eo::is_neg (eo::to_z s3)) false))
  )
)
; program: $str_re_includes.fev2
(program $str_re_includes.fev2 (($eo_3 Bool) (s1 (Seq Char)) (s3 (Seq Char)) (s4 (Seq Char)) (s2 (Seq Char)))
  :signature ((Seq Char) (Seq Char) (Seq Char) (Seq Char) Bool Bool) Bool
  (
  (($str_re_includes.fev2 s1 s3 s4 s2 $eo_3 $eo_3) ($str_re_includes.fev7 s1 s3 s4 s2 (eo::is_neg (eo::to_z s2)) false))
  )
)
; program: $str_re_includes.fev13
(program $str_re_includes.fev13 ((s1 (Seq Char)) (r1 RegLan))
  :signature (RegLan (Seq Char) Bool) Bool
  (
  (($str_re_includes.fev13 r1 s1 true) ($nfa_match "" s1 ($build_nfa r1 (_ (@nfa.list @nfa.accept) @nfa.decline)) @nfa.decline))
  (($str_re_includes.fev13 r1 s1 false) ($str_eval_str_in_re_rec s1 0 r1 @re.null))
  )
)
; program: $str_re_includes.fev1
(program $str_re_includes.fev1 ((s1 (Seq Char)) (r1 RegLan))
  :signature (RegLan (Seq Char) Bool) Bool
  (
  (($str_re_includes.fev1 r1 s1 true) ($str_re_includes.fev13 r1 s1 (eo::is_ok ($build_nfa r1 (_ (@nfa.list @nfa.accept) @nfa.decline)))))
  (($str_re_includes.fev1 r1 s1 false) (_ (str.in_re s1) r1))
  )
)
; program: $str_re_includes
(program $str_re_includes ((s3 (Seq Char)) (s4 (Seq Char)) (s2 (Seq Char)) (s1 (Seq Char)) (r1 RegLan) (r3 RegLan))
  :signature (RegLan RegLan) Bool
  (
  (($str_re_includes r1 r1) true)
  (($str_re_includes r1 (str.to_re s1)) ($str_re_includes.fev1 r1 s1 (eo::is_str s1)))
  (($str_re_includes (str.to_re s1) r1) false)
  (($str_re_includes (_ (re.range s1) s2) (_ (re.range s3) s4)) ($str_re_includes.fev2 s1 s3 s4 s2 (eo::is_neg (eo::to_z s1)) false))
  (($str_re_includes r1 r3) ($str_re_includes.fev3 r3 r1 (eo::eq ($str_re_includes_lhs_union r1 r3) true)))
  )
)
; fwd-decl: $str_arith_entail_simple
(program $str_arith_entail_simple ((T Type))
  :signature (T) Bool
)
; program: $str_arith_entail_simple.fev2
(program $str_arith_entail_simple.fev2 ((T Type) (n2 T) (n1 T))
  :signature (T T Bool) Bool
  (
  (($str_arith_entail_simple.fev2 n2 n1 true) ($str_arith_entail_simple n2))
  (($str_arith_entail_simple.fev2 n2 n1 false) false)
  )
)
; program: $str_arith_entail_simple.fev1
(program $str_arith_entail_simple.fev1 ((T Type) (n2 T) (n1 T))
  :signature (T T Bool) Bool
  (
  (($str_arith_entail_simple.fev1 n2 n1 true) ($str_arith_entail_simple n2))
  (($str_arith_entail_simple.fev1 n2 n1 false) false)
  )
)
; program: $str_arith_entail_simple
(program $str_arith_entail_simple ((T Type) (s (Seq Char)) (n2 T) (n1 T))
  :signature (T) Bool
  (
  (($str_arith_entail_simple (str.len s)) true)
  (($str_arith_entail_simple (_ (+ n1) n2)) ($str_arith_entail_simple.fev1 n2 n1 ($str_arith_entail_simple n1)))
  (($str_arith_entail_simple (_ (* n1) n2)) ($str_arith_entail_simple.fev2 n2 n1 ($str_arith_entail_simple n1)))
  (($str_arith_entail_simple n1) (eo::not (eo::is_neg n1)))
  )
)
; program: $str_arith_entail_simple_pred
(program $str_arith_entail_simple_pred ((n Int) (m Int))
  :signature (Bool) Bool
  (
  (($str_arith_entail_simple_pred (_ (>= n) m)) ($str_arith_entail_simple ($arith_poly_to_term_rec ($get_arith_poly_norm (_ (- n) m)))))
  (($str_arith_entail_simple_pred (_ (> n) m)) ($str_arith_entail_simple ($arith_poly_to_term_rec ($get_arith_poly_norm (_ (- n) (_ (+ m) (_ (+ 1) 0)))))))
  )
)
; program: $str_arith_entail_is_approx_len.fev5
(program $str_arith_entail_is_approx_len.fev5 ((n1 Int) (isUnder Bool) (n Int))
  :signature (Int Bool Int Bool) Bool
  (
  (($str_arith_entail_is_approx_len.fev5 n1 isUnder n true) (eo::and isUnder ($str_arith_entail_simple n1)))
  (($str_arith_entail_is_approx_len.fev5 n1 isUnder n false) false)
  )
)
; program: $str_arith_entail_is_approx_len.fev4
(program $str_arith_entail_is_approx_len.fev4 ((n1 Int) (isUnder Bool) (n Int))
  :signature (Int Bool Int Bool) Bool
  (
  (($str_arith_entail_is_approx_len.fev4 n1 isUnder n true) (eo::and (eo::not isUnder) ($str_arith_entail_simple_pred (_ (> n1) 0))))
  (($str_arith_entail_is_approx_len.fev4 n1 isUnder n false) ($str_arith_entail_is_approx_len.fev5 n1 isUnder n (eo::eq n 1)))
  )
)
; program: $str_arith_entail_is_approx_len.fev3
(program $str_arith_entail_is_approx_len.fev3 ((isUnder Bool) (n Int) (n1 Int))
  :signature (Int Bool Int Bool) Bool
  (
  (($str_arith_entail_is_approx_len.fev3 n1 isUnder n true) (eo::and (eo::not isUnder) ($str_arith_entail_simple n1)))
  (($str_arith_entail_is_approx_len.fev3 n1 isUnder n false) ($str_arith_entail_is_approx_len.fev4 n1 isUnder n (eo::eq n n1)))
  )
)
; program: $str_arith_entail_is_approx_len.fev8
(program $str_arith_entail_is_approx_len.fev8 ((isUnder Bool) (t (Seq Char)) (s (Seq Char)) (n Int))
  :signature (Bool (Seq Char) (Seq Char) Int Bool) Bool
  (
  (($str_arith_entail_is_approx_len.fev8 isUnder t s n true) isUnder)
  (($str_arith_entail_is_approx_len.fev8 isUnder t s n false) false)
  )
)
; program: $str_arith_entail_is_approx_len.fev7
(program $str_arith_entail_is_approx_len.fev7 ((r (Seq Char)) (isUnder Bool) (n Int) (s (Seq Char)) (t (Seq Char)))
  :signature (Bool (Seq Char) (Seq Char) Int (Seq Char) Bool) Bool
  (
  (($str_arith_entail_is_approx_len.fev7 isUnder t s n r true) (eo::not isUnder))
  (($str_arith_entail_is_approx_len.fev7 isUnder t s n r false) ($str_arith_entail_is_approx_len.fev8 isUnder t s n (eo::eq n (_ (- (str.len s)) (str.len t)))))
  )
)
; program: $str_arith_entail_is_approx_len.fev6
(program $str_arith_entail_is_approx_len.fev6 ((s (Seq Char)) (isUnder Bool) (t (Seq Char)) (r (Seq Char)))
  :signature ((Seq Char) (Seq Char) (Seq Char) Bool Bool) Bool
  (
  (($str_arith_entail_is_approx_len.fev6 r t s isUnder true) (eo::define ((_v0 (>= (str.len r)))) (eo::or ($str_arith_entail_simple_pred (_ _v0 (str.len t))) ($str_arith_entail_simple_pred (_ _v0 (str.len s))))))
  (($str_arith_entail_is_approx_len.fev6 r t s isUnder false) ($str_arith_entail_simple_pred (_ (>= (str.len t)) (str.len r))))
  )
)
; program: $str_arith_entail_is_approx_len.fev2
(program $str_arith_entail_is_approx_len.fev2 ((isUnder Bool) (t (Seq Char)) (n Int) (s (Seq Char)) (r (Seq Char)))
  :signature (Bool (Seq Char) (Seq Char) Int (Seq Char) Bool) Bool
  (
  (($str_arith_entail_is_approx_len.fev2 isUnder t s n r true) ($str_arith_entail_is_approx_len.fev6 r t s isUnder isUnder))
  (($str_arith_entail_is_approx_len.fev2 isUnder t s n r false) ($str_arith_entail_is_approx_len.fev7 isUnder t s n r (eo::eq n (_ (+ (str.len s)) (_ (+ (str.len r)) 0)))))
  )
)
; program: $str_arith_entail_is_approx_len.fev12
(program $str_arith_entail_is_approx_len.fev12 ((n2 Int) (isUnder Bool) (s (Seq Char)) (n1 Int))
  :signature (Int (Seq Char) Int Bool Bool) Bool
  (
  (($str_arith_entail_is_approx_len.fev12 n1 s n2 isUnder true) (eo::and ($str_arith_entail_simple n1) ($str_arith_entail_simple_pred (_ (>= (_ (+ n1) (_ (+ n2) 0))) (str.len s)))))
  (($str_arith_entail_is_approx_len.fev12 n1 s n2 isUnder false) ($str_arith_entail_simple_pred (_ (>= (str.len s)) n1)))
  )
)
; program: $str_arith_entail_is_approx_len.fev11
(program $str_arith_entail_is_approx_len.fev11 ((n1 Int) (s (Seq Char)) (n2 Int) (isUnder Bool) (n Int))
  :signature (Int (Seq Char) Int Bool Int Bool) Bool
  (
  (($str_arith_entail_is_approx_len.fev11 n1 s n2 isUnder n true) ($str_arith_entail_is_approx_len.fev12 n1 s n2 isUnder isUnder))
  (($str_arith_entail_is_approx_len.fev11 n1 s n2 isUnder n false) false)
  )
)
; program: $str_arith_entail_is_approx_len.fev10
(program $str_arith_entail_is_approx_len.fev10 ((n2 Int) (isUnder Bool) (n Int) (s (Seq Char)) (n1 Int))
  :signature (Int (Seq Char) Int Bool Int Bool) Bool
  (
  (($str_arith_entail_is_approx_len.fev10 n1 s n2 isUnder n true) (eo::not isUnder))
  (($str_arith_entail_is_approx_len.fev10 n1 s n2 isUnder n false) ($str_arith_entail_is_approx_len.fev11 n1 s n2 isUnder n (eo::eq n (_ (- (str.len s)) n1))))
  )
)
; program: $str_arith_entail_is_approx_len.fev9
(program $str_arith_entail_is_approx_len.fev9 ((n1 Int) (s (Seq Char)) (isUnder Bool) (n2 Int))
  :signature (Int Int (Seq Char) Bool Bool) Bool
  (
  (($str_arith_entail_is_approx_len.fev9 n2 n1 s isUnder true) (eo::and ($str_arith_entail_simple n1) ($str_arith_entail_simple_pred (_ (>= (str.len s)) (_ (+ n1) (_ (+ n2) 0))))))
  (($str_arith_entail_is_approx_len.fev9 n2 n1 s isUnder false) ($str_arith_entail_simple n2))
  )
)
; program: $str_arith_entail_is_approx_len.fev1
(program $str_arith_entail_is_approx_len.fev1 ((n1 Int) (n2 Int) (isUnder Bool) (n Int) (s (Seq Char)))
  :signature (Int (Seq Char) Int Bool Int Bool) Bool
  (
  (($str_arith_entail_is_approx_len.fev1 n1 s n2 isUnder n true) ($str_arith_entail_is_approx_len.fev9 n2 n1 s isUnder isUnder))
  (($str_arith_entail_is_approx_len.fev1 n1 s n2 isUnder n false) ($str_arith_entail_is_approx_len.fev10 n1 s n2 isUnder n (eo::eq n (str.len s))))
  )
)
; program: $str_arith_entail_is_approx_len
(program $str_arith_entail_is_approx_len ((n2 Int) (t (Seq Char)) (r (Seq Char)) (s (Seq Char)) (isUnder Bool) (n Int) (n1 Int))
  :signature ((Seq Char) Int Bool) Bool
  (
  (($str_arith_entail_is_approx_len (_ (_ (str.substr s) n1) n2) n isUnder) ($str_arith_entail_is_approx_len.fev1 n1 s n2 isUnder n (eo::eq n n2)))
  (($str_arith_entail_is_approx_len (_ (_ (str.replace s) t) r) n isUnder) ($str_arith_entail_is_approx_len.fev2 isUnder t s n r (eo::eq n (str.len s))))
  (($str_arith_entail_is_approx_len (str.from_int n1) n isUnder) ($str_arith_entail_is_approx_len.fev3 n1 isUnder n (eo::eq n (_ (+ n1) (_ (+ 1) 0)))))
  )
)
; fwd-decl: $str_arith_entail_is_approx
(program $str_arith_entail_is_approx ()
  :signature (Int Int Bool) Bool
)
; program: $str_arith_entail_is_approx.fev3
(program $str_arith_entail_is_approx.fev3 ((n1 Int) (n3 Int) (n5 Int) (isUnder Bool))
  :signature (Bool Int Int Int Bool) Bool
  (
  (($str_arith_entail_is_approx.fev3 isUnder n5 n3 n1 true) ($str_arith_entail_is_approx n3 n5 (eo::not isUnder)))
  (($str_arith_entail_is_approx.fev3 isUnder n5 n3 n1 false) ($str_arith_entail_is_approx n3 n5 isUnder))
  )
)
; program: $str_arith_entail_is_approx.fev2
(program $str_arith_entail_is_approx.fev2 ((isUnder Bool) (n1 Int))
  :signature (Bool Int Bool) Bool
  (
  (($str_arith_entail_is_approx.fev2 isUnder n1 true) isUnder)
  (($str_arith_entail_is_approx.fev2 isUnder n1 false) false)
  )
)
; program: $str_arith_entail_is_approx.fev5
(program $str_arith_entail_is_approx.fev5 ((t (Seq Char)) (s (Seq Char)) (isUnder Bool) (n1 Int))
  :signature ((Seq Char) (Seq Char) Bool Int Bool) Bool
  (
  (($str_arith_entail_is_approx.fev5 t s isUnder n1 true) (eo::and (eo::not isUnder) ($str_arith_entail_simple_pred (_ (>= (str.len s)) (str.len t)))))
  (($str_arith_entail_is_approx.fev5 t s isUnder n1 false) false)
  )
)
; program: $str_arith_entail_is_approx.fev4
(program $str_arith_entail_is_approx.fev4 ((isUnder Bool) (n1 Int) (s (Seq Char)) (t (Seq Char)))
  :signature ((Seq Char) (Seq Char) Bool Int Bool) Bool
  (
  (($str_arith_entail_is_approx.fev4 t s isUnder n1 true) (eo::not isUnder))
  (($str_arith_entail_is_approx.fev4 t s isUnder n1 false) ($str_arith_entail_is_approx.fev5 t s isUnder n1 (eo::eq n1 (_ (- (str.len s)) (str.len t)))))
  )
)
; program: $str_arith_entail_is_approx.fev1
(program $str_arith_entail_is_approx.fev1 ((t (Seq Char)) (isUnder Bool) (n1 Int) (s (Seq Char)))
  :signature ((Seq Char) (Seq Char) Bool Int Bool) Bool
  (
  (($str_arith_entail_is_approx.fev1 t s isUnder n1 true) isUnder)
  (($str_arith_entail_is_approx.fev1 t s isUnder n1 false) ($str_arith_entail_is_approx.fev4 t s isUnder n1 (eo::eq n1 (str.len s))))
  )
)
; program: $str_arith_entail_is_approx
(program $str_arith_entail_is_approx ((t (Seq Char)) (s (Seq Char)) (n2 Int) (n4 Int) (isUnder Bool) (n5 Int) (n3 Int) (n1 Int))
  :signature (Int Int Bool) Bool
  (
  (($str_arith_entail_is_approx n1 n1 isUnder) true)
  (($str_arith_entail_is_approx (str.len s) n1 isUnder) ($str_arith_entail_is_approx_len s n1 isUnder))
  (($str_arith_entail_is_approx (_ (_ (str.indexof s) t) n3) n1 isUnder) ($str_arith_entail_is_approx.fev1 t s isUnder n1 (eo::eq n1 -1)))
  (($str_arith_entail_is_approx (str.to_int s) n1 isUnder) ($str_arith_entail_is_approx.fev2 isUnder n1 (eo::eq n1 -1)))
  (($str_arith_entail_is_approx (_ (+ n1) n2) (_ (+ n3) n4) isUnder) (eo::and ($str_arith_entail_is_approx n1 n3 isUnder) ($str_arith_entail_is_approx n2 n4 isUnder)))
  ((eo::define ((_v0 (* n1))) ($str_arith_entail_is_approx (_ _v0 (_ (* n3) 1)) (_ _v0 (_ (* n5) 1)) isUnder)) ($str_arith_entail_is_approx.fev3 isUnder n5 n3 n1 (eo::is_neg n1)))
  )
)
; fwd-decl: $str_re_consume_rec
(program $str_re_consume_rec ()
  :signature ((Seq Char) RegLan Bool Bool) Bool
)
; program: $str_re_consume_rec.fev10
(program $str_re_consume_rec.fev10 ((rev Bool) (b Bool) (s1 (Seq Char)) (r2 RegLan) (r1 RegLan))
  :signature (Bool Bool RegLan (Seq Char) RegLan Bool) RegLan
  (
  (($str_re_consume_rec.fev10 rev b r1 s1 r2 true) (eo::list_rev re.++ ($re_nary_intro r1)))
  (($str_re_consume_rec.fev10 rev b r1 s1 r2 false) ($re_nary_intro r1))
  )
)
; program: $str_re_consume_rec.fev13
(program $str_re_consume_rec.fev13 ((rev Bool) (b Bool) (s1 (Seq Char)) (r2 RegLan) (r1 RegLan))
  :signature (Bool Bool RegLan (Seq Char) RegLan Bool) RegLan
  (
  (($str_re_consume_rec.fev13 rev b r1 s1 r2 true) (eo::list_rev re.++ ($re_nary_intro r1)))
  (($str_re_consume_rec.fev13 rev b r1 s1 r2 false) ($re_nary_intro r1))
  )
)
; program: $str_re_consume_rec.fev12
(program $str_re_consume_rec.fev12 ((r1 RegLan) (r2 RegLan) (s1 (Seq Char)) ($eo_9 RegLan) (b Bool) (rev Bool))
  :signature (Bool Bool RegLan (Seq Char) RegLan RegLan) Bool
  (
  (($str_re_consume_rec.fev12 rev b r1 s1 r2 $eo_9) ($str_re_consume_rec s1 r2 ($result_combine ($str_re_consume_rec s1 ($re_str_to_flat_form rev $eo_9) @result.null rev) b) rev))
  )
)
; program: $str_re_consume_rec.fev11
(program $str_re_consume_rec.fev11 (($eo_7 RegLan) (b Bool) (r1 RegLan) (s1 (Seq Char)) (r2 RegLan) (rev Bool))
  :signature (Bool Bool RegLan (Seq Char) RegLan RegLan Bool) Bool
  (
  (($str_re_consume_rec.fev11 rev b r1 s1 r2 $eo_7 true) ($str_re_consume_rec s1 r2 b rev))
  (($str_re_consume_rec.fev11 rev b r1 s1 r2 $eo_7 false) ($str_re_consume_rec.fev12 rev b r1 s1 r2 ($str_re_consume_rec.fev13 rev b r1 s1 r2 rev)))
  )
)
; program: $str_re_consume_rec.fev9
(program $str_re_consume_rec.fev9 ((b Bool) (r1 RegLan) (r2 RegLan) (s1 (Seq Char)) ($eo_7 RegLan) (rev Bool))
  :signature (Bool Bool RegLan (Seq Char) RegLan RegLan) Bool
  (
  (($str_re_consume_rec.fev9 rev b r1 s1 r2 $eo_7) ($str_re_consume_rec.fev11 rev b r1 s1 r2 $eo_7 (eo::eq ($str_re_consume_rec s1 ($re_str_to_flat_form rev $eo_7) @result.null rev) false)))
  )
)
; program: $str_re_consume_rec.fev8
(program $str_re_consume_rec.fev8 ((rev Bool) (b Bool) (s1 (Seq Char)) (r2 RegLan) (r1 RegLan))
  :signature (Bool Bool RegLan (Seq Char) RegLan Bool) RegLan
  (
  (($str_re_consume_rec.fev8 rev b r1 s1 r2 true) (eo::list_rev re.++ ($re_nary_intro r1)))
  (($str_re_consume_rec.fev8 rev b r1 s1 r2 false) ($re_nary_intro r1))
  )
)
; program: $str_re_consume_rec.fev16
(program $str_re_consume_rec.fev16 ((rev Bool) (b Bool) (s1 (Seq Char)) (r2 RegLan) (r1 RegLan))
  :signature (Bool Bool RegLan (Seq Char) RegLan Bool) RegLan
  (
  (($str_re_consume_rec.fev16 rev b r1 s1 r2 true) (eo::list_rev re.++ ($re_nary_intro r1)))
  (($str_re_consume_rec.fev16 rev b r1 s1 r2 false) ($re_nary_intro r1))
  )
)
; program: $str_re_consume_rec.fev15
(program $str_re_consume_rec.fev15 ((r1 RegLan) (r2 RegLan) (s1 (Seq Char)) ($eo_11 RegLan) (b Bool) (rev Bool))
  :signature (Bool Bool RegLan (Seq Char) RegLan RegLan) Bool
  (
  (($str_re_consume_rec.fev15 rev b r1 s1 r2 $eo_11) ($str_re_consume_rec s1 r2 ($result_combine ($str_re_consume_rec s1 ($re_str_to_flat_form rev $eo_11) @result.null rev) b) rev))
  )
)
; program: $str_re_consume_rec.fev14
(program $str_re_consume_rec.fev14 (($eo_6 RegLan) (b Bool) (r1 RegLan) (s1 (Seq Char)) (r2 RegLan) (rev Bool))
  :signature (Bool Bool RegLan (Seq Char) RegLan RegLan Bool) Bool
  (
  (($str_re_consume_rec.fev14 rev b r1 s1 r2 $eo_6 true) false)
  (($str_re_consume_rec.fev14 rev b r1 s1 r2 $eo_6 false) ($str_re_consume_rec.fev15 rev b r1 s1 r2 ($str_re_consume_rec.fev16 rev b r1 s1 r2 rev)))
  )
)
; program: $str_re_consume_rec.fev7
(program $str_re_consume_rec.fev7 ((b Bool) (r1 RegLan) (r2 RegLan) (s1 (Seq Char)) ($eo_6 RegLan) (rev Bool))
  :signature (Bool Bool RegLan (Seq Char) RegLan RegLan) Bool
  (
  (($str_re_consume_rec.fev7 rev b r1 s1 r2 $eo_6) ($str_re_consume_rec.fev14 rev b r1 s1 r2 $eo_6 (eo::eq ($str_re_consume_rec s1 ($re_str_to_flat_form rev $eo_6) @result.null rev) false)))
  )
)
; program: $str_re_consume_rec.fev17
(program $str_re_consume_rec.fev17 ((rev Bool) (s1 (Seq Char)) (s2 (Seq Char)) (r1 RegLan) (r2 RegLan))
  :signature (RegLan RegLan (Seq Char) (Seq Char) Bool Bool) Bool
  (
  (($str_re_consume_rec.fev17 r2 r1 s2 s1 rev true) ($str_re_consume_rec ($str_membership_str ($str_re_consume_rec (_ (str.++ s1) s2) r1 @result.null rev)) r2 @result.null rev))
  (($str_re_consume_rec.fev17 r2 r1 s2 s1 rev false) (_ (str.in_re (_ (str.++ s1) s2)) (_ (re.++ r1) r2)))
  )
)
; program: $str_re_consume_rec.fev6
(program $str_re_consume_rec.fev6 ((r2 RegLan) (s1 (Seq Char)) (s2 (Seq Char)) (r1 RegLan) (rev Bool))
  :signature (RegLan RegLan (Seq Char) (Seq Char) Bool Bool) Bool
  (
  (($str_re_consume_rec.fev6 r2 r1 s2 s1 rev true) false)
  (($str_re_consume_rec.fev6 r2 r1 s2 s1 rev false) ($str_re_consume_rec.fev17 r2 r1 s2 s1 rev (eo::is_eq ($str_membership_re ($str_re_consume_rec (_ (str.++ s1) s2) r1 @result.null rev)) (str.to_re ""))))
  )
)
; program: $str_re_consume_rec.fev5
(program $str_re_consume_rec.fev5 ((r2 RegLan) (s2 (Seq Char)) (s1 (Seq Char)) (rev Bool) (r3 RegLan))
  :signature (RegLan RegLan (Seq Char) (Seq Char) Bool Bool) RegLan
  (
  (($str_re_consume_rec.fev5 r2 r3 s2 s1 rev true) (eo::list_rev re.++ ($re_nary_intro r3)))
  (($str_re_consume_rec.fev5 r2 r3 s2 s1 rev false) ($re_nary_intro r3))
  )
)
; program: $str_re_consume_rec.fev20
(program $str_re_consume_rec.fev20 ((r2 RegLan) (s2 (Seq Char)) (s1 (Seq Char)) (rev Bool) (r3 RegLan))
  :signature (RegLan RegLan (Seq Char) (Seq Char) Bool Bool) RegLan
  (
  (($str_re_consume_rec.fev20 r2 r3 s2 s1 rev true) (eo::list_rev re.++ ($re_nary_intro r3)))
  (($str_re_consume_rec.fev20 r2 r3 s2 s1 rev false) ($re_nary_intro r3))
  )
)
; program: $str_re_consume_rec.fev24
(program $str_re_consume_rec.fev24 ((rev Bool) (r2 RegLan) (s2 (Seq Char)) (s1 (Seq Char)) (r3 RegLan))
  :signature (Bool RegLan RegLan (Seq Char) (Seq Char) Bool) RegLan
  (
  (($str_re_consume_rec.fev24 rev r2 r3 s2 s1 true) (eo::list_rev re.++ ($re_nary_intro r3)))
  (($str_re_consume_rec.fev24 rev r2 r3 s2 s1 false) ($re_nary_intro r3))
  )
)
; program: $str_re_consume_rec.fev27
(program $str_re_consume_rec.fev27 ((rev Bool) (r2 RegLan) (s2 (Seq Char)) (s1 (Seq Char)) (r3 RegLan))
  :signature (Bool RegLan RegLan (Seq Char) (Seq Char) Bool) RegLan
  (
  (($str_re_consume_rec.fev27 rev r2 r3 s2 s1 true) (eo::list_rev re.++ ($re_nary_intro r3)))
  (($str_re_consume_rec.fev27 rev r2 r3 s2 s1 false) ($re_nary_intro r3))
  )
)
; program: $str_re_consume_rec.fev26
(program $str_re_consume_rec.fev26 ((s1 (Seq Char)) (s2 (Seq Char)) ($eo_19 RegLan) (r3 RegLan) (r2 RegLan) (rev Bool))
  :signature (Bool RegLan RegLan (Seq Char) (Seq Char) RegLan) Bool
  (
  (($str_re_consume_rec.fev26 rev r2 r3 s2 s1 $eo_19) ($str_re_consume_rec ($str_membership_str ($str_re_consume_rec (_ (str.++ s1) s2) ($re_str_to_flat_form rev $eo_19) @result.null rev)) (_ (re.++ (re.* r3)) r2) @result.null rev))
  )
)
; program: $str_re_consume_rec.fev25
(program $str_re_consume_rec.fev25 (($eo_17 RegLan) (r2 RegLan) (r3 RegLan) (s2 (Seq Char)) (s1 (Seq Char)) (rev Bool))
  :signature (Bool RegLan RegLan (Seq Char) (Seq Char) RegLan Bool) Bool
  (
  (($str_re_consume_rec.fev25 rev r2 r3 s2 s1 $eo_17 true) (_ (str.in_re (_ (str.++ s1) s2)) (_ (re.++ (re.* r3)) r2)))
  (($str_re_consume_rec.fev25 rev r2 r3 s2 s1 $eo_17 false) ($str_re_consume_rec.fev26 rev r2 r3 s2 s1 ($str_re_consume_rec.fev27 rev r2 r3 s2 s1 rev)))
  )
)
; program: $str_re_consume_rec.fev23
(program $str_re_consume_rec.fev23 ((r2 RegLan) (r3 RegLan) (s1 (Seq Char)) (s2 (Seq Char)) ($eo_17 RegLan) (rev Bool))
  :signature (Bool RegLan RegLan (Seq Char) (Seq Char) RegLan) Bool
  (
  (($str_re_consume_rec.fev23 rev r2 r3 s2 s1 $eo_17) (eo::define ((_v0 (_ (str.++ s1) s2))) ($str_re_consume_rec.fev25 rev r2 r3 s2 s1 $eo_17 (eo::eq _v0 ($str_membership_str ($str_re_consume_rec _v0 ($re_str_to_flat_form rev $eo_17) @result.null rev))))))
  )
)
; program: $str_re_consume_rec.fev22
(program $str_re_consume_rec.fev22 ((rev Bool) (s1 (Seq Char)) (s2 (Seq Char)) (r3 RegLan) (r2 RegLan))
  :signature (RegLan RegLan (Seq Char) (Seq Char) Bool Bool) Bool
  (
  (($str_re_consume_rec.fev22 r2 r3 s2 s1 rev true) ($str_re_consume_rec.fev23 rev r2 r3 s2 s1 ($str_re_consume_rec.fev24 rev r2 r3 s2 s1 rev)))
  (($str_re_consume_rec.fev22 r2 r3 s2 s1 rev false) (_ (str.in_re (_ (str.++ s1) s2)) (_ (re.++ (re.* r3)) r2)))
  )
)
; program: $str_re_consume_rec.fev21
(program $str_re_consume_rec.fev21 ((rev Bool) ($eo_14 RegLan) (s1 (Seq Char)) (s2 (Seq Char)) (r3 RegLan) (r2 RegLan))
  :signature (RegLan RegLan (Seq Char) (Seq Char) Bool RegLan Bool) Bool
  (
  (($str_re_consume_rec.fev21 r2 r3 s2 s1 rev $eo_14 true) ($str_re_consume_rec.fev22 r2 r3 s2 s1 rev (eo::is_eq ($str_re_consume_rec (_ (str.++ s1) s2) r2 @result.null rev) false)))
  (($str_re_consume_rec.fev21 r2 r3 s2 s1 rev $eo_14 false) (_ (str.in_re (_ (str.++ s1) s2)) (_ (re.++ (re.* r3)) r2)))
  )
)
; program: $str_re_consume_rec.fev19
(program $str_re_consume_rec.fev19 ((r2 RegLan) (r3 RegLan) (s1 (Seq Char)) (s2 (Seq Char)) ($eo_14 RegLan) (rev Bool))
  :signature (RegLan RegLan (Seq Char) (Seq Char) Bool RegLan) Bool
  (
  (($str_re_consume_rec.fev19 r2 r3 s2 s1 rev $eo_14) ($str_re_consume_rec.fev21 r2 r3 s2 s1 rev $eo_14 (eo::eq ($str_membership_re ($str_re_consume_rec (_ (str.++ s1) s2) ($re_str_to_flat_form rev $eo_14) @result.null rev)) (str.to_re ""))))
  )
)
; program: $str_re_consume_rec.fev18
(program $str_re_consume_rec.fev18 (($eo_4 RegLan) (r2 RegLan) (r3 RegLan) (s2 (Seq Char)) (s1 (Seq Char)) (rev Bool))
  :signature (RegLan RegLan (Seq Char) (Seq Char) Bool RegLan Bool) Bool
  (
  (($str_re_consume_rec.fev18 r2 r3 s2 s1 rev $eo_4 true) ($str_re_consume_rec (_ (str.++ s1) s2) r2 @result.null rev))
  (($str_re_consume_rec.fev18 r2 r3 s2 s1 rev $eo_4 false) ($str_re_consume_rec.fev19 r2 r3 s2 s1 rev ($str_re_consume_rec.fev20 r2 r3 s2 s1 rev rev)))
  )
)
; program: $str_re_consume_rec.fev4
(program $str_re_consume_rec.fev4 ((r2 RegLan) (r3 RegLan) (s1 (Seq Char)) (s2 (Seq Char)) ($eo_4 RegLan) (rev Bool))
  :signature (RegLan RegLan (Seq Char) (Seq Char) Bool RegLan) Bool
  (
  (($str_re_consume_rec.fev4 r2 r3 s2 s1 rev $eo_4) ($str_re_consume_rec.fev18 r2 r3 s2 s1 rev $eo_4 (eo::eq ($str_re_consume_rec (_ (str.++ s1) s2) ($re_str_to_flat_form rev $eo_4) @result.null rev) false)))
  )
)
; program: $str_re_consume_rec.fev3
(program $str_re_consume_rec.fev3 ((rev Bool) (s1 (Seq Char)) (s2 (Seq Char)) (r2 RegLan))
  :signature (RegLan (Seq Char) (Seq Char) Bool Bool) Bool
  (
  (($str_re_consume_rec.fev3 r2 s2 s1 rev true) ($str_re_consume_rec s2 r2 @result.null rev))
  (($str_re_consume_rec.fev3 r2 s2 s1 rev false) (_ (str.in_re (_ (str.++ s1) s2)) (_ (re.++ re.allchar) r2)))
  )
)
; program: $str_re_consume_rec.fev30
(program $str_re_consume_rec.fev30 ((s1 (Seq Char)) (s3 (Seq Char)) (s5 (Seq Char)))
  :signature ((Seq Char) (Seq Char) (Seq Char) Bool) Bool
  (
  (($str_re_consume_rec.fev30 s5 s3 s1 true) ($nfa_match "" s1 ($build_nfa (_ (re.range s3) s5) (_ (@nfa.list @nfa.accept) @nfa.decline)) @nfa.decline))
  (($str_re_consume_rec.fev30 s5 s3 s1 false) ($str_eval_str_in_re_rec s1 0 (_ (re.range s3) s5) @re.null))
  )
)
; program: $str_re_consume_rec.fev29
(program $str_re_consume_rec.fev29 ((rev Bool) (r2 RegLan) (s2 (Seq Char)) (s1 (Seq Char)) (s3 (Seq Char)) (s5 (Seq Char)))
  :signature (Bool RegLan (Seq Char) (Seq Char) (Seq Char) (Seq Char) Bool) Bool
  (
  (($str_re_consume_rec.fev29 rev r2 s2 s5 s3 s1 true) ($str_re_consume_rec.fev30 s5 s3 s1 (eo::is_ok ($build_nfa (_ (re.range s3) s5) (_ (@nfa.list @nfa.accept) @nfa.decline)))))
  (($str_re_consume_rec.fev29 rev r2 s2 s5 s3 s1 false) (_ (str.in_re s1) (_ (re.range s3) s5)))
  )
)
; program: $str_re_consume_rec.fev31
(program $str_re_consume_rec.fev31 ((rev Bool) (r2 RegLan) (s2 (Seq Char)) ($eo_20 Bool))
  :signature (Bool RegLan (Seq Char) Bool Bool) Bool
  (
  (($str_re_consume_rec.fev31 rev r2 s2 $eo_20 true) ($str_re_consume_rec s2 r2 @result.null rev))
  (($str_re_consume_rec.fev31 rev r2 s2 $eo_20 false) false)
  )
)
; program: $str_re_consume_rec.fev28
(program $str_re_consume_rec.fev28 ((s5 (Seq Char)) (s3 (Seq Char)) (s1 (Seq Char)) (rev Bool) (r2 RegLan) (s2 (Seq Char)) ($eo_20 Bool))
  :signature (Bool RegLan (Seq Char) (Seq Char) (Seq Char) (Seq Char) Bool) Bool
  (
  (($str_re_consume_rec.fev28 rev r2 s2 s5 s3 s1 $eo_20) ($str_re_consume_rec.fev31 rev r2 s2 $eo_20 $eo_20))
  )
)
; program: $str_re_consume_rec.fev2
(program $str_re_consume_rec.fev2 ((rev Bool) (s1 (Seq Char)) (s2 (Seq Char)) (s3 (Seq Char)) (s5 (Seq Char)) (r2 RegLan))
  :signature (RegLan (Seq Char) (Seq Char) (Seq Char) (Seq Char) Bool Bool) Bool
  (
  (($str_re_consume_rec.fev2 r2 s5 s3 s2 s1 rev true) ($str_re_consume_rec.fev28 rev r2 s2 s5 s3 s1 ($str_re_consume_rec.fev29 rev r2 s2 s5 s3 s1 (eo::is_str s1))))
  (($str_re_consume_rec.fev2 r2 s5 s3 s2 s1 rev false) (_ (str.in_re (_ (str.++ s1) s2)) (_ (re.++ (_ (re.range s3) s5)) r2)))
  )
)
; program: $str_re_consume_rec.fev32
(program $str_re_consume_rec.fev32 ((s1 (Seq Char)) (s2 (Seq Char)) (s3 (Seq Char)) (s4 (Seq Char)) (r2 RegLan))
  :signature (RegLan (Seq Char) (Seq Char) (Seq Char) (Seq Char) Bool) Bool
  (
  (($str_re_consume_rec.fev32 r2 s4 s3 s2 s1 true) false)
  (($str_re_consume_rec.fev32 r2 s4 s3 s2 s1 false) (_ (str.in_re (_ (str.++ s1) s2)) (_ (re.++ (str.to_re (_ (str.++ s3) s4))) r2)))
  )
)
; program: $str_re_consume_rec.fev1
(program $str_re_consume_rec.fev1 ((rev Bool) (r2 RegLan) (s4 (Seq Char)) (s2 (Seq Char)) (s1 (Seq Char)) (s3 (Seq Char)))
  :signature (RegLan (Seq Char) (Seq Char) (Seq Char) (Seq Char) Bool Bool) Bool
  (
  (($str_re_consume_rec.fev1 r2 s4 s3 s2 s1 rev true) ($str_re_consume_rec s2 (_ (re.++ (str.to_re s4)) r2) @result.null rev))
  (($str_re_consume_rec.fev1 r2 s4 s3 s2 s1 rev false) ($str_re_consume_rec.fev32 r2 s4 s3 s2 s1 (eo::and (eo::is_eq (eo::len s1) 1) (eo::is_eq (eo::len s3) 1))))
  )
)
; program: $str_re_consume_rec
(program $str_re_consume_rec ((s4 (Seq Char)) (s3 (Seq Char)) (s5 (Seq Char)) (r3 RegLan) (s2 (Seq Char)) (r2 RegLan) (b Bool) (rev Bool) (s1 (Seq Char)) (r1 RegLan))
  :signature ((Seq Char) RegLan Bool Bool) Bool
  (
  (($str_re_consume_rec (_ (str.++ s1) s2) (_ (re.++ (str.to_re (_ (str.++ s3) s4))) r2) @result.null rev) ($str_re_consume_rec.fev1 r2 s4 s3 s2 s1 rev (eo::eq s1 s3)))
  (($str_re_consume_rec (_ (str.++ s1) s2) (_ (re.++ (str.to_re "")) r2) @result.null rev) ($str_re_consume_rec (_ (str.++ s1) s2) r2 @result.null rev))
  (($str_re_consume_rec (_ (str.++ s1) s2) (_ (re.++ (_ (re.range s3) s5)) r2) @result.null rev) ($str_re_consume_rec.fev2 r2 s5 s3 s2 s1 rev (eo::and (eo::is_eq (eo::len s1) 1) (eo::and (eo::is_eq (eo::len s3) 1) (eo::is_eq (eo::len s5) 1)))))
  (($str_re_consume_rec (_ (str.++ s1) s2) (_ (re.++ re.allchar) r2) @result.null rev) ($str_re_consume_rec.fev3 r2 s2 s1 rev (eo::is_eq (eo::len s1) 1)))
  (($str_re_consume_rec (_ (str.++ s1) s2) (_ (re.++ (re.* r3)) r2) @result.null rev) ($str_re_consume_rec.fev4 r2 r3 s2 s1 rev ($str_re_consume_rec.fev5 r2 r3 s2 s1 rev rev)))
  (($str_re_consume_rec (_ (str.++ s1) s2) (_ (re.++ r1) r2) @result.null rev) ($str_re_consume_rec.fev6 r2 r1 s2 s1 rev (eo::is_eq ($str_re_consume_rec (_ (str.++ s1) s2) r1 @result.null rev) false)))
  (($str_re_consume_rec s1 (_ (re.++ (str.to_re "")) r2) @result.null rev) ($str_re_consume_rec s1 r2 @result.null rev))
  (($str_re_consume_rec s1 (_ (re.inter r1) r2) b rev) ($str_re_consume_rec.fev7 rev b r1 s1 r2 ($str_re_consume_rec.fev8 rev b r1 s1 r2 rev)))
  (($str_re_consume_rec s1 re.all @result.null rev) (_ (str.in_re "") (str.to_re "")))
  (($str_re_consume_rec s1 re.all b rev) b)
  (($str_re_consume_rec s1 (_ (re.union r1) r2) b rev) ($str_re_consume_rec.fev9 rev b r1 s1 r2 ($str_re_consume_rec.fev10 rev b r1 s1 r2 rev)))
  (($str_re_consume_rec s1 re.none @result.null rev) false)
  (($str_re_consume_rec s1 re.none b rev) b)
  (($str_re_consume_rec s1 r1 @result.null rev) (_ (str.in_re s1) r1))
  )
)
; program: $str_re_consume.fev6
(program $str_re_consume.fev6 ((s (Seq Char)) (r RegLan))
  :signature (RegLan (Seq Char) Bool) (Seq Char)
  (
  (($str_re_consume.fev6 r s true) (eo::list_rev str.++ ($str_flatten ($str_nary_intro s))))
  (($str_re_consume.fev6 r s false) ($str_membership_str ($str_re_consume_rec (eo::list_rev str.++ ($str_flatten ($str_nary_intro s))) ($re_str_to_flat_form true (eo::list_rev re.++ ($re_nary_intro r))) @result.null true)))
  )
)
; program: $str_re_consume.fev5
(program $str_re_consume.fev5 ((s (Seq Char)) (r RegLan))
  :signature (RegLan (Seq Char) Bool) RegLan
  (
  (($str_re_consume.fev5 r s true) ($re_str_to_flat_form true (eo::list_rev re.++ ($re_nary_intro r))))
  (($str_re_consume.fev5 r s false) ($str_membership_re ($str_re_consume_rec (eo::list_rev str.++ ($str_flatten ($str_nary_intro s))) ($re_str_to_flat_form true (eo::list_rev re.++ ($re_nary_intro r))) @result.null true)))
  )
)
; program: $str_re_consume.fev10
(program $str_re_consume.fev10 ((s (Seq Char)) (r RegLan))
  :signature (RegLan (Seq Char) Bool) (Seq Char)
  (
  (($str_re_consume.fev10 r s true) (eo::list_rev str.++ ($str_flatten ($str_nary_intro s))))
  (($str_re_consume.fev10 r s false) ($str_membership_str ($str_re_consume_rec (eo::list_rev str.++ ($str_flatten ($str_nary_intro s))) ($re_str_to_flat_form true (eo::list_rev re.++ ($re_nary_intro r))) @result.null true)))
  )
)
; program: $str_re_consume.fev9
(program $str_re_consume.fev9 ((s (Seq Char)) (r RegLan))
  :signature (RegLan (Seq Char) Bool) RegLan
  (
  (($str_re_consume.fev9 r s true) ($re_str_to_flat_form true (eo::list_rev re.++ ($re_nary_intro r))))
  (($str_re_consume.fev9 r s false) ($str_membership_re ($str_re_consume_rec (eo::list_rev str.++ ($str_flatten ($str_nary_intro s))) ($re_str_to_flat_form true (eo::list_rev re.++ ($re_nary_intro r))) @result.null true)))
  )
)
; program: $str_re_consume.fev11
(program $str_re_consume.fev11 (($eo_6 RegLan) ($eo_7 (Seq Char)) ($eo_9 (Seq Char)) ($eo_8 RegLan))
  :signature (RegLan (Seq Char) RegLan (Seq Char)) Bool
  (
  (($str_re_consume.fev11 $eo_6 $eo_7 $eo_8 $eo_9) (_ (str.in_re $eo_9) $eo_8))
  )
)
; program: $str_re_consume.fev8
(program $str_re_consume.fev8 ((r RegLan) (s (Seq Char)) ($eo_7 (Seq Char)) ($eo_6 RegLan))
  :signature (RegLan (Seq Char) RegLan (Seq Char)) Bool
  (
  (($str_re_consume.fev8 r s $eo_6 $eo_7) (eo::define ((_v0 ($str_re_consume_rec (eo::list_rev str.++ $eo_7) ($re_str_to_flat_form true (eo::list_rev re.++ ($re_nary_intro $eo_6))) @result.null false))) ($str_re_consume.fev11 $eo_6 $eo_7 ($re_nary_elim ($re_str_from_flat_form false ($str_membership_re _v0))) ($str_nary_elim ($str_collect ($str_membership_str _v0))))))
  )
)
; program: $str_re_consume.fev7
(program $str_re_consume.fev7 (($eo_3 RegLan) ($eo_4 (Seq Char)) (s (Seq Char)) (r RegLan))
  :signature (RegLan (Seq Char) RegLan (Seq Char) Bool) Bool
  (
  (($str_re_consume.fev7 r s $eo_3 $eo_4 true) false)
  (($str_re_consume.fev7 r s $eo_3 $eo_4 false) (eo::define ((_v0 (eo::and false (eo::not (eo::eq ($str_membership_re ($str_re_consume_rec (eo::list_rev str.++ ($str_flatten ($str_nary_intro s))) ($re_str_to_flat_form true (eo::list_rev re.++ ($re_nary_intro r))) @result.null true)) (str.to_re "")))))) ($str_re_consume.fev8 r s ($str_re_consume.fev9 r s _v0) ($str_re_consume.fev10 r s _v0))))
  )
)
; program: $str_re_consume.fev4
(program $str_re_consume.fev4 ((r RegLan) (s (Seq Char)) ($eo_4 (Seq Char)) ($eo_3 RegLan))
  :signature (RegLan (Seq Char) RegLan (Seq Char)) Bool
  (
  (($str_re_consume.fev4 r s $eo_3 $eo_4) ($str_re_consume.fev7 r s $eo_3 $eo_4 (eo::eq ($str_re_consume_rec (eo::list_rev str.++ $eo_4) ($re_str_to_flat_form true (eo::list_rev re.++ ($re_nary_intro $eo_3))) @result.null false) false)))
  )
)
; program: $str_re_consume.fev3
(program $str_re_consume.fev3 ((s (Seq Char)) (r RegLan))
  :signature (RegLan (Seq Char) Bool) Bool
  (
  (($str_re_consume.fev3 r s true) false)
  (($str_re_consume.fev3 r s false) (eo::define ((_v0 (eo::and false (eo::not (eo::eq ($str_membership_re ($str_re_consume_rec (eo::list_rev str.++ ($str_flatten ($str_nary_intro s))) ($re_str_to_flat_form true (eo::list_rev re.++ ($re_nary_intro r))) @result.null true)) (str.to_re "")))))) ($str_re_consume.fev4 r s ($str_re_consume.fev5 r s _v0) ($str_re_consume.fev6 r s _v0))))
  )
)
; program: $str_re_consume.fev14
(program $str_re_consume.fev14 ((s (Seq Char)) (r RegLan))
  :signature (RegLan (Seq Char) Bool) (Seq Char)
  (
  (($str_re_consume.fev14 r s true) (eo::list_rev str.++ ($str_flatten ($str_nary_intro s))))
  (($str_re_consume.fev14 r s false) ($str_membership_str ($str_re_consume_rec (eo::list_rev str.++ ($str_flatten ($str_nary_intro s))) ($re_str_to_flat_form true (eo::list_rev re.++ ($re_nary_intro r))) @result.null true)))
  )
)
; program: $str_re_consume.fev13
(program $str_re_consume.fev13 ((s (Seq Char)) (r RegLan))
  :signature (RegLan (Seq Char) Bool) RegLan
  (
  (($str_re_consume.fev13 r s true) ($re_str_to_flat_form true (eo::list_rev re.++ ($re_nary_intro r))))
  (($str_re_consume.fev13 r s false) ($str_membership_re ($str_re_consume_rec (eo::list_rev str.++ ($str_flatten ($str_nary_intro s))) ($re_str_to_flat_form true (eo::list_rev re.++ ($re_nary_intro r))) @result.null true)))
  )
)
; program: $str_re_consume.fev18
(program $str_re_consume.fev18 ((s (Seq Char)) (r RegLan))
  :signature (RegLan (Seq Char) Bool) (Seq Char)
  (
  (($str_re_consume.fev18 r s true) (eo::list_rev str.++ ($str_flatten ($str_nary_intro s))))
  (($str_re_consume.fev18 r s false) ($str_membership_str ($str_re_consume_rec (eo::list_rev str.++ ($str_flatten ($str_nary_intro s))) ($re_str_to_flat_form true (eo::list_rev re.++ ($re_nary_intro r))) @result.null true)))
  )
)
; program: $str_re_consume.fev17
(program $str_re_consume.fev17 ((s (Seq Char)) (r RegLan))
  :signature (RegLan (Seq Char) Bool) RegLan
  (
  (($str_re_consume.fev17 r s true) ($re_str_to_flat_form true (eo::list_rev re.++ ($re_nary_intro r))))
  (($str_re_consume.fev17 r s false) ($str_membership_re ($str_re_consume_rec (eo::list_rev str.++ ($str_flatten ($str_nary_intro s))) ($re_str_to_flat_form true (eo::list_rev re.++ ($re_nary_intro r))) @result.null true)))
  )
)
; program: $str_re_consume.fev19
(program $str_re_consume.fev19 (($eo_13 RegLan) ($eo_14 (Seq Char)) ($eo_16 (Seq Char)) ($eo_15 RegLan))
  :signature (RegLan (Seq Char) RegLan (Seq Char)) Bool
  (
  (($str_re_consume.fev19 $eo_13 $eo_14 $eo_15 $eo_16) (_ (str.in_re $eo_16) $eo_15))
  )
)
; program: $str_re_consume.fev16
(program $str_re_consume.fev16 ((r RegLan) (s (Seq Char)) ($eo_14 (Seq Char)) ($eo_13 RegLan))
  :signature (RegLan (Seq Char) RegLan (Seq Char)) Bool
  (
  (($str_re_consume.fev16 r s $eo_13 $eo_14) (eo::define ((_v0 ($str_re_consume_rec (eo::list_rev str.++ $eo_14) ($re_str_to_flat_form true (eo::list_rev re.++ ($re_nary_intro $eo_13))) @result.null false))) ($str_re_consume.fev19 $eo_13 $eo_14 ($re_nary_elim ($re_str_from_flat_form false ($str_membership_re _v0))) ($str_nary_elim ($str_collect ($str_membership_str _v0))))))
  )
)
; program: $str_re_consume.fev15
(program $str_re_consume.fev15 (($eo_10 RegLan) ($eo_11 (Seq Char)) (s (Seq Char)) (r RegLan))
  :signature (RegLan (Seq Char) RegLan (Seq Char) Bool) Bool
  (
  (($str_re_consume.fev15 r s $eo_10 $eo_11 true) false)
  (($str_re_consume.fev15 r s $eo_10 $eo_11 false) (eo::define ((_v0 (eo::and true (eo::not (eo::eq ($str_membership_re ($str_re_consume_rec (eo::list_rev str.++ ($str_flatten ($str_nary_intro s))) ($re_str_to_flat_form true (eo::list_rev re.++ ($re_nary_intro r))) @result.null true)) (str.to_re "")))))) ($str_re_consume.fev16 r s ($str_re_consume.fev17 r s _v0) ($str_re_consume.fev18 r s _v0))))
  )
)
; program: $str_re_consume.fev12
(program $str_re_consume.fev12 ((r RegLan) (s (Seq Char)) ($eo_11 (Seq Char)) ($eo_10 RegLan))
  :signature (RegLan (Seq Char) RegLan (Seq Char)) Bool
  (
  (($str_re_consume.fev12 r s $eo_10 $eo_11) ($str_re_consume.fev15 r s $eo_10 $eo_11 (eo::eq ($str_re_consume_rec (eo::list_rev str.++ $eo_11) ($re_str_to_flat_form true (eo::list_rev re.++ ($re_nary_intro $eo_10))) @result.null false) false)))
  )
)
; program: $str_re_consume.fev2
(program $str_re_consume.fev2 ((s (Seq Char)) (r RegLan))
  :signature (RegLan (Seq Char) Bool) Bool
  (
  (($str_re_consume.fev2 r s true) false)
  (($str_re_consume.fev2 r s false) (eo::define ((_v0 (eo::and true (eo::not (eo::eq ($str_membership_re ($str_re_consume_rec (eo::list_rev str.++ ($str_flatten ($str_nary_intro s))) ($re_str_to_flat_form true (eo::list_rev re.++ ($re_nary_intro r))) @result.null true)) (str.to_re "")))))) ($str_re_consume.fev12 r s ($str_re_consume.fev13 r s _v0) ($str_re_consume.fev14 r s _v0))))
  )
)
; program: $str_re_consume.fev25
(program $str_re_consume.fev25 ((s (Seq Char)) (r RegLan))
  :signature (RegLan (Seq Char) Bool) (Seq Char)
  (
  (($str_re_consume.fev25 r s true) (eo::list_rev str.++ ($str_flatten ($str_nary_intro s))))
  (($str_re_consume.fev25 r s false) ($str_membership_str ($str_re_consume_rec (eo::list_rev str.++ ($str_flatten ($str_nary_intro s))) ($re_str_to_flat_form true (eo::list_rev re.++ ($re_nary_intro r))) @result.null true)))
  )
)
; program: $str_re_consume.fev24
(program $str_re_consume.fev24 ((s (Seq Char)) (r RegLan))
  :signature (RegLan (Seq Char) Bool) RegLan
  (
  (($str_re_consume.fev24 r s true) ($re_str_to_flat_form true (eo::list_rev re.++ ($re_nary_intro r))))
  (($str_re_consume.fev24 r s false) ($str_membership_re ($str_re_consume_rec (eo::list_rev str.++ ($str_flatten ($str_nary_intro s))) ($re_str_to_flat_form true (eo::list_rev re.++ ($re_nary_intro r))) @result.null true)))
  )
)
; program: $str_re_consume.fev29
(program $str_re_consume.fev29 ((s (Seq Char)) (r RegLan))
  :signature (RegLan (Seq Char) Bool) (Seq Char)
  (
  (($str_re_consume.fev29 r s true) (eo::list_rev str.++ ($str_flatten ($str_nary_intro s))))
  (($str_re_consume.fev29 r s false) ($str_membership_str ($str_re_consume_rec (eo::list_rev str.++ ($str_flatten ($str_nary_intro s))) ($re_str_to_flat_form true (eo::list_rev re.++ ($re_nary_intro r))) @result.null true)))
  )
)
; program: $str_re_consume.fev28
(program $str_re_consume.fev28 ((s (Seq Char)) (r RegLan))
  :signature (RegLan (Seq Char) Bool) RegLan
  (
  (($str_re_consume.fev28 r s true) ($re_str_to_flat_form true (eo::list_rev re.++ ($re_nary_intro r))))
  (($str_re_consume.fev28 r s false) ($str_membership_re ($str_re_consume_rec (eo::list_rev str.++ ($str_flatten ($str_nary_intro s))) ($re_str_to_flat_form true (eo::list_rev re.++ ($re_nary_intro r))) @result.null true)))
  )
)
; program: $str_re_consume.fev30
(program $str_re_consume.fev30 (($eo_22 RegLan) ($eo_23 (Seq Char)) ($eo_25 (Seq Char)) ($eo_24 RegLan))
  :signature (RegLan (Seq Char) RegLan (Seq Char)) Bool
  (
  (($str_re_consume.fev30 $eo_22 $eo_23 $eo_24 $eo_25) (_ (str.in_re $eo_25) $eo_24))
  )
)
; program: $str_re_consume.fev27
(program $str_re_consume.fev27 ((r RegLan) (s (Seq Char)) ($eo_23 (Seq Char)) ($eo_22 RegLan))
  :signature (RegLan (Seq Char) RegLan (Seq Char)) Bool
  (
  (($str_re_consume.fev27 r s $eo_22 $eo_23) (eo::define ((_v0 ($str_re_consume_rec (eo::list_rev str.++ $eo_23) ($re_str_to_flat_form true (eo::list_rev re.++ ($re_nary_intro $eo_22))) @result.null false))) ($str_re_consume.fev30 $eo_22 $eo_23 ($re_nary_elim ($re_str_from_flat_form false ($str_membership_re _v0))) ($str_nary_elim ($str_collect ($str_membership_str _v0))))))
  )
)
; program: $str_re_consume.fev26
(program $str_re_consume.fev26 (($eo_19 RegLan) ($eo_20 (Seq Char)) (s (Seq Char)) (r RegLan))
  :signature (RegLan (Seq Char) RegLan (Seq Char) Bool) Bool
  (
  (($str_re_consume.fev26 r s $eo_19 $eo_20 true) false)
  (($str_re_consume.fev26 r s $eo_19 $eo_20 false) (eo::define ((_v0 (eo::and true (eo::not (eo::eq ($str_membership_re ($str_re_consume_rec (eo::list_rev str.++ ($str_flatten ($str_nary_intro s))) ($re_str_to_flat_form true (eo::list_rev re.++ ($re_nary_intro r))) @result.null true)) (str.to_re "")))))) ($str_re_consume.fev27 r s ($str_re_consume.fev28 r s _v0) ($str_re_consume.fev29 r s _v0))))
  )
)
; program: $str_re_consume.fev23
(program $str_re_consume.fev23 ((r RegLan) (s (Seq Char)) ($eo_20 (Seq Char)) ($eo_19 RegLan))
  :signature (RegLan (Seq Char) RegLan (Seq Char)) Bool
  (
  (($str_re_consume.fev23 r s $eo_19 $eo_20) ($str_re_consume.fev26 r s $eo_19 $eo_20 (eo::eq ($str_re_consume_rec (eo::list_rev str.++ $eo_20) ($re_str_to_flat_form true (eo::list_rev re.++ ($re_nary_intro $eo_19))) @result.null false) false)))
  )
)
; program: $str_re_consume.fev22
(program $str_re_consume.fev22 ((s (Seq Char)) (r RegLan))
  :signature (RegLan (Seq Char) Bool) Bool
  (
  (($str_re_consume.fev22 r s true) false)
  (($str_re_consume.fev22 r s false) (eo::define ((_v0 (eo::and true (eo::not (eo::eq ($str_membership_re ($str_re_consume_rec (eo::list_rev str.++ ($str_flatten ($str_nary_intro s))) ($re_str_to_flat_form true (eo::list_rev re.++ ($re_nary_intro r))) @result.null true)) (str.to_re "")))))) ($str_re_consume.fev23 r s ($str_re_consume.fev24 r s _v0) ($str_re_consume.fev25 r s _v0))))
  )
)
; program: $str_re_consume.fev36
(program $str_re_consume.fev36 ((s (Seq Char)) (r RegLan))
  :signature (RegLan (Seq Char) Bool) (Seq Char)
  (
  (($str_re_consume.fev36 r s true) (eo::list_rev str.++ ($str_flatten ($str_nary_intro s))))
  (($str_re_consume.fev36 r s false) ($str_membership_str ($str_re_consume_rec (eo::list_rev str.++ ($str_flatten ($str_nary_intro s))) ($re_str_to_flat_form true (eo::list_rev re.++ ($re_nary_intro r))) @result.null true)))
  )
)
; program: $str_re_consume.fev35
(program $str_re_consume.fev35 ((s (Seq Char)) (r RegLan))
  :signature (RegLan (Seq Char) Bool) RegLan
  (
  (($str_re_consume.fev35 r s true) ($re_str_to_flat_form true (eo::list_rev re.++ ($re_nary_intro r))))
  (($str_re_consume.fev35 r s false) ($str_membership_re ($str_re_consume_rec (eo::list_rev str.++ ($str_flatten ($str_nary_intro s))) ($re_str_to_flat_form true (eo::list_rev re.++ ($re_nary_intro r))) @result.null true)))
  )
)
; program: $str_re_consume.fev40
(program $str_re_consume.fev40 ((s (Seq Char)) (r RegLan))
  :signature (RegLan (Seq Char) Bool) (Seq Char)
  (
  (($str_re_consume.fev40 r s true) (eo::list_rev str.++ ($str_flatten ($str_nary_intro s))))
  (($str_re_consume.fev40 r s false) ($str_membership_str ($str_re_consume_rec (eo::list_rev str.++ ($str_flatten ($str_nary_intro s))) ($re_str_to_flat_form true (eo::list_rev re.++ ($re_nary_intro r))) @result.null true)))
  )
)
; program: $str_re_consume.fev39
(program $str_re_consume.fev39 ((s (Seq Char)) (r RegLan))
  :signature (RegLan (Seq Char) Bool) RegLan
  (
  (($str_re_consume.fev39 r s true) ($re_str_to_flat_form true (eo::list_rev re.++ ($re_nary_intro r))))
  (($str_re_consume.fev39 r s false) ($str_membership_re ($str_re_consume_rec (eo::list_rev str.++ ($str_flatten ($str_nary_intro s))) ($re_str_to_flat_form true (eo::list_rev re.++ ($re_nary_intro r))) @result.null true)))
  )
)
; program: $str_re_consume.fev41
(program $str_re_consume.fev41 (($eo_32 RegLan) ($eo_33 (Seq Char)) ($eo_35 (Seq Char)) ($eo_34 RegLan))
  :signature (RegLan (Seq Char) RegLan (Seq Char)) Bool
  (
  (($str_re_consume.fev41 $eo_32 $eo_33 $eo_34 $eo_35) (_ (str.in_re $eo_35) $eo_34))
  )
)
; program: $str_re_consume.fev38
(program $str_re_consume.fev38 ((r RegLan) (s (Seq Char)) ($eo_33 (Seq Char)) ($eo_32 RegLan))
  :signature (RegLan (Seq Char) RegLan (Seq Char)) Bool
  (
  (($str_re_consume.fev38 r s $eo_32 $eo_33) (eo::define ((_v0 ($str_re_consume_rec (eo::list_rev str.++ $eo_33) ($re_str_to_flat_form true (eo::list_rev re.++ ($re_nary_intro $eo_32))) @result.null false))) ($str_re_consume.fev41 $eo_32 $eo_33 ($re_nary_elim ($re_str_from_flat_form false ($str_membership_re _v0))) ($str_nary_elim ($str_collect ($str_membership_str _v0))))))
  )
)
; program: $str_re_consume.fev37
(program $str_re_consume.fev37 (($eo_29 RegLan) ($eo_30 (Seq Char)) (s (Seq Char)) (r RegLan))
  :signature (RegLan (Seq Char) RegLan (Seq Char) Bool) Bool
  (
  (($str_re_consume.fev37 r s $eo_29 $eo_30 true) false)
  (($str_re_consume.fev37 r s $eo_29 $eo_30 false) (eo::define ((_v0 (eo::and true (eo::not (eo::eq ($str_membership_re ($str_re_consume_rec (eo::list_rev str.++ ($str_flatten ($str_nary_intro s))) ($re_str_to_flat_form true (eo::list_rev re.++ ($re_nary_intro r))) @result.null true)) (str.to_re "")))))) ($str_re_consume.fev38 r s ($str_re_consume.fev39 r s _v0) ($str_re_consume.fev40 r s _v0))))
  )
)
; program: $str_re_consume.fev34
(program $str_re_consume.fev34 ((r RegLan) (s (Seq Char)) ($eo_30 (Seq Char)) ($eo_29 RegLan))
  :signature (RegLan (Seq Char) RegLan (Seq Char)) Bool
  (
  (($str_re_consume.fev34 r s $eo_29 $eo_30) ($str_re_consume.fev37 r s $eo_29 $eo_30 (eo::eq ($str_re_consume_rec (eo::list_rev str.++ $eo_30) ($re_str_to_flat_form true (eo::list_rev re.++ ($re_nary_intro $eo_29))) @result.null false) false)))
  )
)
; program: $str_re_consume.fev33
(program $str_re_consume.fev33 ((s (Seq Char)) (r RegLan))
  :signature (RegLan (Seq Char) Bool) Bool
  (
  (($str_re_consume.fev33 r s true) false)
  (($str_re_consume.fev33 r s false) (eo::define ((_v0 (eo::and true (eo::not (eo::eq ($str_membership_re ($str_re_consume_rec (eo::list_rev str.++ ($str_flatten ($str_nary_intro s))) ($re_str_to_flat_form true (eo::list_rev re.++ ($re_nary_intro r))) @result.null true)) (str.to_re "")))))) ($str_re_consume.fev34 r s ($str_re_consume.fev35 r s _v0) ($str_re_consume.fev36 r s _v0))))
  )
)
; program: $str_re_consume.fev42
(program $str_re_consume.fev42 (($eo_28 Bool) ($eo_36 (Seq Char)) (r RegLan))
  :signature (RegLan Bool (Seq Char)) Bool
  (
  (($str_re_consume.fev42 r $eo_28 $eo_36) (_ (str.in_re $eo_36) (re.* r)))
  )
)
; program: $str_re_consume.fev32
(program $str_re_consume.fev32 ((s (Seq Char)) (r RegLan) ($eo_28 Bool))
  :signature (RegLan (Seq Char) Bool) Bool
  (
  (($str_re_consume.fev32 r s $eo_28) ($str_re_consume.fev42 r $eo_28 ($str_membership_str $eo_28)))
  )
)
; program: $str_re_consume.fev31
(program $str_re_consume.fev31 (($eo_18 Bool) ($eo_27 Bool) (s (Seq Char)) (r RegLan))
  :signature (RegLan (Seq Char) Bool Bool Bool) Bool
  (
  (($str_re_consume.fev31 r s $eo_18 $eo_27 $eo_27) ($str_re_consume.fev32 r s ($str_re_consume.fev33 r s (eo::eq ($str_re_consume_rec (eo::list_rev str.++ ($str_flatten ($str_nary_intro s))) ($re_str_to_flat_form true (eo::list_rev re.++ ($re_nary_intro r))) @result.null true) false))))
  )
)
; program: $str_re_consume.fev21
(program $str_re_consume.fev21 ((r RegLan) (s (Seq Char)) ($eo_18 Bool))
  :signature (RegLan (Seq Char) Bool) Bool
  (
  (($str_re_consume.fev21 r s $eo_18) ($str_re_consume.fev31 r s $eo_18 ($str_membership_re $eo_18) (str.to_re "")))
  )
)
; program: $str_re_consume.fev20
(program $str_re_consume.fev20 (($eo_1 Bool) (s (Seq Char)) (r RegLan))
  :signature (RegLan (Seq Char) Bool Bool) Bool
  (
  (($str_re_consume.fev20 r s $eo_1 true) false)
  (($str_re_consume.fev20 r s $eo_1 false) ($str_re_consume.fev21 r s ($str_re_consume.fev22 r s (eo::eq ($str_re_consume_rec (eo::list_rev str.++ ($str_flatten ($str_nary_intro s))) ($re_str_to_flat_form true (eo::list_rev re.++ ($re_nary_intro r))) @result.null true) false))))
  )
)
; program: $str_re_consume.fev1
(program $str_re_consume.fev1 ((r RegLan) (s (Seq Char)) ($eo_1 Bool))
  :signature (RegLan (Seq Char) Bool) Bool
  (
  (($str_re_consume.fev1 r s $eo_1) ($str_re_consume.fev20 r s $eo_1 (eo::eq $eo_1 false)))
  )
)
; program: $str_re_consume
(program $str_re_consume ((s (Seq Char)) (r RegLan))
  :signature ((Seq Char) RegLan) Bool
  (
  (($str_re_consume s (re.* r)) ($str_re_consume.fev1 r s ($str_re_consume.fev2 r s (eo::eq ($str_re_consume_rec (eo::list_rev str.++ ($str_flatten ($str_nary_intro s))) ($re_str_to_flat_form true (eo::list_rev re.++ ($re_nary_intro r))) @result.null true) false))))
  (($str_re_consume s r) ($str_re_consume.fev3 r s (eo::eq ($str_re_consume_rec (eo::list_rev str.++ ($str_flatten ($str_nary_intro s))) ($re_str_to_flat_form true (eo::list_rev re.++ ($re_nary_intro r))) @result.null true) false)))
  )
)
; fwd-decl: $str_is_compatible
(program $str_is_compatible ((T Type))
  :signature ((Seq T) (Seq T)) Bool
)
; program: $str_is_compatible.fev2
(program $str_is_compatible.fev2 ((T Type) (c2 (Seq T)) (c1 (Seq T)))
  :signature ((Seq T) (Seq T) Bool) Bool
  (
  (($str_is_compatible.fev2 c1 c2 true) false)
  (($str_is_compatible.fev2 c1 c2 false) ($are_distinct_terms_list (_ ($eo_List_cons c1) (_ ($eo_List_cons c2) $eo_List_nil)) (eo::typeof c1)))
  )
)
; program: $str_is_compatible.fev3
(program $str_is_compatible.fev3 (($eo_1 Bool) ($eo_3 Bool))
  :signature (Bool Bool Bool) Bool
  (
  (($str_is_compatible.fev3 $eo_1 $eo_3 $eo_3) false)
  )
)
; program: $str_is_compatible.fev1
(program $str_is_compatible.fev1 ((T Type) (c1 (Seq T)) (c2 (Seq T)) ($eo_1 Bool))
  :signature ((Seq T) (Seq T) Bool) Bool
  (
  (($str_is_compatible.fev1 c1 c2 $eo_1) ($str_is_compatible.fev3 $eo_1 $eo_1 true))
  )
)
; program: $str_is_compatible
(program $str_is_compatible ((T Type) (xs1 (Seq T)) (xs2 (Seq T)) (c1 (Seq T)) (c2 (Seq T)))
  :signature ((Seq T) (Seq T)) Bool
  (
  ((eo::define ((_v0 (str.++ c1))) ($str_is_compatible (_ _v0 xs1) (_ _v0 xs2))) ($str_is_compatible xs1 xs2))
  (($str_is_compatible (_ (str.++ c1) xs1) (_ (str.++ c2) xs2)) ($str_is_compatible.fev1 c1 c2 ($str_is_compatible.fev2 c1 c2 (eo::eq c1 c2))))
  (($str_is_compatible c1 c2) (eo::or ($str_is_empty c1) ($str_is_empty c2)))
  )
)
; fwd-decl: $str_overlap_rec
(program $str_overlap_rec ()
  :signature ((Seq Char) (Seq Char)) Int
)
; program: $str_overlap_rec.fev1
(program $str_overlap_rec.fev1 ((s (Seq Char)) (s1 (Seq Char)) (t (Seq Char)))
  :signature ((Seq Char) (Seq Char) (Seq Char) Bool) Int
  (
  (($str_overlap_rec.fev1 t s1 s true) 0)
  (($str_overlap_rec.fev1 t s1 s false) (eo::add 1 ($str_overlap_rec s1 t)))
  )
)
; program: $str_overlap_rec
(program $str_overlap_rec ((s1 (Seq Char)) (s (Seq Char)) (t (Seq Char)))
  :signature ((Seq Char) (Seq Char)) Int
  (
  (($str_overlap_rec (_ (str.++ s) s1) t) ($str_overlap_rec.fev1 t s1 s ($str_is_compatible (_ (str.++ s) s1) t)))
  (($str_overlap_rec s t) 0)
  )
)
; fwd-decl: $str_from_int_eval_rec
(program $str_from_int_eval_rec ()
  :signature (Int (Seq Char)) (Seq Char)
)
; program: $str_from_int_eval_rec.fev2
(program $str_from_int_eval_rec.fev2 ((s (Seq Char)))
  :signature ((Seq Char) Bool) (Seq Char)
  (
  (($str_from_int_eval_rec.fev2 s true) "0")
  (($str_from_int_eval_rec.fev2 s false) s)
  )
)
; program: $str_from_int_eval_rec.fev1
(program $str_from_int_eval_rec.fev1 ((n Int) (s (Seq Char)))
  :signature ((Seq Char) Int Bool) (Seq Char)
  (
  (($str_from_int_eval_rec.fev1 s n true) ($str_from_int_eval_rec.fev2 s (eo::eq s "")))
  (($str_from_int_eval_rec.fev1 s n false) ($str_from_int_eval_rec (eo::zdiv n 10) (eo::concat (eo::to_str (eo::add 48 (eo::zmod n 10))) s)))
  )
)
; program: $str_from_int_eval_rec
(program $str_from_int_eval_rec ((s (Seq Char)) (n Int))
  :signature (Int (Seq Char)) (Seq Char)
  (
  (($str_from_int_eval_rec n s) ($str_from_int_eval_rec.fev1 s n (eo::eq n 0)))
  )
)
; fwd-decl: $str_to_int_eval_rec
(program $str_to_int_eval_rec ()
  :signature ((Seq Char) Int Int) Int
)
; program: $str_to_int_eval_rec.fev1
(program $str_to_int_eval_rec.fev1 ((n Int) (e Int) (s1 (Seq Char)) (s2 (Seq Char)))
  :signature (Int Int (Seq Char) (Seq Char) Bool) Int
  (
  (($str_to_int_eval_rec.fev1 n e s1 s2 true) ($str_to_int_eval_rec s2 (eo::mul e 10) (eo::add (eo::mul (eo::add (eo::to_z s1) -48) e) n)))
  (($str_to_int_eval_rec.fev1 n e s1 s2 false) -1)
  )
)
; program: $str_to_int_eval_rec
(program $str_to_int_eval_rec ((s2 (Seq Char)) (s1 (Seq Char)) (e Int) (n Int))
  :signature ((Seq Char) Int Int) Int
  (
  (($str_to_int_eval_rec (_ (str.++ s1) s2) e n) (eo::define ((_v0 (eo::add (eo::to_z s1) -48))) ($str_to_int_eval_rec.fev1 n e s1 s2 (eo::and (eo::gt 10 _v0) (eo::not (eo::is_neg _v0))))))
  (($str_to_int_eval_rec "" e n) n)
  )
)
; fwd-decl: $str_case_conv_rec
(program $str_case_conv_rec ()
  :signature ((Seq Char) Bool) (Seq Char)
)
; program: $str_case_conv_rec.fev4
(program $str_case_conv_rec.fev4 ((s2 (Seq Char)) (s1 (Seq Char)))
  :signature ((Seq Char) (Seq Char) Bool) Int
  (
  (($str_case_conv_rec.fev4 s2 s1 true) -32)
  (($str_case_conv_rec.fev4 s2 s1 false) 0)
  )
)
; program: $str_case_conv_rec.fev3
(program $str_case_conv_rec.fev3 ((s2 (Seq Char)) (s1 (Seq Char)) ($eo_6 Int) ($eo_5 Int) ($eo_4 (Seq Char)))
  :signature ((Seq Char) (Seq Char) (Seq Char) Int Int) (Seq Char)
  (
  (($str_case_conv_rec.fev3 s2 s1 $eo_4 $eo_5 $eo_6) (eo::concat (eo::to_str (eo::add $eo_6 $eo_5)) $eo_4))
  )
)
; program: $str_case_conv_rec.fev2
(program $str_case_conv_rec.fev2 ((s2 (Seq Char)) (s1 (Seq Char)))
  :signature ((Seq Char) (Seq Char) Bool) Int
  (
  (($str_case_conv_rec.fev2 s2 s1 true) 32)
  (($str_case_conv_rec.fev2 s2 s1 false) 0)
  )
)
; program: $str_case_conv_rec.fev1
(program $str_case_conv_rec.fev1 ((s2 (Seq Char)) (s1 (Seq Char)) ($eo_3 Int) ($eo_2 Int) ($eo_1 (Seq Char)))
  :signature ((Seq Char) (Seq Char) (Seq Char) Int Int) (Seq Char)
  (
  (($str_case_conv_rec.fev1 s2 s1 $eo_1 $eo_2 $eo_3) (eo::concat (eo::to_str (eo::add $eo_3 $eo_2)) $eo_1))
  )
)
; program: $str_case_conv_rec
(program $str_case_conv_rec ((s2 (Seq Char)) (s1 (Seq Char)) (isLower Bool))
  :signature ((Seq Char) Bool) (Seq Char)
  (
  (($str_case_conv_rec (_ (str.++ s1) s2) true) (eo::define ((_v0 (eo::to_z s1))) ($str_case_conv_rec.fev1 s2 s1 ($str_case_conv_rec s2 true) ($str_case_conv_rec.fev2 s2 s1 (eo::and (eo::gt 91 _v0) (eo::gt _v0 64))) _v0)))
  (($str_case_conv_rec (_ (str.++ s1) s2) false) (eo::define ((_v0 (eo::to_z s1))) ($str_case_conv_rec.fev3 s2 s1 ($str_case_conv_rec s2 false) ($str_case_conv_rec.fev4 s2 s1 (eo::and (eo::gt 123 _v0) (eo::gt _v0 96))) _v0)))
  (($str_case_conv_rec "" isLower) "")
  )
)
; fwd-decl: $str_leq_eval_rec
(program $str_leq_eval_rec ()
  :signature ((Seq Char) (Seq Char)) Bool
)
; program: $str_leq_eval_rec.fev1
(program $str_leq_eval_rec.fev1 ((t2 (Seq Char)) (s2 (Seq Char)) (t1 (Seq Char)) (s1 (Seq Char)))
  :signature ((Seq Char) (Seq Char) (Seq Char) (Seq Char) Bool) Bool
  (
  (($str_leq_eval_rec.fev1 s1 t1 t2 s2 true) ($str_leq_eval_rec s2 t2))
  (($str_leq_eval_rec.fev1 s1 t1 t2 s2 false) (eo::gt (eo::to_z t1) (eo::to_z s1)))
  )
)
; program: $str_leq_eval_rec
(program $str_leq_eval_rec ((t2 (Seq Char)) (s2 (Seq Char)) (s1 (Seq Char)) (t1 (Seq Char)))
  :signature ((Seq Char) (Seq Char)) Bool
  (
  (($str_leq_eval_rec (_ (str.++ s1) s2) (_ (str.++ t1) t2)) ($str_leq_eval_rec.fev1 s1 t1 t2 s2 (eo::eq s1 t1)))
  (($str_leq_eval_rec "" t1) true)
  (($str_leq_eval_rec s1 t1) false)
  )
)
; program: $str_eval_replace_all_rec
(program $str_eval_replace_all_rec ((n Int) (s (Seq Char)) (t (Seq Char)) (lent Int) (u (Seq Char)))
  :signature ((Seq Char) (Seq Char) (Seq Char) Int Int) (Seq Char)
  (
  (($str_eval_replace_all_rec s t u -1 lent) s)
  (($str_eval_replace_all_rec s t u n lent) (eo::define ((_v0 (eo::extract s (eo::add n lent) (eo::len s)))) (eo::concat ($str_eval_replace_all_rec _v0 t u (eo::find _v0 t) lent) u)))
  )
)
; fwd-decl: $mk_re_concat
(program $mk_re_concat ()
  :signature (Bool Bool) Bool
)
; program: $mk_re_concat.fev1
(program $mk_re_concat.fev1 ((r1 RegLan) (r RegLan) (s1 (Seq Char)) (s (Seq Char)) (Es Bool) ($eo_2 (Seq Char)) ($eo_1 RegLan))
  :signature (RegLan RegLan (Seq Char) (Seq Char) Bool RegLan (Seq Char)) Bool
  (
  (($mk_re_concat.fev1 r1 r s1 s Es $eo_1 $eo_2) ($mk_re_concat Es (_ (str.in_re $eo_2) $eo_1)))
  )
)
; program: $mk_re_concat
(program $mk_re_concat ((Es Bool) (r RegLan) (s (Seq Char)) (s1 (Seq Char)) (r1 RegLan))
  :signature (Bool Bool) Bool
  (
  (($mk_re_concat (_ (and (_ (str.in_re s) r)) Es) (_ (str.in_re s1) r1)) ($mk_re_concat.fev1 r1 r s1 s Es (eo::cons re.++ r r1) (eo::cons str.++ s s1)))
  (($mk_re_concat true (_ (str.in_re s1) r1)) (_ (str.in_re s1) r1))
  )
)
; program: $mk_re_unfold_pos_star
(program $mk_re_unfold_pos_star ((r RegLan) (t (Seq Char)) (k2 (Seq Char)) (M Bool) (k1 (Seq Char)) (k3 (Seq Char)))
  :signature ((Seq Char) RegLan (_ (@Pair (Seq Char)) Bool)) Bool
  (
  (($mk_re_unfold_pos_star t r (_ (@pair (_ (str.++ k1) (_ (str.++ k2) (_ (str.++ k3) "")))) M)) (eo::define ((_v0 (= t))) (_ (or (_ _v0 "")) (_ (or (_ (str.in_re t) r)) (_ (or (_ (and (_ (and (_ _v0 (_ (str.++ k1) (_ (str.++ k2) (_ (str.++ k3) ""))))) M)) (_ (and (not (_ (= k1) ""))) (_ (and (not (_ (= k3) ""))) true)))) false)))))
  )
)
; program: $mk_re_unfold_pos.fev3
(program $mk_re_unfold_pos.fev3 ((r2 RegLan) (r1 RegLan) (t (Seq Char)) ($eo_4 (Seq Char)) ($eo_3 Bool))
  :signature (RegLan RegLan (Seq Char) Bool (Seq Char)) Bool
  (
  (($mk_re_unfold_pos.fev3 r2 r1 t $eo_3 $eo_4) (eo::cons and (_ (= t) $eo_4) $eo_3))
  )
)
; program: $mk_re_unfold_pos.fev2
(program $mk_re_unfold_pos.fev2 ((r2 RegLan) (r1 RegLan) (t (Seq Char)) ($eo_2 (Seq Char)))
  :signature (RegLan RegLan (Seq Char) (Seq Char)) Bool
  (
  (($mk_re_unfold_pos.fev2 r2 r1 t $eo_2) (_ (= t) $eo_2))
  )
)
; program: $mk_re_unfold_pos.fev1
(program $mk_re_unfold_pos.fev1 ((t (Seq Char)) (r1 RegLan) (r2 RegLan))
  :signature (RegLan RegLan (Seq Char) Bool) Bool
  (
  (($mk_re_unfold_pos.fev1 r2 r1 t true) (eo::define ((_v0 (_ (re.++ r1) r2))) ($mk_re_unfold_pos.fev2 r2 r1 t ($pair_first ($re_unfold_pos_concat_rec t _v0 _v0 0)))))
  (($mk_re_unfold_pos.fev1 r2 r1 t false) (eo::define ((_v0 (_ (re.++ r1) r2))) (eo::define ((_v1 ($re_unfold_pos_concat_rec t _v0 _v0 0))) ($mk_re_unfold_pos.fev3 r2 r1 t ($pair_second _v1) ($pair_first _v1)))))
  )
)
; program: $mk_re_unfold_pos
(program $mk_re_unfold_pos ((t (Seq Char)) (r1 RegLan) (r2 RegLan))
  :signature ((Seq Char) RegLan) Bool
  (
  (($mk_re_unfold_pos t (re.* r1)) (eo::define ((_v0 (re.++ r1))) (eo::define ((_v1 (_ _v0 (_ (re.++ (re.* r1)) (_ _v0 (str.to_re "")))))) ($mk_re_unfold_pos_star t r1 ($re_unfold_pos_concat_rec t _v1 _v1 0)))))
  (($mk_re_unfold_pos t (_ (re.++ r1) r2)) (eo::define ((_v0 (_ (re.++ r1) r2))) ($mk_re_unfold_pos.fev1 r2 r1 t (eo::eq ($pair_second ($re_unfold_pos_concat_rec t _v0 _v0 0)) true))))
  )
)
; program: $mk_re_unfold_neg_concat_fixed.fev4
(program $mk_re_unfold_neg_concat_fixed.fev4 ((r2 RegLan) (r1 RegLan) (s (Seq Char)) ($eo_5 Int) ($eo_4 RegLan))
  :signature (RegLan RegLan (Seq Char) RegLan Int) Bool
  (
  (($mk_re_unfold_neg_concat_fixed.fev4 r2 r1 s $eo_4 $eo_5) (eo::define ((_v0 (str.substr s))) (_ (or (not (_ (str.in_re (_ (_ _v0 0) $eo_5)) r1))) (_ (or (not (_ (str.in_re (_ (_ _v0 $eo_5) (_ (- (str.len s)) $eo_5))) $eo_4))) false))))
  )
)
; program: $mk_re_unfold_neg_concat_fixed.fev3
(program $mk_re_unfold_neg_concat_fixed.fev3 ((rev Bool) (r1 RegLan) (s (Seq Char)) (r2 RegLan))
  :signature (RegLan Bool RegLan (Seq Char) Bool) RegLan
  (
  (($mk_re_unfold_neg_concat_fixed.fev3 r2 rev r1 s true) (eo::list_rev re.++ r2))
  (($mk_re_unfold_neg_concat_fixed.fev3 r2 rev r1 s false) r2)
  )
)
; program: $mk_re_unfold_neg_concat_fixed.fev5
(program $mk_re_unfold_neg_concat_fixed.fev5 (($eo_2 RegLan) (r1 RegLan) (s (Seq Char)) ($eo_3 Int) ($eo_6 RegLan))
  :signature (RegLan Int (Seq Char) RegLan RegLan) Bool
  (
  (($mk_re_unfold_neg_concat_fixed.fev5 $eo_2 $eo_3 s r1 $eo_6) (eo::define ((_v0 (_ (- (str.len s)) $eo_3))) (eo::define ((_v1 (str.substr s))) (_ (or (not (_ (str.in_re (_ (_ _v1 _v0) $eo_3)) r1))) (_ (or (not (_ (str.in_re (_ (_ _v1 0) _v0)) $eo_6))) false)))))
  )
)
; program: $mk_re_unfold_neg_concat_fixed.fev2
(program $mk_re_unfold_neg_concat_fixed.fev2 ((r2 RegLan) (rev Bool) ($eo_3 Int) (s (Seq Char)) (r1 RegLan) ($eo_2 RegLan))
  :signature (RegLan Bool RegLan (Seq Char) RegLan Int) Bool
  (
  (($mk_re_unfold_neg_concat_fixed.fev2 r2 rev r1 s $eo_2 $eo_3) ($mk_re_unfold_neg_concat_fixed.fev5 $eo_2 $eo_3 s r1 ($singleton_elim $eo_2)))
  )
)
; program: $mk_re_unfold_neg_concat_fixed.fev1
(program $mk_re_unfold_neg_concat_fixed.fev1 ((rev Bool) (s (Seq Char)) (r2 RegLan) (r1 RegLan))
  :signature (RegLan RegLan (Seq Char) Bool Bool) Bool
  (
  (($mk_re_unfold_neg_concat_fixed.fev1 r2 r1 s rev true) ($mk_re_unfold_neg_concat_fixed.fev2 r2 rev r1 s ($mk_re_unfold_neg_concat_fixed.fev3 r2 rev r1 s rev) ($str_fixed_len_re r1)))
  (($mk_re_unfold_neg_concat_fixed.fev1 r2 r1 s rev false) ($mk_re_unfold_neg_concat_fixed.fev4 r2 r1 s ($singleton_elim r2) ($str_fixed_len_re r1)))
  )
)
; program: $mk_re_unfold_neg_concat_fixed
(program $mk_re_unfold_neg_concat_fixed ((r2 RegLan) (r1 RegLan) (s (Seq Char)) (rev Bool))
  :signature ((Seq Char) RegLan Bool) Bool
  (
  (($mk_re_unfold_neg_concat_fixed s (_ (re.++ r1) r2) rev) ($mk_re_unfold_neg_concat_fixed.fev1 r2 r1 s rev rev))
  )
)
; program: $mk_re_unfold_neg.fev1
(program $mk_re_unfold_neg.fev1 ((r2 RegLan) (r1 RegLan) (t (Seq Char)) ($eo_1 RegLan))
  :signature (RegLan (Seq Char) RegLan RegLan) Bool
  (
  (($mk_re_unfold_neg.fev1 r2 t r1 $eo_1) (eo::define ((_v0 (eo::var "@var.str_index" Int))) (eo::define ((_v1 (str.len t))) (eo::define ((_v2 (str.substr t))) (_ (forall (_ ($eo_List_cons _v0) $eo_List_nil)) (_ (or (_ (< _v0) 0)) (_ (or (_ (< _v1) _v0)) (_ (or (not (_ (str.in_re (_ (_ _v2 0) _v0)) r1))) (_ (or (not (_ (str.in_re (_ (_ _v2 _v0) (_ (- _v1) _v0))) $eo_1))) false)))))))))
  )
)
; program: $mk_re_unfold_neg
(program $mk_re_unfold_neg ((t (Seq Char)) (r1 RegLan) (r2 RegLan))
  :signature ((Seq Char) RegLan) Bool
  (
  (($mk_re_unfold_neg t (re.* r1)) (eo::define ((_v0 (eo::var "@var.str_index" Int))) (eo::define ((_v1 (str.len t))) (eo::define ((_v2 (str.substr t))) (_ (and (not (_ (= t) ""))) (_ (and (_ (forall (_ ($eo_List_cons _v0) $eo_List_nil)) (_ (or (_ (<= _v0) 0)) (_ (or (_ (< _v1) _v0)) (_ (or (not (_ (str.in_re (_ (_ _v2 0) _v0)) r1))) (_ (or (not (_ (str.in_re (_ (_ _v2 _v0) (_ (- _v1) _v0))) (re.* r1)))) false)))))) true))))))
  (($mk_re_unfold_neg t (_ (re.++ r1) r2)) ($mk_re_unfold_neg.fev1 r2 t r1 ($singleton_elim r2)))
  )
)
; program: $str_mk_ext_deq
(program $str_mk_ext_deq ((T Type) (s (Seq T)) (t (Seq T)) (k Int))
  :signature ((Seq T) (Seq T) Int Type) Bool
  (
  (($str_mk_ext_deq s t k (Seq Char)) (not (_ (= (_ (_ (str.substr s) k) 1)) (_ (_ (str.substr t) k) 1))))
  (($str_mk_ext_deq s t k (Seq T)) (not (_ (= (_ (seq.nth s) k)) (_ (seq.nth t) k))))
  )
)
; fwd-decl: $str_multiset_overapprox
(program $str_multiset_overapprox ((T Type))
  :signature ((Seq T)) $eo_List
)
; program: $str_multiset_overapprox.fev3
(program $str_multiset_overapprox.fev3 ((T Type) (s (Seq T)))
  :signature ((Seq T) Bool) $eo_List
  (
  (($str_multiset_overapprox.fev3 s true) ($str_multiset_overapprox ($str_flatten_word s)))
  (($str_multiset_overapprox.fev3 s false) (_ ($eo_List_cons s) $eo_List_nil))
  )
)
; program: $str_multiset_overapprox.fev2
(program $str_multiset_overapprox.fev2 ((T Type) (s (Seq T)))
  :signature ((Seq T) Bool) $eo_List
  (
  (($str_multiset_overapprox.fev2 s true) ($str_multiset_overapprox.fev3 s (eo::gt (eo::len s) 1)))
  (($str_multiset_overapprox.fev2 s false) (_ ($eo_List_cons s) $eo_List_nil))
  )
)
; program: $str_multiset_overapprox.fev1
(program $str_multiset_overapprox.fev1 ((T Type) (s (Seq T)))
  :signature ((Seq T) Bool) $eo_List
  (
  (($str_multiset_overapprox.fev1 s true) $eo_List_nil)
  (($str_multiset_overapprox.fev1 s false) ($str_multiset_overapprox.fev2 s (eo::is_str s)))
  )
)
; program: $str_multiset_overapprox
(program $str_multiset_overapprox ((T Type) (ss (Seq T)) (n Int) (m Int) (t (Seq T)) (r (Seq T)) (s (Seq T)))
  :signature ((Seq T)) $eo_List
  (
  (($str_multiset_overapprox (_ (str.++ s) ss)) (eo::list_concat $eo_List_cons ($str_multiset_overapprox s) ($str_multiset_overapprox ss)))
  (($str_multiset_overapprox (_ (_ (str.substr s) n) m)) ($str_multiset_overapprox s))
  (($str_multiset_overapprox (_ (_ (str.replace s) t) r)) (eo::list_concat $eo_List_cons ($str_multiset_overapprox s) ($str_multiset_overapprox r)))
  (($str_multiset_overapprox s) ($str_multiset_overapprox.fev1 s ($str_is_empty s)))
  )
)
; fwd-decl: $str_is_multiset_subset_strict
(program $str_is_multiset_subset_strict ((T Type))
  :signature ((Seq T) $eo_List $eo_List) Bool
)
; program: $str_is_multiset_subset_strict.fev3
(program $str_is_multiset_subset_strict.fev3 ((T Type) (s (Seq T)) (emp (Seq T)) (xs $eo_List) (nr $eo_List))
  :signature ($eo_List $eo_List (Seq T) (Seq T) Bool) Bool
  (
  (($str_is_multiset_subset_strict.fev3 nr xs emp s true) true)
  (($str_is_multiset_subset_strict.fev3 nr xs emp s false) ($str_is_multiset_subset_strict emp xs nr))
  )
)
; program: $str_is_multiset_subset_strict.fev2
(program $str_is_multiset_subset_strict.fev2 ((T Type) (s (Seq T)) (xs $eo_List) (ss (Seq T)) (nr $eo_List))
  :signature ($eo_List (Seq T) $eo_List (Seq T) Bool) $eo_List
  (
  (($str_is_multiset_subset_strict.fev2 nr s xs ss true) (_ ($eo_List_cons s) nr))
  (($str_is_multiset_subset_strict.fev2 nr s xs ss false) nr)
  )
)
; program: $str_is_multiset_subset_strict.fev1
(program $str_is_multiset_subset_strict.fev1 ((T Type) (nr $eo_List) (s (Seq T)) (xs $eo_List) (ss (Seq T)) ($eo_2 $eo_List) ($eo_1 $eo_List))
  :signature ($eo_List (Seq T) $eo_List (Seq T) $eo_List $eo_List) Bool
  (
  (($str_is_multiset_subset_strict.fev1 nr s xs ss $eo_1 $eo_2) ($str_is_multiset_subset_strict ss $eo_2 $eo_1))
  )
)
; program: $str_is_multiset_subset_strict
(program $str_is_multiset_subset_strict ((T Type) (ss (Seq T)) (s (Seq T)) (emp (Seq T)) (xs $eo_List) (nr $eo_List))
  :signature ((Seq T) $eo_List $eo_List) Bool
  (
  (($str_is_multiset_subset_strict (_ (str.++ s) ss) xs nr) (eo::define ((_v0 (eo::list_erase $eo_List_cons xs s))) ($str_is_multiset_subset_strict.fev1 nr s xs ss ($str_is_multiset_subset_strict.fev2 nr s xs ss (eo::eq xs _v0)) _v0)))
  (($str_is_multiset_subset_strict emp xs (_ ($eo_List_cons s) nr)) ($str_is_multiset_subset_strict.fev3 nr xs emp s ($are_distinct_terms_list_rec s xs (eo::typeof s))))
  (($str_is_multiset_subset_strict emp xs nr) false)
  )
)
; program: $str_eval_replace_re.fev1
(program $str_eval_replace_re.fev1 ((s (Seq Char)) (ep Int) (sp Int) ($eo_2 (Seq Char)) (t (Seq Char)) ($eo_1 (Seq Char)))
  :signature ((Seq Char) Int (Seq Char) Int (Seq Char) (Seq Char)) (Seq Char)
  (
  (($str_eval_replace_re.fev1 s ep t sp $eo_1 $eo_2) (_ (str.++ $eo_2) (_ (str.++ t) (_ (str.++ $eo_1) ""))))
  )
)
; program: $str_eval_replace_re
(program $str_eval_replace_re ((r RegLan) (t (Seq Char)) (ep Int) (s (Seq Char)) (sp Int))
  :signature ((Seq Char) RegLan (Seq Char) (_ (@Pair Int) Int)) (Seq Char)
  (
  (($str_eval_replace_re s r t (_ (@pair -1) -1)) s)
  (($str_eval_replace_re s r t (_ (@pair sp) ep)) ($str_eval_replace_re.fev1 s ep t sp (eo::extract s ep (eo::len s)) (eo::extract s 0 (eo::add sp -1))))
  )
)
; fwd-decl: $str_eval_replace_re_all_rec
(program $str_eval_replace_re_all_rec ()
  :signature ((Seq Char) RegLan (Seq Char) (_ (@Pair Int) Int)) (Seq Char)
)
; program: $str_eval_replace_re_all_rec.fev2
(program $str_eval_replace_re_all_rec.fev2 ((t (Seq Char)) (sp Int) ($eo_4 (_ (@Pair Int) Int)) (r RegLan) (ep Int) (s (Seq Char)))
  :signature ((Seq Char) Int RegLan (Seq Char) Int (_ (@Pair Int) Int) (_ (@Pair Int) Int)) (_ (@Pair Int) Int)
  (
  (($str_eval_replace_re_all_rec.fev2 s ep r t sp $eo_4 $eo_4) (eo::define ((_v0 (eo::extract s ep (eo::len s)))) ($str_first_match_rec _v0 r (_ (re.++ r) (_ (re.++ re.all) (str.to_re ""))) 0 (eo::len _v0))))
  )
)
; program: $str_eval_replace_re_all_rec.fev1
(program $str_eval_replace_re_all_rec.fev1 ((s (Seq Char)) (ep Int) (sp Int) ($eo_3 (Seq Char)) ($eo_2 (Seq Char)) (r RegLan) (t (Seq Char)) ($eo_1 (_ (@Pair Int) Int)))
  :signature ((Seq Char) Int RegLan (Seq Char) Int (_ (@Pair Int) Int) (Seq Char) (Seq Char)) (Seq Char)
  (
  (($str_eval_replace_re_all_rec.fev1 s ep r t sp $eo_1 $eo_2 $eo_3) (eo::cons str.++ $eo_3 (eo::cons str.++ t ($str_eval_replace_re_all_rec $eo_2 r t $eo_1))))
  )
)
; program: $str_eval_replace_re_all_rec
(program $str_eval_replace_re_all_rec ((r RegLan) (t (Seq Char)) (ep Int) (s (Seq Char)) (sp Int))
  :signature ((Seq Char) RegLan (Seq Char) (_ (@Pair Int) Int)) (Seq Char)
  (
  (($str_eval_replace_re_all_rec "" r t (_ (@pair -1) -1)) "")
  (($str_eval_replace_re_all_rec s r t (_ (@pair -1) -1)) (eo::cons str.++ s ""))
  (($str_eval_replace_re_all_rec s r t (_ (@pair sp) ep)) (eo::define ((_v0 (eo::extract s ep (eo::len s)))) ($str_eval_replace_re_all_rec.fev1 s ep r t sp ($str_eval_replace_re_all_rec.fev2 s ep r t sp (eo::is_str _v0) true) _v0 (eo::extract s 0 (eo::add sp -1)))))
  )
)
; fwd-decl: $seq_is_prefix
(program $seq_is_prefix ((T Type))
  :signature ((Seq T) (Seq T)) Bool
)
; program: $seq_is_prefix.fev2
(program $seq_is_prefix.fev2 ((T Type) (es T) (et T))
  :signature (T T Bool) Bool
  (
  (($seq_is_prefix.fev2 et es true) false)
  (($seq_is_prefix.fev2 et es false) ($are_distinct_terms_list (_ ($eo_List_cons et) (_ ($eo_List_cons es) $eo_List_nil)) (eo::typeof et)))
  )
)
; program: $seq_is_prefix.fev3
(program $seq_is_prefix.fev3 (($eo_1 Bool) ($eo_3 Bool))
  :signature (Bool Bool Bool) Bool
  (
  (($seq_is_prefix.fev3 $eo_1 $eo_3 $eo_3) false)
  )
)
; program: $seq_is_prefix.fev1
(program $seq_is_prefix.fev1 ((T Type) (et T) (es T) ($eo_1 Bool))
  :signature (T T Bool) Bool
  (
  (($seq_is_prefix.fev1 et es $eo_1) ($seq_is_prefix.fev3 $eo_1 $eo_1 true))
  )
)
; program: $seq_is_prefix
(program $seq_is_prefix ((T Type) (ss (Seq T)) (es T) (t (Seq T)) (et T) (ts (Seq T)))
  :signature ((Seq T) (Seq T)) Bool
  (
  (($seq_is_prefix t t) true)
  ((eo::define ((_v0 (str.++ t))) ($seq_is_prefix (_ _v0 ts) (_ _v0 ss))) ($seq_is_prefix ts ss))
  (($seq_is_prefix (_ (str.++ (seq.unit et)) ts) (_ (str.++ (seq.unit es)) ss)) ($seq_is_prefix.fev1 et es ($seq_is_prefix.fev2 et es (eo::eq et es))))
  (($seq_is_prefix (as seq.empty (Seq T)) t) true)
  (($seq_is_prefix (_ (str.++ (seq.unit et)) ts) (as seq.empty (Seq T))) false)
  )
)
; fwd-decl: $seq_find
(program $seq_find ((T Type))
  :signature ((Seq T) (Seq T) Int) Int
)
; program: $seq_find.fev1
(program $seq_find.fev1 ((T Type) (t (Seq T)) (ts (Seq T)) (s (Seq T)) (n Int))
  :signature (Int (Seq T) (Seq T) (Seq T) Bool) Int
  (
  (($seq_find.fev1 n s ts t true) n)
  (($seq_find.fev1 n s ts t false) ($seq_find ts s (eo::add n 1)))
  )
)
; program: $seq_find
(program $seq_find ((T Type) (n Int) (t (Seq T)) (ts (Seq T)) (s (Seq T)))
  :signature ((Seq T) (Seq T) Int) Int
  (
  (($seq_find t t n) n)
  (($seq_find (as seq.empty (Seq T)) s n) -1)
  (($seq_find (_ (str.++ t) ts) s n) ($seq_find.fev1 n s ts t ($seq_is_prefix (_ (str.++ t) ts) s)))
  )
)
; fwd-decl: $seq_subsequence
(program $seq_subsequence ((T Type))
  :signature (Int Int (Seq T)) (Seq T)
)
; program: $seq_subsequence.fev1
(program $seq_subsequence.fev1 ((T Type) ($eoT.fev2 Type) (t (Seq T)) ($eo_1 Type))
  :signature ((Seq T) Type) $eoT.fev2
  (
  (($seq_subsequence.fev1 t $eo_1) (as seq.empty $eo_1))
  )
)
; program: $seq_subsequence
(program $seq_subsequence ((T Type) (t (Seq T)) (e T) (l Int) (u Int) (ts (Seq T)))
  :signature (Int Int (Seq T)) (Seq T)
  (
  (($seq_subsequence l u (as seq.empty (Seq T))) (as seq.empty (Seq T)))
  (($seq_subsequence l 0 t) ($seq_subsequence.fev1 t (eo::typeof t)))
  (($seq_subsequence 0 u (_ (str.++ (seq.unit e)) ts)) (eo::cons str.++ (seq.unit e) ($seq_subsequence 0 (eo::add u -1) ts)))
  (($seq_subsequence l u (_ (str.++ (seq.unit e)) ts)) ($seq_subsequence (eo::add l -1) (eo::add u -1) ts))
  )
)
; program: $seq_eval_replace_all_rec
(program $seq_eval_replace_all_rec ((T Type) (u (Seq T)) (n Int) (s (Seq T)) (t (Seq T)) (lent Int))
  :signature ((Seq T) (Seq T) (Seq T) Int Int) (Seq T)
  (
  (($seq_eval_replace_all_rec s t u -1 lent) s)
  (($seq_eval_replace_all_rec s t u n lent) (eo::define ((_v0 ($seq_subsequence (eo::add n lent) ($str_value_len s) s))) (eo::list_concat str.++ ($seq_subsequence 0 n s) (eo::list_concat str.++ u ($seq_eval_replace_all_rec _v0 t u ($seq_find _v0 t 0) lent)))))
  )
)
; fwd-decl: $seq_eval
(program $seq_eval ((T Type))
  :signature (T) T
)
; program: $seq_eval.fev2
(program $seq_eval.fev2 ((T Type) (r (Seq T)) (s (Seq T)) (t (Seq T)))
  :signature ((Seq T) (Seq T) (Seq T) Bool) (Seq T)
  (
  (($seq_eval.fev2 t s r true) t)
  (($seq_eval.fev2 t s r false) (eo::define ((_v0 ($str_nary_intro t))) (eo::define ((_v1 ($str_nary_intro s))) ($str_nary_elim ($seq_eval_replace_all_rec _v0 _v1 ($str_nary_intro r) ($seq_find _v1 _v0 0) ($str_value_len _v0))))))
  )
)
; program: $seq_eval.fev1
(program $seq_eval.fev1 ((T Type) (r (Seq T)) (s (Seq T)) (t (Seq T)))
  :signature ((Seq T) (Seq T) (Seq T) Bool) (Seq T)
  (
  (($seq_eval.fev1 t s r true) t)
  (($seq_eval.fev1 t s r false) (eo::define ((_v0 ($str_nary_intro t))) (eo::define ((_v1 ($str_nary_intro s))) (eo::define ((_v2 ($seq_find _v0 _v1 0))) ($str_nary_elim (eo::list_concat str.++ ($seq_subsequence 0 _v2 _v0) (eo::list_concat str.++ ($str_nary_intro r) ($seq_subsequence (eo::add _v2 ($str_value_len _v1)) ($str_value_len _v0) _v0))))))))
  )
)
; program: $seq_eval
(program $seq_eval ((T Type) (ts (Seq T)) (m Int) (r (Seq T)) (s (Seq T)) (n Int) (t (Seq T)))
  :signature (T) T
  (
  (($seq_eval (_ (seq.nth t) n)) ($seq_element_of_unit (eo::list_nth str.++ ($str_nary_intro t) n)))
  (($seq_eval (str.len t)) ($str_value_len ($str_nary_intro t)))
  (($seq_eval (_ (str.++ t) ts)) ($str_nary_elim (eo::list_concat str.++ ($str_nary_intro t) ($str_nary_intro ($seq_eval ts)))))
  (($seq_eval (_ (_ (str.substr t) n) m)) ($str_nary_elim ($seq_subsequence n (eo::add n m) ($str_nary_intro t))))
  (($seq_eval (_ (str.contains t) s)) (eo::not (eo::is_neg ($seq_find ($str_nary_intro t) ($str_nary_intro s) 0))))
  (($seq_eval (_ (_ (str.replace t) s) r)) ($seq_eval.fev1 t s r (eo::is_neg ($seq_find ($str_nary_intro t) ($str_nary_intro s) 0))))
  (($seq_eval (_ (_ (str.replace_all t) s) r)) ($seq_eval.fev2 t s r (eo::eq ($str_value_len s) 0)))
  (($seq_eval (_ (_ (str.indexof t) s) n)) (eo::define ((_v0 ($str_nary_intro t))) ($seq_find ($seq_subsequence n ($str_value_len _v0) _v0) ($str_nary_intro s) n)))
  (($seq_eval (_ (str.prefixof t) s)) ($seq_is_prefix ($str_nary_intro t) ($str_nary_intro s)))
  (($seq_eval (_ (str.suffixof t) s)) ($seq_is_prefix (eo::list_rev str.++ ($str_nary_intro t)) (eo::list_rev str.++ ($str_nary_intro s))))
  (($seq_eval (_ (str.at t) n)) ($seq_eval (_ (_ (str.substr t) n) 1)))
  (($seq_eval (str.rev t)) ($str_nary_elim (eo::list_rev str.++ ($str_nary_intro t))))
  (($seq_eval t) t)
  )
)
; program: $set_union_to_list
(program $set_union_to_list ((T Type) (t (Set T)) (e T))
  :signature ((Set T)) $eo_List
  (
  (($set_union_to_list (_ (set.union (set.singleton e)) t)) (eo::cons $eo_List_cons e ($set_union_to_list t)))
  (($set_union_to_list (as set.empty (Set T))) $eo_List_nil)
  (($set_union_to_list (set.singleton e)) (eo::cons $eo_List_cons e $eo_List_nil))
  )
)
; fwd-decl: $eval_sets_inter
(program $eval_sets_inter ()
  :signature ($eo_List $eo_List) $eo_List
)
; program: $eval_sets_inter.fev2
(program $eval_sets_inter.fev2 ((T Type) (a T) ($eo_3 $eo_List) (as $eo_List) (bs $eo_List))
  :signature ($eo_List $eo_List T $eo_List $eo_List) $eo_List
  (
  (($eval_sets_inter.fev2 bs as a $eo_3 $eo_3) ($eval_sets_inter as bs))
  )
)
; program: $eval_sets_inter.fev1
(program $eval_sets_inter.fev1 ((T Type) (a T) (as $eo_List) (bs $eo_List))
  :signature ($eo_List $eo_List T Bool) $eo_List
  (
  (($eval_sets_inter.fev1 bs as a true) ($eval_sets_inter.fev2 bs as a ($are_distinct_terms_list_rec a bs (eo::typeof a)) true))
  (($eval_sets_inter.fev1 bs as a false) (eo::cons $eo_List_cons a ($eval_sets_inter as bs)))
  )
)
; program: $eval_sets_inter
(program $eval_sets_inter ((as $eo_List) (T Type) (a T) (bs $eo_List))
  :signature ($eo_List $eo_List) $eo_List
  (
  (($eval_sets_inter (_ ($eo_List_cons a) as) bs) ($eval_sets_inter.fev1 bs as a (eo::is_neg (eo::list_find $eo_List_cons bs a))))
  (($eval_sets_inter $eo_List_nil bs) $eo_List_nil)
  )
)
; fwd-decl: $eval_sets_minus
(program $eval_sets_minus ()
  :signature ($eo_List $eo_List) $eo_List
)
; program: $eval_sets_minus.fev2
(program $eval_sets_minus.fev2 ((T Type) ($eo_3 T) (a T) (as $eo_List) (bs $eo_List))
  :signature ($eo_List $eo_List T T T) T
  (
  (($eval_sets_minus.fev2 bs as a $eo_3 $eo_3) (eo::cons $eo_List_cons a ($eval_sets_minus as bs)))
  )
)
; program: $eval_sets_minus.fev1
(program $eval_sets_minus.fev1 ((T Type) (a T) (as $eo_List) (bs $eo_List))
  :signature ($eo_List $eo_List T Bool) T
  (
  (($eval_sets_minus.fev1 bs as a true) ($eval_sets_minus.fev2 bs as a ($are_distinct_terms_list_rec a bs (eo::typeof a)) true))
  (($eval_sets_minus.fev1 bs as a false) ($eval_sets_minus as bs))
  )
)
; program: $eval_sets_minus
(program $eval_sets_minus ((as $eo_List) (T Type) (a T) (bs $eo_List))
  :signature ($eo_List $eo_List) $eo_List
  (
  (($eval_sets_minus (_ ($eo_List_cons a) as) bs) ($eval_sets_minus.fev1 bs as a (eo::is_neg (eo::list_find $eo_List_cons bs a))))
  (($eval_sets_minus $eo_List_nil bs) $eo_List_nil)
  )
)
; program: $eval_sets_op
(program $eval_sets_op ((T Type) (s (Set T)) (t (Set T)))
  :signature ((Set T)) $eo_List
  (
  (($eval_sets_op (_ (set.union s) t)) (eo::list_concat $eo_List_cons ($set_union_to_list s) ($set_union_to_list t)))
  (($eval_sets_op (_ (set.inter s) t)) ($eval_sets_inter ($set_union_to_list s) ($set_union_to_list t)))
  (($eval_sets_op (_ (set.minus s) t)) ($eval_sets_minus ($set_union_to_list s) ($set_union_to_list t)))
  )
)
; fwd-decl: $set_eval_insert
(program $set_eval_insert ((T Type))
  :signature ($eo_List (Set T)) (Set T)
)
; program: $set_eval_insert.fev1
(program $set_eval_insert.fev1 ((T Type) (t (Set T)) (xs $eo_List) (x T) ($eo_1 (Set T)))
  :signature ((Set T) $eo_List T (Set T)) (Set T)
  (
  (($set_eval_insert.fev1 t xs x $eo_1) (_ (set.union (set.singleton x)) $eo_1))
  )
)
; program: $set_eval_insert
(program $set_eval_insert ((T Type) (x T) (xs $eo_List) (t (Set T)))
  :signature ($eo_List (Set T)) (Set T)
  (
  (($set_eval_insert (_ ($eo_List_cons x) xs) t) ($set_eval_insert.fev1 t xs x ($set_eval_insert xs t)))
  (($set_eval_insert $eo_List_nil t) t)
  )
)
; declare: int_to_bv
(declare-parameterized-const int_to_bv ((w Int) ($eo_x_1 Int)) (BitVec w))
; declare: ubv_to_int
(declare-parameterized-const ubv_to_int ((m Int :implicit) ($eo_x_1 (BitVec m))) Int)
; declare: sbv_to_int
(declare-parameterized-const sbv_to_int ((m Int :implicit) ($eo_x_1 (BitVec m))) Int)
; program: $abconv_ubv_to_int_elim
(program $abconv_ubv_to_int_elim ((n Int) (b (BitVec n)) (i Int) (w Int) (p Int))
  :signature ((BitVec n) Int Int Int) Int
  (
  (($abconv_ubv_to_int_elim b w w p) 0)
  (($abconv_ubv_to_int_elim b i w p) (eo::cons + (_ (_ (ite (_ (= (_ (_ (extract i) i) b)) #b1)) p) 0) ($abconv_ubv_to_int_elim b (eo::add i 1) w (eo::mul p 2))))
  )
)
; fwd-decl: $abconv_int_to_bv_elim
(program $abconv_int_to_bv_elim ((w Int))
  :signature (Int (eo::quote w) Int) (BitVec w)
)
; program: $abconv_int_to_bv_elim.fev1
(program $abconv_int_to_bv_elim.fev1 (($eoT.fev1 Type) (w Int) (n Int) (p Int) ($eo_3 Int) ($eo_2 $eoT.fev1))
  :signature (Int Int Int $eoT.fev1 Int) (BitVec 1)
  (
  (($abconv_int_to_bv_elim.fev1 p w n $eo_2 $eo_3) (eo::cons concat (_ (_ (ite (_ (>= (_ (mod_total n) p)) $eo_3)) #b1) #b0) $eo_2))
  )
)
; program: $abconv_int_to_bv_elim
(program $abconv_int_to_bv_elim ((n Int) (w Int) (p Int))
  :signature (Int (eo::quote w) Int) (BitVec w)
  (
  (($abconv_int_to_bv_elim n 0 p) (eo::to_bin 0 0))
  (($abconv_int_to_bv_elim n w p) (eo::define ((_v0 (eo::zdiv p 2))) ($abconv_int_to_bv_elim.fev1 p w n ($abconv_int_to_bv_elim n (eo::add w -1) _v0) _v0)))
  )
)
; program: $mk_skolems
(program $mk_skolems ((x $eo_List) (xs $eo_List) (F Bool) (i Int))
  :signature ($eo_List Bool Int) $eo_List
  (
  (($mk_skolems (_ ($eo_List_cons x) xs) F i) (eo::cons $eo_List_cons (@quantifiers_skolemize F i) ($mk_skolems xs F (eo::add i 1))))
  (($mk_skolems $eo_List_nil F i) $eo_List_nil)
  )
)
; fwd-decl: $mk_quant_unused_vars_rec
(program $mk_quant_unused_vars_rec ()
  :signature ($eo_List Bool) $eo_List
)
; program: $mk_quant_unused_vars_rec.fev1
(program $mk_quant_unused_vars_rec.fev1 ((T Type) (x T) (xs $eo_List) (F Bool))
  :signature (Bool $eo_List T Bool) T
  (
  (($mk_quant_unused_vars_rec.fev1 F xs x true) (eo::cons $eo_List_cons x (eo::list_erase $eo_List_cons ($mk_quant_unused_vars_rec xs F) x)))
  (($mk_quant_unused_vars_rec.fev1 F xs x false) ($mk_quant_unused_vars_rec xs F))
  )
)
; program: $mk_quant_unused_vars_rec
(program $mk_quant_unused_vars_rec ((xs $eo_List) (F Bool) (T Type) (x T))
  :signature ($eo_List Bool) $eo_List
  (
  (($mk_quant_unused_vars_rec $eo_List_nil F) $eo_List_nil)
  (($mk_quant_unused_vars_rec (_ ($eo_List_cons x) xs) F) ($mk_quant_unused_vars_rec.fev1 F xs x ($contains_subterm F x)))
  )
)
; program: $mk_quant
(program $mk_quant ((Q (-> $eo_List (-> Bool Bool))) (x $eo_List) (F Bool))
  :signature ((-> $eo_List (-> Bool Bool)) $eo_List Bool) Bool
  (
  (($mk_quant Q $eo_List_nil F) F)
  (($mk_quant Q x F) (_ (Q x) F))
  )
)
; program: $mk_quant_merge_prenex
(program $mk_quant_merge_prenex ((x $eo_List) (Q (-> $eo_List (-> Bool Bool))) (y $eo_List) (F Bool))
  :signature ((-> $eo_List (-> Bool Bool)) Bool $eo_List) Bool
  (
  (($mk_quant_merge_prenex Q (_ (Q x) F) y) ($mk_quant_merge_prenex Q F (eo::list_concat $eo_List_cons y x)))
  (($mk_quant_merge_prenex Q F y) (_ (Q y) F))
  )
)
; program: $mk_quant_miniscope_and
(program $mk_quant_miniscope_and ((f Bool) (fs Bool) (x $eo_List))
  :signature ($eo_List Bool) Bool
  (
  (($mk_quant_miniscope_and x (_ (and f) fs)) (eo::cons and (_ (forall x) f) ($mk_quant_miniscope_and x fs)))
  (($mk_quant_miniscope_and x true) true)
  )
)
; fwd-decl: $is_quant_miniscope_or
(program $is_quant_miniscope_or ()
  :signature ($eo_List Bool Bool) Bool
)
; program: $is_quant_miniscope_or.fev3
(program $is_quant_miniscope_or.fev3 ((x $eo_List) ($eo_6 Bool) (xs $eo_List) (fs Bool) (ys $eo_List) (f Bool) (gs Bool))
  :signature (Bool Bool $eo_List Bool $eo_List $eo_List Bool Bool) Bool
  (
  (($is_quant_miniscope_or.fev3 gs f ys fs xs x $eo_6 $eo_6) ($is_quant_miniscope_or xs (_ (or f) fs) (_ (or (_ (forall ys) f)) gs)))
  )
)
; program: $is_quant_miniscope_or.fev2
(program $is_quant_miniscope_or.fev2 ((f Bool) ($eo_4 Bool) (x $eo_List) (fs Bool) (gs Bool))
  :signature (Bool Bool $eo_List Bool Bool Bool) Bool
  (
  (($is_quant_miniscope_or.fev2 gs fs x f $eo_4 $eo_4) ($is_quant_miniscope_or x fs gs))
  )
)
; program: $is_quant_miniscope_or.fev1
(program $is_quant_miniscope_or.fev1 ((f Bool) ($eo_2 Bool) (x $eo_List) (fs Bool) (gs Bool))
  :signature (Bool Bool $eo_List Bool Bool Bool) Bool
  (
  (($is_quant_miniscope_or.fev1 gs fs x f $eo_2 $eo_2) ($is_quant_miniscope_or x fs gs))
  )
)
; program: $is_quant_miniscope_or
(program $is_quant_miniscope_or ((ys $eo_List) (fs Bool) (xs $eo_List) (gs Bool) (x $eo_List) (f Bool) (g Bool))
  :signature ($eo_List Bool Bool) Bool
  (
  ((eo::define ((_v0 (or f))) ($is_quant_miniscope_or x (_ _v0 fs) (_ _v0 gs))) ($is_quant_miniscope_or.fev1 gs fs x f ($contains_aterm_list f x) false))
  (($is_quant_miniscope_or x (_ (or f) fs) (_ (or (_ (forall $eo_List_nil) f)) gs)) ($is_quant_miniscope_or.fev2 gs fs x f ($contains_aterm_list f x) false))
  ((eo::define ((_v0 ($eo_List_cons x))) ($is_quant_miniscope_or (_ _v0 xs) (_ (or f) fs) (_ (or (_ (forall (_ _v0 ys)) f)) gs))) ($is_quant_miniscope_or.fev3 gs f ys fs xs x ($contains_subterm gs x) false))
  (($is_quant_miniscope_or $eo_List_nil false false) true)
  (($is_quant_miniscope_or x f g) false)
  )
)
; program: $mk_quant_var_elim_eq.fev2
(program $mk_quant_var_elim_eq.fev2 ((T Type) ($eo_4 Bool) (x T) (t T) (F Bool))
  :signature (Bool T T Bool Bool) Bool
  (
  (($mk_quant_var_elim_eq.fev2 F t x $eo_4 $eo_4) ($substitute x t ($singleton_elim F)))
  )
)
; program: $mk_quant_var_elim_eq.fev1
(program $mk_quant_var_elim_eq.fev1 ((T Type) ($eo_2 Bool) (x T) (t T))
  :signature (T T Bool Bool) Bool
  (
  (($mk_quant_var_elim_eq.fev1 t x $eo_2 $eo_2) ($substitute x t false))
  )
)
; program: $mk_quant_var_elim_eq
(program $mk_quant_var_elim_eq ((T Type) (F Bool) (t T) (x T))
  :signature (T Bool) Bool
  (
  (($mk_quant_var_elim_eq x (not (_ (= x) t))) ($mk_quant_var_elim_eq.fev1 t x ($contains_subterm t x) false))
  (($mk_quant_var_elim_eq x (_ (or (not (_ (= x) t))) F)) ($mk_quant_var_elim_eq.fev2 F t x ($contains_subterm t x) false))
  )
)
; fwd-decl: $is_quant_dt_split_conj
(program $is_quant_dt_split_conj ((T Type) (C Type))
  :signature (T C $eo_List Bool Bool) Bool
)
; program: $is_quant_dt_split_conj.fev2
(program $is_quant_dt_split_conj.fev2 ((U Type) (W Type) (T Type) ($eo_4 Bool) (x T) (c (-> U W)) (y U) (F Bool) (zs $eo_List) (G Bool))
  :signature (Bool $eo_List Bool U (-> U W) T Bool Bool) Bool
  (
  (($is_quant_dt_split_conj.fev2 G zs F y c x $eo_4 $eo_4) ($is_quant_dt_split_conj x (c y) $eo_List_nil F (_ (forall zs) G)))
  )
)
; program: $is_quant_dt_split_conj.fev1
(program $is_quant_dt_split_conj.fev1 ((W Type) (T Type) (U Type) (y U) ($eo_2 Bool) (x T) (c (-> U W)) (ys $eo_List) (F Bool) (zs $eo_List) (G Bool))
  :signature (Bool $eo_List Bool $eo_List (-> U W) T U Bool Bool) Bool
  (
  (($is_quant_dt_split_conj.fev1 G zs F ys c x y $eo_2 $eo_2) ($is_quant_dt_split_conj x c ys F (_ (forall zs) G)))
  )
)
; program: $is_quant_dt_split_conj
(program $is_quant_dt_split_conj ((T Type) (C Type) (ys $eo_List) (zs $eo_List) (U Type) (y U) (W Type) (c (-> U W)) (x T) (cx T) (F Bool) (G Bool))
  :signature (T C $eo_List Bool Bool) Bool
  (
  ((eo::define ((_v0 ($eo_List_cons y))) ($is_quant_dt_split_conj x c (_ _v0 ys) F (_ (forall (_ _v0 zs)) G))) ($is_quant_dt_split_conj.fev1 G zs F ys c x y ($contains_subterm zs y) false))
  (($is_quant_dt_split_conj x c $eo_List_nil F (_ (forall (_ ($eo_List_cons y) zs)) G)) ($is_quant_dt_split_conj.fev2 G zs F y c x ($contains_subterm zs y) false))
  (($is_quant_dt_split_conj x c $eo_List_nil F (_ (forall $eo_List_nil) G)) ($is_quant_dt_split_conj x c $eo_List_nil F G))
  (($is_quant_dt_split_conj x cx $eo_List_nil F G) (eo::eq ($substitute x cx F) G))
  )
)
; fwd-decl: $is_quant_dt_split
(program $is_quant_dt_split ((T Type))
  :signature (T $eo_List $eo_List Bool Bool) Bool
)
; program: $is_quant_dt_split.fev1
(program $is_quant_dt_split.fev1 ((T Type) (C Type) (g Bool) (c C) ($eo_2 Bool) (x T) (cs $eo_List) (ys $eo_List) (F Bool) (G Bool))
  :signature (Bool Bool $eo_List $eo_List T Bool C Bool Bool) Bool
  (
  (($is_quant_dt_split.fev1 G F ys cs x g c $eo_2 $eo_2) ($is_quant_dt_split x cs ys F G))
  )
)
; program: $is_quant_dt_split
(program $is_quant_dt_split ((T Type) (G Bool) (C Type) (c C) (x T) (cs $eo_List) (ys $eo_List) (F Bool) (g Bool))
  :signature (T $eo_List $eo_List Bool Bool) Bool
  (
  (($is_quant_dt_split x (_ ($eo_List_cons c) cs) ys F (_ (and g) G)) ($is_quant_dt_split.fev1 G F ys cs x g c ($is_quant_dt_split_conj x c ys F g) true))
  (($is_quant_dt_split x $eo_List_nil ys F true) true)
  (($is_quant_dt_split x cs ys F g) ($is_quant_dt_split x cs ys F (_ (and g) true)))
  )
)
; fwd-decl: $mk_inv_cond_op_disj
(program $mk_inv_cond_op_disj ((n Int))
  :signature ((eo::define ((_v0 (BitVec n))) (-> _v0 _v0)) (BitVec n) Int Int) Bool
)
; program: $mk_inv_cond_op_disj.fev2
(program $mk_inv_cond_op_disj.fev2 (($eoT.fev5 Type) ($eoT.fev7 Type) (n Int) (w Int) (f (eo::define ((_v0 (BitVec n))) (-> _v0 _v0))) ($eo_6 $eoT.fev5) (t (BitVec n)) ($eo_4 Bool))
  :signature (Int Int (BitVec n) (eo::define ((_v0 (BitVec n))) (-> _v0 _v0)) Bool $eoT.fev5) $eoT.fev7
  (
  (($mk_inv_cond_op_disj.fev2 n w t f $eo_4 $eo_6) (eo::cons or (_ (= (f $eo_6)) t) $eo_4))
  )
)
; program: $mk_inv_cond_op_disj.fev1
(program $mk_inv_cond_op_disj.fev1 ((n Int) ($eoT.fev1 Type) ($eoT.fev3 Type) (w Int) (f (eo::define ((_v0 (BitVec n))) (-> _v0 _v0))) ($eo_2 $eoT.fev1) (t (BitVec n)))
  :signature ((BitVec n) Int (eo::define ((_v0 (BitVec n))) (-> _v0 _v0)) $eoT.fev1) $eoT.fev3
  (
  (($mk_inv_cond_op_disj.fev1 t w f $eo_2) (eo::cons or (_ (= (f $eo_2)) t) false))
  )
)
; program: $mk_inv_cond_op_disj
(program $mk_inv_cond_op_disj ((n Int) (f (eo::define ((_v0 (BitVec n))) (-> _v0 _v0))) (t (BitVec n)) (w Int))
  :signature ((eo::define ((_v0 (BitVec n))) (-> _v0 _v0)) (BitVec n) Int Int) Bool
  (
  (($mk_inv_cond_op_disj f t w w) ($mk_inv_cond_op_disj.fev1 t w f (eo::to_bin w w)))
  (($mk_inv_cond_op_disj f t w n) ($mk_inv_cond_op_disj.fev2 n w t f ($mk_inv_cond_op_disj f t w (eo::add n 1)) (eo::to_bin w n)))
  )
)
; program: $mk_invertibility_condition.fev5
(program $mk_invertibility_condition.fev5 ((k Int) ($eoT.fev18 Type) ($eoT.fev22 Type) ($eoT.fev24 Type) (m Int) ($eo_23 $eoT.fev22) ($eo_21 Int) ($eo_20 Int) (tk (BitVec k)) ($eo_19 $eoT.fev18))
  :signature (Int (BitVec k) $eoT.fev18 Int Int $eoT.fev22) $eoT.fev24
  (
  (($mk_invertibility_condition.fev5 m tk $eo_19 $eo_20 $eo_21 $eo_23) (eo::define ((_v0 (= (_ (_ (extract $eo_21) $eo_20) tk)))) (_ (or (_ _v0 $eo_23)) (_ (or (_ _v0 $eo_19)) false))))
  )
)
; program: $mk_invertibility_condition.fev4
(program $mk_invertibility_condition.fev4 ((n Int) ($eoT.fev11 Type) ($eoT.fev13 Type) ($eoT.fev15 Type) ($eoT.fev17 Type) (x (BitVec n)) (s (BitVec n)) ($eo_16 $eoT.fev15) ($eo_14 $eoT.fev13) (t (BitVec n)) ($eo_12 $eoT.fev11))
  :signature ((BitVec n) (BitVec n) (BitVec n) $eoT.fev11 $eoT.fev13 $eoT.fev15) $eoT.fev17
  (
  (($mk_invertibility_condition.fev4 x t s $eo_12 $eo_14 $eo_16) (eo::define ((_v0 (= t))) (eo::define ((_v1 (_ (bvult s) $eo_16))) (_ (and (_ (=> _v1) (_ (= (_ (bvashr (_ (bvshl t) s)) s)) t))) (_ (and (_ (=> (not _v1)) (_ (or (_ _v0 $eo_14)) (_ (or (_ _v0 $eo_12)) false)))) true)))))
  )
)
; program: $mk_invertibility_condition.fev6
(program $mk_invertibility_condition.fev6 ((n Int) ($eoT.fev8 Type) ($eoT.fev25 Type) ($eoT.fev27 Type) ($eo_9 $eoT.fev8) (s (BitVec n)) ($eo_26 $eoT.fev25) (t (BitVec n)))
  :signature ((BitVec n) (BitVec n) $eoT.fev8 $eoT.fev25) $eoT.fev27
  (
  (($mk_invertibility_condition.fev6 t s $eo_9 $eo_26) (eo::define ((_v0 (bvadd t))) (_ (bvuge (_ (bvand (_ (bvsub (_ _v0 (_ _v0 $eo_9))) s)) (_ (bvand s) $eo_26))) t)))
  )
)
; program: $mk_invertibility_condition.fev3
(program $mk_invertibility_condition.fev3 ((n Int) ($eoT.fev8 Type) ($eoT.fev10 Type) (t (BitVec n)) ($eo_9 $eoT.fev8) (s (BitVec n)))
  :signature ((BitVec n) (BitVec n) $eoT.fev8) $eoT.fev10
  (
  (($mk_invertibility_condition.fev3 t s $eo_9) (eo::define ((_v0 (bvadd t))) ($mk_invertibility_condition.fev6 t s $eo_9 (eo::nil bvand (eo::typeof (_ (bvsub (_ _v0 (_ _v0 $eo_9))) s))))))
  )
)
; program: $mk_invertibility_condition.fev2
(program $mk_invertibility_condition.fev2 ((n Int) ($eoT.fev5 Type) ($eoT.fev7 Type) ($eo_6 $eoT.fev5) (s (BitVec n)) (t (BitVec n)))
  :signature ((BitVec n) (BitVec n) $eoT.fev5) $eoT.fev7
  (
  (($mk_invertibility_condition.fev2 t s $eo_6) (_ (= (_ (bvudiv (_ (bvmul s) (_ (bvmul t) $eo_6))) s)) t))
  )
)
; program: $mk_invertibility_condition.fev8
(program $mk_invertibility_condition.fev8 (($eoT.fev28 Type) (n Int) ($eoT.fev31 Type) ($eoT.fev33 Type) (s (BitVec n)) ($eo_29 $eoT.fev28) ($eo_32 $eoT.fev31) (t (BitVec n)))
  :signature ((BitVec n) $eoT.fev28 (BitVec n) $eoT.fev31) $eoT.fev33
  (
  (($mk_invertibility_condition.fev8 t $eo_29 s $eo_32) (_ (= (_ (bvand (_ (bvor (bvneg s)) (_ (bvor s) $eo_29))) (_ (bvand t) $eo_32))) t))
  )
)
; program: $mk_invertibility_condition.fev7
(program $mk_invertibility_condition.fev7 ((n Int) ($eoT.fev28 Type) ($eoT.fev30 Type) (t (BitVec n)) (s (BitVec n)) ($eo_29 $eoT.fev28))
  :signature ((BitVec n) (BitVec n) $eoT.fev28) $eoT.fev30
  (
  (($mk_invertibility_condition.fev7 t s $eo_29) ($mk_invertibility_condition.fev8 t $eo_29 s (eo::nil bvand (eo::typeof (_ (bvor (bvneg s)) (_ (bvor s) $eo_29))))))
  )
)
; program: $mk_invertibility_condition.fev1
(program $mk_invertibility_condition.fev1 ((n Int) ($eoT.fev3 Type) (nil (BitVec n)) ($eo_4 $eoT.fev3) (t (BitVec n)) (s (BitVec n)))
  :signature ((BitVec n) (BitVec n) (BitVec n) $eoT.fev3 $eoT.fev3) $eoT.fev3
  (
  (($mk_invertibility_condition.fev1 t s nil $eo_4 $eo_4) ($mk_invertibility_condition.fev7 t s (eo::nil bvor (eo::typeof (bvneg s)))))
  )
)
; program: $mk_invertibility_condition
(program $mk_invertibility_condition ((n Int) (nil (BitVec n)) (ss (BitVec n)) (s (BitVec n)) (t (BitVec n)) (x (BitVec n)) (k Int) (tk (BitVec k)) (m Int))
  :signature ((BitVec n) Bool) Bool
  (
  (($mk_invertibility_condition x (_ (= (_ (bvmul x) (_ (bvmul s) nil))) t)) ($mk_invertibility_condition.fev1 t s nil (eo::to_z nil) 1))
  (($mk_invertibility_condition x (_ (= (_ (bvudiv x) s)) t)) ($mk_invertibility_condition.fev2 t s (eo::nil bvmul (eo::typeof s))))
  (($mk_invertibility_condition x (_ (= (_ (bvudiv s) x)) t)) (eo::define ((_v0 (bvudiv s))) (_ (= (_ _v0 (_ _v0 t))) t)))
  (($mk_invertibility_condition x (_ (= (_ (bvurem x) s)) t)) (_ (bvuge (bvnot (bvneg s))) t))
  (($mk_invertibility_condition x (_ (= (_ (bvurem s) x)) t)) ($mk_invertibility_condition.fev3 t s (eo::nil bvadd (eo::typeof t))))
  (($mk_invertibility_condition x (_ (= (_ (bvor x) ss)) t)) (_ (= t) (_ (bvor t) ss)))
  (($mk_invertibility_condition x (_ (= (_ (bvand x) ss)) t)) (_ (= t) (_ (bvand t) ss)))
  (($mk_invertibility_condition x (_ (= (_ (bvashr x) s)) t)) (eo::define ((_v0 ($bv_bitwidth (eo::typeof x)))) (eo::define ((_v1 (eo::to_bin _v0 0))) ($mk_invertibility_condition.fev4 x t s _v1 (eo::not _v1) (eo::to_bin _v0 _v0)))))
  (($mk_invertibility_condition x (_ (= (_ (bvashr s) x)) t)) (eo::cons or (_ (= s) t) ($mk_inv_cond_op_disj (bvashr s) t ($bv_bitwidth (eo::typeof x)) 1)))
  (($mk_invertibility_condition x (_ (= (_ (bvshl x) s)) t)) (_ (= (_ (bvshl (_ (bvlshr t) s)) s)) t))
  (($mk_invertibility_condition x (_ (= (_ (bvshl s) x)) t)) (eo::cons or (_ (= s) t) ($mk_inv_cond_op_disj (bvshl s) t ($bv_bitwidth (eo::typeof x)) 1)))
  (($mk_invertibility_condition x (_ (= (_ (bvlshr x) s)) t)) (_ (= (_ (bvlshr (_ (bvshl t) s)) s)) t))
  (($mk_invertibility_condition x (_ (= (_ (bvlshr s) x)) t)) (eo::cons or (_ (= s) t) ($mk_inv_cond_op_disj (bvlshr s) t ($bv_bitwidth (eo::typeof x)) 1)))
  (($mk_invertibility_condition x (_ (= (_ (sign_extend m) x)) tk)) (eo::define ((_v0 (eo::to_bin (eo::add m 1) 0))) (eo::define ((_v1 (eo::add ($bv_bitwidth (eo::typeof tk)) -1))) ($mk_invertibility_condition.fev5 m tk (eo::not _v0) (eo::add _v1 (eo::neg m)) _v1 _v0))))
  )
)
; program: $mk_dt_split
(program $mk_dt_split ((D Type) (T Type) (c T) (xs $eo_List) (x D))
  :signature ($eo_List D) Bool
  (
  (($mk_dt_split $eo_List_nil x) false)
  (($mk_dt_split (_ ($eo_List_cons c) xs) x) (eo::cons or (_ (is c) x) ($mk_dt_split xs x)))
  )
)
; program: $mk_dt_inst_rec
(program $mk_dt_inst_rec ((T Type) (D Type) (tb D) (xs $eo_List) (U Type) (t (-> T U)) (s (-> D T)) (x D))
  :signature ($eo_List D T) D
  (
  (($mk_dt_inst_rec $eo_List_nil x tb) tb)
  (($mk_dt_inst_rec (_ ($eo_List_cons s) xs) x t) ($mk_dt_inst_rec xs x (t (s x))))
  )
)
; program: $mk_dt_inst_tuple_rec
(program $mk_dt_inst_tuple_rec ((D Type) (U Type) (T1 Type) (T2 Type) (x D) (n Int))
  :signature ((eo::quote U) D Int) U
  (
  (($mk_dt_inst_tuple_rec UnitTuple x n) tuple.unit)
  (($mk_dt_inst_tuple_rec (_ (Tuple T1) T2) x n) (eo::cons tuple (_ (tuple.select n) x) ($mk_dt_inst_tuple_rec T2 x (eo::add n 1))))
  )
)
; program: $mk_dt_inst
(program $mk_dt_inst ((C Type) (T1 Type) (T2 Type) (xt (_ (Tuple T1) T2)) (xu UnitTuple) (D Type) (x D) (c C))
  :signature (Type C D) D
  (
  (($mk_dt_inst (_ (Tuple T1) T2) tuple xt) ($mk_dt_inst_tuple_rec (_ (Tuple T1) T2) xt 0))
  (($mk_dt_inst UnitTuple tuple.unit xu) tuple.unit)
  (($mk_dt_inst D c x) ($mk_dt_inst_rec ($dt_get_selectors D c) x ($assoc_nil_nth $eo_List_cons (eo::dt_constructors D) (eo::list_find $eo_List_cons ($dt_get_constructors D) c))))
  )
)
; program: $mk_dt_cons_eq
(program $mk_dt_cons_eq ((T Type) (W Type) (as W) (bs W) (U Type) (f (-> U T)) (g (-> U T)) (a U) (b U) (c T))
  :signature (T T) Bool
  (
  (($mk_dt_cons_eq (_ (tuple a) as) (_ (tuple b) bs)) (eo::cons and (_ (= a) b) ($mk_dt_cons_eq as bs)))
  (($mk_dt_cons_eq (f a) (g b)) (eo::list_concat and ($mk_dt_cons_eq f g) (_ (and (_ (= a) b)) true)))
  (($mk_dt_cons_eq c c) true)
  )
)
; fwd-decl: $dt_find_cycle_list
(program $dt_find_cycle_list ()
  :signature ($eo_List $eo_List) Bool
)
; fwd-decl: $dt_find_cycle_rec
(program $dt_find_cycle_rec ((T Type))
  :signature (T $eo_List $eo_List) Bool
)
; program: $dt_find_cycle_rec.fev2
(program $dt_find_cycle_rec.fev2 ((T Type) (s $eo_List) (l $eo_List) (c T))
  :signature ($eo_List $eo_List T Bool) Bool
  (
  (($dt_find_cycle_rec.fev2 s l c true) true)
  (($dt_find_cycle_rec.fev2 s l c false) (eo::is_ok (eo::dt_selectors c)))
  )
)
; program: $dt_find_cycle_rec.fev3
(program $dt_find_cycle_rec.fev3 ((s $eo_List) (l $eo_List) ($eo_1 Bool))
  :signature ($eo_List $eo_List Bool Bool) Bool
  (
  (($dt_find_cycle_rec.fev3 s l $eo_1 true) ($dt_find_cycle_list l s))
  (($dt_find_cycle_rec.fev3 s l $eo_1 false) false)
  )
)
; program: $dt_find_cycle_rec.fev1
(program $dt_find_cycle_rec.fev1 ((T Type) (c T) (s $eo_List) (l $eo_List) ($eo_1 Bool))
  :signature ($eo_List $eo_List T Bool) Bool
  (
  (($dt_find_cycle_rec.fev1 s l c $eo_1) ($dt_find_cycle_rec.fev3 s l $eo_1 $eo_1))
  )
)
; program: $dt_find_cycle_rec
(program $dt_find_cycle_rec ((T Type) (U Type) (W Type) (f (-> U W)) (a U) (s $eo_List) (l $eo_List) (c T))
  :signature (T $eo_List $eo_List) Bool
  (
  (($dt_find_cycle_rec (f a) s l) ($dt_find_cycle_rec f s (eo::cons $eo_List_cons a l)))
  (($dt_find_cycle_rec c s l) ($dt_find_cycle_rec.fev1 s l c ($dt_find_cycle_rec.fev2 s l c (eo::is_eq c tuple))))
  )
)
; fwd-decl: $dt_find_cycle_list
(program $dt_find_cycle_list ()
  :signature ($eo_List $eo_List) Bool
)
; program: $dt_find_cycle_list.fev1
(program $dt_find_cycle_list.fev1 ((U Type) (t U) (ts $eo_List) (ss $eo_List))
  :signature ($eo_List $eo_List U Bool) Bool
  (
  (($dt_find_cycle_list.fev1 ss ts t true) true)
  (($dt_find_cycle_list.fev1 ss ts t false) ($dt_find_cycle_list ts ss))
  )
)
; program: $dt_find_cycle_list
(program $dt_find_cycle_list ((U Type) (s U) (ts $eo_List) (t U) (ss $eo_List))
  :signature ($eo_List $eo_List) Bool
  (
  ((eo::define ((_v0 ($eo_List_cons s))) ($dt_find_cycle_list (_ _v0 ts) (_ _v0 $eo_List_nil))) true)
  (($dt_find_cycle_list (_ ($eo_List_cons t) ts) ss) ($dt_find_cycle_list.fev1 ss ts t ($dt_find_cycle_rec t ss $eo_List_nil)))
  (($dt_find_cycle_list $eo_List_nil ss) false)
  )
)
; fwd-decl: $dt_collapse_updater_rhs
(program $dt_collapse_updater_rhs ((T Type) (U Type))
  :signature (U T Int) U
)
; program: $dt_collapse_updater_rhs.fev1
(program $dt_collapse_updater_rhs.fev1 ((T Type) (U Type) (n Int) (a T) (f (-> T U)) ($eo_1 (-> T U)) (x T))
  :signature (T Int T (-> T U) (-> T U)) U
  (
  (($dt_collapse_updater_rhs.fev1 x n a f $eo_1) ($eo_1 x))
  )
)
; program: $dt_collapse_updater_rhs
(program $dt_collapse_updater_rhs ((T Type) (U Type) (x T) (f (-> T U)) (a T) (n Int))
  :signature (U T Int) U
  (
  (($dt_collapse_updater_rhs (f x) a 0) (f a))
  (($dt_collapse_updater_rhs (f x) a n) ($dt_collapse_updater_rhs.fev1 x n a f ($dt_collapse_updater_rhs f a (eo::add n -1))))
  )
)
; program: $tuple_collapse_updater_rhs
(program $tuple_collapse_updater_rhs ((T Type) (U Type) (b T) (W Type) (ts W) (a T) (n Int))
  :signature (U T Int) U
  (
  (($tuple_collapse_updater_rhs (_ (tuple b) ts) a 0) (_ (tuple a) ts))
  (($tuple_collapse_updater_rhs (_ (tuple b) ts) a n) (eo::cons tuple b ($tuple_collapse_updater_rhs ts a (eo::add n -1))))
  (($tuple_collapse_updater_rhs tuple.unit a n) tuple.unit)
  )
)
; program: $mk_dt_collapse_updater_rhs.fev1
(program $mk_dt_collapse_updater_rhs.fev1 ((T Type) (U Type) (D Type) (a U) (t D) (s (-> D T)))
  :signature ((-> D T) D U Bool) D
  (
  (($mk_dt_collapse_updater_rhs.fev1 s t a true) t)
  (($mk_dt_collapse_updater_rhs.fev1 s t a false) ($dt_collapse_updater_rhs t a (eo::add -1 (eo::list_find $eo_List_cons ($dt_get_selectors_of_app (eo::typeof t) t) s))))
  )
)
; program: $mk_dt_collapse_updater_rhs
(program $mk_dt_collapse_updater_rhs ((D Type) (T Type) (s (-> D T)) (t D) (U Type) (a U) (n Int))
  :signature (D) D
  (
  (($mk_dt_collapse_updater_rhs (_ (_ (update s) t) a)) ($mk_dt_collapse_updater_rhs.fev1 s t a (eo::is_neg (eo::list_find $eo_List_cons ($dt_get_selectors_of_app (eo::typeof t) t) s))))
  (($mk_dt_collapse_updater_rhs (_ (_ (tuple.update n) t) a)) ($tuple_collapse_updater_rhs t a n))
  )
)
; program: $dt_updater_elim_rhs
(program $dt_updater_elim_rhs ((X Type) (D Type) (ss $eo_List) (U Type) (W Type) (c (-> U W)) (T Type) (s1 (-> D T)) (s (-> D T)) (t D) (a T) (cd D))
  :signature (D $eo_List X) D
  (
  (($dt_updater_elim_rhs (_ (_ (update s) t) a) (_ ($eo_List_cons s) ss) c) ($dt_updater_elim_rhs (_ (_ (update s) t) a) ss (c a)))
  (($dt_updater_elim_rhs (_ (_ (update s) t) a) (_ ($eo_List_cons s1) ss) c) ($dt_updater_elim_rhs (_ (_ (update s) t) a) ss (c (s1 t))))
  (($dt_updater_elim_rhs (_ (_ (update s) t) a) $eo_List_nil cd) cd)
  )
)
; program: $tuple_updater_elim_rhs
(program $tuple_updater_elim_rhs ((D Type) (T Type) (s (-> D T)) (t D) (ss $eo_List) (n Int) (tu UnitTuple) (a T))
  :signature (D $eo_List) D
  (
  (($tuple_updater_elim_rhs (_ (_ (tuple.update n) t) a) (_ ($eo_List_cons (tuple.select n)) ss)) (eo::cons tuple a ($tuple_updater_elim_rhs (_ (_ (tuple.update n) t) a) ss)))
  (($tuple_updater_elim_rhs (_ (_ (tuple.update n) t) a) (_ ($eo_List_cons s) ss)) (eo::cons tuple (s t) ($tuple_updater_elim_rhs (_ (_ (tuple.update n) t) a) ss)))
  (($tuple_updater_elim_rhs (_ (_ (tuple.update n) tu) a) $eo_List_nil) tuple.unit)
  )
)
; program: $mk_dt_updater_elim_rhs
(program $mk_dt_updater_elim_rhs ((U Type) (D Type) (T Type) (s (-> D T)) (c U) (n Int) (t D) (a T) (ss $eo_List))
  :signature (D U $eo_List) D
  (
  (($mk_dt_updater_elim_rhs (_ (_ (update s) t) a) c ss) (eo::define ((_v0 (eo::typeof t))) ($dt_updater_elim_rhs (_ (_ (update s) t) a) ss ($assoc_nil_nth $eo_List_cons (eo::dt_constructors _v0) (eo::list_find $eo_List_cons ($dt_get_constructors _v0) c)))))
  (($mk_dt_updater_elim_rhs (_ (_ (tuple.update n) t) a) tuple ss) ($tuple_updater_elim_rhs (_ (_ (tuple.update n) t) a) ss))
  )
)
; program: $singleton_elim_aci.fev1
(program $singleton_elim_aci.fev1 ((S Type) (U Type) (id U) (f (-> S (-> S S))) (x1 U) (x2 U))
  :signature (U U (-> S (-> S S)) U Bool) U
  (
  (($singleton_elim_aci.fev1 x2 x1 f id true) x1)
  (($singleton_elim_aci.fev1 x2 x1 f id false) (_ (f x1) x2))
  )
)
; program: $singleton_elim_aci
(program $singleton_elim_aci ((S Type) (U Type) (x1 U) (x2 U) (f (-> S (-> S S))) (id U) (x U))
  :signature ((-> S (-> S S)) U U) U
  (
  (($singleton_elim_aci f id (_ (f x1) x2)) ($singleton_elim_aci.fev1 x2 x1 f id (eo::eq x2 id)))
  (($singleton_elim_aci f id x) x)
  )
)
; program: $get_ai_norm_rec
(program $get_ai_norm_rec ((S Type) (T Type) (x1 T) (x2 T) (f (-> S (-> S S))) (x T) (id T))
  :signature ((-> S (-> S S)) T T) T
  (
  (($get_ai_norm_rec f id (_ (f x1) x2)) (eo::list_setof f (eo::list_concat f ($get_ai_norm_rec f id x1) ($get_ai_norm_rec f id x2))))
  (($get_ai_norm_rec f id id) id)
  (($get_ai_norm_rec f id x) (eo::cons f x id))
  )
)
; program: $get_ai_norm
(program $get_ai_norm ((U Type) (S Type) (f (-> S (-> S S))) (x U) (y U))
  :signature (U) U
  (
  (($get_ai_norm (_ (f x) y)) (eo::define ((_v0 (_ (f x) y))) (eo::define ((_v1 (eo::nil f (eo::typeof _v0)))) ($singleton_elim_aci f _v1 ($get_ai_norm_rec f _v1 _v0)))))
  )
)
; program: $get_a_norm_rec
(program $get_a_norm_rec ((S Type) (T Type) (x1 T) (x2 T) (f (-> S (-> S S))) (x T) (id T))
  :signature ((-> S (-> S S)) T T) T
  (
  (($get_a_norm_rec f id (_ (f x1) x2)) (eo::list_concat f ($get_a_norm_rec f id x1) ($get_a_norm_rec f id x2)))
  (($get_a_norm_rec f id id) id)
  (($get_a_norm_rec f id x) (eo::cons f x id))
  )
)
; program: $get_a_norm
(program $get_a_norm ((U Type) (S Type) (f (-> S (-> S S))) (x U) (y U))
  :signature (U) U
  (
  (($get_a_norm (_ (f x) y)) (eo::define ((_v0 (_ (f x) y))) (eo::define ((_v1 (eo::nil f (eo::typeof _v0)))) ($singleton_elim_aci f _v1 ($get_a_norm_rec f _v1 _v0)))))
  )
)
; declare: @aci_sorted
(declare-parameterized-const @aci_sorted ((U Type :implicit) ($eo_x_1 U) (T Type :implicit) ($eo_x_2 T)) T)
; program: $aci_norm_eq
(program $aci_norm_eq ((U Type) (S Type) (f (-> S (-> S S))) (t U) (s U))
  :signature (U U) Bool
  (
  (($aci_norm_eq t t) true)
  (($aci_norm_eq (_ (@aci_sorted f) t) t) true)
  ((eo::define ((_v0 (@aci_sorted f))) ($aci_norm_eq (_ _v0 t) (_ _v0 s))) (eo::list_meq f t s))
  (($aci_norm_eq t s) false)
  )
)
; declare: @const
(declare-parameterized-const @const ((id Int :opaque) (T Type :opaque)) T)
; fwd-decl: $run_evaluate
(program $run_evaluate ((S Type))
  :signature (S) S
)
; program: $run_evaluate.fev47
(program $run_evaluate.fev47 ((m Int) (xb (BitVec m)) ($eo_55 Int))
  :signature ((BitVec m) Int) Int
  (
  (($run_evaluate.fev47 xb $eo_55) (int.pow2 $eo_55))
  )
)
; program: $run_evaluate.fev46
(program $run_evaluate.fev46 ((m Int) (xb (BitVec m)))
  :signature ((BitVec m) Bool) Int
  (
  (($run_evaluate.fev46 xb true) 0)
  (($run_evaluate.fev46 xb false) ($arith_eval_int_pow_2_rec ($bv_bitwidth (eo::typeof xb))))
  )
)
; program: $run_evaluate.fev45
(program $run_evaluate.fev45 ((m Int) (xb (BitVec m)))
  :signature ((BitVec m) Bool) Int
  (
  (($run_evaluate.fev45 xb true) ($run_evaluate.fev46 xb (eo::is_neg ($bv_bitwidth (eo::typeof xb)))))
  (($run_evaluate.fev45 xb false) ($run_evaluate.fev47 xb ($bv_bitwidth (eo::typeof xb))))
  )
)
; program: $run_evaluate.fev44
(program $run_evaluate.fev44 ((m Int) (xb (BitVec m)) ($eo_53 Int) ($eo_52 Int))
  :signature ((BitVec m) Int Int) Int
  (
  (($run_evaluate.fev44 xb $eo_52 $eo_53) (eo::add $eo_53 (eo::neg $eo_52)))
  )
)
; program: $run_evaluate.fev43
(program $run_evaluate.fev43 ((m Int) (xb (BitVec m)))
  :signature ((BitVec m) Bool) Int
  (
  (($run_evaluate.fev43 xb true) (eo::to_z ($run_evaluate xb)))
  (($run_evaluate.fev43 xb false) ($run_evaluate.fev44 xb ($run_evaluate.fev45 xb (eo::is_z ($bv_bitwidth (eo::typeof xb)))) (eo::to_z ($run_evaluate xb))))
  )
)
; program: $run_evaluate.fev48
(program $run_evaluate.fev48 (($eoT.fev57 Type) (n Int) ($eo_56 Int))
  :signature (Int Int) $eoT.fev57
  (
  (($run_evaluate.fev48 n $eo_56) (_ (repeat $eo_56) #b0))
  )
)
; program: $run_evaluate.fev42
(program $run_evaluate.fev42 ((m Int) ($eoT.fev50 Type) (xb (BitVec m)) (n Int))
  :signature ((BitVec m) Int Bool) $eoT.fev50
  (
  (($run_evaluate.fev42 xb n true) ($bv_unfold_repeat_rec ($run_evaluate n) #b0))
  (($run_evaluate.fev42 xb n false) ($run_evaluate.fev48 n ($run_evaluate n)))
  )
)
; program: $run_evaluate.fev41
(program $run_evaluate.fev41 ((m Int) ($eoT.fev48 Type) (xb (BitVec m)) (n Int) ($eo_49 $eoT.fev48) ($eo_47 (BitVec m)))
  :signature ((BitVec m) Int (BitVec m) $eoT.fev48) $eoT.fev48
  (
  (($run_evaluate.fev41 xb n $eo_47 $eo_49) (eo::concat ($run_evaluate $eo_49) $eo_47))
  )
)
; program: $run_evaluate.fev49
(program $run_evaluate.fev49 ((m Int) ($eoT.fev60 Type) (xb (BitVec m)) (n Int) ($eo_59 Int) ($eo_58 (BitVec m)))
  :signature ((BitVec m) Int (BitVec m) Int) $eoT.fev60
  (
  (($run_evaluate.fev49 xb n $eo_58 $eo_59) (_ (repeat $eo_59) $eo_58))
  )
)
; program: $run_evaluate.fev40
(program $run_evaluate.fev40 ((m Int) ($eoT.fev46 Type) (xb (BitVec m)) (n Int))
  :signature ((BitVec m) Int Bool) $eoT.fev46
  (
  (($run_evaluate.fev40 xb n true) (eo::define ((_v0 ($run_evaluate xb))) (eo::define ((_v1 (eo::add ($bv_bitwidth (eo::typeof _v0)) -1))) ($bv_unfold_repeat_rec ($run_evaluate n) (eo::extract _v0 _v1 _v1)))))
  (($run_evaluate.fev40 xb n false) (eo::define ((_v0 ($run_evaluate xb))) (eo::define ((_v1 (eo::add ($bv_bitwidth (eo::typeof _v0)) -1))) ($run_evaluate.fev49 xb n (eo::extract _v0 _v1 _v1) ($run_evaluate n)))))
  )
)
; program: $run_evaluate.fev39
(program $run_evaluate.fev39 ((m Int) ($eoT.fev44 Type) (xb (BitVec m)) (n Int) ($eo_45 $eoT.fev44) ($eo_43 (BitVec m)))
  :signature ((BitVec m) Int (BitVec m) $eoT.fev44) $eoT.fev44
  (
  (($run_evaluate.fev39 xb n $eo_43 $eo_45) (eo::concat ($run_evaluate $eo_45) $eo_43))
  )
)
; program: $run_evaluate.fev50
(program $run_evaluate.fev50 ((m Int) ($eoT.fev63 Type) (xb (BitVec m)) (n Int) ($eo_62 Int) ($eo_61 (BitVec m)))
  :signature ((BitVec m) Int (BitVec m) Int) $eoT.fev63
  (
  (($run_evaluate.fev50 xb n $eo_61 $eo_62) (_ (repeat $eo_62) $eo_61))
  )
)
; program: $run_evaluate.fev38
(program $run_evaluate.fev38 ((m Int) ($eoT.fev42 Type) (xb (BitVec m)) (n Int))
  :signature ((BitVec m) Int Bool) $eoT.fev42
  (
  (($run_evaluate.fev38 xb n true) ($bv_unfold_repeat_rec ($run_evaluate n) ($run_evaluate xb)))
  (($run_evaluate.fev38 xb n false) ($run_evaluate.fev50 xb n ($run_evaluate xb) ($run_evaluate n)))
  )
)
; program: $run_evaluate.fev37
(program $run_evaluate.fev37 ((m Int) ($eoT.fev40 Type) (xb (BitVec m)) (n Int) ($eo_41 $eoT.fev40))
  :signature ((BitVec m) Int $eoT.fev40) $eoT.fev40
  (
  (($run_evaluate.fev37 xb n $eo_41) ($run_evaluate $eo_41))
  )
)
; program: $run_evaluate.fev52
(program $run_evaluate.fev52 ((m Int) (yb (BitVec m)) (xb (BitVec m)) ($eo_67 (BitVec m)) ($eo_66 (BitVec m)))
  :signature ((BitVec m) (BitVec m) (BitVec m) (BitVec m)) (BitVec m)
  (
  (($run_evaluate.fev52 yb xb $eo_66 $eo_67) ($run_evaluate (bvnot (_ (bvlshr (bvnot $eo_67)) $eo_66))))
  )
)
; program: $run_evaluate.fev51
(program $run_evaluate.fev51 ((m Int) (yb (BitVec m)) (xb (BitVec m)) ($eo_65 (BitVec m)) ($eo_64 (BitVec m)))
  :signature ((BitVec m) (BitVec m) (BitVec m) (BitVec m)) (BitVec m)
  (
  (($run_evaluate.fev51 yb xb $eo_64 $eo_65) ($run_evaluate (_ (bvlshr $eo_65) $eo_64)))
  )
)
; program: $run_evaluate.fev36
(program $run_evaluate.fev36 ((m Int) (yb (BitVec m)) (xb (BitVec m)))
  :signature ((BitVec m) (BitVec m) Bool) (BitVec m)
  (
  (($run_evaluate.fev36 yb xb true) ($run_evaluate.fev51 yb xb ($run_evaluate yb) ($run_evaluate xb)))
  (($run_evaluate.fev36 yb xb false) ($run_evaluate.fev52 yb xb ($run_evaluate yb) ($run_evaluate xb)))
  )
)
; program: $run_evaluate.fev56
(program $run_evaluate.fev56 ((m Int) (yb (BitVec m)) ($eo_73 Int))
  :signature ((BitVec m) Int) Int
  (
  (($run_evaluate.fev56 yb $eo_73) (int.pow2 $eo_73))
  )
)
; program: $run_evaluate.fev55
(program $run_evaluate.fev55 ((m Int) (yb (BitVec m)))
  :signature ((BitVec m) Bool) Int
  (
  (($run_evaluate.fev55 yb true) 0)
  (($run_evaluate.fev55 yb false) ($arith_eval_int_pow_2_rec (eo::to_z ($run_evaluate yb))))
  )
)
; program: $run_evaluate.fev54
(program $run_evaluate.fev54 ((m Int) (xb (BitVec m)) (yb (BitVec m)))
  :signature ((BitVec m) (BitVec m) Bool) Int
  (
  (($run_evaluate.fev54 yb xb true) ($run_evaluate.fev55 yb (eo::is_neg (eo::to_z ($run_evaluate yb)))))
  (($run_evaluate.fev54 yb xb false) ($run_evaluate.fev56 yb (eo::to_z ($run_evaluate yb))))
  )
)
; program: $run_evaluate.fev53
(program $run_evaluate.fev53 ((m Int) ($eoT.fev71 Type) (yb (BitVec m)) (xb (BitVec m)) ($eo_70 Int) ($eo_69 Int) ($eo_68 Int))
  :signature ((BitVec m) (BitVec m) Int Int Int) $eoT.fev71
  (
  (($run_evaluate.fev53 yb xb $eo_68 $eo_69 $eo_70) (eo::to_bin $eo_70 (eo::zdiv $eo_69 $eo_68)))
  )
)
; program: $run_evaluate.fev35
(program $run_evaluate.fev35 ((m Int) ($eoT.fev38 Type) (yb (BitVec m)) (xb (BitVec m)))
  :signature ((BitVec m) (BitVec m) Bool) $eoT.fev38
  (
  (($run_evaluate.fev35 yb xb true) (eo::to_bin ($bv_bitwidth (eo::typeof xb)) 0))
  (($run_evaluate.fev35 yb xb false) ($run_evaluate.fev53 yb xb ($run_evaluate.fev54 yb xb (eo::is_z (eo::to_z ($run_evaluate yb)))) (eo::to_z ($run_evaluate xb)) ($bv_bitwidth (eo::typeof xb))))
  )
)
; program: $run_evaluate.fev60
(program $run_evaluate.fev60 ((m Int) (yb (BitVec m)) ($eo_79 Int))
  :signature ((BitVec m) Int) Int
  (
  (($run_evaluate.fev60 yb $eo_79) (int.pow2 $eo_79))
  )
)
; program: $run_evaluate.fev59
(program $run_evaluate.fev59 ((m Int) (yb (BitVec m)))
  :signature ((BitVec m) Bool) Int
  (
  (($run_evaluate.fev59 yb true) 0)
  (($run_evaluate.fev59 yb false) ($arith_eval_int_pow_2_rec (eo::to_z ($run_evaluate yb))))
  )
)
; program: $run_evaluate.fev58
(program $run_evaluate.fev58 ((m Int) (xb (BitVec m)) (yb (BitVec m)))
  :signature ((BitVec m) (BitVec m) Bool) Int
  (
  (($run_evaluate.fev58 yb xb true) ($run_evaluate.fev59 yb (eo::is_neg (eo::to_z ($run_evaluate yb)))))
  (($run_evaluate.fev58 yb xb false) ($run_evaluate.fev60 yb (eo::to_z ($run_evaluate yb))))
  )
)
; program: $run_evaluate.fev57
(program $run_evaluate.fev57 ((m Int) ($eoT.fev77 Type) (yb (BitVec m)) (xb (BitVec m)) ($eo_76 Int) ($eo_75 Int) ($eo_74 Int))
  :signature ((BitVec m) (BitVec m) Int Int Int) $eoT.fev77
  (
  (($run_evaluate.fev57 yb xb $eo_74 $eo_75 $eo_76) (eo::to_bin $eo_76 (eo::mul $eo_75 $eo_74)))
  )
)
; program: $run_evaluate.fev34
(program $run_evaluate.fev34 ((m Int) ($eoT.fev35 Type) (yb (BitVec m)) (xb (BitVec m)))
  :signature ((BitVec m) (BitVec m) Bool) $eoT.fev35
  (
  (($run_evaluate.fev34 yb xb true) (eo::to_bin ($bv_bitwidth (eo::typeof xb)) 0))
  (($run_evaluate.fev34 yb xb false) ($run_evaluate.fev57 yb xb ($run_evaluate.fev58 yb xb (eo::is_z (eo::to_z ($run_evaluate yb)))) (eo::to_z ($run_evaluate xb)) ($bv_bitwidth (eo::typeof xb))))
  )
)
; program: $run_evaluate.fev64
(program $run_evaluate.fev64 ((m Int) (xb (BitVec m)) ($eo_83 Int))
  :signature ((BitVec m) Int) Int
  (
  (($run_evaluate.fev64 xb $eo_83) (int.pow2 $eo_83))
  )
)
; program: $run_evaluate.fev63
(program $run_evaluate.fev63 ((m Int) (xb (BitVec m)))
  :signature ((BitVec m) Bool) Int
  (
  (($run_evaluate.fev63 xb true) 0)
  (($run_evaluate.fev63 xb false) ($arith_eval_int_pow_2_rec (eo::add ($bv_bitwidth (eo::typeof ($run_evaluate xb))) -1)))
  )
)
; program: $run_evaluate.fev62
(program $run_evaluate.fev62 ((m Int) (xb (BitVec m)))
  :signature ((BitVec m) Bool) Int
  (
  (($run_evaluate.fev62 xb true) ($run_evaluate.fev63 xb (eo::is_neg (eo::add ($bv_bitwidth (eo::typeof ($run_evaluate xb))) -1))))
  (($run_evaluate.fev62 xb false) ($run_evaluate.fev64 xb (eo::add ($bv_bitwidth (eo::typeof ($run_evaluate xb))) -1)))
  )
)
; program: $run_evaluate.fev61
(program $run_evaluate.fev61 ((m Int) (xb (BitVec m)) ($eo_81 Int) ($eo_80 Int))
  :signature ((BitVec m) Int Int) Int
  (
  (($run_evaluate.fev61 xb $eo_80 $eo_81) (eo::add (eo::neg $eo_81) $eo_80))
  )
)
; program: $run_evaluate.fev33
(program $run_evaluate.fev33 ((m Int) (yb (BitVec m)) (xb (BitVec m)))
  :signature ((BitVec m) (BitVec m) Bool) Int
  (
  (($run_evaluate.fev33 yb xb true) (eo::define ((_v0 ($run_evaluate xb))) (eo::define ((_v1 ($bv_bitwidth (eo::typeof _v0)))) ($run_evaluate.fev61 xb (eo::to_z (eo::extract _v0 0 (eo::add _v1 -2))) ($run_evaluate.fev62 xb (eo::is_z (eo::add _v1 -1)))))))
  (($run_evaluate.fev33 yb xb false) (eo::define ((_v0 ($run_evaluate xb))) (eo::to_z (eo::extract _v0 0 (eo::add ($bv_bitwidth (eo::typeof _v0)) -2)))))
  )
)
; program: $run_evaluate.fev68
(program $run_evaluate.fev68 ((m Int) (yb (BitVec m)) ($eo_87 Int))
  :signature ((BitVec m) Int) Int
  (
  (($run_evaluate.fev68 yb $eo_87) (int.pow2 $eo_87))
  )
)
; program: $run_evaluate.fev67
(program $run_evaluate.fev67 ((m Int) (yb (BitVec m)))
  :signature ((BitVec m) Bool) Int
  (
  (($run_evaluate.fev67 yb true) 0)
  (($run_evaluate.fev67 yb false) ($arith_eval_int_pow_2_rec (eo::add ($bv_bitwidth (eo::typeof ($run_evaluate yb))) -1)))
  )
)
; program: $run_evaluate.fev66
(program $run_evaluate.fev66 ((m Int) (yb (BitVec m)))
  :signature ((BitVec m) Bool) Int
  (
  (($run_evaluate.fev66 yb true) ($run_evaluate.fev67 yb (eo::is_neg (eo::add ($bv_bitwidth (eo::typeof ($run_evaluate yb))) -1))))
  (($run_evaluate.fev66 yb false) ($run_evaluate.fev68 yb (eo::add ($bv_bitwidth (eo::typeof ($run_evaluate yb))) -1)))
  )
)
; program: $run_evaluate.fev65
(program $run_evaluate.fev65 ((m Int) (yb (BitVec m)) ($eo_85 Int) ($eo_84 Int))
  :signature ((BitVec m) Int Int) Int
  (
  (($run_evaluate.fev65 yb $eo_84 $eo_85) (eo::add (eo::neg $eo_85) $eo_84))
  )
)
; program: $run_evaluate.fev32
(program $run_evaluate.fev32 ((m Int) (xb (BitVec m)) (yb (BitVec m)))
  :signature ((BitVec m) (BitVec m) Bool) Int
  (
  (($run_evaluate.fev32 yb xb true) (eo::define ((_v0 ($run_evaluate yb))) (eo::define ((_v1 ($bv_bitwidth (eo::typeof _v0)))) ($run_evaluate.fev65 yb (eo::to_z (eo::extract _v0 0 (eo::add _v1 -2))) ($run_evaluate.fev66 yb (eo::is_z (eo::add _v1 -1)))))))
  (($run_evaluate.fev32 yb xb false) (eo::define ((_v0 ($run_evaluate yb))) (eo::to_z (eo::extract _v0 0 (eo::add ($bv_bitwidth (eo::typeof _v0)) -2)))))
  )
)
; program: $run_evaluate.fev31
(program $run_evaluate.fev31 ((m Int) (yb (BitVec m)) (xb (BitVec m)) ($eo_32 Int) ($eo_31 Int))
  :signature ((BitVec m) (BitVec m) Int Int) Bool
  (
  (($run_evaluate.fev31 yb xb $eo_31 $eo_32) (eo::or (eo::gt $eo_32 $eo_31) (eo::eq $eo_32 $eo_31)))
  )
)
; program: $run_evaluate.fev72
(program $run_evaluate.fev72 ((m Int) (xb (BitVec m)) ($eo_91 Int))
  :signature ((BitVec m) Int) Int
  (
  (($run_evaluate.fev72 xb $eo_91) (int.pow2 $eo_91))
  )
)
; program: $run_evaluate.fev71
(program $run_evaluate.fev71 ((m Int) (xb (BitVec m)))
  :signature ((BitVec m) Bool) Int
  (
  (($run_evaluate.fev71 xb true) 0)
  (($run_evaluate.fev71 xb false) ($arith_eval_int_pow_2_rec (eo::add ($bv_bitwidth (eo::typeof ($run_evaluate xb))) -1)))
  )
)
; program: $run_evaluate.fev70
(program $run_evaluate.fev70 ((m Int) (xb (BitVec m)))
  :signature ((BitVec m) Bool) Int
  (
  (($run_evaluate.fev70 xb true) ($run_evaluate.fev71 xb (eo::is_neg (eo::add ($bv_bitwidth (eo::typeof ($run_evaluate xb))) -1))))
  (($run_evaluate.fev70 xb false) ($run_evaluate.fev72 xb (eo::add ($bv_bitwidth (eo::typeof ($run_evaluate xb))) -1)))
  )
)
; program: $run_evaluate.fev69
(program $run_evaluate.fev69 ((m Int) (xb (BitVec m)) ($eo_89 Int) ($eo_88 Int))
  :signature ((BitVec m) Int Int) Int
  (
  (($run_evaluate.fev69 xb $eo_88 $eo_89) (eo::add (eo::neg $eo_89) $eo_88))
  )
)
; program: $run_evaluate.fev30
(program $run_evaluate.fev30 ((m Int) (yb (BitVec m)) (xb (BitVec m)))
  :signature ((BitVec m) (BitVec m) Bool) Int
  (
  (($run_evaluate.fev30 yb xb true) (eo::define ((_v0 ($run_evaluate xb))) (eo::define ((_v1 ($bv_bitwidth (eo::typeof _v0)))) ($run_evaluate.fev69 xb (eo::to_z (eo::extract _v0 0 (eo::add _v1 -2))) ($run_evaluate.fev70 xb (eo::is_z (eo::add _v1 -1)))))))
  (($run_evaluate.fev30 yb xb false) (eo::define ((_v0 ($run_evaluate xb))) (eo::to_z (eo::extract _v0 0 (eo::add ($bv_bitwidth (eo::typeof _v0)) -2)))))
  )
)
; program: $run_evaluate.fev76
(program $run_evaluate.fev76 ((m Int) (yb (BitVec m)) ($eo_95 Int))
  :signature ((BitVec m) Int) Int
  (
  (($run_evaluate.fev76 yb $eo_95) (int.pow2 $eo_95))
  )
)
; program: $run_evaluate.fev75
(program $run_evaluate.fev75 ((m Int) (yb (BitVec m)))
  :signature ((BitVec m) Bool) Int
  (
  (($run_evaluate.fev75 yb true) 0)
  (($run_evaluate.fev75 yb false) ($arith_eval_int_pow_2_rec (eo::add ($bv_bitwidth (eo::typeof ($run_evaluate yb))) -1)))
  )
)
; program: $run_evaluate.fev74
(program $run_evaluate.fev74 ((m Int) (yb (BitVec m)))
  :signature ((BitVec m) Bool) Int
  (
  (($run_evaluate.fev74 yb true) ($run_evaluate.fev75 yb (eo::is_neg (eo::add ($bv_bitwidth (eo::typeof ($run_evaluate yb))) -1))))
  (($run_evaluate.fev74 yb false) ($run_evaluate.fev76 yb (eo::add ($bv_bitwidth (eo::typeof ($run_evaluate yb))) -1)))
  )
)
; program: $run_evaluate.fev73
(program $run_evaluate.fev73 ((m Int) (yb (BitVec m)) ($eo_93 Int) ($eo_92 Int))
  :signature ((BitVec m) Int Int) Int
  (
  (($run_evaluate.fev73 yb $eo_92 $eo_93) (eo::add (eo::neg $eo_93) $eo_92))
  )
)
; program: $run_evaluate.fev29
(program $run_evaluate.fev29 ((m Int) (xb (BitVec m)) (yb (BitVec m)))
  :signature ((BitVec m) (BitVec m) Bool) Int
  (
  (($run_evaluate.fev29 yb xb true) (eo::define ((_v0 ($run_evaluate yb))) (eo::define ((_v1 ($bv_bitwidth (eo::typeof _v0)))) ($run_evaluate.fev73 yb (eo::to_z (eo::extract _v0 0 (eo::add _v1 -2))) ($run_evaluate.fev74 yb (eo::is_z (eo::add _v1 -1)))))))
  (($run_evaluate.fev29 yb xb false) (eo::define ((_v0 ($run_evaluate yb))) (eo::to_z (eo::extract _v0 0 (eo::add ($bv_bitwidth (eo::typeof _v0)) -2)))))
  )
)
; program: $run_evaluate.fev28
(program $run_evaluate.fev28 ((m Int) (yb (BitVec m)) (xb (BitVec m)) ($eo_30 Int) ($eo_29 Int))
  :signature ((BitVec m) (BitVec m) Int Int) Bool
  (
  (($run_evaluate.fev28 yb xb $eo_29 $eo_30) (eo::gt $eo_30 $eo_29))
  )
)
; program: $run_evaluate.fev27
(program $run_evaluate.fev27 ((m Int) (xb (BitVec m)) (yb (BitVec m)))
  :signature ((BitVec m) (BitVec m) Bool) (BitVec m)
  (
  (($run_evaluate.fev27 yb xb true) ($run_evaluate xb))
  (($run_evaluate.fev27 yb xb false) (eo::zmod ($run_evaluate xb) ($run_evaluate yb)))
  )
)
; program: $run_evaluate.fev80
(program $run_evaluate.fev80 ((m Int) (xb (BitVec m)) ($eo_100 Int))
  :signature ((BitVec m) Int) Int
  (
  (($run_evaluate.fev80 xb $eo_100) (int.pow2 $eo_100))
  )
)
; program: $run_evaluate.fev79
(program $run_evaluate.fev79 ((m Int) (xb (BitVec m)))
  :signature ((BitVec m) Bool) Int
  (
  (($run_evaluate.fev79 xb true) 0)
  (($run_evaluate.fev79 xb false) ($arith_eval_int_pow_2_rec ($bv_bitwidth (eo::typeof xb))))
  )
)
; program: $run_evaluate.fev78
(program $run_evaluate.fev78 ((m Int) (xb (BitVec m)))
  :signature ((BitVec m) Bool) Int
  (
  (($run_evaluate.fev78 xb true) ($run_evaluate.fev79 xb (eo::is_neg ($bv_bitwidth (eo::typeof xb)))))
  (($run_evaluate.fev78 xb false) ($run_evaluate.fev80 xb ($bv_bitwidth (eo::typeof xb))))
  )
)
; program: $run_evaluate.fev77
(program $run_evaluate.fev77 ((m Int) ($eoT.fev98 Type) (xb (BitVec m)) ($eo_97 Int) ($eo_96 Int))
  :signature ((BitVec m) Int Int) $eoT.fev98
  (
  (($run_evaluate.fev77 xb $eo_96 $eo_97) (eo::to_bin $eo_97 (eo::add $eo_96 -1)))
  )
)
; program: $run_evaluate.fev26
(program $run_evaluate.fev26 ((m Int) ($eoT.fev27 Type) (xb (BitVec m)) (yb (BitVec m)))
  :signature ((BitVec m) (BitVec m) Bool) $eoT.fev27
  (
  (($run_evaluate.fev26 yb xb true) (eo::define ((_v0 ($bv_bitwidth (eo::typeof xb)))) ($run_evaluate.fev77 xb ($run_evaluate.fev78 xb (eo::is_z _v0)) _v0)))
  (($run_evaluate.fev26 yb xb false) (eo::zdiv ($run_evaluate xb) ($run_evaluate yb)))
  )
)
; program: $run_evaluate.fev25
(program $run_evaluate.fev25 ((T Type) (sy (Seq T)) (n Int) (sx (Seq T)))
  :signature ((Seq T) Int (Seq T) Bool) (Seq T)
  (
  (($run_evaluate.fev25 sx n sy true) ($run_evaluate sx))
  (($run_evaluate.fev25 sx n sy false) (eo::define ((_v0 ($run_evaluate sx))) (eo::define ((_v1 (eo::len _v0))) (eo::define ((_v2 ($run_evaluate n))) (eo::define ((_v3 ($run_evaluate sy))) (eo::concat (eo::extract _v0 (eo::add _v2 (eo::len _v3)) _v1) (eo::extract _v3 0 (eo::add (eo::add (eo::neg _v2) _v1) -1))))))))
  )
)
; program: $run_evaluate.fev81
(program $run_evaluate.fev81 ((T Type) (sx (Seq T)) ($eo_101 (Seq T)))
  :signature ((Seq T) (Seq T)) (Seq T)
  (
  (($run_evaluate.fev81 sx $eo_101) (str.rev $eo_101))
  )
)
; program: $run_evaluate.fev24
(program $run_evaluate.fev24 ((T Type) (sx (Seq T)))
  :signature ((Seq T) Bool) (Seq T)
  (
  (($run_evaluate.fev24 sx true) ($str_nary_elim ($str_collect (eo::list_rev str.++ ($str_flatten ($str_nary_intro ($run_evaluate sx)))))))
  (($run_evaluate.fev24 sx false) ($run_evaluate.fev81 sx ($run_evaluate sx)))
  )
)
; program: $run_evaluate.fev82
(program $run_evaluate.fev82 ((ssx (Seq Char)) ($eo_102 (Seq Char)))
  :signature ((Seq Char) (Seq Char)) (Seq Char)
  (
  (($run_evaluate.fev82 ssx $eo_102) (str.to_upper $eo_102))
  )
)
; program: $run_evaluate.fev23
(program $run_evaluate.fev23 ((ssx (Seq Char)))
  :signature ((Seq Char) Bool) (Seq Char)
  (
  (($run_evaluate.fev23 ssx true) ($str_case_conv_rec ($str_flatten ($str_nary_intro ($run_evaluate ssx))) false))
  (($run_evaluate.fev23 ssx false) ($run_evaluate.fev82 ssx ($run_evaluate ssx)))
  )
)
; program: $run_evaluate.fev83
(program $run_evaluate.fev83 ((ssx (Seq Char)) ($eo_103 (Seq Char)))
  :signature ((Seq Char) (Seq Char)) (Seq Char)
  (
  (($run_evaluate.fev83 ssx $eo_103) (str.to_lower $eo_103))
  )
)
; program: $run_evaluate.fev22
(program $run_evaluate.fev22 ((ssx (Seq Char)))
  :signature ((Seq Char) Bool) (Seq Char)
  (
  (($run_evaluate.fev22 ssx true) ($str_case_conv_rec ($str_flatten ($str_nary_intro ($run_evaluate ssx))) true))
  (($run_evaluate.fev22 ssx false) ($run_evaluate.fev83 ssx ($run_evaluate ssx)))
  )
)
; program: $run_evaluate.fev84
(program $run_evaluate.fev84 ((ssy (Seq Char)) (ssx (Seq Char)) ($eo_105 (Seq Char)) ($eo_104 (Seq Char)))
  :signature ((Seq Char) (Seq Char) (Seq Char) (Seq Char)) Bool
  (
  (($run_evaluate.fev84 ssy ssx $eo_104 $eo_105) (_ (str.<= $eo_105) $eo_104))
  )
)
; program: $run_evaluate.fev21
(program $run_evaluate.fev21 ((ssy (Seq Char)) (ssx (Seq Char)))
  :signature ((Seq Char) (Seq Char) Bool) Bool
  (
  (($run_evaluate.fev21 ssy ssx true) ($str_leq_eval_rec ($str_flatten ($str_nary_intro ($run_evaluate ssx))) ($str_flatten ($str_nary_intro ($run_evaluate ssy)))))
  (($run_evaluate.fev21 ssy ssx false) ($run_evaluate.fev84 ssy ssx ($run_evaluate ssy) ($run_evaluate ssx)))
  )
)
; program: $run_evaluate.fev86
(program $run_evaluate.fev86 ((n Int) ($eo_107 Int))
  :signature (Int Int) (Seq Char)
  (
  (($run_evaluate.fev86 n $eo_107) (str.from_int $eo_107))
  )
)
; program: $run_evaluate.fev85
(program $run_evaluate.fev85 ((n Int))
  :signature (Int Bool) (Seq Char)
  (
  (($run_evaluate.fev85 n true) "")
  (($run_evaluate.fev85 n false) ($str_from_int_eval_rec ($run_evaluate n) ""))
  )
)
; program: $run_evaluate.fev20
(program $run_evaluate.fev20 ((n Int))
  :signature (Int Bool) (Seq Char)
  (
  (($run_evaluate.fev20 n true) ($run_evaluate.fev85 n (eo::is_neg ($run_evaluate n))))
  (($run_evaluate.fev20 n false) ($run_evaluate.fev86 n ($run_evaluate n)))
  )
)
; program: $run_evaluate.fev88
(program $run_evaluate.fev88 ((ssx (Seq Char)) ($eo_109 (Seq Char)))
  :signature ((Seq Char) (Seq Char)) Int
  (
  (($run_evaluate.fev88 ssx $eo_109) (str.to_int $eo_109))
  )
)
; program: $run_evaluate.fev87
(program $run_evaluate.fev87 ((ssx (Seq Char)))
  :signature ((Seq Char) Bool) Int
  (
  (($run_evaluate.fev87 ssx true) -1)
  (($run_evaluate.fev87 ssx false) ($str_to_int_eval_rec (eo::list_rev str.++ ($str_flatten ($str_nary_intro ($run_evaluate ssx)))) 1 0))
  )
)
; program: $run_evaluate.fev19
(program $run_evaluate.fev19 ((ssx (Seq Char)))
  :signature ((Seq Char) Bool) Int
  (
  (($run_evaluate.fev19 ssx true) ($run_evaluate.fev87 ssx (eo::eq ($run_evaluate ssx) "")))
  (($run_evaluate.fev19 ssx false) ($run_evaluate.fev88 ssx ($run_evaluate ssx)))
  )
)
; program: $run_evaluate.fev90
(program $run_evaluate.fev90 ((n Int))
  :signature (Int Bool) Bool
  (
  (($run_evaluate.fev90 n true) true)
  (($run_evaluate.fev90 n false) (eo::gt 196608 ($run_evaluate n)))
  )
)
; program: $run_evaluate.fev91
(program $run_evaluate.fev91 ((n Int) ($eo_110 Bool))
  :signature (Int Bool Bool) Bool
  (
  (($run_evaluate.fev91 n $eo_110 true) (eo::not (eo::is_neg ($run_evaluate n))))
  (($run_evaluate.fev91 n $eo_110 false) false)
  )
)
; program: $run_evaluate.fev89
(program $run_evaluate.fev89 ((n Int) ($eo_110 Bool))
  :signature (Int Bool) Bool
  (
  (($run_evaluate.fev89 n $eo_110) ($run_evaluate.fev91 n $eo_110 $eo_110))
  )
)
; program: $run_evaluate.fev18
(program $run_evaluate.fev18 ((n Int))
  :signature (Int Bool) Bool
  (
  (($run_evaluate.fev18 n true) ($run_evaluate.fev89 n ($run_evaluate.fev90 n (eo::eq 196608 ($run_evaluate n)))))
  (($run_evaluate.fev18 n false) false)
  )
)
; program: $run_evaluate.fev92
(program $run_evaluate.fev92 ((n Int) ($eo_17 Bool))
  :signature (Int Bool Bool) (Seq Char)
  (
  (($run_evaluate.fev92 n $eo_17 true) (eo::to_str n))
  (($run_evaluate.fev92 n $eo_17 false) "")
  )
)
; program: $run_evaluate.fev17
(program $run_evaluate.fev17 ((n Int) ($eo_17 Bool))
  :signature (Int Bool) (Seq Char)
  (
  (($run_evaluate.fev17 n $eo_17) ($run_evaluate.fev92 n $eo_17 $eo_17))
  )
)
; program: $run_evaluate.fev94
(program $run_evaluate.fev94 ((ssx (Seq Char)) ($eo_114 (Seq Char)))
  :signature ((Seq Char) (Seq Char)) Int
  (
  (($run_evaluate.fev94 ssx $eo_114) (str.to_code $eo_114))
  )
)
; program: $run_evaluate.fev93
(program $run_evaluate.fev93 ((ssx (Seq Char)))
  :signature ((Seq Char) Bool) Int
  (
  (($run_evaluate.fev93 ssx true) -1)
  (($run_evaluate.fev93 ssx false) ($run_evaluate.fev94 ssx ($run_evaluate ssx)))
  )
)
; program: $run_evaluate.fev16
(program $run_evaluate.fev16 ((ssx (Seq Char)))
  :signature ((Seq Char) Bool) Int
  (
  (($run_evaluate.fev16 ssx true) (eo::to_z ($run_evaluate ssx)))
  (($run_evaluate.fev16 ssx false) ($run_evaluate.fev93 ssx (eo::is_z (eo::len ($run_evaluate ssx)))))
  )
)
; program: $run_evaluate.fev96
(program $run_evaluate.fev96 ((T Type) (n Int) (sx (Seq T)) (sy (Seq T)))
  :signature ((Seq T) (Seq T) Int Bool) Int
  (
  (($run_evaluate.fev96 sy sx n true) (eo::define ((_v0 ($run_evaluate sx))) (eo::find (eo::to_str (eo::extract _v0 n (eo::len _v0))) (eo::to_str ($run_evaluate sy)))))
  (($run_evaluate.fev96 sy sx n false) (eo::define ((_v0 ($run_evaluate sx))) (eo::add n (eo::find (eo::to_str (eo::extract _v0 n (eo::len _v0))) (eo::to_str ($run_evaluate sy))))))
  )
)
; program: $run_evaluate.fev95
(program $run_evaluate.fev95 ((T Type) (n Int) (sx (Seq T)) (sy (Seq T)))
  :signature ((Seq T) (Seq T) Int Bool) Int
  (
  (($run_evaluate.fev95 sy sx n true) -1)
  (($run_evaluate.fev95 sy sx n false) (eo::define ((_v0 ($run_evaluate sx))) ($run_evaluate.fev96 sy sx n (eo::is_neg (eo::find (eo::to_str (eo::extract _v0 n (eo::len _v0))) (eo::to_str ($run_evaluate sy)))))))
  )
)
; program: $run_evaluate.fev15
(program $run_evaluate.fev15 ((T Type) (sy (Seq T)) (n Int) (sx (Seq T)))
  :signature ((Seq T) (Seq T) Int Bool) Int
  (
  (($run_evaluate.fev15 sy sx n true) -1)
  (($run_evaluate.fev15 sy sx n false) ($run_evaluate.fev95 sy sx n (eo::gt ($run_evaluate n) (eo::len ($run_evaluate sx)))))
  )
)
; program: $run_evaluate.fev97
(program $run_evaluate.fev97 ((ssz (Seq Char)) (ssx (Seq Char)) (ssy (Seq Char)))
  :signature ((Seq Char) (Seq Char) (Seq Char) Bool) (Seq Char)
  (
  (($run_evaluate.fev97 ssy ssx ssz true) ssx)
  (($run_evaluate.fev97 ssy ssx ssz false) ($str_eval_replace_all_rec ssx ssy ssz (eo::find ssx ssy) (eo::len ssy)))
  )
)
; program: $run_evaluate.fev14
(program $run_evaluate.fev14 ((ssx (Seq Char)) (ssy (Seq Char)) (ssz (Seq Char)))
  :signature ((Seq Char) (Seq Char) (Seq Char) Bool) (Seq Char)
  (
  (($run_evaluate.fev14 ssz ssy ssx true) ($run_evaluate.fev97 ssy ssx ssz (eo::eq ssy "")))
  (($run_evaluate.fev14 ssz ssy ssx false) (_ (_ (str.replace_all ssx) ssy) ssz))
  )
)
; program: $run_evaluate.fev13
(program $run_evaluate.fev13 ((T Type) (sy (Seq T)) (sx (Seq T)) (sz (Seq T)))
  :signature ((Seq T) (Seq T) (Seq T) Bool) (Seq T)
  (
  (($run_evaluate.fev13 sz sx sy true) ($run_evaluate sx))
  (($run_evaluate.fev13 sz sx sy false) (eo::define ((_v0 ($run_evaluate sx))) (eo::define ((_v1 ($run_evaluate sy))) (eo::concat (eo::extract _v0 (eo::add (eo::find (eo::to_str _v0) (eo::to_str _v1)) (eo::len _v1)) (eo::len _v0)) ($run_evaluate sz)))))
  )
)
; program: $run_evaluate.fev99
(program $run_evaluate.fev99 ((i1 Int) ($eo_119 Int))
  :signature (Int Int) Bool
  (
  (($run_evaluate.fev99 i1 $eo_119) (int.ispow2 $eo_119))
  )
)
; program: $run_evaluate.fev98
(program $run_evaluate.fev98 ((i1 Int))
  :signature (Int Bool) Bool
  (
  (($run_evaluate.fev98 i1 true) false)
  (($run_evaluate.fev98 i1 false) ($arith_eval_int_is_pow_2_rec ($run_evaluate i1)))
  )
)
; program: $run_evaluate.fev12
(program $run_evaluate.fev12 ((i1 Int))
  :signature (Int Bool) Bool
  (
  (($run_evaluate.fev12 i1 true) ($run_evaluate.fev98 i1 (eo::is_neg ($run_evaluate i1))))
  (($run_evaluate.fev12 i1 false) ($run_evaluate.fev99 i1 ($run_evaluate i1)))
  )
)
; program: $run_evaluate.fev101
(program $run_evaluate.fev101 ((i1 Int) ($eo_121 Int))
  :signature (Int Int) Int
  (
  (($run_evaluate.fev101 i1 $eo_121) (int.pow2 $eo_121))
  )
)
; program: $run_evaluate.fev100
(program $run_evaluate.fev100 ((i1 Int))
  :signature (Int Bool) Int
  (
  (($run_evaluate.fev100 i1 true) 0)
  (($run_evaluate.fev100 i1 false) ($arith_eval_int_pow_2_rec ($run_evaluate i1)))
  )
)
; program: $run_evaluate.fev11
(program $run_evaluate.fev11 ((i1 Int))
  :signature (Int Bool) Int
  (
  (($run_evaluate.fev11 i1 true) ($run_evaluate.fev100 i1 (eo::is_neg ($run_evaluate i1))))
  (($run_evaluate.fev11 i1 false) ($run_evaluate.fev101 i1 ($run_evaluate i1)))
  )
)
; program: $run_evaluate.fev102
(program $run_evaluate.fev102 ((i1 Int) ($eo_122 Int))
  :signature (Int Int) Int
  (
  (($run_evaluate.fev102 i1 $eo_122) (int.log2 $eo_122))
  )
)
; program: $run_evaluate.fev10
(program $run_evaluate.fev10 ((i1 Int))
  :signature (Int Bool) Int
  (
  (($run_evaluate.fev10 i1 true) ($arith_eval_int_log_2_rec ($run_evaluate i1)))
  (($run_evaluate.fev10 i1 false) ($run_evaluate.fev102 i1 ($run_evaluate i1)))
  )
)
; program: $run_evaluate.fev9
(program $run_evaluate.fev9 ((T Type) (x T))
  :signature (T Bool) T
  (
  (($run_evaluate.fev9 x true) (eo::neg ($run_evaluate x)))
  (($run_evaluate.fev9 x false) ($run_evaluate x))
  )
)
; program: $run_evaluate.fev8
(program $run_evaluate.fev8 ((i1 Int) (i2 Int))
  :signature (Int Int Bool) Int
  (
  (($run_evaluate.fev8 i2 i1 true) ($run_evaluate i1))
  (($run_evaluate.fev8 i2 i1 false) (eo::zmod ($run_evaluate i1) ($run_evaluate i2)))
  )
)
; program: $run_evaluate.fev7
(program $run_evaluate.fev7 ((i1 Int) (i2 Int))
  :signature (Int Int Bool) Int
  (
  (($run_evaluate.fev7 i2 i1 true) 0)
  (($run_evaluate.fev7 i2 i1 false) (eo::zdiv ($run_evaluate i1) ($run_evaluate i2)))
  )
)
; program: $run_evaluate.fev6
(program $run_evaluate.fev6 ((T Type) (x T) (y T))
  :signature (T T Bool) Real
  (
  (($run_evaluate.fev6 y x true) 0/1)
  (($run_evaluate.fev6 y x false) (eo::qdiv (eo::to_q ($run_evaluate x)) (eo::to_q ($run_evaluate y))))
  )
)
; program: $run_evaluate.fev103
(program $run_evaluate.fev103 ((S Type) (T Type) (x T) (ys S))
  :signature (S T Bool) Real
  (
  (($run_evaluate.fev103 ys x true) (eo::mul (eo::to_q ($run_evaluate x)) (eo::to_q ($run_evaluate ys))))
  (($run_evaluate.fev103 ys x false) (eo::mul ($run_evaluate x) ($run_evaluate ys)))
  )
)
; program: $run_evaluate.fev5
(program $run_evaluate.fev5 ((S Type) (T Type) (x T) (ys S))
  :signature (S T Bool) Real
  (
  (($run_evaluate.fev5 ys x true) (eo::mul (eo::to_q ($run_evaluate x)) (eo::to_q ($run_evaluate ys))))
  (($run_evaluate.fev5 ys x false) (eo::define ((_v0 ($run_evaluate ys))) ($run_evaluate.fev103 ys x (eo::eq _v0 (eo::to_q _v0)))))
  )
)
; program: $run_evaluate.fev104
(program $run_evaluate.fev104 ((S Type) (T Type) (x T) (z S))
  :signature (S T Bool) Real
  (
  (($run_evaluate.fev104 z x true) (eo::add (eo::to_q ($run_evaluate x)) (eo::to_q (eo::neg ($run_evaluate z)))))
  (($run_evaluate.fev104 z x false) (eo::add ($run_evaluate x) (eo::neg ($run_evaluate z))))
  )
)
; program: $run_evaluate.fev4
(program $run_evaluate.fev4 ((S Type) (T Type) (x T) (z S))
  :signature (S T Bool) Real
  (
  (($run_evaluate.fev4 z x true) (eo::add (eo::to_q ($run_evaluate x)) (eo::to_q (eo::neg ($run_evaluate z)))))
  (($run_evaluate.fev4 z x false) (eo::define ((_v0 (eo::neg ($run_evaluate z)))) ($run_evaluate.fev104 z x (eo::eq _v0 (eo::to_q _v0)))))
  )
)
; program: $run_evaluate.fev105
(program $run_evaluate.fev105 ((S Type) (T Type) (x T) (ys S))
  :signature (S T Bool) Real
  (
  (($run_evaluate.fev105 ys x true) (eo::add (eo::to_q ($run_evaluate x)) (eo::to_q ($run_evaluate ys))))
  (($run_evaluate.fev105 ys x false) (eo::add ($run_evaluate x) ($run_evaluate ys)))
  )
)
; program: $run_evaluate.fev3
(program $run_evaluate.fev3 ((S Type) (T Type) (x T) (ys S))
  :signature (S T Bool) Real
  (
  (($run_evaluate.fev3 ys x true) (eo::add (eo::to_q ($run_evaluate x)) (eo::to_q ($run_evaluate ys))))
  (($run_evaluate.fev3 ys x false) (eo::define ((_v0 ($run_evaluate ys))) ($run_evaluate.fev105 ys x (eo::eq _v0 (eo::to_q _v0)))))
  )
)
; program: $run_evaluate.fev2
(program $run_evaluate.fev2 ((T Type) (x T) (b Bool) (y T))
  :signature (T T Bool Bool) T
  (
  (($run_evaluate.fev2 y x b true) ($run_evaluate x))
  (($run_evaluate.fev2 y x b false) ($run_evaluate y))
  )
)
; program: $run_evaluate.fev110
(program $run_evaluate.fev110 ((T Type) (y T) (x T) ($eo_131 T) ($eo_130 T))
  :signature (T T T T) Bool
  (
  (($run_evaluate.fev110 y x $eo_130 $eo_131) (_ (= $eo_131) $eo_130))
  )
)
; program: $run_evaluate.fev109
(program $run_evaluate.fev109 ((T Type) (y T) (x T))
  :signature (T T Bool) Bool
  (
  (($run_evaluate.fev109 y x true) (eo::eq ($run_evaluate x) ($run_evaluate y)))
  (($run_evaluate.fev109 y x false) ($run_evaluate.fev110 y x ($run_evaluate y) ($run_evaluate x)))
  )
)
; program: $run_evaluate.fev108
(program $run_evaluate.fev108 ((T Type) (x T) (y T))
  :signature (T T Bool) Bool
  (
  (($run_evaluate.fev108 y x true) (eo::eq ($run_evaluate x) ($run_evaluate y)))
  (($run_evaluate.fev108 y x false) ($run_evaluate.fev109 y x (eo::and (eo::is_bool ($run_evaluate x)) (eo::is_bool ($run_evaluate y)))))
  )
)
; program: $run_evaluate.fev107
(program $run_evaluate.fev107 ((T Type) (x T) (y T))
  :signature (T T Bool) Bool
  (
  (($run_evaluate.fev107 y x true) (eo::eq ($run_evaluate x) ($run_evaluate y)))
  (($run_evaluate.fev107 y x false) ($run_evaluate.fev108 y x (eo::and (eo::is_str ($run_evaluate x)) (eo::is_str ($run_evaluate y)))))
  )
)
; program: $run_evaluate.fev106
(program $run_evaluate.fev106 ((T Type) (x T) (y T))
  :signature (T T Bool) Bool
  (
  (($run_evaluate.fev106 y x true) (eo::eq ($run_evaluate x) ($run_evaluate y)))
  (($run_evaluate.fev106 y x false) ($run_evaluate.fev107 y x (eo::and (eo::is_bin ($run_evaluate x)) (eo::is_bin ($run_evaluate y)))))
  )
)
; program: $run_evaluate.fev1
(program $run_evaluate.fev1 ((T Type) (x T) (y T))
  :signature (T T Bool) Bool
  (
  (($run_evaluate.fev1 y x true) (eo::eq ($run_evaluate x) ($run_evaluate y)))
  (($run_evaluate.fev1 y x false) ($run_evaluate.fev106 y x (eo::and (eo::is_z ($run_evaluate x)) (eo::is_z ($run_evaluate y)))))
  )
)
; program: $run_evaluate
(program $run_evaluate ((S Type) (bs Bool) (b Bool) (b2 Bool) (ys S) (T Type) (y T) (i2 Int) (x T) (i1 Int) (sys (Seq T)) (sz (Seq T)) (ssz (Seq Char)) (ssy (Seq Char)) (ssx (Seq Char)) (sy (Seq T)) (sx (Seq T)) (m Int) (ybs (BitVec m)) (n Int) (zbs (BitVec n)) (yb (BitVec m)) (xb (BitVec m)) (z S))
  :signature (S) S
  (
  (($run_evaluate (_ (= x) y)) ($run_evaluate.fev1 y x (eo::and (eo::is_q ($run_evaluate x)) (eo::is_q ($run_evaluate y)))))
  (($run_evaluate (not b)) (eo::not ($run_evaluate b)))
  (($run_evaluate (_ (_ (ite b) x) y)) ($run_evaluate.fev2 y x b ($run_evaluate b)))
  (($run_evaluate (_ (or b) bs)) (eo::or ($run_evaluate b) ($run_evaluate bs)))
  (($run_evaluate (_ (=> b) b2)) (eo::or (eo::not ($run_evaluate b)) ($run_evaluate b2)))
  (($run_evaluate (_ (and b) bs)) (eo::and ($run_evaluate b) ($run_evaluate bs)))
  (($run_evaluate (_ (xor b) b2)) (eo::xor ($run_evaluate b) ($run_evaluate b2)))
  (($run_evaluate (_ (< x) z)) (eo::is_neg (eo::add (eo::to_q ($run_evaluate x)) (eo::neg (eo::to_q ($run_evaluate z))))))
  (($run_evaluate (_ (<= x) z)) (eo::define ((_v0 (eo::add (eo::to_q ($run_evaluate x)) (eo::neg (eo::to_q ($run_evaluate z)))))) (eo::or (eo::is_neg _v0) (eo::eq _v0 0/1))))
  (($run_evaluate (_ (> x) z)) (eo::is_neg (eo::add (eo::to_q ($run_evaluate z)) (eo::neg (eo::to_q ($run_evaluate x))))))
  (($run_evaluate (_ (>= x) z)) (eo::define ((_v0 (eo::add (eo::to_q ($run_evaluate z)) (eo::neg (eo::to_q ($run_evaluate x)))))) (eo::or (eo::is_neg _v0) (eo::eq _v0 0/1))))
  (($run_evaluate (_ (+ x) ys)) (eo::define ((_v0 ($run_evaluate x))) ($run_evaluate.fev3 ys x (eo::eq _v0 (eo::to_q _v0)))))
  (($run_evaluate (_ (- x) z)) (eo::define ((_v0 ($run_evaluate x))) ($run_evaluate.fev4 z x (eo::eq _v0 (eo::to_q _v0)))))
  (($run_evaluate (_ (* x) ys)) (eo::define ((_v0 ($run_evaluate x))) ($run_evaluate.fev5 ys x (eo::eq _v0 (eo::to_q _v0)))))
  (($run_evaluate ($eoo_-.2 x)) (eo::neg ($run_evaluate x)))
  (($run_evaluate (_ (/ x) y)) (eo::qdiv (eo::to_q ($run_evaluate x)) (eo::to_q ($run_evaluate y))))
  (($run_evaluate (_ (/_total x) y)) ($run_evaluate.fev6 y x (eo::eq (eo::to_q ($run_evaluate y)) 0/1)))
  (($run_evaluate (_ (div i1) i2)) (eo::zdiv ($run_evaluate i1) ($run_evaluate i2)))
  (($run_evaluate (_ (div_total i1) i2)) ($run_evaluate.fev7 i2 i1 (eo::eq ($run_evaluate i2) 0)))
  (($run_evaluate (_ (mod i1) i2)) (eo::zmod ($run_evaluate i1) ($run_evaluate i2)))
  (($run_evaluate (_ (mod_total i1) i2)) ($run_evaluate.fev8 i2 i1 (eo::eq ($run_evaluate i2) 0)))
  (($run_evaluate (to_real x)) (eo::to_q ($run_evaluate x)))
  (($run_evaluate (to_int x)) (eo::to_z ($run_evaluate x)))
  (($run_evaluate (is_int x)) (eo::define ((_v0 ($run_evaluate x))) (eo::eq (eo::to_q (eo::to_z _v0)) (eo::to_q _v0))))
  (($run_evaluate (abs x)) ($run_evaluate.fev9 x (eo::is_neg ($run_evaluate x))))
  (($run_evaluate (int.log2 i1)) ($run_evaluate.fev10 i1 (eo::is_neg (eo::neg ($run_evaluate i1)))))
  (($run_evaluate (int.pow2 i1)) ($run_evaluate.fev11 i1 (eo::is_z ($run_evaluate i1))))
  (($run_evaluate (int.ispow2 i1)) ($run_evaluate.fev12 i1 (eo::is_z ($run_evaluate i1))))
  (($run_evaluate (_ (str.++ sx) sys)) (eo::concat ($run_evaluate sx) ($run_evaluate sys)))
  (($run_evaluate (str.len sx)) (eo::len ($run_evaluate sx)))
  (($run_evaluate (_ (_ (str.substr sx) n) m)) (eo::extract ($run_evaluate sx) ($run_evaluate n) (eo::add -1 ($run_evaluate m))))
  (($run_evaluate (_ (str.at sx) n)) (eo::define ((_v0 ($run_evaluate n))) (eo::extract ($run_evaluate sx) _v0 _v0)))
  (($run_evaluate (_ (str.contains sx) sy)) (eo::not (eo::is_neg (eo::find ($run_evaluate sx) ($run_evaluate sy)))))
  (($run_evaluate (_ (_ (str.replace sx) sy) sz)) ($run_evaluate.fev13 sz sx sy (eo::is_neg (eo::find (eo::to_str ($run_evaluate sx)) (eo::to_str ($run_evaluate sy))))))
  (($run_evaluate (_ (_ (str.replace_all ssx) ssy) ssz)) ($run_evaluate.fev14 ssz ssy ssx (eo::and (eo::is_str ssz) (eo::is_str ssy))))
  (($run_evaluate (_ (str.prefixof sx) sy)) (eo::define ((_v0 ($run_evaluate sx))) (eo::eq _v0 (eo::extract ($run_evaluate sy) 0 (eo::add (eo::len _v0) -1)))))
  (($run_evaluate (_ (str.suffixof sx) sy)) (eo::define ((_v0 ($run_evaluate sy))) (eo::define ((_v1 (eo::len _v0))) (eo::define ((_v2 ($run_evaluate sx))) (eo::eq _v2 (eo::extract _v0 (eo::add _v1 (eo::neg (eo::len _v2))) (eo::add _v1 -1)))))))
  (($run_evaluate (_ (_ (str.indexof sx) sy) n)) ($run_evaluate.fev15 sy sx n (eo::is_neg ($run_evaluate n))))
  (($run_evaluate (str.to_code ssx)) ($run_evaluate.fev16 ssx (eo::eq (eo::len ($run_evaluate ssx)) 1)))
  (($run_evaluate (str.from_code n)) ($run_evaluate.fev17 n ($run_evaluate.fev18 n (eo::is_z ($run_evaluate n)))))
  (($run_evaluate (str.to_int ssx)) ($run_evaluate.fev19 ssx (eo::is_str ($run_evaluate ssx))))
  (($run_evaluate (str.from_int n)) ($run_evaluate.fev20 n (eo::is_z ($run_evaluate n))))
  (($run_evaluate (_ (str.<= ssx) ssy)) ($run_evaluate.fev21 ssy ssx (eo::and (eo::is_str ($run_evaluate ssx)) (eo::is_str ($run_evaluate ssy)))))
  (($run_evaluate (str.to_lower ssx)) ($run_evaluate.fev22 ssx (eo::is_str ($run_evaluate ssx))))
  (($run_evaluate (str.to_upper ssx)) ($run_evaluate.fev23 ssx (eo::is_str ($run_evaluate ssx))))
  (($run_evaluate (str.rev sx)) ($run_evaluate.fev24 sx (eo::is_str ($run_evaluate sx))))
  (($run_evaluate (_ (_ (str.update sx) n) sy)) (eo::define ((_v0 ($run_evaluate n))) ($run_evaluate.fev25 sx n sy (eo::or (eo::gt 0 _v0) (eo::gt _v0 (eo::len ($run_evaluate sx)))))))
  (($run_evaluate (bvnot xb)) (eo::not ($run_evaluate xb)))
  (($run_evaluate (bvneg xb)) (eo::neg ($run_evaluate xb)))
  (($run_evaluate (_ (bvadd xb) ybs)) (eo::add ($run_evaluate xb) ($run_evaluate ybs)))
  (($run_evaluate (_ (bvmul xb) ybs)) (eo::mul ($run_evaluate xb) ($run_evaluate ybs)))
  (($run_evaluate (_ (bvudiv xb) yb)) ($run_evaluate.fev26 yb xb (eo::eq (eo::to_z ($run_evaluate yb)) 0)))
  (($run_evaluate (_ (bvurem xb) yb)) ($run_evaluate.fev27 yb xb (eo::eq (eo::to_z ($run_evaluate yb)) 0)))
  (($run_evaluate (_ (bvand xb) ybs)) (eo::and ($run_evaluate xb) ($run_evaluate ybs)))
  (($run_evaluate (_ (bvor xb) ybs)) (eo::or ($run_evaluate xb) ($run_evaluate ybs)))
  (($run_evaluate (_ (bvxor xb) ybs)) (eo::xor ($run_evaluate xb) ($run_evaluate ybs)))
  (($run_evaluate (_ (concat xb) zbs)) (eo::concat ($run_evaluate xb) ($run_evaluate zbs)))
  (($run_evaluate (_ (bvsub xb) yb)) (eo::add ($run_evaluate xb) (eo::neg ($run_evaluate yb))))
  (($run_evaluate (_ (_ (extract m) n) xb)) (eo::extract ($run_evaluate xb) n m))
  (($run_evaluate (_ (bvult xb) yb)) ($run_evaluate (_ (bvugt yb) xb)))
  (($run_evaluate (_ (bvule xb) yb)) ($run_evaluate (_ (bvuge yb) xb)))
  (($run_evaluate (_ (bvugt xb) yb)) (eo::gt (eo::to_z ($run_evaluate xb)) (eo::to_z ($run_evaluate yb))))
  (($run_evaluate (_ (bvuge xb) yb)) (eo::define ((_v0 ($run_evaluate yb))) (eo::define ((_v1 ($run_evaluate xb))) (eo::or (eo::gt _v1 _v0) (eo::eq _v1 _v0)))))
  (($run_evaluate (_ (bvslt xb) yb)) ($run_evaluate (_ (bvsgt yb) xb)))
  (($run_evaluate (_ (bvsle xb) yb)) ($run_evaluate (_ (bvsge yb) xb)))
  (($run_evaluate (_ (bvsgt xb) yb)) (eo::define ((_v0 ($run_evaluate xb))) (eo::define ((_v1 (eo::add ($bv_bitwidth (eo::typeof _v0)) -1))) (eo::define ((_v2 ($run_evaluate yb))) (eo::define ((_v3 (eo::add ($bv_bitwidth (eo::typeof _v2)) -1))) ($run_evaluate.fev28 yb xb ($run_evaluate.fev29 yb xb (eo::eq (eo::extract _v2 _v3 _v3) #b1)) ($run_evaluate.fev30 yb xb (eo::eq (eo::extract _v0 _v1 _v1) #b1))))))))
  (($run_evaluate (_ (bvsge xb) yb)) (eo::define ((_v0 ($run_evaluate xb))) (eo::define ((_v1 (eo::add ($bv_bitwidth (eo::typeof _v0)) -1))) (eo::define ((_v2 ($run_evaluate yb))) (eo::define ((_v3 (eo::add ($bv_bitwidth (eo::typeof _v2)) -1))) ($run_evaluate.fev31 yb xb ($run_evaluate.fev32 yb xb (eo::eq (eo::extract _v2 _v3 _v3) #b1)) ($run_evaluate.fev33 yb xb (eo::eq (eo::extract _v0 _v1 _v1) #b1))))))))
  (($run_evaluate (_ (bvshl xb) yb)) ($run_evaluate.fev34 yb xb (eo::gt (eo::to_z ($run_evaluate yb)) ($bv_bitwidth (eo::typeof xb)))))
  (($run_evaluate (_ (bvlshr xb) yb)) ($run_evaluate.fev35 yb xb (eo::gt (eo::to_z ($run_evaluate yb)) ($bv_bitwidth (eo::typeof xb)))))
  (($run_evaluate (_ (bvashr xb) yb)) (eo::define ((_v0 ($run_evaluate xb))) (eo::define ((_v1 (eo::add ($bv_bitwidth (eo::typeof _v0)) -1))) ($run_evaluate.fev36 yb xb (eo::eq (eo::extract _v0 _v1 _v1) #b0)))))
  (($run_evaluate (_ (repeat n) xb)) (eo::define ((_v0 ($run_evaluate n))) ($run_evaluate.fev37 xb n ($run_evaluate.fev38 xb n (eo::and (eo::is_z _v0) (eo::not (eo::is_neg _v0)))))))
  (($run_evaluate (_ (sign_extend n) xb)) (eo::define ((_v0 ($run_evaluate n))) ($run_evaluate.fev39 xb n ($run_evaluate xb) ($run_evaluate.fev40 xb n (eo::and (eo::is_z _v0) (eo::not (eo::is_neg _v0)))))))
  (($run_evaluate (_ (zero_extend n) xb)) (eo::define ((_v0 ($run_evaluate n))) ($run_evaluate.fev41 xb n ($run_evaluate xb) ($run_evaluate.fev42 xb n (eo::and (eo::is_z _v0) (eo::not (eo::is_neg _v0)))))))
  (($run_evaluate (_ (@bv n) m)) (eo::to_bin ($run_evaluate m) ($run_evaluate n)))
  (($run_evaluate (@bvsize xb)) ($bv_bitwidth (eo::typeof xb)))
  (($run_evaluate (_ (int_to_bv n) m)) (eo::to_bin ($run_evaluate n) ($run_evaluate m)))
  (($run_evaluate (ubv_to_int xb)) (eo::to_z ($run_evaluate xb)))
  (($run_evaluate (sbv_to_int xb)) (eo::define ((_v0 (eo::add ($bv_bitwidth (eo::typeof xb)) -1))) ($run_evaluate.fev43 xb (eo::eq (eo::extract xb _v0 _v0) #b0))))
  (($run_evaluate z) z)
  )
)
; program: $evaluate_list
(program $evaluate_list ((U Type) (t U) (ts $eo_List))
  :signature ($eo_List) $eo_List
  (
  (($evaluate_list (_ ($eo_List_cons t) ts)) (eo::cons $eo_List_cons ($run_evaluate t) ($evaluate_list ts)))
  (($evaluate_list $eo_List_nil) $eo_List_nil)
  )
)
; program: $get_aci_normal_form.fev7
(program $get_aci_normal_form.fev7 ((m Int) (xb2 (BitVec m)) (xb1 (BitVec m)) ($eo_7 (BitVec m)))
  :signature ((BitVec m) (BitVec m) (BitVec m)) (BitVec m)
  (
  (($get_aci_normal_form.fev7 xb2 xb1 $eo_7) (_ (@aci_sorted bvxor) $eo_7))
  )
)
; program: $get_aci_normal_form.fev6
(program $get_aci_normal_form.fev6 ((m Int) (xb2 (BitVec m)) (xb1 (BitVec m)) ($eo_6 (BitVec m)))
  :signature ((BitVec m) (BitVec m) (BitVec m)) (BitVec m)
  (
  (($get_aci_normal_form.fev6 xb2 xb1 $eo_6) (_ (@aci_sorted bvand) $eo_6))
  )
)
; program: $get_aci_normal_form.fev5
(program $get_aci_normal_form.fev5 ((m Int) (xb2 (BitVec m)) (xb1 (BitVec m)) ($eo_5 (BitVec m)))
  :signature ((BitVec m) (BitVec m) (BitVec m)) (BitVec m)
  (
  (($get_aci_normal_form.fev5 xb2 xb1 $eo_5) (_ (@aci_sorted bvor) $eo_5))
  )
)
; program: $get_aci_normal_form.fev4
(program $get_aci_normal_form.fev4 ((r2 RegLan) (r1 RegLan) ($eo_4 RegLan))
  :signature (RegLan RegLan RegLan) RegLan
  (
  (($get_aci_normal_form.fev4 r2 r1 $eo_4) (_ (@aci_sorted re.inter) $eo_4))
  )
)
; program: $get_aci_normal_form.fev3
(program $get_aci_normal_form.fev3 ((r2 RegLan) (r1 RegLan) ($eo_3 RegLan))
  :signature (RegLan RegLan RegLan) RegLan
  (
  (($get_aci_normal_form.fev3 r2 r1 $eo_3) (_ (@aci_sorted re.union) $eo_3))
  )
)
; program: $get_aci_normal_form.fev2
(program $get_aci_normal_form.fev2 ((b2 Bool) (b1 Bool) ($eo_2 Bool))
  :signature (Bool Bool Bool) Bool
  (
  (($get_aci_normal_form.fev2 b2 b1 $eo_2) (_ (@aci_sorted and) $eo_2))
  )
)
; program: $get_aci_normal_form.fev1
(program $get_aci_normal_form.fev1 ((b2 Bool) (b1 Bool) ($eo_1 Bool))
  :signature (Bool Bool Bool) Bool
  (
  (($get_aci_normal_form.fev1 b2 b1 $eo_1) (_ (@aci_sorted or) $eo_1))
  )
)
; program: $get_aci_normal_form
(program $get_aci_normal_form ((T Type) (b1 Bool) (b2 Bool) (U Type) (xs1 (Seq U)) (xs2 (Seq U)) (r1 RegLan) (r2 RegLan) (m Int) (xb1 (BitVec m)) (xb2 (BitVec m)) (x T))
  :signature (T) T
  (
  (($get_aci_normal_form (_ (or b1) b2)) ($get_aci_normal_form.fev1 b2 b1 ($get_ai_norm (_ (or b1) b2))))
  (($get_aci_normal_form (_ (and b1) b2)) ($get_aci_normal_form.fev2 b2 b1 ($get_ai_norm (_ (and b1) b2))))
  (($get_aci_normal_form (_ (re.union r1) r2)) ($get_aci_normal_form.fev3 r2 r1 ($get_ai_norm (_ (re.union r1) r2))))
  (($get_aci_normal_form (_ (re.inter r1) r2)) ($get_aci_normal_form.fev4 r2 r1 ($get_ai_norm (_ (re.inter r1) r2))))
  (($get_aci_normal_form (_ (bvor xb1) xb2)) ($get_aci_normal_form.fev5 xb2 xb1 ($get_ai_norm (_ (bvor xb1) xb2))))
  (($get_aci_normal_form (_ (bvand xb1) xb2)) ($get_aci_normal_form.fev6 xb2 xb1 ($get_ai_norm (_ (bvand xb1) xb2))))
  (($get_aci_normal_form (_ (bvxor xb1) xb2)) ($get_aci_normal_form.fev7 xb2 xb1 ($get_a_norm (_ (bvxor xb1) xb2))))
  (($get_aci_normal_form (_ (str.++ xs1) xs2)) ($get_a_norm (_ (str.++ xs1) xs2)))
  (($get_aci_normal_form (_ (re.++ r1) r2)) ($get_a_norm (_ (re.++ r1) r2)))
  (($get_aci_normal_form (_ (concat xb1) xb2)) ($get_a_norm (_ (concat xb1) xb2)))
  (($get_aci_normal_form x) x)
  )
)
; fwd-decl: $is_absorb_rec
(program $is_absorb_rec ((U Type) (V Type) (W Type))
  :signature ((-> U (-> U U)) V W) Bool
)
; program: $is_absorb_rec.fev1
(program $is_absorb_rec.fev1 ((U Type) (a U) (f (-> U (-> U U))) (b U) (zero U))
  :signature (U U (-> U (-> U U)) U Bool) Bool
  (
  (($is_absorb_rec.fev1 zero b f a true) true)
  (($is_absorb_rec.fev1 zero b f a false) ($is_absorb_rec f b zero))
  )
)
; program: $is_absorb_rec
(program $is_absorb_rec ((U Type) (V Type) (W Type) (a U) (f (-> U (-> U U))) (b U) (zero U))
  :signature ((-> U (-> U U)) V W) Bool
  (
  (($is_absorb_rec f zero zero) true)
  (($is_absorb_rec f (_ (f a) b) zero) ($is_absorb_rec.fev1 zero b f a ($is_absorb_rec f a zero)))
  (($is_absorb_rec f b zero) false)
  )
)
; program: $get_zero.fev4
(program $get_zero.fev4 ((m Int) (xb1 (BitVec m)) ($eo_5 Int))
  :signature ((BitVec m) Int) Int
  (
  (($get_zero.fev4 xb1 $eo_5) (int.pow2 $eo_5))
  )
)
; program: $get_zero.fev3
(program $get_zero.fev3 ((m Int) (xb1 (BitVec m)))
  :signature ((BitVec m) Bool) Int
  (
  (($get_zero.fev3 xb1 true) 0)
  (($get_zero.fev3 xb1 false) ($arith_eval_int_pow_2_rec ($bv_bitwidth (eo::typeof xb1))))
  )
)
; program: $get_zero.fev2
(program $get_zero.fev2 ((m Int) (xb1 (BitVec m)))
  :signature ((BitVec m) Bool) Int
  (
  (($get_zero.fev2 xb1 true) ($get_zero.fev3 xb1 (eo::is_neg ($bv_bitwidth (eo::typeof xb1)))))
  (($get_zero.fev2 xb1 false) ($get_zero.fev4 xb1 ($bv_bitwidth (eo::typeof xb1))))
  )
)
; program: $get_zero.fev1
(program $get_zero.fev1 ((m Int) ($eoT.fev3 Type) (xb1 (BitVec m)) ($eo_2 Int) ($eo_1 Int))
  :signature ((BitVec m) Int Int) $eoT.fev3
  (
  (($get_zero.fev1 xb1 $eo_1 $eo_2) (eo::to_bin $eo_2 (eo::add $eo_1 -1)))
  )
)
; program: $get_zero
(program $get_zero ((S Type) (b1 Bool) (b2 Bool) (r1 RegLan) (r2 RegLan) (m Int) (xb2 (BitVec m)) (xb1 (BitVec m)))
  :signature (S) S
  (
  (($get_zero (_ (or b1) b2)) true)
  (($get_zero (_ (and b1) b2)) false)
  (($get_zero (_ (re.union r1) r2)) re.all)
  (($get_zero (_ (re.inter r1) r2)) re.none)
  (($get_zero (_ (re.++ r1) r2)) re.none)
  (($get_zero (_ (bvor xb1) xb2)) (eo::define ((_v0 ($bv_bitwidth (eo::typeof xb1)))) ($get_zero.fev1 xb1 ($get_zero.fev2 xb1 (eo::is_z _v0)) _v0)))
  (($get_zero (_ (bvand xb1) xb2)) (eo::to_bin ($bv_bitwidth (eo::typeof xb1)) 0))
  )
)
; program: $is_absorb
(program $is_absorb ((T Type) (U Type) (f (-> U (-> U U))) (t1 T) (t2 T) (zero T))
  :signature (T T) Bool
  (
  (($is_absorb (_ (f t1) t2) zero) ($is_absorb_rec f (_ (f t1) t2) zero))
  )
)
; program: $compute_card.fev2
(program $compute_card.fev2 ((n Int))
  :signature (Int Bool) Int
  (
  (($compute_card.fev2 n true) 0)
  (($compute_card.fev2 n false) ($arith_eval_int_pow_2_rec n))
  )
)
; program: $compute_card.fev1
(program $compute_card.fev1 ((n Int))
  :signature (Int Bool) Int
  (
  (($compute_card.fev1 n true) ($compute_card.fev2 n (eo::is_neg n)))
  (($compute_card.fev1 n false) (int.pow2 n))
  )
)
; program: $compute_card
(program $compute_card ((n Int))
  :signature (Type) Int
  (
  (($compute_card Bool) 2)
  (($compute_card (BitVec n)) ($compute_card.fev1 n (eo::is_z n)))
  )
)


;;; type checking

; program: $eo_typeof_apply
(program $eo_typeof_apply ((T Type) (U Type))
  :signature (Type Type) Type
  (
  (($eo_typeof_apply (-> T U) T) U)
  )
)

; non-ground type defintions

; program: $eo_typeof_@pair
(program $eo_typeof_@pair ((U Type) (T Type))
  :signature (Type Type) Type
  (
  (($eo_typeof_@pair U T) (_ (@Pair U) T))
  )
)
; program: $eo_typeof_ite
(program $eo_typeof_ite ((A Type))
  :signature (Type Type) Type
  (
  (($eo_typeof_ite Bool A) (-> A A))
  )
)
; program: $eo_typeof_=
(program $eo_typeof_= ((A Type))
  :signature (Type) Type
  (
  (($eo_typeof_= A) (-> A Bool))
  )
)
; program: $eo_typeof_lambda
(program $eo_typeof_lambda ((L $eo_List) (B Type))
  :signature (Type Type) Type
  (
  (($eo_typeof_lambda L B) ($get_lambda_type L B))
  )
)
; program: $eo_typeof_distinct
(program $eo_typeof_distinct ((A Type))
  :signature (Type) Type
  (
  (($eo_typeof_distinct A) (-> A Bool))
  )
)
; program: $eo_typeof_@purify
(program $eo_typeof_@purify ((A Type) (t A))
  :signature (Type Type) Type
  (
  (($eo_typeof_@purify A t) A)
  )
)
; program: $eo_typeof_+
(program $eo_typeof_+ ((T Type) (U Type))
  :signature (Type Type) Type
  (
  (($eo_typeof_+ T U) ($arith_typeunion T U))
  )
)
; program: $eo_typeof_-
(program $eo_typeof_- ((T Type) (U Type))
  :signature (Type Type) Type
  (
  (($eo_typeof_- T U) ($arith_typeunion T U))
  )
)
; program: $eo_typeof_*
(program $eo_typeof_* ((T Type) (U Type))
  :signature (Type Type) Type
  (
  (($eo_typeof_* T U) ($arith_typeunion T U))
  )
)
; program: $eo_typeof_<.fev2
(program $eo_typeof_<.fev2 ((U Type) ($eo_4 Type))
  :signature (Type Type Type) Type
  (
  (($eo_typeof_<.fev2 U $eo_4 $eo_4) Bool)
  )
)
; program: $eo_typeof_<.fev1
(program $eo_typeof_<.fev1 ((T Type) ($eo_2 Type) (U Type))
  :signature (Type Type Type Type) Type
  (
  (($eo_typeof_<.fev1 U T $eo_2 $eo_2) ($eo_typeof_<.fev2 U ($is_arith_type U) true))
  )
)
; program: $eo_typeof_<
(program $eo_typeof_< ((U Type) (T Type))
  :signature (Type Type) Type
  (
  (($eo_typeof_< T U) ($eo_typeof_<.fev1 U T ($is_arith_type T) true))
  )
)
; program: $eo_typeof_<=.fev2
(program $eo_typeof_<=.fev2 ((U Type) ($eo_4 Type))
  :signature (Type Type Type) Type
  (
  (($eo_typeof_<=.fev2 U $eo_4 $eo_4) Bool)
  )
)
; program: $eo_typeof_<=.fev1
(program $eo_typeof_<=.fev1 ((T Type) ($eo_2 Type) (U Type))
  :signature (Type Type Type Type) Type
  (
  (($eo_typeof_<=.fev1 U T $eo_2 $eo_2) ($eo_typeof_<=.fev2 U ($is_arith_type U) true))
  )
)
; program: $eo_typeof_<=
(program $eo_typeof_<= ((U Type) (T Type))
  :signature (Type Type) Type
  (
  (($eo_typeof_<= T U) ($eo_typeof_<=.fev1 U T ($is_arith_type T) true))
  )
)
; program: $eo_typeof_>.fev2
(program $eo_typeof_>.fev2 ((U Type) ($eo_4 Type))
  :signature (Type Type Type) Type
  (
  (($eo_typeof_>.fev2 U $eo_4 $eo_4) Bool)
  )
)
; program: $eo_typeof_>.fev1
(program $eo_typeof_>.fev1 ((T Type) ($eo_2 Type) (U Type))
  :signature (Type Type Type Type) Type
  (
  (($eo_typeof_>.fev1 U T $eo_2 $eo_2) ($eo_typeof_>.fev2 U ($is_arith_type U) true))
  )
)
; program: $eo_typeof_>
(program $eo_typeof_> ((U Type) (T Type))
  :signature (Type Type) Type
  (
  (($eo_typeof_> T U) ($eo_typeof_>.fev1 U T ($is_arith_type T) true))
  )
)
; program: $eo_typeof_>=.fev2
(program $eo_typeof_>=.fev2 ((U Type) ($eo_4 Type))
  :signature (Type Type Type) Type
  (
  (($eo_typeof_>=.fev2 U $eo_4 $eo_4) Bool)
  )
)
; program: $eo_typeof_>=.fev1
(program $eo_typeof_>=.fev1 ((T Type) ($eo_2 Type) (U Type))
  :signature (Type Type Type Type) Type
  (
  (($eo_typeof_>=.fev1 U T $eo_2 $eo_2) ($eo_typeof_>=.fev2 U ($is_arith_type U) true))
  )
)
; program: $eo_typeof_>=
(program $eo_typeof_>= ((U Type) (T Type))
  :signature (Type Type) Type
  (
  (($eo_typeof_>= T U) ($eo_typeof_>=.fev1 U T ($is_arith_type T) true))
  )
)
; program: $eo_typeof_to_real.fev1
(program $eo_typeof_to_real.fev1 ((T Type) ($eo_2 Type))
  :signature (Type Type Type) Type
  (
  (($eo_typeof_to_real.fev1 T $eo_2 $eo_2) Real)
  )
)
; program: $eo_typeof_to_real
(program $eo_typeof_to_real ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_to_real T) ($eo_typeof_to_real.fev1 T ($is_arith_type T) true))
  )
)
; program: $eo_typeof_to_int.fev1
(program $eo_typeof_to_int.fev1 ((T Type) ($eo_2 Type))
  :signature (Type Type Type) Type
  (
  (($eo_typeof_to_int.fev1 T $eo_2 $eo_2) Int)
  )
)
; program: $eo_typeof_to_int
(program $eo_typeof_to_int ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_to_int T) ($eo_typeof_to_int.fev1 T ($is_arith_type T) true))
  )
)
; program: $eo_typeof_is_int.fev1
(program $eo_typeof_is_int.fev1 ((T Type) ($eo_2 Type))
  :signature (Type Type Type) Type
  (
  (($eo_typeof_is_int.fev1 T $eo_2 $eo_2) Bool)
  )
)
; program: $eo_typeof_is_int
(program $eo_typeof_is_int ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_is_int T) ($eo_typeof_is_int.fev1 T ($is_arith_type T) true))
  )
)
; program: $eo_typeof_abs.fev1
(program $eo_typeof_abs.fev1 (($eo_2 Type) (T Type))
  :signature (Type Type Type) Type
  (
  (($eo_typeof_abs.fev1 T $eo_2 $eo_2) T)
  )
)
; program: $eo_typeof_abs
(program $eo_typeof_abs ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_abs T) ($eo_typeof_abs.fev1 T ($is_arith_type T) true))
  )
)
; program: $eo_typeof_^.fev2
(program $eo_typeof_^.fev2 (($eo_2 Type) (T Type))
  :signature (Type Type Type) Type
  (
  (($eo_typeof_^.fev2 T $eo_2 $eo_2) T)
  )
)
; program: $eo_typeof_^.fev1
(program $eo_typeof_^.fev1 ((T Type) ($eo_1 Type))
  :signature (Type Type) Type
  (
  (($eo_typeof_^.fev1 T $eo_1) (-> T $eo_1))
  )
)
; program: $eo_typeof_^
(program $eo_typeof_^ ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_^ T) ($eo_typeof_^.fev1 T ($eo_typeof_^.fev2 T ($is_arith_type T) true)))
  )
)
; program: $eo_typeof_$eoo_-.2.fev1
(program $eo_typeof_$eoo_-.2.fev1 (($eo_2 Type) (T Type))
  :signature (Type Type Type) Type
  (
  (($eo_typeof_$eoo_-.2.fev1 T $eo_2 $eo_2) T)
  )
)
; program: $eo_typeof_$eoo_-.2
(program $eo_typeof_$eoo_-.2 ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_$eoo_-.2 T) ($eo_typeof_$eoo_-.2.fev1 T ($is_arith_type T) true))
  )
)
; program: $eo_typeof_select
(program $eo_typeof_select ((U Type) (T Type))
  :signature (Type) Type
  (
  (($eo_typeof_select (_ (Array U) T)) (-> U T))
  )
)
; program: $eo_typeof_store
(program $eo_typeof_store ((U Type) (T Type))
  :signature (Type) Type
  (
  (($eo_typeof_store (_ (Array U) T)) (-> U (-> T (_ (Array U) T))))
  )
)
; program: $eo_typeof_@array_deq_diff
(program $eo_typeof_@array_deq_diff ((T Type) (U Type) (a (_ (Array T) U)) (b (_ (Array T) U)))
  :signature (Type Type Type Type) Type
  (
  ((eo::define ((_v0 (_ (Array T) U))) ($eo_typeof_@array_deq_diff _v0 a _v0 b)) T)
  )
)
; program: $eo_typeof_/.fev2
(program $eo_typeof_/.fev2 ((U Type) ($eo_4 Type))
  :signature (Type Type Type) Type
  (
  (($eo_typeof_/.fev2 U $eo_4 $eo_4) Real)
  )
)
; program: $eo_typeof_/.fev1
(program $eo_typeof_/.fev1 ((T Type) ($eo_2 Type) (U Type))
  :signature (Type Type Type Type) Type
  (
  (($eo_typeof_/.fev1 U T $eo_2 $eo_2) ($eo_typeof_/.fev2 U ($is_arith_type U) true))
  )
)
; program: $eo_typeof_/
(program $eo_typeof_/ ((U Type) (T Type))
  :signature (Type Type) Type
  (
  (($eo_typeof_/ T U) ($eo_typeof_/.fev1 U T ($is_arith_type T) true))
  )
)
; program: $eo_typeof_/_total.fev2
(program $eo_typeof_/_total.fev2 ((U Type) ($eo_4 Type))
  :signature (Type Type Type) Type
  (
  (($eo_typeof_/_total.fev2 U $eo_4 $eo_4) Real)
  )
)
; program: $eo_typeof_/_total.fev1
(program $eo_typeof_/_total.fev1 ((T Type) ($eo_2 Type) (U Type))
  :signature (Type Type Type Type) Type
  (
  (($eo_typeof_/_total.fev1 U T $eo_2 $eo_2) ($eo_typeof_/_total.fev2 U ($is_arith_type U) true))
  )
)
; program: $eo_typeof_/_total
(program $eo_typeof_/_total ((U Type) (T Type))
  :signature (Type Type) Type
  (
  (($eo_typeof_/_total T U) ($eo_typeof_/_total.fev1 U T ($is_arith_type T) true))
  )
)
; program: $eo_typeof_@bvsize
(program $eo_typeof_@bvsize ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_@bvsize (BitVec m)) Int)
  )
)
; program: $eo_typeof_concat.fev1
(program $eo_typeof_concat.fev1 ((m Int) (n Int) ($eo_1 Int))
  :signature (Int Int Int) Type
  (
  (($eo_typeof_concat.fev1 m n $eo_1) (BitVec $eo_1))
  )
)
; program: $eo_typeof_concat
(program $eo_typeof_concat ((n Int) (m Int))
  :signature (Type Type) Type
  (
  (($eo_typeof_concat (BitVec n) (BitVec m)) ($eo_typeof_concat.fev1 m n (eo::add n m)))
  )
)
; program: $eo_typeof_extract.fev1
(program $eo_typeof_extract.fev1 ((l Int) ($eo_1 Int))
  :signature (Int Int) Type
  (
  (($eo_typeof_extract.fev1 l $eo_1) (BitVec $eo_1))
  )
)
; program: $eo_typeof_extract
(program $eo_typeof_extract ((h Int) (n Int) (l Int))
  :signature (Type Type Type) Type
  (
  (($eo_typeof_extract h l (BitVec n)) ($eo_typeof_extract.fev1 l (eo::add 1 (eo::neg l))))
  )
)
; program: $eo_typeof_repeat.fev1
(program $eo_typeof_repeat.fev1 ((n Int) (i Int) ($eo_1 Int))
  :signature (Int Int Int) Type
  (
  (($eo_typeof_repeat.fev1 n i $eo_1) (BitVec $eo_1))
  )
)
; program: $eo_typeof_repeat
(program $eo_typeof_repeat ((i Int) (n Int))
  :signature (Type Type) Type
  (
  (($eo_typeof_repeat i (BitVec n)) ($eo_typeof_repeat.fev1 n i (eo::mul i n)))
  )
)
; program: $eo_typeof_bvnot
(program $eo_typeof_bvnot ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvnot (BitVec m)) (BitVec m))
  )
)
; program: $eo_typeof_bvand
(program $eo_typeof_bvand ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvand (BitVec m)) (eo::define ((_v0 (BitVec m))) (-> _v0 _v0)))
  )
)
; program: $eo_typeof_bvor
(program $eo_typeof_bvor ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvor (BitVec m)) (eo::define ((_v0 (BitVec m))) (-> _v0 _v0)))
  )
)
; program: $eo_typeof_bvnand
(program $eo_typeof_bvnand ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvnand (BitVec m)) (eo::define ((_v0 (BitVec m))) (-> _v0 _v0)))
  )
)
; program: $eo_typeof_bvnor
(program $eo_typeof_bvnor ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvnor (BitVec m)) (eo::define ((_v0 (BitVec m))) (-> _v0 _v0)))
  )
)
; program: $eo_typeof_bvxor
(program $eo_typeof_bvxor ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvxor (BitVec m)) (eo::define ((_v0 (BitVec m))) (-> _v0 _v0)))
  )
)
; program: $eo_typeof_bvxnor
(program $eo_typeof_bvxnor ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvxnor (BitVec m)) (eo::define ((_v0 (BitVec m))) (-> _v0 _v0)))
  )
)
; program: $eo_typeof_bvcomp
(program $eo_typeof_bvcomp ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvcomp (BitVec m)) (-> (BitVec m) (BitVec 1)))
  )
)
; program: $eo_typeof_bvneg
(program $eo_typeof_bvneg ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvneg (BitVec m)) (BitVec m))
  )
)
; program: $eo_typeof_bvadd
(program $eo_typeof_bvadd ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvadd (BitVec m)) (eo::define ((_v0 (BitVec m))) (-> _v0 _v0)))
  )
)
; program: $eo_typeof_bvmul
(program $eo_typeof_bvmul ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvmul (BitVec m)) (eo::define ((_v0 (BitVec m))) (-> _v0 _v0)))
  )
)
; program: $eo_typeof_bvudiv
(program $eo_typeof_bvudiv ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvudiv (BitVec m)) (eo::define ((_v0 (BitVec m))) (-> _v0 _v0)))
  )
)
; program: $eo_typeof_bvurem
(program $eo_typeof_bvurem ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvurem (BitVec m)) (eo::define ((_v0 (BitVec m))) (-> _v0 _v0)))
  )
)
; program: $eo_typeof_bvsub
(program $eo_typeof_bvsub ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvsub (BitVec m)) (eo::define ((_v0 (BitVec m))) (-> _v0 _v0)))
  )
)
; program: $eo_typeof_bvsdiv
(program $eo_typeof_bvsdiv ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvsdiv (BitVec m)) (eo::define ((_v0 (BitVec m))) (-> _v0 _v0)))
  )
)
; program: $eo_typeof_bvsrem
(program $eo_typeof_bvsrem ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvsrem (BitVec m)) (eo::define ((_v0 (BitVec m))) (-> _v0 _v0)))
  )
)
; program: $eo_typeof_bvsmod
(program $eo_typeof_bvsmod ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvsmod (BitVec m)) (eo::define ((_v0 (BitVec m))) (-> _v0 _v0)))
  )
)
; program: $eo_typeof_bvult
(program $eo_typeof_bvult ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvult (BitVec m)) (-> (BitVec m) Bool))
  )
)
; program: $eo_typeof_bvule
(program $eo_typeof_bvule ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvule (BitVec m)) (-> (BitVec m) Bool))
  )
)
; program: $eo_typeof_bvugt
(program $eo_typeof_bvugt ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvugt (BitVec m)) (-> (BitVec m) Bool))
  )
)
; program: $eo_typeof_bvuge
(program $eo_typeof_bvuge ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvuge (BitVec m)) (-> (BitVec m) Bool))
  )
)
; program: $eo_typeof_bvslt
(program $eo_typeof_bvslt ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvslt (BitVec m)) (-> (BitVec m) Bool))
  )
)
; program: $eo_typeof_bvsle
(program $eo_typeof_bvsle ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvsle (BitVec m)) (-> (BitVec m) Bool))
  )
)
; program: $eo_typeof_bvsgt
(program $eo_typeof_bvsgt ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvsgt (BitVec m)) (-> (BitVec m) Bool))
  )
)
; program: $eo_typeof_bvsge
(program $eo_typeof_bvsge ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvsge (BitVec m)) (-> (BitVec m) Bool))
  )
)
; program: $eo_typeof_bvshl
(program $eo_typeof_bvshl ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvshl (BitVec m)) (eo::define ((_v0 (BitVec m))) (-> _v0 _v0)))
  )
)
; program: $eo_typeof_bvlshr
(program $eo_typeof_bvlshr ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvlshr (BitVec m)) (eo::define ((_v0 (BitVec m))) (-> _v0 _v0)))
  )
)
; program: $eo_typeof_bvashr
(program $eo_typeof_bvashr ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvashr (BitVec m)) (eo::define ((_v0 (BitVec m))) (-> _v0 _v0)))
  )
)
; program: $eo_typeof_zero_extend.fev1
(program $eo_typeof_zero_extend.fev1 ((i Int) (m Int) ($eo_1 Int))
  :signature (Int Int Int) Type
  (
  (($eo_typeof_zero_extend.fev1 i m $eo_1) (BitVec $eo_1))
  )
)
; program: $eo_typeof_zero_extend
(program $eo_typeof_zero_extend ((m Int) (i Int))
  :signature (Type Type) Type
  (
  (($eo_typeof_zero_extend i (BitVec m)) ($eo_typeof_zero_extend.fev1 i m (eo::add m i)))
  )
)
; program: $eo_typeof_sign_extend.fev1
(program $eo_typeof_sign_extend.fev1 ((i Int) (m Int) ($eo_1 Int))
  :signature (Int Int Int) Type
  (
  (($eo_typeof_sign_extend.fev1 i m $eo_1) (BitVec $eo_1))
  )
)
; program: $eo_typeof_sign_extend
(program $eo_typeof_sign_extend ((m Int) (i Int))
  :signature (Type Type) Type
  (
  (($eo_typeof_sign_extend i (BitVec m)) ($eo_typeof_sign_extend.fev1 i m (eo::add m i)))
  )
)
; program: $eo_typeof_rotate_left
(program $eo_typeof_rotate_left ((m Int))
  :signature (Type Type) Type
  (
  (($eo_typeof_rotate_left Int (BitVec m)) (BitVec m))
  )
)
; program: $eo_typeof_rotate_right
(program $eo_typeof_rotate_right ((m Int))
  :signature (Type Type) Type
  (
  (($eo_typeof_rotate_right Int (BitVec m)) (BitVec m))
  )
)
; program: $eo_typeof_reduce_and
(program $eo_typeof_reduce_and ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_reduce_and (BitVec m)) (BitVec 1))
  )
)
; program: $eo_typeof_reduce_or
(program $eo_typeof_reduce_or ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_reduce_or (BitVec m)) (BitVec 1))
  )
)
; program: $eo_typeof_reduce_xor
(program $eo_typeof_reduce_xor ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_reduce_xor (BitVec m)) (BitVec 1))
  )
)
; program: $eo_typeof_bvite
(program $eo_typeof_bvite ((T Type))
  :signature (Type Type) Type
  (
  (($eo_typeof_bvite (BitVec 1) T) (-> T T))
  )
)
; program: $eo_typeof_bv1ult
(program $eo_typeof_bv1ult ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bv1ult (BitVec m)) (-> (BitVec m) (BitVec 1)))
  )
)
; program: $eo_typeof_bvuaddo
(program $eo_typeof_bvuaddo ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvuaddo (BitVec m)) (-> (BitVec m) Bool))
  )
)
; program: $eo_typeof_bvnego
(program $eo_typeof_bvnego ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvnego (BitVec m)) Bool)
  )
)
; program: $eo_typeof_bvsaddo
(program $eo_typeof_bvsaddo ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvsaddo (BitVec m)) (-> (BitVec m) Bool))
  )
)
; program: $eo_typeof_bvumulo
(program $eo_typeof_bvumulo ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvumulo (BitVec m)) (-> (BitVec m) Bool))
  )
)
; program: $eo_typeof_bvsmulo
(program $eo_typeof_bvsmulo ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvsmulo (BitVec m)) (-> (BitVec m) Bool))
  )
)
; program: $eo_typeof_bvusubo
(program $eo_typeof_bvusubo ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvusubo (BitVec m)) (-> (BitVec m) Bool))
  )
)
; program: $eo_typeof_bvssubo
(program $eo_typeof_bvssubo ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvssubo (BitVec m)) (-> (BitVec m) Bool))
  )
)
; program: $eo_typeof_bvsdivo
(program $eo_typeof_bvsdivo ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvsdivo (BitVec m)) (-> (BitVec m) Bool))
  )
)
; program: $eo_typeof_bvultbv
(program $eo_typeof_bvultbv ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvultbv (BitVec m)) (-> (BitVec m) (BitVec 1)))
  )
)
; program: $eo_typeof_bvsltbv
(program $eo_typeof_bvsltbv ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvsltbv (BitVec m)) (-> (BitVec m) (BitVec 1)))
  )
)
; program: $eo_typeof_bvredand
(program $eo_typeof_bvredand ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvredand (BitVec m)) (BitVec 1))
  )
)
; program: $eo_typeof_bvredor
(program $eo_typeof_bvredor ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_bvredor (BitVec m)) (BitVec 1))
  )
)
; program: $eo_typeof_@bit
(program $eo_typeof_@bit ((m Int))
  :signature (Type Type) Type
  (
  (($eo_typeof_@bit Int (BitVec m)) Bool)
  )
)
; program: $eo_typeof_@from_bools.fev1
(program $eo_typeof_@from_bools.fev1 ((n Int) ($eo_1 Int))
  :signature (Int Int) Type
  (
  (($eo_typeof_@from_bools.fev1 n $eo_1) (BitVec $eo_1))
  )
)
; program: $eo_typeof_@from_bools
(program $eo_typeof_@from_bools ((n Int))
  :signature (Type Type) Type
  (
  (($eo_typeof_@from_bools Bool (BitVec n)) ($eo_typeof_@from_bools.fev1 n (eo::add 1 n)))
  )
)
; program: $eo_typeof_@bv
(program $eo_typeof_@bv ((value Int) (w Int))
  :signature (Type Type) Type
  (
  (($eo_typeof_@bv value w) (BitVec w))
  )
)
; program: $eo_typeof_@mon
(program $eo_typeof_@mon ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_@mon T) (-> Real @Monomial))
  )
)
; program: $eo_typeof_seq.empty
(program $eo_typeof_seq.empty ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_seq.empty (Seq T)) (Seq T))
  )
)
; program: $eo_typeof_str.len
(program $eo_typeof_str.len ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_str.len (Seq T)) Int)
  )
)
; program: $eo_typeof_str.++
(program $eo_typeof_str.++ ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_str.++ (Seq T)) (eo::define ((_v0 (Seq T))) (-> _v0 _v0)))
  )
)
; program: $eo_typeof_str.substr
(program $eo_typeof_str.substr ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_str.substr (Seq T)) (-> Int (-> Int (Seq T))))
  )
)
; program: $eo_typeof_str.contains
(program $eo_typeof_str.contains ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_str.contains (Seq T)) (-> (Seq T) Bool))
  )
)
; program: $eo_typeof_str.replace
(program $eo_typeof_str.replace ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_str.replace (Seq T)) (eo::define ((_v0 (Seq T))) (-> _v0 (-> _v0 _v0))))
  )
)
; program: $eo_typeof_str.indexof
(program $eo_typeof_str.indexof ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_str.indexof (Seq T)) (-> (Seq T) (-> Int Int)))
  )
)
; program: $eo_typeof_str.at
(program $eo_typeof_str.at ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_str.at (Seq T)) (-> Int (Seq T)))
  )
)
; program: $eo_typeof_str.prefixof
(program $eo_typeof_str.prefixof ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_str.prefixof (Seq T)) (-> (Seq T) Bool))
  )
)
; program: $eo_typeof_str.suffixof
(program $eo_typeof_str.suffixof ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_str.suffixof (Seq T)) (-> (Seq T) Bool))
  )
)
; program: $eo_typeof_str.rev
(program $eo_typeof_str.rev ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_str.rev (Seq T)) (Seq T))
  )
)
; program: $eo_typeof_str.update
(program $eo_typeof_str.update ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_str.update (Seq T)) (eo::define ((_v0 (Seq T))) (-> Int (-> _v0 _v0))))
  )
)
; program: $eo_typeof_str.replace_all
(program $eo_typeof_str.replace_all ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_str.replace_all (Seq T)) (eo::define ((_v0 (Seq T))) (-> _v0 (-> _v0 _v0))))
  )
)
; program: $eo_typeof_seq.unit
(program $eo_typeof_seq.unit ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_seq.unit T) (Seq T))
  )
)
; program: $eo_typeof_seq.nth
(program $eo_typeof_seq.nth ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_seq.nth (Seq T)) (-> Int T))
  )
)
; program: $eo_typeof_@re_unfold_pos_component
(program $eo_typeof_@re_unfold_pos_component ((s (Seq Char)) (r RegLan) (n Int))
  :signature (Type Type Type) Type
  (
  (($eo_typeof_@re_unfold_pos_component s r n) (Seq Char))
  )
)
; program: $eo_typeof_@strings_deq_diff
(program $eo_typeof_@strings_deq_diff ((T Type) (s (Seq T)) (t (Seq T)))
  :signature (Type Type Type Type) Type
  (
  ((eo::define ((_v0 (Seq T))) ($eo_typeof_@strings_deq_diff _v0 s _v0 t)) Int)
  )
)
; program: $eo_typeof_@strings_stoi_result
(program $eo_typeof_@strings_stoi_result ((s (Seq Char)))
  :signature (Type) Type
  (
  (($eo_typeof_@strings_stoi_result s) (-> Int Int))
  )
)
; program: $eo_typeof_@strings_stoi_non_digit
(program $eo_typeof_@strings_stoi_non_digit ((s (Seq Char)))
  :signature (Type) Type
  (
  (($eo_typeof_@strings_stoi_non_digit s) Int)
  )
)
; program: $eo_typeof_@strings_itos_result
(program $eo_typeof_@strings_itos_result ((n Int))
  :signature (Type) Type
  (
  (($eo_typeof_@strings_itos_result n) (-> Int Int))
  )
)
; program: $eo_typeof_@strings_num_occur
(program $eo_typeof_@strings_num_occur ((T Type) (s (Seq T)) (t (Seq T)))
  :signature (Type Type Type Type) Type
  (
  ((eo::define ((_v0 (Seq T))) ($eo_typeof_@strings_num_occur _v0 s _v0 t)) Int)
  )
)
; program: $eo_typeof_@strings_num_occur_re
(program $eo_typeof_@strings_num_occur_re ((e (Seq Char)) (b RegLan))
  :signature (Type Type) Type
  (
  (($eo_typeof_@strings_num_occur_re e b) Int)
  )
)
; program: $eo_typeof_@strings_occur_index
(program $eo_typeof_@strings_occur_index ((T Type) (s (Seq T)) (t (Seq T)))
  :signature (Type Type Type Type Type) Type
  (
  ((eo::define ((_v0 (Seq T))) ($eo_typeof_@strings_occur_index _v0 s _v0 t Int)) Int)
  )
)
; program: $eo_typeof_@strings_occur_index_re
(program $eo_typeof_@strings_occur_index_re ((s (Seq Char)) (r RegLan))
  :signature (Type Type) Type
  (
  (($eo_typeof_@strings_occur_index_re s r) (-> Int Int))
  )
)
; program: $eo_typeof_@strings_occur_len_re
(program $eo_typeof_@strings_occur_len_re ((s (Seq Char)) (r RegLan))
  :signature (Type Type) Type
  (
  (($eo_typeof_@strings_occur_len_re s r) (-> Int Int))
  )
)
; program: $eo_typeof_@strings_replace_all_result
(program $eo_typeof_@strings_replace_all_result ((T Type) (t (Seq T)))
  :signature (Type Type Type) Type
  (
  (($eo_typeof_@strings_replace_all_result (Seq T) t Int) (Seq T))
  )
)
; program: $eo_typeof_@re_first_match_pre
(program $eo_typeof_@re_first_match_pre ((h (Seq Char)) (e RegLan))
  :signature (Type Type) Type
  (
  (($eo_typeof_@re_first_match_pre h e) (Seq Char))
  )
)
; program: $eo_typeof_@re_first_match
(program $eo_typeof_@re_first_match ((i (Seq Char)) (f RegLan))
  :signature (Type Type) Type
  (
  (($eo_typeof_@re_first_match i f) (Seq Char))
  )
)
; program: $eo_typeof_@re_first_match_post
(program $eo_typeof_@re_first_match_post ((j (Seq Char)) (g RegLan))
  :signature (Type Type) Type
  (
  (($eo_typeof_@re_first_match_post j g) (Seq Char))
  )
)
; program: $eo_typeof_@witness_string_length
(program $eo_typeof_@witness_string_length ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_@witness_string_length T) (-> Int (-> Int T)))
  )
)
; program: $eo_typeof_@quantifiers_skolemize
(program $eo_typeof_@quantifiers_skolemize ((F Bool) (i Int))
  :signature (Type Type) Type
  (
  (($eo_typeof_@quantifiers_skolemize F i) ($assoc_nil_nth_type $eo_List_cons ($get_var_list F) i))
  )
)
; program: $eo_typeof_@witness_inv_condition
(program $eo_typeof_@witness_inv_condition ((F Bool))
  :signature (Type) Type
  (
  (($eo_typeof_@witness_inv_condition F) ($assoc_nil_nth_type $eo_List_cons ($get_var_list F) 0))
  )
)
; program: $eo_typeof_is
(program $eo_typeof_is ((C Type) (D Type))
  :signature (Type Type) Type
  (
  (($eo_typeof_is C D) Bool)
  )
)
; program: $eo_typeof_update
(program $eo_typeof_update ((S Type) (T Type) (D Type))
  :signature (Type Type Type) Type
  (
  (($eo_typeof_update S D T) D)
  )
)
; program: $eo_typeof_tuple
(program $eo_typeof_tuple ((T Type) (U Type))
  :signature (Type Type) Type
  (
  (($eo_typeof_tuple T U) (eo::cons Tuple T U))
  )
)
; program: $eo_typeof_tuple.select
(program $eo_typeof_tuple.select ((T Type) (i Int))
  :signature (Type Type) Type
  (
  (($eo_typeof_tuple.select i T) (eo::list_nth Tuple T i))
  )
)
; program: $eo_typeof_tuple.update.fev1
(program $eo_typeof_tuple.update.fev1 ((i Int) ($eo_1 Type) (T Type))
  :signature (Type Int Type) Type
  (
  (($eo_typeof_tuple.update.fev1 T i $eo_1) (-> $eo_1 T))
  )
)
; program: $eo_typeof_tuple.update
(program $eo_typeof_tuple.update ((T Type) (i Int))
  :signature (Type Type) Type
  (
  (($eo_typeof_tuple.update i T) ($eo_typeof_tuple.update.fev1 T i (eo::list_nth Tuple T i)))
  )
)
; program: $eo_typeof_set.empty
(program $eo_typeof_set.empty ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_set.empty (Set T)) (Set T))
  )
)
; program: $eo_typeof_set.singleton
(program $eo_typeof_set.singleton ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_set.singleton T) (Set T))
  )
)
; program: $eo_typeof_set.union
(program $eo_typeof_set.union ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_set.union (Set T)) (eo::define ((_v0 (Set T))) (-> _v0 _v0)))
  )
)
; program: $eo_typeof_set.inter
(program $eo_typeof_set.inter ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_set.inter (Set T)) (eo::define ((_v0 (Set T))) (-> _v0 _v0)))
  )
)
; program: $eo_typeof_set.minus
(program $eo_typeof_set.minus ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_set.minus (Set T)) (eo::define ((_v0 (Set T))) (-> _v0 _v0)))
  )
)
; program: $eo_typeof_set.member
(program $eo_typeof_set.member ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_set.member T) (-> (Set T) Bool))
  )
)
; program: $eo_typeof_set.subset
(program $eo_typeof_set.subset ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_set.subset (Set T)) (-> (Set T) Bool))
  )
)
; program: $eo_typeof_set.choose
(program $eo_typeof_set.choose ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_set.choose (Set T)) T)
  )
)
; program: $eo_typeof_set.is_empty
(program $eo_typeof_set.is_empty ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_set.is_empty (Set T)) Bool)
  )
)
; program: $eo_typeof_set.is_singleton
(program $eo_typeof_set.is_singleton ((T Type))
  :signature (Type) Type
  (
  (($eo_typeof_set.is_singleton (Set T)) Bool)
  )
)
; program: $eo_typeof_set.insert
(program $eo_typeof_set.insert ((T Type))
  :signature (Type Type) Type
  (
  (($eo_typeof_set.insert $eo_List (Set T)) (Set T))
  )
)
; program: $eo_typeof_@sets_deq_diff
(program $eo_typeof_@sets_deq_diff ((T Type) (s (Set T)) (t (Set T)))
  :signature (Type Type Type Type) Type
  (
  ((eo::define ((_v0 (Set T))) ($eo_typeof_@sets_deq_diff _v0 s _v0 t)) T)
  )
)
; program: $eo_typeof_int_to_bv
(program $eo_typeof_int_to_bv ((w Int))
  :signature (Type) Type
  (
  (($eo_typeof_int_to_bv w) (-> Int (BitVec w)))
  )
)
; program: $eo_typeof_ubv_to_int
(program $eo_typeof_ubv_to_int ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_ubv_to_int (BitVec m)) Int)
  )
)
; program: $eo_typeof_sbv_to_int
(program $eo_typeof_sbv_to_int ((m Int))
  :signature (Type) Type
  (
  (($eo_typeof_sbv_to_int (BitVec m)) Int)
  )
)
; program: $eo_typeof_@aci_sorted
(program $eo_typeof_@aci_sorted ((U Type) (T Type))
  :signature (Type Type) Type
  (
  (($eo_typeof_@aci_sorted U T) T)
  )
)
; program: $eo_typeof_@const
(program $eo_typeof_@const ((id Int) (T Type))
  :signature (Type Type) Type
  (
  (($eo_typeof_@const id T) T)
  )
)


; program: $eo_typeof_fun_type
; Calling ($eo_typeof_fun_type Ut Tt) returns the type of (-> U T), 
; given that U has type Ut and T has type Tt. 
(program $eo_typeof_fun_type ()
  :signature (Type Type) Type
  (
  (($eo_typeof_fun_type Type Type) Type)
  )
)

; program: $eo_typeof_main
; This defines the type rules for non-builtin terms. It is used as a subroutine
; of the final $eo_typeof routine, defined in eo_builtin_smt.eo.
(program $eo_typeof_main
  ((T Type) (U Type) (V Type) (W Type) (f (-> U V T)) (x U) (t T)
   (W1 Type) (x1 W1) (W2 Type) (x2 W2) (W3 Type) (x3 W3)) ; assumes functions can be monomorphized with at most 3 arguments
  :signature (T) Type
  (
  (($eo_typeof_main Type)      Type)
  (($eo_typeof_main (-> T U))  ($eo_typeof_fun_type ($eo_typeof T) ($eo_typeof U))) ; requires both children are types
  (($eo_typeof_main Bool)      Type)
  (($eo_typeof_main true)      Bool)
  (($eo_typeof_main false)     Bool)
  ; type-rule: Int
  (($eo_typeof_main Int) Type)
  ; type-rule: Real
  (($eo_typeof_main Real) Type)
  ; type-rule: Char
  (($eo_typeof_main Char) Type)
  ; type-rule: Seq
  (($eo_typeof_main Seq) (-> Type Type))
  ; type-rule: @Pair
  (($eo_typeof_main @Pair) (-> Type (-> Type Type)))
  ; type-rule: @pair
  (($eo_typeof_main (_ (@pair x1) x2)) ($eo_typeof_@pair ($eo_typeof x1) ($eo_typeof x2)))
  ; type-rule: @result.null
  (($eo_typeof_main @result.null) Bool)
  ; type-rule: @result.invalid
  (($eo_typeof_main @result.invalid) Bool)
  ; type-rule: ite
  (($eo_typeof_main (_ (ite x1) x2)) ($eo_typeof_ite ($eo_typeof x1) ($eo_typeof x2)))
  ; type-rule: not
  (($eo_typeof_main not) (-> Bool Bool))
  ; type-rule: or
  (($eo_typeof_main or) (-> Bool (-> Bool Bool)))
  ; type-rule: and
  (($eo_typeof_main and) (-> Bool (-> Bool Bool)))
  ; type-rule: =>
  (($eo_typeof_main =>) (-> Bool (-> Bool Bool)))
  ; type-rule: xor
  (($eo_typeof_main xor) (-> Bool (-> Bool Bool)))
  ; type-rule: =
  (($eo_typeof_main (= x1)) ($eo_typeof_= ($eo_typeof x1)))
  ; type-rule: lambda
  (($eo_typeof_main (_ (lambda x1) x2)) ($eo_typeof_lambda x1 ($eo_typeof x2)))
  ; type-rule: distinct
  (($eo_typeof_main (distinct x1)) ($eo_typeof_distinct ($eo_typeof x1)))
  ; type-rule: @purify
  (($eo_typeof_main (@purify x1)) ($eo_typeof_@purify ($eo_typeof x1) x1))
  ; type-rule: +
  (($eo_typeof_main (_ (+ x1) x2)) ($eo_typeof_+ ($eo_typeof x1) ($eo_typeof x2)))
  ; type-rule: -
  (($eo_typeof_main (_ (- x1) x2)) ($eo_typeof_- ($eo_typeof x1) ($eo_typeof x2)))
  ; type-rule: *
  (($eo_typeof_main (_ (* x1) x2)) ($eo_typeof_* ($eo_typeof x1) ($eo_typeof x2)))
  ; type-rule: <
  (($eo_typeof_main (_ (< x1) x2)) ($eo_typeof_< ($eo_typeof x1) ($eo_typeof x2)))
  ; type-rule: <=
  (($eo_typeof_main (_ (<= x1) x2)) ($eo_typeof_<= ($eo_typeof x1) ($eo_typeof x2)))
  ; type-rule: >
  (($eo_typeof_main (_ (> x1) x2)) ($eo_typeof_> ($eo_typeof x1) ($eo_typeof x2)))
  ; type-rule: >=
  (($eo_typeof_main (_ (>= x1) x2)) ($eo_typeof_>= ($eo_typeof x1) ($eo_typeof x2)))
  ; type-rule: to_real
  (($eo_typeof_main (to_real x1)) ($eo_typeof_to_real ($eo_typeof x1)))
  ; type-rule: to_int
  (($eo_typeof_main (to_int x1)) ($eo_typeof_to_int ($eo_typeof x1)))
  ; type-rule: is_int
  (($eo_typeof_main (is_int x1)) ($eo_typeof_is_int ($eo_typeof x1)))
  ; type-rule: abs
  (($eo_typeof_main (abs x1)) ($eo_typeof_abs ($eo_typeof x1)))
  ; type-rule: ^
  (($eo_typeof_main (^ x1)) ($eo_typeof_^ ($eo_typeof x1)))
  ; type-rule: -
  (($eo_typeof_main ($eoo_-.2 x1)) ($eo_typeof_$eoo_-.2 ($eo_typeof x1)))
  ; type-rule: div
  (($eo_typeof_main div) (-> Int (-> Int Int)))
  ; type-rule: mod
  (($eo_typeof_main mod) (-> Int (-> Int Int)))
  ; type-rule: divisible
  (($eo_typeof_main divisible) (-> Int (-> Int Bool)))
  ; type-rule: int.pow2
  (($eo_typeof_main int.pow2) (-> Int Int))
  ; type-rule: int.log2
  (($eo_typeof_main int.log2) (-> Int Int))
  ; type-rule: int.ispow2
  (($eo_typeof_main int.ispow2) (-> Int Bool))
  ; type-rule: div_total
  (($eo_typeof_main div_total) (-> Int (-> Int Int)))
  ; type-rule: mod_total
  (($eo_typeof_main mod_total) (-> Int (-> Int Int)))
  ; type-rule: @int_div_by_zero
  (($eo_typeof_main @int_div_by_zero) (-> Int Int))
  ; type-rule: @mod_by_zero
  (($eo_typeof_main @mod_by_zero) (-> Int Int))
  ; type-rule: Array
  (($eo_typeof_main Array) (-> Type (-> Type Type)))
  ; type-rule: select
  (($eo_typeof_main (select x1)) ($eo_typeof_select ($eo_typeof x1)))
  ; type-rule: store
  (($eo_typeof_main (store x1)) ($eo_typeof_store ($eo_typeof x1)))
  ; type-rule: @array_deq_diff
  (($eo_typeof_main (@array_deq_diff x1 x2)) ($eo_typeof_@array_deq_diff ($eo_typeof x1) x1 ($eo_typeof x2) x2))
  ; type-rule: /
  (($eo_typeof_main (_ (/ x1) x2)) ($eo_typeof_/ ($eo_typeof x1) ($eo_typeof x2)))
  ; type-rule: /_total
  (($eo_typeof_main (_ (/_total x1) x2)) ($eo_typeof_/_total ($eo_typeof x1) ($eo_typeof x2)))
  ; type-rule: @div_by_zero
  (($eo_typeof_main @div_by_zero) (-> Real Real))
  ; type-rule: BitVec
  (($eo_typeof_main BitVec) (-> Int Type))
  ; type-rule: @bvsize
  (($eo_typeof_main (@bvsize x1)) ($eo_typeof_@bvsize ($eo_typeof x1)))
  ; type-rule: concat
  (($eo_typeof_main (_ (concat x1) x2)) ($eo_typeof_concat ($eo_typeof x1) ($eo_typeof x2)))
  ; type-rule: extract
  (($eo_typeof_main (_ (_ (extract x1) x2) x3)) ($eo_typeof_extract x1 x2 ($eo_typeof x3)))
  ; type-rule: repeat
  (($eo_typeof_main (_ (repeat x1) x2)) ($eo_typeof_repeat x1 ($eo_typeof x2)))
  ; type-rule: bvnot
  (($eo_typeof_main (bvnot x1)) ($eo_typeof_bvnot ($eo_typeof x1)))
  ; type-rule: bvand
  (($eo_typeof_main (bvand x1)) ($eo_typeof_bvand ($eo_typeof x1)))
  ; type-rule: bvor
  (($eo_typeof_main (bvor x1)) ($eo_typeof_bvor ($eo_typeof x1)))
  ; type-rule: bvnand
  (($eo_typeof_main (bvnand x1)) ($eo_typeof_bvnand ($eo_typeof x1)))
  ; type-rule: bvnor
  (($eo_typeof_main (bvnor x1)) ($eo_typeof_bvnor ($eo_typeof x1)))
  ; type-rule: bvxor
  (($eo_typeof_main (bvxor x1)) ($eo_typeof_bvxor ($eo_typeof x1)))
  ; type-rule: bvxnor
  (($eo_typeof_main (bvxnor x1)) ($eo_typeof_bvxnor ($eo_typeof x1)))
  ; type-rule: bvcomp
  (($eo_typeof_main (bvcomp x1)) ($eo_typeof_bvcomp ($eo_typeof x1)))
  ; type-rule: bvneg
  (($eo_typeof_main (bvneg x1)) ($eo_typeof_bvneg ($eo_typeof x1)))
  ; type-rule: bvadd
  (($eo_typeof_main (bvadd x1)) ($eo_typeof_bvadd ($eo_typeof x1)))
  ; type-rule: bvmul
  (($eo_typeof_main (bvmul x1)) ($eo_typeof_bvmul ($eo_typeof x1)))
  ; type-rule: bvudiv
  (($eo_typeof_main (bvudiv x1)) ($eo_typeof_bvudiv ($eo_typeof x1)))
  ; type-rule: bvurem
  (($eo_typeof_main (bvurem x1)) ($eo_typeof_bvurem ($eo_typeof x1)))
  ; type-rule: bvsub
  (($eo_typeof_main (bvsub x1)) ($eo_typeof_bvsub ($eo_typeof x1)))
  ; type-rule: bvsdiv
  (($eo_typeof_main (bvsdiv x1)) ($eo_typeof_bvsdiv ($eo_typeof x1)))
  ; type-rule: bvsrem
  (($eo_typeof_main (bvsrem x1)) ($eo_typeof_bvsrem ($eo_typeof x1)))
  ; type-rule: bvsmod
  (($eo_typeof_main (bvsmod x1)) ($eo_typeof_bvsmod ($eo_typeof x1)))
  ; type-rule: bvult
  (($eo_typeof_main (bvult x1)) ($eo_typeof_bvult ($eo_typeof x1)))
  ; type-rule: bvule
  (($eo_typeof_main (bvule x1)) ($eo_typeof_bvule ($eo_typeof x1)))
  ; type-rule: bvugt
  (($eo_typeof_main (bvugt x1)) ($eo_typeof_bvugt ($eo_typeof x1)))
  ; type-rule: bvuge
  (($eo_typeof_main (bvuge x1)) ($eo_typeof_bvuge ($eo_typeof x1)))
  ; type-rule: bvslt
  (($eo_typeof_main (bvslt x1)) ($eo_typeof_bvslt ($eo_typeof x1)))
  ; type-rule: bvsle
  (($eo_typeof_main (bvsle x1)) ($eo_typeof_bvsle ($eo_typeof x1)))
  ; type-rule: bvsgt
  (($eo_typeof_main (bvsgt x1)) ($eo_typeof_bvsgt ($eo_typeof x1)))
  ; type-rule: bvsge
  (($eo_typeof_main (bvsge x1)) ($eo_typeof_bvsge ($eo_typeof x1)))
  ; type-rule: bvshl
  (($eo_typeof_main (bvshl x1)) ($eo_typeof_bvshl ($eo_typeof x1)))
  ; type-rule: bvlshr
  (($eo_typeof_main (bvlshr x1)) ($eo_typeof_bvlshr ($eo_typeof x1)))
  ; type-rule: bvashr
  (($eo_typeof_main (bvashr x1)) ($eo_typeof_bvashr ($eo_typeof x1)))
  ; type-rule: zero_extend
  (($eo_typeof_main (_ (zero_extend x1) x2)) ($eo_typeof_zero_extend x1 ($eo_typeof x2)))
  ; type-rule: sign_extend
  (($eo_typeof_main (_ (sign_extend x1) x2)) ($eo_typeof_sign_extend x1 ($eo_typeof x2)))
  ; type-rule: rotate_left
  (($eo_typeof_main (_ (rotate_left x1) x2)) ($eo_typeof_rotate_left ($eo_typeof x1) ($eo_typeof x2)))
  ; type-rule: rotate_right
  (($eo_typeof_main (_ (rotate_right x1) x2)) ($eo_typeof_rotate_right ($eo_typeof x1) ($eo_typeof x2)))
  ; type-rule: reduce_and
  (($eo_typeof_main (reduce_and x1)) ($eo_typeof_reduce_and ($eo_typeof x1)))
  ; type-rule: reduce_or
  (($eo_typeof_main (reduce_or x1)) ($eo_typeof_reduce_or ($eo_typeof x1)))
  ; type-rule: reduce_xor
  (($eo_typeof_main (reduce_xor x1)) ($eo_typeof_reduce_xor ($eo_typeof x1)))
  ; type-rule: bvite
  (($eo_typeof_main (_ (bvite x1) x2)) ($eo_typeof_bvite ($eo_typeof x1) ($eo_typeof x2)))
  ; type-rule: bv1ult
  (($eo_typeof_main (bv1ult x1)) ($eo_typeof_bv1ult ($eo_typeof x1)))
  ; type-rule: bvuaddo
  (($eo_typeof_main (bvuaddo x1)) ($eo_typeof_bvuaddo ($eo_typeof x1)))
  ; type-rule: bvnego
  (($eo_typeof_main (bvnego x1)) ($eo_typeof_bvnego ($eo_typeof x1)))
  ; type-rule: bvsaddo
  (($eo_typeof_main (bvsaddo x1)) ($eo_typeof_bvsaddo ($eo_typeof x1)))
  ; type-rule: bvumulo
  (($eo_typeof_main (bvumulo x1)) ($eo_typeof_bvumulo ($eo_typeof x1)))
  ; type-rule: bvsmulo
  (($eo_typeof_main (bvsmulo x1)) ($eo_typeof_bvsmulo ($eo_typeof x1)))
  ; type-rule: bvusubo
  (($eo_typeof_main (bvusubo x1)) ($eo_typeof_bvusubo ($eo_typeof x1)))
  ; type-rule: bvssubo
  (($eo_typeof_main (bvssubo x1)) ($eo_typeof_bvssubo ($eo_typeof x1)))
  ; type-rule: bvsdivo
  (($eo_typeof_main (bvsdivo x1)) ($eo_typeof_bvsdivo ($eo_typeof x1)))
  ; type-rule: bvultbv
  (($eo_typeof_main (bvultbv x1)) ($eo_typeof_bvultbv ($eo_typeof x1)))
  ; type-rule: bvsltbv
  (($eo_typeof_main (bvsltbv x1)) ($eo_typeof_bvsltbv ($eo_typeof x1)))
  ; type-rule: bvredand
  (($eo_typeof_main (bvredand x1)) ($eo_typeof_bvredand ($eo_typeof x1)))
  ; type-rule: bvredor
  (($eo_typeof_main (bvredor x1)) ($eo_typeof_bvredor ($eo_typeof x1)))
  ; type-rule: @bit
  (($eo_typeof_main (_ (@bit x1) x2)) ($eo_typeof_@bit ($eo_typeof x1) ($eo_typeof x2)))
  ; type-rule: @from_bools
  (($eo_typeof_main (_ (@from_bools x1) x2)) ($eo_typeof_@from_bools ($eo_typeof x1) ($eo_typeof x2)))
  ; type-rule: @bv
  (($eo_typeof_main (_ (@bv x1) x2)) ($eo_typeof_@bv x1 x2))
  ; type-rule: @Monomial
  (($eo_typeof_main @Monomial) Type)
  ; type-rule: @mon
  (($eo_typeof_main (@mon x1)) ($eo_typeof_@mon ($eo_typeof x1)))
  ; type-rule: @Polynomial
  (($eo_typeof_main @Polynomial) Type)
  ; type-rule: @poly.zero
  (($eo_typeof_main @poly.zero) @Polynomial)
  ; type-rule: @poly
  (($eo_typeof_main @poly) (-> @Monomial (-> @Polynomial @Polynomial)))
  ; type-rule: RegLan
  (($eo_typeof_main RegLan) Type)
  ; type-rule: seq.empty
  (($eo_typeof_main (as seq.empty x1)) ($eo_typeof_seq.empty x1))
  ; type-rule: str.len
  (($eo_typeof_main (str.len x1)) ($eo_typeof_str.len ($eo_typeof x1)))
  ; type-rule: str.++
  (($eo_typeof_main (str.++ x1)) ($eo_typeof_str.++ ($eo_typeof x1)))
  ; type-rule: str.substr
  (($eo_typeof_main (str.substr x1)) ($eo_typeof_str.substr ($eo_typeof x1)))
  ; type-rule: str.contains
  (($eo_typeof_main (str.contains x1)) ($eo_typeof_str.contains ($eo_typeof x1)))
  ; type-rule: str.replace
  (($eo_typeof_main (str.replace x1)) ($eo_typeof_str.replace ($eo_typeof x1)))
  ; type-rule: str.indexof
  (($eo_typeof_main (str.indexof x1)) ($eo_typeof_str.indexof ($eo_typeof x1)))
  ; type-rule: str.at
  (($eo_typeof_main (str.at x1)) ($eo_typeof_str.at ($eo_typeof x1)))
  ; type-rule: str.prefixof
  (($eo_typeof_main (str.prefixof x1)) ($eo_typeof_str.prefixof ($eo_typeof x1)))
  ; type-rule: str.suffixof
  (($eo_typeof_main (str.suffixof x1)) ($eo_typeof_str.suffixof ($eo_typeof x1)))
  ; type-rule: str.rev
  (($eo_typeof_main (str.rev x1)) ($eo_typeof_str.rev ($eo_typeof x1)))
  ; type-rule: str.unit
  (($eo_typeof_main str.unit) (-> Int (Seq Char)))
  ; type-rule: str.update
  (($eo_typeof_main (str.update x1)) ($eo_typeof_str.update ($eo_typeof x1)))
  ; type-rule: str.to_lower
  (($eo_typeof_main str.to_lower) (eo::define ((_v0 (Seq Char))) (-> _v0 _v0)))
  ; type-rule: str.to_upper
  (($eo_typeof_main str.to_upper) (eo::define ((_v0 (Seq Char))) (-> _v0 _v0)))
  ; type-rule: str.to_code
  (($eo_typeof_main str.to_code) (-> (Seq Char) Int))
  ; type-rule: str.from_code
  (($eo_typeof_main str.from_code) (-> Int (Seq Char)))
  ; type-rule: str.is_digit
  (($eo_typeof_main str.is_digit) (-> (Seq Char) Bool))
  ; type-rule: str.to_int
  (($eo_typeof_main str.to_int) (-> (Seq Char) Int))
  ; type-rule: str.from_int
  (($eo_typeof_main str.from_int) (-> Int (Seq Char)))
  ; type-rule: str.<
  (($eo_typeof_main str.<) (eo::define ((_v0 (Seq Char))) (-> _v0 (-> _v0 Bool))))
  ; type-rule: str.<=
  (($eo_typeof_main str.<=) (eo::define ((_v0 (Seq Char))) (-> _v0 (-> _v0 Bool))))
  ; type-rule: str.replace_all
  (($eo_typeof_main (str.replace_all x1)) ($eo_typeof_str.replace_all ($eo_typeof x1)))
  ; type-rule: str.replace_re
  (($eo_typeof_main str.replace_re) (eo::define ((_v0 (Seq Char))) (-> _v0 (-> RegLan (-> _v0 _v0)))))
  ; type-rule: str.replace_re_all
  (($eo_typeof_main str.replace_re_all) (eo::define ((_v0 (Seq Char))) (-> _v0 (-> RegLan (-> _v0 _v0)))))
  ; type-rule: str.indexof_re
  (($eo_typeof_main str.indexof_re) (-> (Seq Char) (-> RegLan (-> Int Int))))
  ; type-rule: re.allchar
  (($eo_typeof_main re.allchar) RegLan)
  ; type-rule: re.none
  (($eo_typeof_main re.none) RegLan)
  ; type-rule: re.all
  (($eo_typeof_main re.all) RegLan)
  ; type-rule: str.to_re
  (($eo_typeof_main str.to_re) (-> (Seq Char) RegLan))
  ; type-rule: re.*
  (($eo_typeof_main re.*) (-> RegLan RegLan))
  ; type-rule: re.+
  (($eo_typeof_main re.+) (-> RegLan RegLan))
  ; type-rule: re.opt
  (($eo_typeof_main re.opt) (-> RegLan RegLan))
  ; type-rule: re.comp
  (($eo_typeof_main re.comp) (-> RegLan RegLan))
  ; type-rule: re.range
  (($eo_typeof_main re.range) (eo::define ((_v0 (Seq Char))) (-> _v0 (-> _v0 RegLan))))
  ; type-rule: re.++
  (($eo_typeof_main re.++) (-> RegLan (-> RegLan RegLan)))
  ; type-rule: re.inter
  (($eo_typeof_main re.inter) (-> RegLan (-> RegLan RegLan)))
  ; type-rule: re.union
  (($eo_typeof_main re.union) (-> RegLan (-> RegLan RegLan)))
  ; type-rule: re.diff
  (($eo_typeof_main re.diff) (-> RegLan (-> RegLan RegLan)))
  ; type-rule: re.loop
  (($eo_typeof_main re.loop) (-> Int (-> Int (-> RegLan RegLan))))
  ; type-rule: str.in_re
  (($eo_typeof_main str.in_re) (-> (Seq Char) (-> RegLan Bool)))
  ; type-rule: seq.unit
  (($eo_typeof_main (seq.unit x1)) ($eo_typeof_seq.unit ($eo_typeof x1)))
  ; type-rule: seq.nth
  (($eo_typeof_main (seq.nth x1)) ($eo_typeof_seq.nth ($eo_typeof x1)))
  ; type-rule: @re_unfold_pos_component
  (($eo_typeof_main (@re_unfold_pos_component x1 x2 x3)) ($eo_typeof_@re_unfold_pos_component x1 x2 x3))
  ; type-rule: @strings_deq_diff
  (($eo_typeof_main (@strings_deq_diff x1 x2)) ($eo_typeof_@strings_deq_diff ($eo_typeof x1) x1 ($eo_typeof x2) x2))
  ; type-rule: @strings_stoi_result
  (($eo_typeof_main (@strings_stoi_result x1)) ($eo_typeof_@strings_stoi_result x1))
  ; type-rule: @strings_stoi_non_digit
  (($eo_typeof_main (@strings_stoi_non_digit x1)) ($eo_typeof_@strings_stoi_non_digit x1))
  ; type-rule: @strings_itos_result
  (($eo_typeof_main (@strings_itos_result x1)) ($eo_typeof_@strings_itos_result x1))
  ; type-rule: @strings_num_occur
  (($eo_typeof_main (_ (@strings_num_occur x1) x2)) ($eo_typeof_@strings_num_occur ($eo_typeof x1) x1 ($eo_typeof x2) x2))
  ; type-rule: @strings_num_occur_re
  (($eo_typeof_main (@strings_num_occur_re x1 x2)) ($eo_typeof_@strings_num_occur_re x1 x2))
  ; type-rule: @strings_occur_index
  (($eo_typeof_main (_ (_ (@strings_occur_index x1) x2) x3)) ($eo_typeof_@strings_occur_index ($eo_typeof x1) x1 ($eo_typeof x2) x2 ($eo_typeof x3)))
  ; type-rule: @strings_occur_index_re
  (($eo_typeof_main (@strings_occur_index_re x1 x2)) ($eo_typeof_@strings_occur_index_re x1 x2))
  ; type-rule: @strings_occur_len_re
  (($eo_typeof_main (@strings_occur_len_re x1 x2)) ($eo_typeof_@strings_occur_len_re x1 x2))
  ; type-rule: @strings_replace_all_result
  (($eo_typeof_main (_ (@strings_replace_all_result x1) x2)) ($eo_typeof_@strings_replace_all_result ($eo_typeof x1) x1 ($eo_typeof x2)))
  ; type-rule: @re_first_match_pre
  (($eo_typeof_main (@re_first_match_pre x1 x2)) ($eo_typeof_@re_first_match_pre x1 x2))
  ; type-rule: @re_first_match
  (($eo_typeof_main (@re_first_match x1 x2)) ($eo_typeof_@re_first_match x1 x2))
  ; type-rule: @re_first_match_post
  (($eo_typeof_main (@re_first_match_post x1 x2)) ($eo_typeof_@re_first_match_post x1 x2))
  ; type-rule: @witness_string_length
  (($eo_typeof_main (@witness_string_length x1)) ($eo_typeof_@witness_string_length x1))
  ; type-rule: forall
  (($eo_typeof_main forall) (-> $eo_List (-> Bool Bool)))
  ; type-rule: exists
  (($eo_typeof_main exists) (-> $eo_List (-> Bool Bool)))
  ; type-rule: @quantifiers_skolemize
  (($eo_typeof_main (@quantifiers_skolemize x1 x2)) ($eo_typeof_@quantifiers_skolemize x1 x2))
  ; type-rule: @witness_inv_condition
  (($eo_typeof_main (@witness_inv_condition x1)) ($eo_typeof_@witness_inv_condition x1))
  ; type-rule: is
  (($eo_typeof_main (_ (is x1) x2)) ($eo_typeof_is ($eo_typeof x1) ($eo_typeof x2)))
  ; type-rule: update
  (($eo_typeof_main (_ (_ (update x1) x2) x3)) ($eo_typeof_update ($eo_typeof x1) ($eo_typeof x2) ($eo_typeof x3)))
  ; type-rule: UnitTuple
  (($eo_typeof_main UnitTuple) Type)
  ; type-rule: Tuple
  (($eo_typeof_main Tuple) (-> Type (-> Type Type)))
  ; type-rule: tuple.unit
  (($eo_typeof_main tuple.unit) UnitTuple)
  ; type-rule: tuple
  (($eo_typeof_main (_ (tuple x1) x2)) ($eo_typeof_tuple ($eo_typeof x1) ($eo_typeof x2)))
  ; type-rule: tuple.select
  (($eo_typeof_main (_ (tuple.select x1) x2)) ($eo_typeof_tuple.select x1 ($eo_typeof x2)))
  ; type-rule: tuple.update
  (($eo_typeof_main (_ (tuple.update x1) x2)) ($eo_typeof_tuple.update x1 ($eo_typeof x2)))
  ; type-rule: Set
  (($eo_typeof_main Set) (-> Type Type))
  ; type-rule: set.empty
  (($eo_typeof_main (as set.empty x1)) ($eo_typeof_set.empty x1))
  ; type-rule: set.singleton
  (($eo_typeof_main (set.singleton x1)) ($eo_typeof_set.singleton ($eo_typeof x1)))
  ; type-rule: set.union
  (($eo_typeof_main (set.union x1)) ($eo_typeof_set.union ($eo_typeof x1)))
  ; type-rule: set.inter
  (($eo_typeof_main (set.inter x1)) ($eo_typeof_set.inter ($eo_typeof x1)))
  ; type-rule: set.minus
  (($eo_typeof_main (set.minus x1)) ($eo_typeof_set.minus ($eo_typeof x1)))
  ; type-rule: set.member
  (($eo_typeof_main (set.member x1)) ($eo_typeof_set.member ($eo_typeof x1)))
  ; type-rule: set.subset
  (($eo_typeof_main (set.subset x1)) ($eo_typeof_set.subset ($eo_typeof x1)))
  ; type-rule: set.choose
  (($eo_typeof_main (set.choose x1)) ($eo_typeof_set.choose ($eo_typeof x1)))
  ; type-rule: set.is_empty
  (($eo_typeof_main (set.is_empty x1)) ($eo_typeof_set.is_empty ($eo_typeof x1)))
  ; type-rule: set.is_singleton
  (($eo_typeof_main (set.is_singleton x1)) ($eo_typeof_set.is_singleton ($eo_typeof x1)))
  ; type-rule: set.insert
  (($eo_typeof_main (_ (set.insert x1) x2)) ($eo_typeof_set.insert ($eo_typeof x1) ($eo_typeof x2)))
  ; type-rule: @sets_deq_diff
  (($eo_typeof_main (@sets_deq_diff x1 x2)) ($eo_typeof_@sets_deq_diff ($eo_typeof x1) x1 ($eo_typeof x2) x2))
  ; type-rule: @Nfa
  (($eo_typeof_main @Nfa) Type)
  ; type-rule: @nfa.decline
  (($eo_typeof_main @nfa.decline) @Nfa)
  ; type-rule: @nfa.accept
  (($eo_typeof_main @nfa.accept) @Nfa)
  ; type-rule: @nfa.list
  (($eo_typeof_main @nfa.list) (-> @Nfa (-> @Nfa @Nfa)))
  ; type-rule: @nfa.trans
  (($eo_typeof_main @nfa.trans) (-> (Seq Char) (-> @Nfa @Nfa)))
  ; type-rule: @nfa.allchar
  (($eo_typeof_main @nfa.allchar) (Seq Char))
  ; type-rule: @nfa.range
  (($eo_typeof_main @nfa.range) (-> Int (-> Int (Seq Char))))
  ; type-rule: @nfa.push
  (($eo_typeof_main @nfa.push) (-> @Nfa @Nfa))
  ; type-rule: @nfa.pop
  (($eo_typeof_main @nfa.pop) (-> @Nfa @Nfa))
  ; type-rule: @re.null
  (($eo_typeof_main @re.null) RegLan)
  ; type-rule: int_to_bv
  (($eo_typeof_main (int_to_bv x1)) ($eo_typeof_int_to_bv x1))
  ; type-rule: ubv_to_int
  (($eo_typeof_main (ubv_to_int x1)) ($eo_typeof_ubv_to_int ($eo_typeof x1)))
  ; type-rule: sbv_to_int
  (($eo_typeof_main (sbv_to_int x1)) ($eo_typeof_sbv_to_int ($eo_typeof x1)))
  ; type-rule: @aci_sorted
  (($eo_typeof_main (_ (@aci_sorted x1) x2)) ($eo_typeof_@aci_sorted ($eo_typeof x1) ($eo_typeof x2)))
  ; type-rule: @const
  (($eo_typeof_main (@const x1 x2)) ($eo_typeof_@const x1 x2))

  (($eo_typeof_main (f x))     ($eo_typeof_apply ($eo_typeof f) ($eo_typeof x)))
  )
)

;;; datatype constructors

; program: $eo_dt_constructors
; implements: eo::dt_constructors
(program $eo_dt_constructors
  ((T Type))
  :signature (Type) $eo_List
  (

  (($eo_dt_constructors T) $eo_fail)
  )
)

; program: $eo_dt_selectors
; implements: eo::dt_selectors
(program $eo_dt_selectors ((T Type) (t T))
  :signature (T) $eo_List
  (

  (($eo_dt_selectors t) $eo_fail)
  )
)

;;; eo::nil definitions

; program: $eo_nil_bvand
(program $eo_nil_bvand (($eoT_4 Type) (m Int))
  :signature ((eo::quote $eoT_4)) $eoT_4
  (
  (($eo_nil_bvand (BitVec m)) (eo::not (eo::to_bin m 0)))
  )
)
; program: $eo_nil_bvor
(program $eo_nil_bvor (($eoT_5 Type) (m Int))
  :signature ((eo::quote $eoT_5)) $eoT_5
  (
  (($eo_nil_bvor (BitVec m)) (eo::to_bin m 0))
  )
)
; program: $eo_nil_bvxor
(program $eo_nil_bvxor (($eoT_6 Type) (m Int))
  :signature ((eo::quote $eoT_6)) $eoT_6
  (
  (($eo_nil_bvxor (BitVec m)) (eo::to_bin m 0))
  )
)
; program: $eo_nil_bvadd
(program $eo_nil_bvadd (($eoT_7 Type) (m Int))
  :signature ((eo::quote $eoT_7)) $eoT_7
  (
  (($eo_nil_bvadd (BitVec m)) (eo::to_bin m 0))
  )
)
; program: $eo_nil_bvmul
(program $eo_nil_bvmul (($eoT_8 Type) (m Int))
  :signature ((eo::quote $eoT_8)) $eoT_8
  (
  (($eo_nil_bvmul (BitVec m)) (eo::to_bin m 1))
  )
)
; program: $eo_nil_str.++
(program $eo_nil_str.++ (($eoT_13 Type) (T Type))
  :signature ((eo::quote $eoT_13)) $eoT_13
  (
  (($eo_nil_str.++ (Seq T)) ($seq_empty (Seq T)))
  )
)


; program: $eo_nil
; implements: eo::nil
(program $eo_nil
  ((T Type) (U Type) (V Type) (W Type) (f (-> T U V)))
  :signature ((-> T U V) (eo::quote W)) W
  (
  (($eo_nil or T) false)
  (($eo_nil and T) true)
  (($eo_nil + T) 0)
  (($eo_nil * T) 1)
  (($eo_nil concat T) (eo::to_bin 0 0))
  (($eo_nil bvand T) ($eo_nil_bvand T))
  (($eo_nil bvor T) ($eo_nil_bvor T))
  (($eo_nil bvxor T) ($eo_nil_bvxor T))
  (($eo_nil bvadd T) ($eo_nil_bvadd T))
  (($eo_nil bvmul T) ($eo_nil_bvmul T))
  (($eo_nil @from_bools T) (eo::to_bin 0 0))
  (($eo_nil @poly T) @poly.zero)
  (($eo_nil str.++ T) ($eo_nil_str.++ T))
  (($eo_nil re.++ T) (str.to_re ""))
  (($eo_nil re.inter T) re.all)
  (($eo_nil re.union T) re.none)
  (($eo_nil Tuple T) UnitTuple)
  (($eo_nil tuple T) tuple.unit)
  (($eo_nil @nfa.list T) @nfa.decline)

  (($eo_nil f T) $eo_fail)
  )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; model_smt

; The following functions may be used to define the verification condition we
; will write below.

; A placeholder for asking whether a formula is satisfied by a model.
; args:
; - F Bool: the formula to test.
; - val Bool: the desired value.
; - uok Bool: returned value if the value is unknown.
(program $eo_model_sat () :signature (Bool Bool Bool) Bool)

; A placeholder for asking the type of a given term.
(program $eo_model_typeof () :signature (Bool) Type)

; A placeholder for asking whether a term is legal syntax for an SMT-LIB term.
(program $eo_model_is_smt_input () :signature (Bool) Bool)

; We will include the definition of the above functions here.
(echo "include eo_model_sat")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; vc

;; verification conditions

; program: $eor_scope
(program $eor_scope ((F Bool) (G Bool))
  :signature (Bool Bool) Bool
  (
  (($eor_scope G F) (_ (=> F) G))
  )
)
; program: $eovc_scope
(program $eovc_scope ((G Bool) (F Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_scope F G) ($eo_requires_eq ($eo_model_sat G true false) true ($eo_requires_eq ($eo_model_sat ($eor_scope G F) false false) true true)))
  )
)
(echo "smt-meta $eovc_scope")
; program: $eor_process_scope
(program $eor_process_scope ((F Bool) (C Bool))
  :signature (Bool Bool) Bool
  (
  (($eor_process_scope C F) ($run_process_scope F C))
  )
)
; program: $eovc_process_scope
(program $eovc_process_scope ((C Bool) (F Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_process_scope F C) ($eo_requires_eq ($eo_model_sat F true false) true ($eo_requires_eq ($eo_model_sat ($eor_process_scope C F) false false) true true)))
  )
)
(echo "smt-meta $eovc_process_scope")
; program: $eor_ite_eq
(program $eor_ite_eq ((T Type) (b Bool) (t1 T) (t2 T))
  :signature (T) Bool
  (
  (($eor_ite_eq (_ (_ (ite b) t1) t2)) (eo::define ((_v0 (ite b))) (eo::define ((_v1 (= (_ (_ _v0 t1) t2)))) (_ (_ _v0 (_ _v1 t1)) (_ _v1 t2)))))
  )
)
; program: $eovc_ite_eq
(program $eovc_ite_eq ((T Type) (b Bool) (t1 T) (t2 T))
  :signature (T T Bool) Bool
  (
  (($eovc_ite_eq t2 t1 b) ($eo_requires_eq ($eo_model_sat ($eor_ite_eq (_ (_ (ite b) t1) t2)) false false) true true))
  )
)
(echo "smt-meta $eovc_ite_eq")
; program: $eor_split
(program $eor_split ((F Bool))
  :signature (Bool) Bool
  (
  (($eor_split F) (_ (or F) (_ (or (not F)) false)))
  )
)
; program: $eovc_split
(program $eovc_split ((F Bool))
  :signature (Bool) Bool
  (
  (($eovc_split F) ($eo_requires_eq ($eo_model_sat ($eor_split F) false false) true true))
  )
)
(echo "smt-meta $eovc_split")
; program: $eor_resolution.fev3
(program $eor_resolution.fev3 ((pol Bool) (C2 Bool) (C1 Bool) (L Bool))
  :signature (Bool Bool Bool Bool Bool) Bool
  (
  (($eor_resolution.fev3 L pol C2 C1 true) L)
  (($eor_resolution.fev3 L pol C2 C1 false) (not L))
  )
)
; program: $eor_resolution.fev2
(program $eor_resolution.fev2 ((pol Bool) (C2 Bool) (C1 Bool) (L Bool))
  :signature (Bool Bool Bool Bool Bool) Bool
  (
  (($eor_resolution.fev2 L pol C2 C1 true) (not L))
  (($eor_resolution.fev2 L pol C2 C1 false) L)
  )
)
; program: $eor_resolution.fev8
(program $eor_resolution.fev8 ((pol Bool) (C1 Bool) (L Bool))
  :signature (Bool Bool Bool Bool) Bool
  (
  (($eor_resolution.fev8 L pol C1 true) L)
  (($eor_resolution.fev8 L pol C1 false) (not L))
  )
)
; program: $eor_resolution.fev7
(program $eor_resolution.fev7 ((L Bool) (pol Bool) (C1 Bool) ($eo_8 Bool) ($eo_7 Bool))
  :signature (Bool Bool Bool Bool Bool) Bool
  (
  (($eor_resolution.fev7 L pol C1 $eo_7 $eo_8) (eo::list_erase or $eo_8 $eo_7))
  )
)
; program: $eor_resolution.fev6
(program $eor_resolution.fev6 ((C2 Bool) ($eo_1 Bool) ($eo_2 Bool) ($eo_3 Bool) ($eo_4 Bool) (L Bool) (pol Bool) (C1 Bool))
  :signature (Bool Bool Bool Bool Bool Bool Bool Bool Bool) Bool
  (
  (($eor_resolution.fev6 L pol C2 $eo_1 $eo_2 C1 $eo_3 $eo_4 true) false)
  (($eor_resolution.fev6 L pol C2 $eo_1 $eo_2 C1 $eo_3 $eo_4 false) ($eor_resolution.fev7 L pol C1 ($eor_resolution.fev8 L pol C1 pol) ($to_clause C1)))
  )
)
; program: $eor_resolution.fev10
(program $eor_resolution.fev10 ((pol Bool) (C2 Bool) (L Bool))
  :signature (Bool Bool Bool Bool) Bool
  (
  (($eor_resolution.fev10 L pol C2 true) (not L))
  (($eor_resolution.fev10 L pol C2 false) L)
  )
)
; program: $eor_resolution.fev9
(program $eor_resolution.fev9 ((L Bool) (pol Bool) (C2 Bool) ($eo_10 Bool) ($eo_9 Bool))
  :signature (Bool Bool Bool Bool Bool) Bool
  (
  (($eor_resolution.fev9 L pol C2 $eo_9 $eo_10) (eo::list_erase or $eo_10 $eo_9))
  )
)
; program: $eor_resolution.fev5
(program $eor_resolution.fev5 (($eo_1 Bool) ($eo_2 Bool) (C1 Bool) ($eo_3 Bool) ($eo_4 Bool) (L Bool) (pol Bool) (C2 Bool))
  :signature (Bool Bool Bool Bool Bool Bool Bool Bool Bool) Bool
  (
  (($eor_resolution.fev5 L pol C2 $eo_1 $eo_2 C1 $eo_3 $eo_4 true) false)
  (($eor_resolution.fev5 L pol C2 $eo_1 $eo_2 C1 $eo_3 $eo_4 false) ($eor_resolution.fev9 L pol C2 ($eor_resolution.fev10 L pol C2 pol) ($to_clause C2)))
  )
)
; program: $eor_resolution.fev4
(program $eor_resolution.fev4 ((L Bool) (pol Bool) (C2 Bool) ($eo_1 Bool) ($eo_2 Bool) (C1 Bool) ($eo_3 Bool) ($eo_4 Bool) ($eo_6 Bool) ($eo_5 Bool))
  :signature (Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool) Bool
  (
  (($eor_resolution.fev4 L pol C2 $eo_1 $eo_2 C1 $eo_3 $eo_4 $eo_5 $eo_6) ($from_clause (eo::list_concat or $eo_6 $eo_5)))
  )
)
; program: $eor_resolution.fev1
(program $eor_resolution.fev1 ((L Bool) (pol Bool) (C2 Bool) ($eo_1 Bool) ($eo_2 Bool) (C1 Bool) ($eo_4 Bool) ($eo_3 Bool))
  :signature (Bool Bool Bool Bool Bool Bool Bool Bool) Bool
  (
  (($eor_resolution.fev1 L pol C2 C1 $eo_1 $eo_2 $eo_3 $eo_4) ($eor_resolution.fev4 L pol C2 $eo_1 $eo_2 C1 $eo_3 $eo_4 ($eor_resolution.fev5 L pol C2 $eo_1 $eo_2 C1 $eo_3 $eo_4 (eo::eq $eo_2 $eo_1)) ($eor_resolution.fev6 L pol C2 $eo_1 $eo_2 C1 $eo_3 $eo_4 (eo::eq $eo_4 $eo_3))))
  )
)
; program: $eor_resolution
(program $eor_resolution ((L Bool) (C2 Bool) (C1 Bool) (pol Bool))
  :signature (Bool Bool Bool Bool) Bool
  (
  (($eor_resolution pol L C1 C2) ($eor_resolution.fev1 L pol C2 C1 ($to_clause C2) ($eor_resolution.fev2 L pol C2 C1 pol) ($to_clause C1) ($eor_resolution.fev3 L pol C2 C1 pol)))
  )
)
; program: $eovc_resolution
(program $eovc_resolution ((pol Bool) (L Bool) (C1 Bool) (C2 Bool))
  :signature (Bool Bool Bool Bool) Bool
  (
  (($eovc_resolution C2 C1 L pol) ($eo_requires_eq ($eo_model_sat C1 true false) true ($eo_requires_eq ($eo_model_sat C2 true false) true ($eo_requires_eq ($eo_model_sat ($eor_resolution pol L C1 C2) false false) true true))))
  )
)
(echo "smt-meta $eovc_resolution")
; program: $eor_chain_resolution
(program $eor_chain_resolution ((C1 Bool) (C2 Bool) (pols $eo_List) (lits $eo_List))
  :signature ($eo_List $eo_List Bool) Bool
  (
  (($eor_chain_resolution pols lits (_ (and C1) C2)) ($chain_resolve_rec C1 C2 pols lits))
  )
)
; program: $eovc_chain_resolution
(program $eovc_chain_resolution ((pols $eo_List) (lits $eo_List) (C1 Bool) (C2 Bool))
  :signature (Bool Bool $eo_List $eo_List) Bool
  (
  (($eovc_chain_resolution C2 C1 lits pols) (eo::define ((_v0 (_ (and C1) C2))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_chain_resolution pols lits _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_chain_resolution")
; program: $eor_factoring
(program $eor_factoring ((C Bool))
  :signature (Bool) Bool
  (
  (($eor_factoring C) ($from_clause (eo::list_setof or C)))
  )
)
; program: $eovc_factoring
(program $eovc_factoring ((C Bool))
  :signature (Bool) Bool
  (
  (($eovc_factoring C) ($eo_requires_eq ($eo_model_sat C true false) true ($eo_requires_eq ($eo_model_sat ($eor_factoring C) false false) true true)))
  )
)
(echo "smt-meta $eovc_factoring")
; program: $eor_reordering.fev1
(program $eor_reordering.fev1 ((C1 Bool) ($eo_2 Bool) (C2 Bool))
  :signature (Bool Bool Bool Bool) Bool
  (
  (($eor_reordering.fev1 C2 C1 $eo_2 $eo_2) C2)
  )
)
; program: $eor_reordering
(program $eor_reordering ((C1 Bool) (C2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eor_reordering C2 C1) ($eor_reordering.fev1 C2 C1 (eo::list_minclude or C1 C2) true))
  )
)
; program: $eovc_reordering
(program $eovc_reordering ((C2 Bool) (C1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_reordering C1 C2) ($eo_requires_eq ($eo_model_sat C1 true false) true ($eo_requires_eq ($eo_model_sat ($eor_reordering C2 C1) false false) true true)))
  )
)
(echo "smt-meta $eovc_reordering")
; program: $eor_eq_resolve
(program $eor_eq_resolve ((F1 Bool) (F2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eor_eq_resolve F1 (_ (= F1) F2)) F2)
  )
)
; program: $eovc_eq_resolve
(program $eovc_eq_resolve ((F1 Bool) (F2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_eq_resolve F2 F1) (eo::define ((_v0 (_ (= F1) F2))) ($eo_requires_eq ($eo_model_sat F1 true false) true ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_eq_resolve F1 _v0) false false) true true)))))
  )
)
(echo "smt-meta $eovc_eq_resolve")
; program: $eor_modus_ponens
(program $eor_modus_ponens ((F1 Bool) (F2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eor_modus_ponens F1 (_ (=> F1) F2)) F2)
  )
)
; program: $eovc_modus_ponens
(program $eovc_modus_ponens ((F1 Bool) (F2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_modus_ponens F2 F1) (eo::define ((_v0 (_ (=> F1) F2))) ($eo_requires_eq ($eo_model_sat F1 true false) true ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_modus_ponens F1 _v0) false false) true true)))))
  )
)
(echo "smt-meta $eovc_modus_ponens")
; program: $eor_not_not_elim
(program $eor_not_not_elim ((F Bool))
  :signature (Bool) Bool
  (
  (($eor_not_not_elim (not (not F))) F)
  )
)
; program: $eovc_not_not_elim
(program $eovc_not_not_elim ((F Bool))
  :signature (Bool) Bool
  (
  (($eovc_not_not_elim F) (eo::define ((_v0 (not (not F)))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_not_not_elim _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_not_not_elim")
; program: $eor_contra
(program $eor_contra ((F Bool))
  :signature (Bool Bool) Bool
  (
  (($eor_contra F (not F)) false)
  )
)
; program: $eovc_contra
(program $eovc_contra ((F Bool))
  :signature (Bool) Bool
  (
  (($eovc_contra F) (eo::define ((_v0 (not F))) ($eo_requires_eq ($eo_model_sat F true false) true ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_contra F _v0) false false) true true)))))
  )
)
(echo "smt-meta $eovc_contra")
; program: $eor_and_elim
(program $eor_and_elim ((Fs Bool) (i Int))
  :signature (Int Bool) Bool
  (
  (($eor_and_elim i Fs) (eo::list_nth and Fs i))
  )
)
; program: $eovc_and_elim
(program $eovc_and_elim ((i Int) (Fs Bool))
  :signature (Bool Int) Bool
  (
  (($eovc_and_elim Fs i) ($eo_requires_eq ($eo_model_sat Fs true false) true ($eo_requires_eq ($eo_model_sat ($eor_and_elim i Fs) false false) true true)))
  )
)
(echo "smt-meta $eovc_and_elim")
; program: $eor_and_intro
(program $eor_and_intro ((F Bool))
  :signature (Bool) Bool
  (
  (($eor_and_intro F) F)
  )
)
; program: $eovc_and_intro
(program $eovc_and_intro ((F Bool))
  :signature (Bool) Bool
  (
  (($eovc_and_intro F) ($eo_requires_eq ($eo_model_sat F true false) true ($eo_requires_eq ($eo_model_sat ($eor_and_intro F) false false) true true)))
  )
)
(echo "smt-meta $eovc_and_intro")
; program: $eor_not_or_elim.fev1
(program $eor_not_or_elim.fev1 ((i Int) (Fs Bool) ($eo_1 Bool))
  :signature (Int Bool Bool) Bool
  (
  (($eor_not_or_elim.fev1 i Fs $eo_1) (not $eo_1))
  )
)
; program: $eor_not_or_elim
(program $eor_not_or_elim ((Fs Bool) (i Int))
  :signature (Int Bool) Bool
  (
  (($eor_not_or_elim i (not Fs)) ($eor_not_or_elim.fev1 i Fs (eo::list_nth or Fs i)))
  )
)
; program: $eovc_not_or_elim
(program $eovc_not_or_elim ((i Int) (Fs Bool))
  :signature (Bool Int) Bool
  (
  (($eovc_not_or_elim Fs i) (eo::define ((_v0 (not Fs))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_not_or_elim i _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_not_or_elim")
; program: $eor_implies_elim
(program $eor_implies_elim ((F1 Bool) (F2 Bool))
  :signature (Bool) Bool
  (
  (($eor_implies_elim (_ (=> F1) F2)) (_ (or (not F1)) (_ (or F2) false)))
  )
)
; program: $eovc_implies_elim
(program $eovc_implies_elim ((F1 Bool) (F2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_implies_elim F2 F1) (eo::define ((_v0 (_ (=> F1) F2))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_implies_elim _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_implies_elim")
; program: $eor_not_implies_elim1
(program $eor_not_implies_elim1 ((F2 Bool) (F1 Bool))
  :signature (Bool) Bool
  (
  (($eor_not_implies_elim1 (not (_ (=> F1) F2))) F1)
  )
)
; program: $eovc_not_implies_elim1
(program $eovc_not_implies_elim1 ((F1 Bool) (F2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_not_implies_elim1 F2 F1) (eo::define ((_v0 (not (_ (=> F1) F2)))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_not_implies_elim1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_not_implies_elim1")
; program: $eor_not_implies_elim2
(program $eor_not_implies_elim2 ((F1 Bool) (F2 Bool))
  :signature (Bool) Bool
  (
  (($eor_not_implies_elim2 (not (_ (=> F1) F2))) (not F2))
  )
)
; program: $eovc_not_implies_elim2
(program $eovc_not_implies_elim2 ((F1 Bool) (F2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_not_implies_elim2 F2 F1) (eo::define ((_v0 (not (_ (=> F1) F2)))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_not_implies_elim2 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_not_implies_elim2")
; program: $eor_equiv_elim1
(program $eor_equiv_elim1 ((F1 Bool) (F2 Bool))
  :signature (Bool) Bool
  (
  (($eor_equiv_elim1 (_ (= F1) F2)) (_ (or (not F1)) (_ (or F2) false)))
  )
)
; program: $eovc_equiv_elim1
(program $eovc_equiv_elim1 ((F1 Bool) (F2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_equiv_elim1 F2 F1) (eo::define ((_v0 (_ (= F1) F2))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_equiv_elim1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_equiv_elim1")
; program: $eor_equiv_elim2
(program $eor_equiv_elim2 ((F1 Bool) (F2 Bool))
  :signature (Bool) Bool
  (
  (($eor_equiv_elim2 (_ (= F1) F2)) (_ (or F1) (_ (or (not F2)) false)))
  )
)
; program: $eovc_equiv_elim2
(program $eovc_equiv_elim2 ((F1 Bool) (F2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_equiv_elim2 F2 F1) (eo::define ((_v0 (_ (= F1) F2))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_equiv_elim2 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_equiv_elim2")
; program: $eor_not_equiv_elim1
(program $eor_not_equiv_elim1 ((F1 Bool) (F2 Bool))
  :signature (Bool) Bool
  (
  (($eor_not_equiv_elim1 (not (_ (= F1) F2))) (_ (or F1) (_ (or F2) false)))
  )
)
; program: $eovc_not_equiv_elim1
(program $eovc_not_equiv_elim1 ((F1 Bool) (F2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_not_equiv_elim1 F2 F1) (eo::define ((_v0 (not (_ (= F1) F2)))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_not_equiv_elim1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_not_equiv_elim1")
; program: $eor_not_equiv_elim2
(program $eor_not_equiv_elim2 ((F1 Bool) (F2 Bool))
  :signature (Bool) Bool
  (
  (($eor_not_equiv_elim2 (not (_ (= F1) F2))) (_ (or (not F1)) (_ (or (not F2)) false)))
  )
)
; program: $eovc_not_equiv_elim2
(program $eovc_not_equiv_elim2 ((F1 Bool) (F2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_not_equiv_elim2 F2 F1) (eo::define ((_v0 (not (_ (= F1) F2)))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_not_equiv_elim2 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_not_equiv_elim2")
; program: $eor_xor_elim1
(program $eor_xor_elim1 ((F1 Bool) (F2 Bool))
  :signature (Bool) Bool
  (
  (($eor_xor_elim1 (_ (xor F1) F2)) (_ (or F1) (_ (or F2) false)))
  )
)
; program: $eovc_xor_elim1
(program $eovc_xor_elim1 ((F1 Bool) (F2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_xor_elim1 F2 F1) (eo::define ((_v0 (_ (xor F1) F2))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_xor_elim1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_xor_elim1")
; program: $eor_xor_elim2
(program $eor_xor_elim2 ((F1 Bool) (F2 Bool))
  :signature (Bool) Bool
  (
  (($eor_xor_elim2 (_ (xor F1) F2)) (_ (or (not F1)) (_ (or (not F2)) false)))
  )
)
; program: $eovc_xor_elim2
(program $eovc_xor_elim2 ((F1 Bool) (F2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_xor_elim2 F2 F1) (eo::define ((_v0 (_ (xor F1) F2))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_xor_elim2 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_xor_elim2")
; program: $eor_not_xor_elim1
(program $eor_not_xor_elim1 ((F1 Bool) (F2 Bool))
  :signature (Bool) Bool
  (
  (($eor_not_xor_elim1 (not (_ (xor F1) F2))) (_ (or F1) (_ (or (not F2)) false)))
  )
)
; program: $eovc_not_xor_elim1
(program $eovc_not_xor_elim1 ((F1 Bool) (F2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_not_xor_elim1 F2 F1) (eo::define ((_v0 (not (_ (xor F1) F2)))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_not_xor_elim1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_not_xor_elim1")
; program: $eor_not_xor_elim2
(program $eor_not_xor_elim2 ((F1 Bool) (F2 Bool))
  :signature (Bool) Bool
  (
  (($eor_not_xor_elim2 (not (_ (xor F1) F2))) (_ (or (not F1)) (_ (or F2) false)))
  )
)
; program: $eovc_not_xor_elim2
(program $eovc_not_xor_elim2 ((F1 Bool) (F2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_not_xor_elim2 F2 F1) (eo::define ((_v0 (not (_ (xor F1) F2)))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_not_xor_elim2 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_not_xor_elim2")
; program: $eor_ite_elim1
(program $eor_ite_elim1 ((F2 Bool) (C Bool) (F1 Bool))
  :signature (Bool) Bool
  (
  (($eor_ite_elim1 (_ (_ (ite C) F1) F2)) (_ (or (not C)) (_ (or F1) false)))
  )
)
; program: $eovc_ite_elim1
(program $eovc_ite_elim1 ((C Bool) (F1 Bool) (F2 Bool))
  :signature (Bool Bool Bool) Bool
  (
  (($eovc_ite_elim1 F2 F1 C) (eo::define ((_v0 (_ (_ (ite C) F1) F2))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_ite_elim1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_ite_elim1")
; program: $eor_ite_elim2
(program $eor_ite_elim2 ((F1 Bool) (C Bool) (F2 Bool))
  :signature (Bool) Bool
  (
  (($eor_ite_elim2 (_ (_ (ite C) F1) F2)) (_ (or C) (_ (or F2) false)))
  )
)
; program: $eovc_ite_elim2
(program $eovc_ite_elim2 ((C Bool) (F1 Bool) (F2 Bool))
  :signature (Bool Bool Bool) Bool
  (
  (($eovc_ite_elim2 F2 F1 C) (eo::define ((_v0 (_ (_ (ite C) F1) F2))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_ite_elim2 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_ite_elim2")
; program: $eor_not_ite_elim1
(program $eor_not_ite_elim1 ((F2 Bool) (C Bool) (F1 Bool))
  :signature (Bool) Bool
  (
  (($eor_not_ite_elim1 (not (_ (_ (ite C) F1) F2))) (_ (or (not C)) (_ (or (not F1)) false)))
  )
)
; program: $eovc_not_ite_elim1
(program $eovc_not_ite_elim1 ((C Bool) (F1 Bool) (F2 Bool))
  :signature (Bool Bool Bool) Bool
  (
  (($eovc_not_ite_elim1 F2 F1 C) (eo::define ((_v0 (not (_ (_ (ite C) F1) F2)))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_not_ite_elim1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_not_ite_elim1")
; program: $eor_not_ite_elim2
(program $eor_not_ite_elim2 ((F1 Bool) (C Bool) (F2 Bool))
  :signature (Bool) Bool
  (
  (($eor_not_ite_elim2 (not (_ (_ (ite C) F1) F2))) (_ (or C) (_ (or (not F2)) false)))
  )
)
; program: $eovc_not_ite_elim2
(program $eovc_not_ite_elim2 ((C Bool) (F1 Bool) (F2 Bool))
  :signature (Bool Bool Bool) Bool
  (
  (($eovc_not_ite_elim2 F2 F1 C) (eo::define ((_v0 (not (_ (_ (ite C) F1) F2)))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_not_ite_elim2 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_not_ite_elim2")
; program: $eor_not_and
(program $eor_not_and ((F Bool))
  :signature (Bool) Bool
  (
  (($eor_not_and (not F)) ($lower_not_and F))
  )
)
; program: $eovc_not_and
(program $eovc_not_and ((F Bool))
  :signature (Bool) Bool
  (
  (($eovc_not_and F) (eo::define ((_v0 (not F))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_not_and _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_not_and")
; program: $eor_cnf_and_pos.fev1
(program $eor_cnf_and_pos.fev1 ((i Int) (Fs Bool) ($eo_1 Bool))
  :signature (Int Bool Bool) Bool
  (
  (($eor_cnf_and_pos.fev1 i Fs $eo_1) (_ (or (not Fs)) (_ (or $eo_1) false)))
  )
)
; program: $eor_cnf_and_pos
(program $eor_cnf_and_pos ((Fs Bool) (i Int))
  :signature (Bool Int) Bool
  (
  (($eor_cnf_and_pos Fs i) ($eor_cnf_and_pos.fev1 i Fs (eo::list_nth and Fs i)))
  )
)
; program: $eovc_cnf_and_pos
(program $eovc_cnf_and_pos ((Fs Bool) (i Int))
  :signature (Int Bool) Bool
  (
  (($eovc_cnf_and_pos i Fs) ($eo_requires_eq ($eo_model_sat ($eor_cnf_and_pos Fs i) false false) true true))
  )
)
(echo "smt-meta $eovc_cnf_and_pos")
; program: $eor_cnf_and_neg
(program $eor_cnf_and_neg ((Fs Bool))
  :signature (Bool) Bool
  (
  (($eor_cnf_and_neg Fs) (eo::cons or Fs ($lower_not_and Fs)))
  )
)
; program: $eovc_cnf_and_neg
(program $eovc_cnf_and_neg ((Fs Bool))
  :signature (Bool) Bool
  (
  (($eovc_cnf_and_neg Fs) ($eo_requires_eq ($eo_model_sat ($eor_cnf_and_neg Fs) false false) true true))
  )
)
(echo "smt-meta $eovc_cnf_and_neg")
; program: $eor_cnf_or_pos
(program $eor_cnf_or_pos ((Fs Bool))
  :signature (Bool) Bool
  (
  (($eor_cnf_or_pos Fs) (_ (or (not Fs)) Fs))
  )
)
; program: $eovc_cnf_or_pos
(program $eovc_cnf_or_pos ((Fs Bool))
  :signature (Bool) Bool
  (
  (($eovc_cnf_or_pos Fs) ($eo_requires_eq ($eo_model_sat ($eor_cnf_or_pos Fs) false false) true true))
  )
)
(echo "smt-meta $eovc_cnf_or_pos")
; program: $eor_cnf_or_neg.fev1
(program $eor_cnf_or_neg.fev1 ((i Int) (Fs Bool) ($eo_1 Bool))
  :signature (Int Bool Bool) Bool
  (
  (($eor_cnf_or_neg.fev1 i Fs $eo_1) (_ (or Fs) (_ (or (not $eo_1)) false)))
  )
)
; program: $eor_cnf_or_neg
(program $eor_cnf_or_neg ((Fs Bool) (i Int))
  :signature (Bool Int) Bool
  (
  (($eor_cnf_or_neg Fs i) ($eor_cnf_or_neg.fev1 i Fs (eo::list_nth or Fs i)))
  )
)
; program: $eovc_cnf_or_neg
(program $eovc_cnf_or_neg ((Fs Bool) (i Int))
  :signature (Int Bool) Bool
  (
  (($eovc_cnf_or_neg i Fs) ($eo_requires_eq ($eo_model_sat ($eor_cnf_or_neg Fs i) false false) true true))
  )
)
(echo "smt-meta $eovc_cnf_or_neg")
; program: $eor_cnf_implies_pos
(program $eor_cnf_implies_pos ((F1 Bool) (F2 Bool))
  :signature (Bool) Bool
  (
  (($eor_cnf_implies_pos (_ (=> F1) F2)) (_ (or (not (_ (=> F1) F2))) (_ (or (not F1)) (_ (or F2) false))))
  )
)
; program: $eovc_cnf_implies_pos
(program $eovc_cnf_implies_pos ((F1 Bool) (F2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_cnf_implies_pos F2 F1) ($eo_requires_eq ($eo_model_sat ($eor_cnf_implies_pos (_ (=> F1) F2)) false false) true true))
  )
)
(echo "smt-meta $eovc_cnf_implies_pos")
; program: $eor_cnf_implies_neg1
(program $eor_cnf_implies_neg1 ((F2 Bool) (F1 Bool))
  :signature (Bool) Bool
  (
  (($eor_cnf_implies_neg1 (_ (=> F1) F2)) (_ (or (_ (=> F1) F2)) (_ (or F1) false)))
  )
)
; program: $eovc_cnf_implies_neg1
(program $eovc_cnf_implies_neg1 ((F1 Bool) (F2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_cnf_implies_neg1 F2 F1) ($eo_requires_eq ($eo_model_sat ($eor_cnf_implies_neg1 (_ (=> F1) F2)) false false) true true))
  )
)
(echo "smt-meta $eovc_cnf_implies_neg1")
; program: $eor_cnf_implies_neg2
(program $eor_cnf_implies_neg2 ((F1 Bool) (F2 Bool))
  :signature (Bool) Bool
  (
  (($eor_cnf_implies_neg2 (_ (=> F1) F2)) (_ (or (_ (=> F1) F2)) (_ (or (not F2)) false)))
  )
)
; program: $eovc_cnf_implies_neg2
(program $eovc_cnf_implies_neg2 ((F1 Bool) (F2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_cnf_implies_neg2 F2 F1) ($eo_requires_eq ($eo_model_sat ($eor_cnf_implies_neg2 (_ (=> F1) F2)) false false) true true))
  )
)
(echo "smt-meta $eovc_cnf_implies_neg2")
; program: $eor_cnf_equiv_pos1
(program $eor_cnf_equiv_pos1 ((F1 Bool) (F2 Bool))
  :signature (Bool) Bool
  (
  (($eor_cnf_equiv_pos1 (_ (= F1) F2)) (_ (or (not (_ (= F1) F2))) (_ (or (not F1)) (_ (or F2) false))))
  )
)
; program: $eovc_cnf_equiv_pos1
(program $eovc_cnf_equiv_pos1 ((F1 Bool) (F2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_cnf_equiv_pos1 F2 F1) ($eo_requires_eq ($eo_model_sat ($eor_cnf_equiv_pos1 (_ (= F1) F2)) false false) true true))
  )
)
(echo "smt-meta $eovc_cnf_equiv_pos1")
; program: $eor_cnf_equiv_pos2
(program $eor_cnf_equiv_pos2 ((F1 Bool) (F2 Bool))
  :signature (Bool) Bool
  (
  (($eor_cnf_equiv_pos2 (_ (= F1) F2)) (_ (or (not (_ (= F1) F2))) (_ (or F1) (_ (or (not F2)) false))))
  )
)
; program: $eovc_cnf_equiv_pos2
(program $eovc_cnf_equiv_pos2 ((F1 Bool) (F2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_cnf_equiv_pos2 F2 F1) ($eo_requires_eq ($eo_model_sat ($eor_cnf_equiv_pos2 (_ (= F1) F2)) false false) true true))
  )
)
(echo "smt-meta $eovc_cnf_equiv_pos2")
; program: $eor_cnf_equiv_neg1
(program $eor_cnf_equiv_neg1 ((F1 Bool) (F2 Bool))
  :signature (Bool) Bool
  (
  (($eor_cnf_equiv_neg1 (_ (= F1) F2)) (_ (or (_ (= F1) F2)) (_ (or F1) (_ (or F2) false))))
  )
)
; program: $eovc_cnf_equiv_neg1
(program $eovc_cnf_equiv_neg1 ((F1 Bool) (F2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_cnf_equiv_neg1 F2 F1) ($eo_requires_eq ($eo_model_sat ($eor_cnf_equiv_neg1 (_ (= F1) F2)) false false) true true))
  )
)
(echo "smt-meta $eovc_cnf_equiv_neg1")
; program: $eor_cnf_equiv_neg2
(program $eor_cnf_equiv_neg2 ((F1 Bool) (F2 Bool))
  :signature (Bool) Bool
  (
  (($eor_cnf_equiv_neg2 (_ (= F1) F2)) (_ (or (_ (= F1) F2)) (_ (or (not F1)) (_ (or (not F2)) false))))
  )
)
; program: $eovc_cnf_equiv_neg2
(program $eovc_cnf_equiv_neg2 ((F1 Bool) (F2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_cnf_equiv_neg2 F2 F1) ($eo_requires_eq ($eo_model_sat ($eor_cnf_equiv_neg2 (_ (= F1) F2)) false false) true true))
  )
)
(echo "smt-meta $eovc_cnf_equiv_neg2")
; program: $eor_cnf_xor_pos1
(program $eor_cnf_xor_pos1 ((F1 Bool) (F2 Bool))
  :signature (Bool) Bool
  (
  (($eor_cnf_xor_pos1 (_ (xor F1) F2)) (_ (or (not (_ (xor F1) F2))) (_ (or F1) (_ (or F2) false))))
  )
)
; program: $eovc_cnf_xor_pos1
(program $eovc_cnf_xor_pos1 ((F1 Bool) (F2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_cnf_xor_pos1 F2 F1) ($eo_requires_eq ($eo_model_sat ($eor_cnf_xor_pos1 (_ (xor F1) F2)) false false) true true))
  )
)
(echo "smt-meta $eovc_cnf_xor_pos1")
; program: $eor_cnf_xor_pos2
(program $eor_cnf_xor_pos2 ((F1 Bool) (F2 Bool))
  :signature (Bool) Bool
  (
  (($eor_cnf_xor_pos2 (_ (xor F1) F2)) (_ (or (not (_ (xor F1) F2))) (_ (or (not F1)) (_ (or (not F2)) false))))
  )
)
; program: $eovc_cnf_xor_pos2
(program $eovc_cnf_xor_pos2 ((F1 Bool) (F2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_cnf_xor_pos2 F2 F1) ($eo_requires_eq ($eo_model_sat ($eor_cnf_xor_pos2 (_ (xor F1) F2)) false false) true true))
  )
)
(echo "smt-meta $eovc_cnf_xor_pos2")
; program: $eor_cnf_xor_neg1
(program $eor_cnf_xor_neg1 ((F1 Bool) (F2 Bool))
  :signature (Bool) Bool
  (
  (($eor_cnf_xor_neg1 (_ (xor F1) F2)) (_ (or (_ (xor F1) F2)) (_ (or (not F1)) (_ (or F2) false))))
  )
)
; program: $eovc_cnf_xor_neg1
(program $eovc_cnf_xor_neg1 ((F1 Bool) (F2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_cnf_xor_neg1 F2 F1) ($eo_requires_eq ($eo_model_sat ($eor_cnf_xor_neg1 (_ (xor F1) F2)) false false) true true))
  )
)
(echo "smt-meta $eovc_cnf_xor_neg1")
; program: $eor_cnf_xor_neg2
(program $eor_cnf_xor_neg2 ((F1 Bool) (F2 Bool))
  :signature (Bool) Bool
  (
  (($eor_cnf_xor_neg2 (_ (xor F1) F2)) (_ (or (_ (xor F1) F2)) (_ (or F1) (_ (or (not F2)) false))))
  )
)
; program: $eovc_cnf_xor_neg2
(program $eovc_cnf_xor_neg2 ((F1 Bool) (F2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_cnf_xor_neg2 F2 F1) ($eo_requires_eq ($eo_model_sat ($eor_cnf_xor_neg2 (_ (xor F1) F2)) false false) true true))
  )
)
(echo "smt-meta $eovc_cnf_xor_neg2")
; program: $eor_cnf_ite_pos1
(program $eor_cnf_ite_pos1 ((F2 Bool) (C Bool) (F1 Bool))
  :signature (Bool) Bool
  (
  (($eor_cnf_ite_pos1 (_ (_ (ite C) F1) F2)) (_ (or (not (_ (_ (ite C) F1) F2))) (_ (or (not C)) (_ (or F1) false))))
  )
)
; program: $eovc_cnf_ite_pos1
(program $eovc_cnf_ite_pos1 ((C Bool) (F1 Bool) (F2 Bool))
  :signature (Bool Bool Bool) Bool
  (
  (($eovc_cnf_ite_pos1 F2 F1 C) ($eo_requires_eq ($eo_model_sat ($eor_cnf_ite_pos1 (_ (_ (ite C) F1) F2)) false false) true true))
  )
)
(echo "smt-meta $eovc_cnf_ite_pos1")
; program: $eor_cnf_ite_pos2
(program $eor_cnf_ite_pos2 ((F1 Bool) (C Bool) (F2 Bool))
  :signature (Bool) Bool
  (
  (($eor_cnf_ite_pos2 (_ (_ (ite C) F1) F2)) (_ (or (not (_ (_ (ite C) F1) F2))) (_ (or C) (_ (or F2) false))))
  )
)
; program: $eovc_cnf_ite_pos2
(program $eovc_cnf_ite_pos2 ((C Bool) (F1 Bool) (F2 Bool))
  :signature (Bool Bool Bool) Bool
  (
  (($eovc_cnf_ite_pos2 F2 F1 C) ($eo_requires_eq ($eo_model_sat ($eor_cnf_ite_pos2 (_ (_ (ite C) F1) F2)) false false) true true))
  )
)
(echo "smt-meta $eovc_cnf_ite_pos2")
; program: $eor_cnf_ite_pos3
(program $eor_cnf_ite_pos3 ((C Bool) (F1 Bool) (F2 Bool))
  :signature (Bool) Bool
  (
  (($eor_cnf_ite_pos3 (_ (_ (ite C) F1) F2)) (_ (or (not (_ (_ (ite C) F1) F2))) (_ (or F1) (_ (or F2) false))))
  )
)
; program: $eovc_cnf_ite_pos3
(program $eovc_cnf_ite_pos3 ((C Bool) (F1 Bool) (F2 Bool))
  :signature (Bool Bool Bool) Bool
  (
  (($eovc_cnf_ite_pos3 F2 F1 C) ($eo_requires_eq ($eo_model_sat ($eor_cnf_ite_pos3 (_ (_ (ite C) F1) F2)) false false) true true))
  )
)
(echo "smt-meta $eovc_cnf_ite_pos3")
; program: $eor_cnf_ite_neg1
(program $eor_cnf_ite_neg1 ((F2 Bool) (C Bool) (F1 Bool))
  :signature (Bool) Bool
  (
  (($eor_cnf_ite_neg1 (_ (_ (ite C) F1) F2)) (_ (or (_ (_ (ite C) F1) F2)) (_ (or (not C)) (_ (or (not F1)) false))))
  )
)
; program: $eovc_cnf_ite_neg1
(program $eovc_cnf_ite_neg1 ((C Bool) (F1 Bool) (F2 Bool))
  :signature (Bool Bool Bool) Bool
  (
  (($eovc_cnf_ite_neg1 F2 F1 C) ($eo_requires_eq ($eo_model_sat ($eor_cnf_ite_neg1 (_ (_ (ite C) F1) F2)) false false) true true))
  )
)
(echo "smt-meta $eovc_cnf_ite_neg1")
; program: $eor_cnf_ite_neg2
(program $eor_cnf_ite_neg2 ((F1 Bool) (C Bool) (F2 Bool))
  :signature (Bool) Bool
  (
  (($eor_cnf_ite_neg2 (_ (_ (ite C) F1) F2)) (_ (or (_ (_ (ite C) F1) F2)) (_ (or C) (_ (or (not F2)) false))))
  )
)
; program: $eovc_cnf_ite_neg2
(program $eovc_cnf_ite_neg2 ((C Bool) (F1 Bool) (F2 Bool))
  :signature (Bool Bool Bool) Bool
  (
  (($eovc_cnf_ite_neg2 F2 F1 C) ($eo_requires_eq ($eo_model_sat ($eor_cnf_ite_neg2 (_ (_ (ite C) F1) F2)) false false) true true))
  )
)
(echo "smt-meta $eovc_cnf_ite_neg2")
; program: $eor_cnf_ite_neg3
(program $eor_cnf_ite_neg3 ((C Bool) (F1 Bool) (F2 Bool))
  :signature (Bool) Bool
  (
  (($eor_cnf_ite_neg3 (_ (_ (ite C) F1) F2)) (_ (or (_ (_ (ite C) F1) F2)) (_ (or (not F1)) (_ (or (not F2)) false))))
  )
)
; program: $eovc_cnf_ite_neg3
(program $eovc_cnf_ite_neg3 ((C Bool) (F1 Bool) (F2 Bool))
  :signature (Bool Bool Bool) Bool
  (
  (($eovc_cnf_ite_neg3 F2 F1 C) ($eo_requires_eq ($eo_model_sat ($eor_cnf_ite_neg3 (_ (_ (ite C) F1) F2)) false false) true true))
  )
)
(echo "smt-meta $eovc_cnf_ite_neg3")
; program: $eor_arrays_read_over_write
(program $eor_arrays_read_over_write ((U Type) (T Type) (i T) (e U) (a (_ (Array T) U)) (j T))
  :signature (U Bool) Bool
  (
  (($eor_arrays_read_over_write (_ (select (_ (_ (store a) i) e)) j) (not (_ (= i) j))) (_ (= (_ (select (_ (_ (store a) i) e)) j)) (_ (select a) j)))
  )
)
; program: $eovc_arrays_read_over_write
(program $eovc_arrays_read_over_write ((T Type) (U Type) (a (_ (Array T) U)) (e U) (i T) (j T))
  :signature (T T U (_ (Array T) U)) Bool
  (
  (($eovc_arrays_read_over_write j i e a) (eo::define ((_v0 (not (_ (= i) j)))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_arrays_read_over_write (_ (select (_ (_ (store a) i) e)) j) _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_arrays_read_over_write")
; program: $eor_arrays_read_over_write_contra
(program $eor_arrays_read_over_write_contra ((U Type) (e U) (T Type) (a (_ (Array T) U)) (j T) (i T))
  :signature (Bool) Bool
  (
  (($eor_arrays_read_over_write_contra (not (_ (= (_ (select (_ (_ (store a) i) e)) j)) (_ (select a) j)))) (_ (= j) i))
  )
)
; program: $eovc_arrays_read_over_write_contra
(program $eovc_arrays_read_over_write_contra ((U Type) (T Type) (i T) (e U) (a (_ (Array T) U)) (j T))
  :signature (T (_ (Array T) U) U T) Bool
  (
  (($eovc_arrays_read_over_write_contra j a e i) (eo::define ((_v0 (not (_ (= (_ (select (_ (_ (store a) i) e)) j)) (_ (select a) j))))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_arrays_read_over_write_contra _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_arrays_read_over_write_contra")
; program: $eor_arrays_read_over_write_1
(program $eor_arrays_read_over_write_1 ((U Type) (T Type) (a (_ (Array T) U)) (i T) (e U))
  :signature (U) Bool
  (
  (($eor_arrays_read_over_write_1 (_ (select (_ (_ (store a) i) e)) i)) (_ (= (_ (select (_ (_ (store a) i) e)) i)) e))
  )
)
; program: $eovc_arrays_read_over_write_1
(program $eovc_arrays_read_over_write_1 ((T Type) (U Type) (a (_ (Array T) U)) (e U) (i T))
  :signature (T U (_ (Array T) U)) Bool
  (
  (($eovc_arrays_read_over_write_1 i e a) ($eo_requires_eq ($eo_model_sat ($eor_arrays_read_over_write_1 (_ (select (_ (_ (store a) i) e)) i)) false false) true true))
  )
)
(echo "smt-meta $eovc_arrays_read_over_write_1")
; program: $eor_arrays_ext
(program $eor_arrays_ext ((T Type) (U Type) (a (_ (Array T) U)) (b (_ (Array T) U)))
  :signature (Bool) Bool
  (
  (($eor_arrays_ext (not (_ (= a) b))) (eo::define ((_v0 (@array_deq_diff a b))) (not (_ (= (_ (select a) _v0)) (_ (select b) _v0)))))
  )
)
; program: $eovc_arrays_ext
(program $eovc_arrays_ext ((T Type) (U Type) (a (_ (Array T) U)) (b (_ (Array T) U)))
  :signature ((_ (Array T) U) (_ (Array T) U)) Bool
  (
  (($eovc_arrays_ext b a) (eo::define ((_v0 (not (_ (= a) b)))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_arrays_ext _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_arrays_ext")
; program: $eor_refl
(program $eor_refl ((T Type) (t T))
  :signature (T) Bool
  (
  (($eor_refl t) (_ (= t) t))
  )
)
; program: $eovc_refl
(program $eovc_refl ((T Type) (t T))
  :signature (T) Bool
  (
  (($eovc_refl t) ($eo_requires_eq ($eo_model_sat ($eor_refl t) false false) true true))
  )
)
(echo "smt-meta $eovc_refl")
; program: $eor_symm
(program $eor_symm ((F Bool))
  :signature (Bool) Bool
  (
  (($eor_symm F) ($mk_symm F))
  )
)
; program: $eovc_symm
(program $eovc_symm ((F Bool))
  :signature (Bool) Bool
  (
  (($eovc_symm F) ($eo_requires_eq ($eo_model_sat F true false) true ($eo_requires_eq ($eo_model_sat ($eor_symm F) false false) true true)))
  )
)
(echo "smt-meta $eovc_symm")
; program: $eor_trans
(program $eor_trans ((T Type) (t1 T) (t2 T) (tail Bool))
  :signature (Bool) Bool
  (
  (($eor_trans (_ (and (_ (= t1) t2)) tail)) ($mk_trans t1 t2 tail))
  )
)
; program: $eovc_trans
(program $eovc_trans ((T Type) (t1 T) (t2 T) (tail Bool))
  :signature (Bool T T) Bool
  (
  (($eovc_trans tail t2 t1) (eo::define ((_v0 (_ (and (_ (= t1) t2)) tail))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_trans _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_trans")
; program: $eor_cong.fev1
(program $eor_cong.fev1 ((U Type) (E Bool) (t U) ($eo_1 U))
  :signature (Bool U U) Bool
  (
  (($eor_cong.fev1 E t $eo_1) (_ (= t) $eo_1))
  )
)
; program: $eor_cong
(program $eor_cong ((U Type) (t U) (E Bool))
  :signature (U Bool) Bool
  (
  (($eor_cong t E) ($eor_cong.fev1 E t ($mk_cong_rhs t (eo::list_rev and E))))
  )
)
; program: $eovc_cong
(program $eovc_cong ((U Type) (t U) (E Bool))
  :signature (Bool U) Bool
  (
  (($eovc_cong E t) ($eo_requires_eq ($eo_model_sat E true false) true ($eo_requires_eq ($eo_model_sat ($eor_cong t E) false false) true true)))
  )
)
(echo "smt-meta $eovc_cong")
; program: $eor_nary_cong.fev1
(program $eor_nary_cong.fev1 ((U Type) (E Bool) (t U) ($eo_1 U))
  :signature (Bool U U) Bool
  (
  (($eor_nary_cong.fev1 E t $eo_1) (_ (= t) $eo_1))
  )
)
; program: $eor_nary_cong
(program $eor_nary_cong ((U Type) (t U) (E Bool))
  :signature (U Bool) Bool
  (
  (($eor_nary_cong t E) ($eor_nary_cong.fev1 E t ($mk_nary_cong_rhs t E)))
  )
)
; program: $eovc_nary_cong
(program $eovc_nary_cong ((U Type) (t U) (E Bool))
  :signature (Bool U) Bool
  (
  (($eovc_nary_cong E t) ($eo_requires_eq ($eo_model_sat E true false) true ($eo_requires_eq ($eo_model_sat ($eor_nary_cong t E) false false) true true)))
  )
)
(echo "smt-meta $eovc_nary_cong")
; program: $eor_true_intro
(program $eor_true_intro ((F Bool))
  :signature (Bool) Bool
  (
  (($eor_true_intro F) (_ (= F) true))
  )
)
; program: $eovc_true_intro
(program $eovc_true_intro ((F Bool))
  :signature (Bool) Bool
  (
  (($eovc_true_intro F) ($eo_requires_eq ($eo_model_sat F true false) true ($eo_requires_eq ($eo_model_sat ($eor_true_intro F) false false) true true)))
  )
)
(echo "smt-meta $eovc_true_intro")
; program: $eor_true_elim
(program $eor_true_elim ((F Bool))
  :signature (Bool) Bool
  (
  (($eor_true_elim (_ (= F) true)) F)
  )
)
; program: $eovc_true_elim
(program $eovc_true_elim ((F Bool))
  :signature (Bool) Bool
  (
  (($eovc_true_elim F) (eo::define ((_v0 (_ (= F) true))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_true_elim _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_true_elim")
; program: $eor_false_intro
(program $eor_false_intro ((F Bool))
  :signature (Bool) Bool
  (
  (($eor_false_intro (not F)) (_ (= F) false))
  )
)
; program: $eovc_false_intro
(program $eovc_false_intro ((F Bool))
  :signature (Bool) Bool
  (
  (($eovc_false_intro F) (eo::define ((_v0 (not F))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_false_intro _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_false_intro")
; program: $eor_false_elim
(program $eor_false_elim ((F Bool))
  :signature (Bool) Bool
  (
  (($eor_false_elim (_ (= F) false)) (not F))
  )
)
; program: $eovc_false_elim
(program $eovc_false_elim ((F Bool))
  :signature (Bool) Bool
  (
  (($eovc_false_elim F) (eo::define ((_v0 (_ (= F) false))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_false_elim _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_false_elim")
; program: $eor_ho_cong
(program $eor_ho_cong ((T Type) (t1 T) (t2 T) (tail Bool))
  :signature (Bool) Bool
  (
  (($eor_ho_cong (_ (and (_ (= t1) t2)) tail)) ($mk_ho_cong t1 t2 tail))
  )
)
; program: $eovc_ho_cong
(program $eovc_ho_cong ((T Type) (t1 T) (t2 T) (tail Bool))
  :signature (Bool T T) Bool
  (
  (($eovc_ho_cong tail t2 t1) (eo::define ((_v0 (_ (and (_ (= t1) t2)) tail))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_ho_cong _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_ho_cong")
; program: $eor_distinct-elim.fev1
(program $eor_distinct-elim.fev1 (($eo_2 Bool) (b1 Bool) (b2 Bool))
  :signature (Bool Bool Bool Bool) Bool
  (
  (($eor_distinct-elim.fev1 b2 b1 $eo_2 $eo_2) (_ (= b1) b2))
  )
)
; program: $eor_distinct-elim
(program $eor_distinct-elim ((b1 Bool) (b2 Bool))
  :signature (Bool) Bool
  (
  (($eor_distinct-elim (_ (= b1) b2)) ($eor_distinct-elim.fev1 b2 b1 ($mk_distinct-elim b1) b2))
  )
)
; program: $eovc_distinct-elim
(program $eovc_distinct-elim ((b1 Bool) (b2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_distinct-elim b2 b1) ($eo_requires_eq ($eo_model_sat ($eor_distinct-elim (_ (= b1) b2)) false false) true true))
  )
)
(echo "smt-meta $eovc_distinct-elim")
; program: $eor_lambda-elim.fev2
(program $eor_lambda-elim.fev2 ((U Type) (V Type) (T Type) ($eoT.fev7 Type) ($eo_8 $eoT.fev7) (x $eo_List) (t T) (f (-> U V)))
  :signature ((-> U V) T $eo_List $eoT.fev7 $eoT.fev7) $eoT.fev7
  (
  (($eor_lambda-elim.fev2 f t x $eo_8 $eo_8) (_ (= (_ (lambda x) t)) f))
  )
)
; program: $eor_lambda-elim.fev1
(program $eor_lambda-elim.fev1 ((U Type) (V Type) (T Type) ($eoT.fev3 Type) ($eo_4 $eoT.fev3) (x $eo_List) (f (-> U V)) (t T))
  :signature ((-> U V) T $eo_List $eoT.fev3 $eoT.fev3) $eoT.fev3
  (
  (($eor_lambda-elim.fev1 f t x $eo_4 $eo_4) ($eor_lambda-elim.fev2 f t x ($is_app f t) true))
  )
)
; program: $eor_lambda-elim
(program $eor_lambda-elim (($eoT_3 Type) (U Type) (V Type) (f (-> U V)) (T Type) (t T) (x $eo_List))
  :signature ($eoT_3) Bool
  (
  (($eor_lambda-elim (_ (= (_ (lambda x) t)) f)) ($eor_lambda-elim.fev1 f t x ($get_arg_list_rec t $eo_List_nil) x))
  )
)
; program: $eovc_lambda-elim
(program $eovc_lambda-elim ((U Type) (V Type) (T Type) (x $eo_List) (t T) (f (-> U V)))
  :signature ((-> U V) T $eo_List) Bool
  (
  (($eovc_lambda-elim f t x) ($eo_requires_eq ($eo_model_sat ($eor_lambda-elim (_ (= (_ (lambda x) t)) f)) false false) true true))
  )
)
(echo "smt-meta $eovc_lambda-elim")
; program: $eor_arith_sum_ub
(program $eor_arith_sum_ub ((F Bool))
  :signature (Bool) Bool
  (
  (($eor_arith_sum_ub F) ($mk_arith_sum_ub (eo::list_rev and F) (_ (= 0) 0)))
  )
)
; program: $eovc_arith_sum_ub
(program $eovc_arith_sum_ub ((F Bool))
  :signature (Bool) Bool
  (
  (($eovc_arith_sum_ub F) ($eo_requires_eq ($eo_model_sat F true false) true ($eo_requires_eq ($eo_model_sat ($eor_arith_sum_ub F) false false) true true)))
  )
)
(echo "smt-meta $eovc_arith_sum_ub")
; program: $eor_arith_mult_pos.fev3
(program $eor_arith_mult_pos.fev3 ((T Type) (m T) ($eo_5 Real))
  :signature (T Real Real) Real
  (
  (($eor_arith_mult_pos.fev3 m $eo_5 $eo_5) 0/1)
  )
)
; program: $eor_arith_mult_pos.fev2
(program $eor_arith_mult_pos.fev2 ((T Type) (F Bool) (m T))
  :signature (Bool T Bool) Int
  (
  (($eor_arith_mult_pos.fev2 F m true) 0)
  (($eor_arith_mult_pos.fev2 F m false) ($eor_arith_mult_pos.fev3 m (eo::typeof m) Real))
  )
)
; program: $eor_arith_mult_pos.fev1
(program $eor_arith_mult_pos.fev1 ((T Type) ($eoT.fev3 Type) (m T) ($eo_2 Int) (F Bool) ($eo_1 Bool))
  :signature (Bool T Bool Int) $eoT.fev3
  (
  (($eor_arith_mult_pos.fev1 F m $eo_1 $eo_2) (_ (=> (_ (and (_ (> m) $eo_2)) (_ (and F) true))) $eo_1))
  )
)
; program: $eor_arith_mult_pos
(program $eor_arith_mult_pos ((T Type) (F Bool) (m T))
  :signature (T Bool) Bool
  (
  (($eor_arith_mult_pos m F) ($eor_arith_mult_pos.fev1 F m ($mk_arith_mult_pos m F) ($eor_arith_mult_pos.fev2 F m (eo::is_eq (eo::typeof m) Int))))
  )
)
; program: $eovc_arith_mult_pos
(program $eovc_arith_mult_pos ((T Type) (m T) (F Bool))
  :signature (Bool T) Bool
  (
  (($eovc_arith_mult_pos F m) ($eo_requires_eq ($eo_model_sat ($eor_arith_mult_pos m F) false false) true true))
  )
)
(echo "smt-meta $eovc_arith_mult_pos")
; program: $eor_arith_mult_neg.fev3
(program $eor_arith_mult_neg.fev3 ((T Type) (m T) ($eo_5 Real))
  :signature (T Real Real) Real
  (
  (($eor_arith_mult_neg.fev3 m $eo_5 $eo_5) 0/1)
  )
)
; program: $eor_arith_mult_neg.fev2
(program $eor_arith_mult_neg.fev2 ((T Type) (F Bool) (m T))
  :signature (Bool T Bool) Int
  (
  (($eor_arith_mult_neg.fev2 F m true) 0)
  (($eor_arith_mult_neg.fev2 F m false) ($eor_arith_mult_neg.fev3 m (eo::typeof m) Real))
  )
)
; program: $eor_arith_mult_neg.fev1
(program $eor_arith_mult_neg.fev1 ((T Type) ($eoT.fev3 Type) (m T) ($eo_2 Int) (F Bool) ($eo_1 Bool))
  :signature (Bool T Bool Int) $eoT.fev3
  (
  (($eor_arith_mult_neg.fev1 F m $eo_1 $eo_2) (_ (=> (_ (and (_ (< m) $eo_2)) (_ (and F) true))) $eo_1))
  )
)
; program: $eor_arith_mult_neg
(program $eor_arith_mult_neg ((T Type) (F Bool) (m T))
  :signature (T Bool) Bool
  (
  (($eor_arith_mult_neg m F) ($eor_arith_mult_neg.fev1 F m ($mk_arith_mult_neg m F) ($eor_arith_mult_neg.fev2 F m (eo::is_eq (eo::typeof m) Int))))
  )
)
; program: $eovc_arith_mult_neg
(program $eovc_arith_mult_neg ((T Type) (m T) (F Bool))
  :signature (Bool T) Bool
  (
  (($eovc_arith_mult_neg F m) ($eo_requires_eq ($eo_model_sat ($eor_arith_mult_neg m F) false false) true true))
  )
)
(echo "smt-meta $eovc_arith_mult_neg")
; program: $eor_arith_trichotomy
(program $eor_arith_trichotomy ((F1 Bool) (F2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eor_arith_trichotomy F1 F2) ($mk_arith_trichotomy ($arith_normalize_lit (not F1)) ($arith_normalize_lit (not F2))))
  )
)
; program: $eovc_arith_trichotomy
(program $eovc_arith_trichotomy ((F1 Bool) (F2 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_arith_trichotomy F2 F1) ($eo_requires_eq ($eo_model_sat F1 true false) true ($eo_requires_eq ($eo_model_sat F2 true false) true ($eo_requires_eq ($eo_model_sat ($eor_arith_trichotomy F1 F2) false false) true true))))
  )
)
(echo "smt-meta $eovc_arith_trichotomy")
; program: $eor_int_tight_ub.fev1
(program $eor_int_tight_ub.fev1 ((R Type) (t R) (s Int) ($eo_1 Int))
  :signature (R Int Int) Bool
  (
  (($eor_int_tight_ub.fev1 t s $eo_1) (_ (<= s) $eo_1))
  )
)
; program: $eor_int_tight_ub
(program $eor_int_tight_ub (($eoT_9 Type) (s Int) (R Type) (t R))
  :signature ($eoT_9) Bool
  (
  (($eor_int_tight_ub (_ (< s) t)) ($eor_int_tight_ub.fev1 t s ($greatest_int_lt t)))
  )
)
; program: $eovc_int_tight_ub
(program $eovc_int_tight_ub ((R Type) (s Int) (t R))
  :signature (R Int) Bool
  (
  (($eovc_int_tight_ub t s) (eo::define ((_v0 (_ (< s) t))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_int_tight_ub _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_int_tight_ub")
; program: $eor_int_tight_lb.fev1
(program $eor_int_tight_lb.fev1 ((R Type) (t R) (s Int) ($eo_1 Int))
  :signature (R Int Int) Bool
  (
  (($eor_int_tight_lb.fev1 t s $eo_1) (_ (>= s) $eo_1))
  )
)
; program: $eor_int_tight_lb
(program $eor_int_tight_lb (($eoT_10 Type) (s Int) (R Type) (t R))
  :signature ($eoT_10) Bool
  (
  (($eor_int_tight_lb (_ (> s) t)) ($eor_int_tight_lb.fev1 t s ($least_int_gt t)))
  )
)
; program: $eovc_int_tight_lb
(program $eovc_int_tight_lb ((R Type) (s Int) (t R))
  :signature (R Int) Bool
  (
  (($eovc_int_tight_lb t s) (eo::define ((_v0 (_ (> s) t))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_int_tight_lb _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_int_tight_lb")
; program: $eor_arith_mult_tangent.fev3
(program $eor_arith_mult_tangent.fev3 ((S Type) (R Type) ($eoT.fev7 Type) (b S) (y S) (s Bool) (a R) (x R))
  :signature (S S Bool R R Bool) $eoT.fev7
  (
  (($eor_arith_mult_tangent.fev3 b y s a x true) <=)
  (($eor_arith_mult_tangent.fev3 b y s a x false) >=)
  )
)
; program: $eor_arith_mult_tangent.fev2
(program $eor_arith_mult_tangent.fev2 ((S Type) (R Type) ($eoT.fev6 Type) (b S) (y S) (s Bool) (a R) (x R))
  :signature (S S Bool R R Bool) $eoT.fev6
  (
  (($eor_arith_mult_tangent.fev2 b y s a x true) >=)
  (($eor_arith_mult_tangent.fev2 b y s a x false) <=)
  )
)
; program: $eor_arith_mult_tangent.fev1
(program $eor_arith_mult_tangent.fev1 ((S Type) (R Type) ($eoT.fev1 Type) ($eoT.fev3 Type) ($eoT.fev5 Type) (s Bool) ($eo_4 $eoT.fev3) (x R) (a R) ($eo_2 $eoT.fev1) (y S) (b S))
  :signature (S S Bool R R $eoT.fev1 $eoT.fev3) $eoT.fev5
  (
  (($eor_arith_mult_tangent.fev1 b y s a x $eo_2 $eo_4) (eo::define ((_v0 (* b))) (eo::define ((_v1 (* a))) (eo::define ((_v2 (_ (* y) 1))) (eo::define ((_v3 (* x))) (_ (= (_ ($eo_2 (_ _v3 _v2)) (_ (- (_ (+ (_ _v0 (_ _v3 1))) (_ (+ (_ _v1 _v2)) 0))) (_ _v1 (_ _v0 1))))) (_ (or (_ (and (_ (<= x) a)) (_ (and (_ ($eo_4 y) b)) true))) (_ (or (_ (and (_ (>= x) a)) (_ (and (_ ($eo_2 y) b)) true))) false))))))))
  )
)
; program: $eor_arith_mult_tangent
(program $eor_arith_mult_tangent ((R Type) (S Type) (b S) (y S) (a R) (x R) (s Bool))
  :signature (R S R S Bool) Bool
  (
  (($eor_arith_mult_tangent x y a b s) ($eor_arith_mult_tangent.fev1 b y s a x ($eor_arith_mult_tangent.fev2 b y s a x s) ($eor_arith_mult_tangent.fev3 b y s a x s)))
  )
)
; program: $eovc_arith_mult_tangent
(program $eovc_arith_mult_tangent ((S Type) (R Type) (x R) (y S) (a R) (b S) (s Bool))
  :signature (Bool S R S R) Bool
  (
  (($eovc_arith_mult_tangent s b a y x) ($eo_requires_eq ($eo_model_sat ($eor_arith_mult_tangent x y a b s) false false) true true))
  )
)
(echo "smt-meta $eovc_arith_mult_tangent")
; program: $eor_arith_mult_sign.fev3
(program $eor_arith_mult_sign.fev3 ((T Type) ($eoT.fev5 Type) (m T) (F Bool))
  :signature (T Bool Bool) $eoT.fev5
  (
  (($eor_arith_mult_sign.fev3 m F true) >)
  (($eor_arith_mult_sign.fev3 m F false) <)
  )
)
; program: $eor_arith_mult_sign.fev4
(program $eor_arith_mult_sign.fev4 ((T Type) (m T) ($eo_7 Real))
  :signature (T Real Real) Real
  (
  (($eor_arith_mult_sign.fev4 m $eo_7 $eo_7) 0/1)
  )
)
; program: $eor_arith_mult_sign.fev2
(program $eor_arith_mult_sign.fev2 ((T Type) (F Bool) (m T))
  :signature (T Bool Bool) Int
  (
  (($eor_arith_mult_sign.fev2 m F true) 0)
  (($eor_arith_mult_sign.fev2 m F false) ($eor_arith_mult_sign.fev4 m (eo::typeof m) Real))
  )
)
; program: $eor_arith_mult_sign.fev1
(program $eor_arith_mult_sign.fev1 ((T Type) ($eoT.fev2 Type) ($eoT.fev4 Type) (F Bool) ($eo_3 $eoT.fev2) (m T) ($eo_1 Int))
  :signature (T Bool Int $eoT.fev2) $eoT.fev4
  (
  (($eor_arith_mult_sign.fev1 m F $eo_1 $eo_3) (_ (=> F) (_ ($eo_3 m) $eo_1)))
  )
)
; program: $eor_arith_mult_sign
(program $eor_arith_mult_sign ((T Type) (F Bool) (m T))
  :signature (Bool T) Bool
  (
  (($eor_arith_mult_sign F m) ($eor_arith_mult_sign.fev1 m F ($eor_arith_mult_sign.fev2 m F (eo::is_eq (eo::typeof m) Int)) ($eor_arith_mult_sign.fev3 m F ($mk_arith_mult_sign_sgn true F m))))
  )
)
; program: $eovc_arith_mult_sign
(program $eovc_arith_mult_sign ((T Type) (F Bool) (m T))
  :signature (T Bool) Bool
  (
  (($eovc_arith_mult_sign m F) ($eo_requires_eq ($eo_model_sat ($eor_arith_mult_sign F m) false false) true true))
  )
)
(echo "smt-meta $eovc_arith_mult_sign")
; program: $eor_arith_mult_abs_comparison
(program $eor_arith_mult_abs_comparison ((F Bool))
  :signature (Bool) Bool
  (
  (($eor_arith_mult_abs_comparison F) ($mk_arith_mult_abs_comparison F))
  )
)
; program: $eovc_arith_mult_abs_comparison
(program $eovc_arith_mult_abs_comparison ((F Bool))
  :signature (Bool) Bool
  (
  (($eovc_arith_mult_abs_comparison F) ($eo_requires_eq ($eo_model_sat F true false) true ($eo_requires_eq ($eo_model_sat ($eor_arith_mult_abs_comparison F) false false) true true)))
  )
)
(echo "smt-meta $eovc_arith_mult_abs_comparison")
; program: $eor_arith_reduction
(program $eor_arith_reduction ((T Type) (t T))
  :signature (T) Bool
  (
  (($eor_arith_reduction t) ($arith_reduction_pred t))
  )
)
; program: $eovc_arith_reduction
(program $eovc_arith_reduction ((T Type) (t T))
  :signature (T) Bool
  (
  (($eovc_arith_reduction t) ($eo_requires_eq ($eo_model_sat ($eor_arith_reduction t) false false) true true))
  )
)
(echo "smt-meta $eovc_arith_reduction")
; program: $eor_arith_poly_norm.fev1
(program $eor_arith_poly_norm.fev1 ((U Type) ($eo_2 Bool) (a U) (b U))
  :signature (U U Bool Bool) Bool
  (
  (($eor_arith_poly_norm.fev1 b a $eo_2 $eo_2) (_ (= a) b))
  )
)
; program: $eor_arith_poly_norm
(program $eor_arith_poly_norm ((U Type) (a U) (b U))
  :signature (Bool) Bool
  (
  (($eor_arith_poly_norm (_ (= a) b)) ($eor_arith_poly_norm.fev1 b a ($get_arith_poly_norm a) ($get_arith_poly_norm b)))
  )
)
; program: $eovc_arith_poly_norm
(program $eovc_arith_poly_norm ((U Type) (a U) (b U))
  :signature (U U) Bool
  (
  (($eovc_arith_poly_norm b a) ($eo_requires_eq ($eo_model_sat ($eor_arith_poly_norm (_ (= a) b)) false false) true true))
  )
)
(echo "smt-meta $eovc_arith_poly_norm")
; program: $eor_arith_poly_norm_rel.fev3
(program $eor_arith_poly_norm_rel.fev3 ((V2 Type) (V1 Type) (R1 Type) (R2 Type) (R3 Type) (U2 Type) (U1 Type) (V Type) (y V) ($eo_8 Bool) (x1 U1) (x2 U2) (r (-> R1 (-> R2 R3))) (y1 V1) (y2 V2))
  :signature (V2 V1 (-> R1 (-> R2 R3)) U2 U1 V Bool Bool) Bool
  (
  (($eor_arith_poly_norm_rel.fev3 y2 y1 r x2 x1 y $eo_8 $eo_8) (_ (= (_ (r x1) x2)) (_ (r y1) y2)))
  )
)
; program: $eor_arith_poly_norm_rel.fev2
(program $eor_arith_poly_norm_rel.fev2 ((V2 Type) (V1 Type) (R1 Type) (R2 Type) (R3 Type) (U2 Type) (U1 Type) (V Type) (U Type) (x U) ($eo_6 Bool) (r (-> R1 (-> R2 R3))) (x2 U2) (x1 U1) (y V) (y1 V1) (y2 V2))
  :signature (V2 V1 (-> R1 (-> R2 R3)) U2 U1 V U Bool Bool) Bool
  (
  (($eor_arith_poly_norm_rel.fev2 y2 y1 r x2 x1 y x $eo_6 $eo_6) ($eor_arith_poly_norm_rel.fev3 y2 y1 r x2 x1 y ($is_eq_maybe_to_real y (_ (- y1) y2)) true))
  )
)
; program: $eor_arith_poly_norm_rel.fev1
(program $eor_arith_poly_norm_rel.fev1 ((V2 Type) (V1 Type) (R1 Type) (R2 Type) (R3 Type) (U2 Type) (U1 Type) (V Type) (U Type) ($eoT.fev3 Type) (cy V) (cx U) ($eo_4 $eoT.fev3) (y2 V2) (y1 V1) (r (-> R1 (-> R2 R3))) (y V) (x U) (x1 U1) (x2 U2))
  :signature (V2 V1 (-> R1 (-> R2 R3)) U2 U1 V U V U $eoT.fev3 $eoT.fev3) $eoT.fev3
  (
  (($eor_arith_poly_norm_rel.fev1 y2 y1 r x2 x1 y x cy cx $eo_4 $eo_4) ($eor_arith_poly_norm_rel.fev2 y2 y1 r x2 x1 y x ($is_eq_maybe_to_real x (_ (- x1) x2)) true))
  )
)
; program: $eor_arith_poly_norm_rel
(program $eor_arith_poly_norm_rel ((V2 Type) (y2 V2) (V1 Type) (y1 V1) (U2 Type) (x2 U2) (U1 Type) (x1 U1) (V Type) (y V) (U Type) (x U) (R1 Type) (R2 Type) (R3 Type) (r (-> R1 (-> R2 R3))) (cx U) (cy V))
  :signature (Bool Bool) Bool
  (
  (($eor_arith_poly_norm_rel (_ (= (_ (r x1) x2)) (_ (r y1) y2)) (_ (= (_ (* cx) (_ (* x) 1))) (_ (* cy) (_ (* y) 1)))) ($eor_arith_poly_norm_rel.fev1 y2 y1 r x2 x1 y x cy cx ($is_poly_norm_rel_consts (_ (r cx) cy)) true))
  )
)
; program: $eovc_arith_poly_norm_rel
(program $eovc_arith_poly_norm_rel ((V Type) (U Type) (V2 Type) (V1 Type) (R1 Type) (R2 Type) (R3 Type) (U2 Type) (U1 Type) (x1 U1) (x2 U2) (r (-> R1 (-> R2 R3))) (y1 V1) (y2 V2) (cx U) (x U) (cy V) (y V))
  :signature (V V U U V2 V1 (-> R1 (-> R2 R3)) U2 U1) Bool
  (
  (($eovc_arith_poly_norm_rel y cy x cx y2 y1 r x2 x1) (eo::define ((_v0 (_ (= (_ (* cx) (_ (* x) 1))) (_ (* cy) (_ (* y) 1))))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_arith_poly_norm_rel (_ (= (_ (r x1) x2)) (_ (r y1) y2)) _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_arith_poly_norm_rel")
; program: $eor_arith-pow-elim.fev4
(program $eor_arith-pow-elim.fev4 ((T Type) (n T) (a T) ($eo_9 Int))
  :signature (T T Int) Int
  (
  (($eor_arith-pow-elim.fev4 n a $eo_9) (_ (^ a) $eo_9))
  )
)
; program: $eor_arith-pow-elim.fev3
(program $eor_arith-pow-elim.fev3 ((T Type) ($eoT.fev8 Type) (b T) (a T) (n T))
  :signature (T T T Bool) $eoT.fev8
  (
  (($eor_arith-pow-elim.fev3 b n a true) ($arith_unfold_pow_rec (eo::to_z n) a))
  (($eor_arith-pow-elim.fev3 b n a false) ($eor_arith-pow-elim.fev4 n a (eo::to_z n)))
  )
)
; program: $eor_arith-pow-elim.fev5
(program $eor_arith-pow-elim.fev5 ((T Type) ($eoT.fev5 Type) ($eoT.fev12 Type) ($eo_6 $eoT.fev5) ($eo_13 $eoT.fev12) (a T) (n T) (b T))
  :signature (T T T $eoT.fev5 $eoT.fev12 $eoT.fev12) $eoT.fev12
  (
  (($eor_arith-pow-elim.fev5 b n a $eo_6 $eo_13 $eo_13) (_ (= (_ (^ a) n)) b))
  )
)
; program: $eor_arith-pow-elim.fev2
(program $eor_arith-pow-elim.fev2 ((T Type) ($eoT.fev5 Type) ($eoT.fev7 Type) (n T) (a T) ($eo_6 $eoT.fev5) (b T))
  :signature (T T T $eoT.fev5) $eoT.fev7
  (
  (($eor_arith-pow-elim.fev2 b n a $eo_6) ($eor_arith-pow-elim.fev5 b n a $eo_6 ($singleton_elim $eo_6) b))
  )
)
; program: $eor_arith-pow-elim.fev1
(program $eor_arith-pow-elim.fev1 ((T Type) ($eoT.fev3 Type) ($eo_4 $eoT.fev3) (b T) (a T) (n T))
  :signature (T T T $eoT.fev3 $eoT.fev3) $eoT.fev3
  (
  (($eor_arith-pow-elim.fev1 b n a $eo_4 $eo_4) (eo::define ((_v0 (eo::to_z n))) ($eor_arith-pow-elim.fev2 b n a ($eor_arith-pow-elim.fev3 b n a (eo::and (eo::is_z _v0) (eo::not (eo::is_neg _v0)))))))
  )
)
; program: $eor_arith-pow-elim
(program $eor_arith-pow-elim (($eoT_11 Type) (T Type) (b T) (a T) (n T))
  :signature ($eoT_11) Bool
  (
  (($eor_arith-pow-elim (_ (= (_ (^ a) n)) b)) ($eor_arith-pow-elim.fev1 b n a (eo::to_q (eo::to_z n)) (eo::to_q n)))
  )
)
; program: $eovc_arith-pow-elim
(program $eovc_arith-pow-elim ((T Type) (a T) (n T) (b T))
  :signature (T T T) Bool
  (
  (($eovc_arith-pow-elim b n a) ($eo_requires_eq ($eo_model_sat ($eor_arith-pow-elim (_ (= (_ (^ a) n)) b)) false false) true true))
  )
)
(echo "smt-meta $eovc_arith-pow-elim")
; program: $eor_bv-repeat-elim.fev2
(program $eor_bv-repeat-elim.fev2 ((k2 Int) (k1 Int) ($eoT.fev4 Type) (b (BitVec k2)) (n Int) (a (BitVec k1)))
  :signature ((BitVec k2) (BitVec k1) Int Bool) $eoT.fev4
  (
  (($eor_bv-repeat-elim.fev2 b a n true) ($bv_unfold_repeat_rec n a))
  (($eor_bv-repeat-elim.fev2 b a n false) (_ (repeat n) a))
  )
)
; program: $eor_bv-repeat-elim.fev3
(program $eor_bv-repeat-elim.fev3 ((k2 Int) (k1 Int) ($eoT.fev1 Type) ($eoT.fev7 Type) ($eo_2 $eoT.fev1) ($eo_8 $eoT.fev7) (n Int) (a (BitVec k1)) (b (BitVec k2)))
  :signature ((BitVec k2) (BitVec k1) Int $eoT.fev1 $eoT.fev7 $eoT.fev7) $eoT.fev7
  (
  (($eor_bv-repeat-elim.fev3 b a n $eo_2 $eo_8 $eo_8) (_ (= (_ (repeat n) a)) b))
  )
)
; program: $eor_bv-repeat-elim.fev1
(program $eor_bv-repeat-elim.fev1 ((k2 Int) (k1 Int) ($eoT.fev1 Type) ($eoT.fev3 Type) (a (BitVec k1)) (n Int) ($eo_2 $eoT.fev1) (b (BitVec k2)))
  :signature ((BitVec k2) (BitVec k1) Int $eoT.fev1) $eoT.fev3
  (
  (($eor_bv-repeat-elim.fev1 b a n $eo_2) ($eor_bv-repeat-elim.fev3 b a n $eo_2 ($singleton_elim $eo_2) b))
  )
)
; program: $eor_bv-repeat-elim
(program $eor_bv-repeat-elim (($eoT_12 Type) (k2 Int) (b (BitVec k2)) (k1 Int) (a (BitVec k1)) (n Int))
  :signature ($eoT_12) Bool
  (
  (($eor_bv-repeat-elim (_ (= (_ (repeat n) a)) b)) ($eor_bv-repeat-elim.fev1 b a n ($eor_bv-repeat-elim.fev2 b a n (eo::and (eo::is_z n) (eo::not (eo::is_neg n))))))
  )
)
; program: $eovc_bv-repeat-elim
(program $eovc_bv-repeat-elim ((k2 Int) (k1 Int) (n Int) (a (BitVec k1)) (b (BitVec k2)))
  :signature ((BitVec k2) (BitVec k1) Int) Bool
  (
  (($eovc_bv-repeat-elim b a n) ($eo_requires_eq ($eo_model_sat ($eor_bv-repeat-elim (_ (= (_ (repeat n) a)) b)) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-repeat-elim")
; program: $eor_bv-smulo-elim.fev8
(program $eor_bv-smulo-elim.fev8 (($eoT.fev25 Type) ($eoT.fev19 Type) ($eoT.fev16 Type) (n Int) ($eoT.fev27 Type) ($eoT.fev21 Type) ($eoT.fev30 Type) ($eoT.fev32 Type) ($eoT.fev34 Type) ($eo_15 Int) ($eo_26 $eoT.fev25) ($eo_20 $eoT.fev19) ($eo_17 $eoT.fev16) ($eo_33 $eoT.fev32) ($eo_23 Int) ($eo_18 Int) (a (BitVec n)) (b (BitVec n)) ($eo_22 $eoT.fev21) ($eo_28 $eoT.fev27) ($eo_31 $eoT.fev30))
  :signature (Int $eoT.fev25 $eoT.fev19 (BitVec n) Int $eoT.fev16 (BitVec n) $eoT.fev27 $eoT.fev21 Int $eoT.fev30 $eoT.fev32) $eoT.fev34
  (
  (($eor_bv-smulo-elim.fev8 $eo_15 $eo_26 $eo_20 a $eo_18 $eo_17 b $eo_28 $eo_22 $eo_23 $eo_31 $eo_33) (eo::define ((_v0 (sign_extend 1))) (eo::define ((_v1 (_ (bvmul (_ _v0 a)) (_ (bvmul (_ _v0 b)) $eo_22)))) (_ (= (_ (bvor $eo_33) (_ (bvor (_ (bvxor (_ (_ (extract $eo_23) $eo_23) _v1)) (_ (bvxor (_ (_ (extract $eo_18) $eo_18) _v1)) $eo_28))) $eo_31))) #b1))))
  )
)
; program: $eor_bv-smulo-elim.fev7
(program $eor_bv-smulo-elim.fev7 (($eoT.fev16 Type) ($eoT.fev19 Type) (n Int) ($eoT.fev21 Type) ($eoT.fev25 Type) ($eoT.fev27 Type) ($eoT.fev29 Type) ($eo_28 $eoT.fev27) ($eo_22 $eoT.fev21) ($eo_23 Int) (b (BitVec n)) ($eo_17 $eoT.fev16) ($eo_18 Int) (a (BitVec n)) ($eo_20 $eoT.fev19) ($eo_26 $eoT.fev25) ($eo_15 Int))
  :signature (Int $eoT.fev16 (BitVec n) Int $eoT.fev19 (BitVec n) $eoT.fev21 Int $eoT.fev25 $eoT.fev27) $eoT.fev29
  (
  (($eor_bv-smulo-elim.fev7 $eo_15 $eo_17 b $eo_18 $eo_20 a $eo_22 $eo_23 $eo_26 $eo_28) (eo::define ((_v0 (_ (extract $eo_18) $eo_18))) (eo::define ((_v1 (sign_extend $eo_18))) (eo::define ((_v2 (_ (bvxor a) (_ (bvxor (_ _v1 (_ _v0 a))) $eo_20)))) (eo::define ((_v3 (_ (_ (extract $eo_15) $eo_15) _v2))) (eo::define ((_v4 (_ (bvxor b) (_ (bvxor (_ _v1 (_ _v0 b))) $eo_17)))) (eo::define ((_v5 ($bv_smulo_elim_rec _v2 _v4 _v3 (_ (bvand (_ (_ (extract 1) 1) _v4)) (_ (bvand _v3) $eo_26)) 1 $eo_15))) ($eor_bv-smulo-elim.fev8 $eo_15 $eo_26 $eo_20 a $eo_18 $eo_17 b $eo_28 $eo_22 $eo_23 (eo::nil bvor (eo::typeof _v5)) _v5))))))))
  )
)
; program: $eor_bv-smulo-elim.fev6
(program $eor_bv-smulo-elim.fev6 ((n Int) ($eoT.fev16 Type) ($eoT.fev19 Type) ($eoT.fev21 Type) ($eoT.fev24 Type) ($eo_15 Int) ($eo_20 $eoT.fev19) ($eo_18 Int) ($eo_17 $eoT.fev16) ($eo_23 Int) (a (BitVec n)) (b (BitVec n)) ($eo_22 $eoT.fev21))
  :signature ((BitVec n) (BitVec n) Int $eoT.fev16 Int $eoT.fev19 $eoT.fev21 Int) $eoT.fev24
  (
  (($eor_bv-smulo-elim.fev6 a b $eo_15 $eo_17 $eo_18 $eo_20 $eo_22 $eo_23) (eo::define ((_v0 (sign_extend 1))) ($eor_bv-smulo-elim.fev7 $eo_15 $eo_17 b $eo_18 $eo_20 a $eo_22 $eo_23 (eo::nil bvand (eo::typeof (_ (_ (extract 1) 1) (_ (bvxor b) (_ (bvxor (_ (sign_extend $eo_18) (_ (_ (extract $eo_18) $eo_18) b))) $eo_17))))) (eo::nil bvxor (eo::typeof (_ (_ (extract $eo_23) $eo_23) (_ (bvmul (_ _v0 a)) (_ (bvmul (_ _v0 b)) $eo_22))))))))
  )
)
; program: $eor_bv-smulo-elim.fev9
(program $eor_bv-smulo-elim.fev9 (($eoT.fev10 Type) (n Int) ($eoT.fev35 Type) ($eoT.fev37 Type) ($eo_12 Int) ($eo_13 Int) (a (BitVec n)) (b (BitVec n)) ($eo_11 $eoT.fev10) ($eo_36 $eoT.fev35))
  :signature ($eoT.fev10 (BitVec n) (BitVec n) Int Int $eoT.fev35) $eoT.fev37
  (
  (($eor_bv-smulo-elim.fev9 $eo_11 b a $eo_12 $eo_13 $eo_36) (eo::define ((_v0 (sign_extend 1))) (eo::define ((_v1 (_ (bvmul (_ _v0 a)) (_ (bvmul (_ _v0 b)) $eo_11)))) (_ (= (_ (bvxor (_ (_ (extract $eo_12) $eo_12) _v1)) (_ (bvxor (_ (_ (extract $eo_13) $eo_13) _v1)) $eo_36))) #b1))))
  )
)
; program: $eor_bv-smulo-elim.fev5
(program $eor_bv-smulo-elim.fev5 ((n Int) ($eoT.fev10 Type) ($eoT.fev14 Type) ($eo_13 Int) ($eo_12 Int) (a (BitVec n)) (b (BitVec n)) ($eo_11 $eoT.fev10))
  :signature ((BitVec n) (BitVec n) $eoT.fev10 Int Int) $eoT.fev14
  (
  (($eor_bv-smulo-elim.fev5 a b $eo_11 $eo_12 $eo_13) (eo::define ((_v0 (sign_extend 1))) ($eor_bv-smulo-elim.fev9 $eo_11 b a $eo_12 $eo_13 (eo::nil bvxor (eo::typeof (_ (_ (extract $eo_12) $eo_12) (_ (bvmul (_ _v0 a)) (_ (bvmul (_ _v0 b)) $eo_11))))))))
  )
)
; program: $eor_bv-smulo-elim.fev4
(program $eor_bv-smulo-elim.fev4 ((n Int) ($eoT.fev9 Type) (b (BitVec n)) (a (BitVec n)))
  :signature ((BitVec n) (BitVec n) Bool) $eoT.fev9
  (
  (($eor_bv-smulo-elim.fev4 a b true) (eo::define ((_v0 ($bv_bitwidth (eo::typeof a)))) ($eor_bv-smulo-elim.fev5 a b (eo::nil bvmul (eo::typeof (_ (sign_extend 1) a))) _v0 (eo::add _v0 -1))))
  (($eor_bv-smulo-elim.fev4 a b false) (eo::define ((_v0 (eo::typeof a))) (eo::define ((_v1 ($bv_bitwidth _v0))) ($eor_bv-smulo-elim.fev6 a b (eo::add _v1 -2) (eo::nil bvxor (eo::typeof b)) (eo::add _v1 -1) (eo::nil bvxor _v0) (eo::nil bvmul (eo::typeof (_ (sign_extend 1) a))) _v1))))
  )
)
; program: $eor_bv-smulo-elim.fev3
(program $eor_bv-smulo-elim.fev3 ((n Int) ($eoT.fev4 Type) ($eoT.fev6 Type) (a (BitVec n)) (b (BitVec n)) ($eo_5 $eoT.fev4))
  :signature ((BitVec n) (BitVec n) $eoT.fev4) $eoT.fev6
  (
  (($eor_bv-smulo-elim.fev3 a b $eo_5) (_ (= (_ (bvand a) (_ (bvand b) $eo_5))) #b1))
  )
)
; program: $eor_bv-smulo-elim.fev2
(program $eor_bv-smulo-elim.fev2 ((n Int) ($eoT.fev3 Type) (c Bool) (b (BitVec n)) (a (BitVec n)))
  :signature (Bool (BitVec n) (BitVec n) Bool) $eoT.fev3
  (
  (($eor_bv-smulo-elim.fev2 c b a true) ($eor_bv-smulo-elim.fev3 a b (eo::nil bvand (eo::typeof a))))
  (($eor_bv-smulo-elim.fev2 c b a false) ($eor_bv-smulo-elim.fev4 a b (eo::eq ($bv_bitwidth (eo::typeof a)) 2)))
  )
)
; program: $eor_bv-smulo-elim.fev10
(program $eor_bv-smulo-elim.fev10 ((n Int) ($eoT.fev1 Type) ($eo_2 $eoT.fev1) ($eo_39 Bool) (a (BitVec n)) (b (BitVec n)) (c Bool))
  :signature (Bool (BitVec n) (BitVec n) $eoT.fev1 Bool Bool) Bool
  (
  (($eor_bv-smulo-elim.fev10 c b a $eo_2 $eo_39 $eo_39) (_ (= (_ (bvsmulo a) b)) c))
  )
)
; program: $eor_bv-smulo-elim.fev1
(program $eor_bv-smulo-elim.fev1 ((n Int) ($eoT.fev1 Type) (b (BitVec n)) (a (BitVec n)) ($eo_2 $eoT.fev1) (c Bool))
  :signature (Bool (BitVec n) (BitVec n) $eoT.fev1) Bool
  (
  (($eor_bv-smulo-elim.fev1 c b a $eo_2) ($eor_bv-smulo-elim.fev10 c b a $eo_2 $eo_2 c))
  )
)
; program: $eor_bv-smulo-elim
(program $eor_bv-smulo-elim ((c Bool) (n Int) (b (BitVec n)) (a (BitVec n)))
  :signature (Bool) Bool
  (
  (($eor_bv-smulo-elim (_ (= (_ (bvsmulo a) b)) c)) ($eor_bv-smulo-elim.fev1 c b a ($eor_bv-smulo-elim.fev2 c b a (eo::eq ($bv_bitwidth (eo::typeof a)) 1))))
  )
)
; program: $eovc_bv-smulo-elim
(program $eovc_bv-smulo-elim ((n Int) (a (BitVec n)) (b (BitVec n)) (c Bool))
  :signature (Bool (BitVec n) (BitVec n)) Bool
  (
  (($eovc_bv-smulo-elim c b a) ($eo_requires_eq ($eo_model_sat ($eor_bv-smulo-elim (_ (= (_ (bvsmulo a) b)) c)) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-smulo-elim")
; program: $eor_bv-umulo-elim.fev5
(program $eor_bv-umulo-elim.fev5 (($eoT.fev9 Type) ($eoT.fev5 Type) (n Int) ($eoT.fev12 Type) ($eo_4 Int) ($eo_10 $eoT.fev9) ($eo_6 $eoT.fev5) (b (BitVec n)) (a (BitVec n)) ($eo_7 Int) ($eo_13 $eoT.fev12))
  :signature (Int $eoT.fev9 $eoT.fev5 (BitVec n) (BitVec n) Int $eoT.fev12) Bool
  (
  (($eor_bv-umulo-elim.fev5 $eo_4 $eo_10 $eo_6 b a $eo_7 $eo_13) (_ (= $eo_13) #b1))
  )
)
; program: $eor_bv-umulo-elim.fev4
(program $eor_bv-umulo-elim.fev4 (($eoT.fev5 Type) (n Int) ($eoT.fev9 Type) ($eoT.fev11 Type) ($eo_7 Int) (a (BitVec n)) (b (BitVec n)) ($eo_6 $eoT.fev5) ($eo_10 $eoT.fev9) ($eo_4 Int))
  :signature (Int $eoT.fev5 (BitVec n) (BitVec n) Int $eoT.fev9) $eoT.fev11
  (
  (($eor_bv-umulo-elim.fev4 $eo_4 $eo_6 b a $eo_7 $eo_10) (eo::define ((_v0 (concat #b0))) ($eor_bv-umulo-elim.fev5 $eo_4 $eo_10 $eo_6 b a $eo_7 ($bv_umulo_elim_rec a b (_ (_ (extract $eo_7) $eo_7) a) (_ (bvor (_ (_ (extract $eo_4) $eo_4) (_ (bvmul (_ _v0 (_ (concat a) (eo::to_bin 0 0)))) (_ (bvmul (_ _v0 (_ (concat b) (eo::to_bin 0 0)))) $eo_6)))) $eo_10) 1 $eo_4))))
  )
)
; program: $eor_bv-umulo-elim.fev3
(program $eor_bv-umulo-elim.fev3 ((n Int) ($eoT.fev5 Type) ($eoT.fev8 Type) ($eo_7 Int) ($eo_4 Int) (a (BitVec n)) (b (BitVec n)) ($eo_6 $eoT.fev5))
  :signature ((BitVec n) (BitVec n) Int $eoT.fev5 Int) $eoT.fev8
  (
  (($eor_bv-umulo-elim.fev3 a b $eo_4 $eo_6 $eo_7) (eo::define ((_v0 (concat #b0))) ($eor_bv-umulo-elim.fev4 $eo_4 $eo_6 b a $eo_7 (eo::nil bvor (eo::typeof (_ (_ (extract $eo_4) $eo_4) (_ (bvmul (_ _v0 (_ (concat a) (eo::to_bin 0 0)))) (_ (bvmul (_ _v0 (_ (concat b) (eo::to_bin 0 0)))) $eo_6))))))))
  )
)
; program: $eor_bv-umulo-elim.fev2
(program $eor_bv-umulo-elim.fev2 ((n Int) ($eoT.fev3 Type) (c Bool) (b (BitVec n)) (a (BitVec n)))
  :signature (Bool (BitVec n) (BitVec n) Bool) $eoT.fev3
  (
  (($eor_bv-umulo-elim.fev2 c b a true) false)
  (($eor_bv-umulo-elim.fev2 c b a false) (eo::define ((_v0 ($bv_bitwidth (eo::typeof a)))) ($eor_bv-umulo-elim.fev3 a b _v0 (eo::nil bvmul (eo::typeof (_ (concat #b0) (_ (concat a) (eo::to_bin 0 0))))) (eo::add _v0 -1))))
  )
)
; program: $eor_bv-umulo-elim.fev6
(program $eor_bv-umulo-elim.fev6 ((n Int) ($eoT.fev1 Type) ($eo_2 $eoT.fev1) ($eo_15 Bool) (a (BitVec n)) (b (BitVec n)) (c Bool))
  :signature (Bool (BitVec n) (BitVec n) $eoT.fev1 Bool Bool) Bool
  (
  (($eor_bv-umulo-elim.fev6 c b a $eo_2 $eo_15 $eo_15) (_ (= (_ (bvumulo a) b)) c))
  )
)
; program: $eor_bv-umulo-elim.fev1
(program $eor_bv-umulo-elim.fev1 ((n Int) ($eoT.fev1 Type) (b (BitVec n)) (a (BitVec n)) ($eo_2 $eoT.fev1) (c Bool))
  :signature (Bool (BitVec n) (BitVec n) $eoT.fev1) Bool
  (
  (($eor_bv-umulo-elim.fev1 c b a $eo_2) ($eor_bv-umulo-elim.fev6 c b a $eo_2 $eo_2 c))
  )
)
; program: $eor_bv-umulo-elim
(program $eor_bv-umulo-elim ((c Bool) (n Int) (b (BitVec n)) (a (BitVec n)))
  :signature (Bool) Bool
  (
  (($eor_bv-umulo-elim (_ (= (_ (bvumulo a) b)) c)) ($eor_bv-umulo-elim.fev1 c b a ($eor_bv-umulo-elim.fev2 c b a (eo::eq ($bv_bitwidth (eo::typeof a)) 1))))
  )
)
; program: $eovc_bv-umulo-elim
(program $eovc_bv-umulo-elim ((n Int) (a (BitVec n)) (b (BitVec n)) (c Bool))
  :signature (Bool (BitVec n) (BitVec n)) Bool
  (
  (($eovc_bv-umulo-elim c b a) ($eo_requires_eq ($eo_model_sat ($eor_bv-umulo-elim (_ (= (_ (bvumulo a) b)) c)) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-umulo-elim")
; program: $eor_bv-bitwise-slicing.fev1
(program $eor_bv-bitwise-slicing.fev1 ((n Int) ($eo_2 Bool) (a (BitVec n)) (b (BitVec n)))
  :signature ((BitVec n) (BitVec n) Bool Bool) Bool
  (
  (($eor_bv-bitwise-slicing.fev1 b a $eo_2 $eo_2) (_ (= a) b))
  )
)
; program: $eor_bv-bitwise-slicing
(program $eor_bv-bitwise-slicing ((n Int) (a (BitVec n)) (b (BitVec n)))
  :signature (Bool) Bool
  (
  (($eor_bv-bitwise-slicing (_ (= a) b)) ($eor_bv-bitwise-slicing.fev1 b a ($bv_mk_bitwise_slicing a) b))
  )
)
; program: $eovc_bv-bitwise-slicing
(program $eovc_bv-bitwise-slicing ((n Int) (a (BitVec n)) (b (BitVec n)))
  :signature ((BitVec n) (BitVec n)) Bool
  (
  (($eovc_bv-bitwise-slicing b a) ($eo_requires_eq ($eo_model_sat ($eor_bv-bitwise-slicing (_ (= a) b)) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-bitwise-slicing")
; program: $eor_bv_bitblast_step.fev1
(program $eor_bv_bitblast_step.fev1 ((U Type) ($eo_2 Bool) (a U) (b U))
  :signature (U U Bool Bool) Bool
  (
  (($eor_bv_bitblast_step.fev1 b a $eo_2 $eo_2) (_ (= a) b))
  )
)
; program: $eor_bv_bitblast_step
(program $eor_bv_bitblast_step ((U Type) (a U) (b U))
  :signature (Bool) Bool
  (
  (($eor_bv_bitblast_step (_ (= a) b)) ($eor_bv_bitblast_step.fev1 b a ($bv_mk_bitblast_step a) b))
  )
)
; program: $eovc_bv_bitblast_step
(program $eovc_bv_bitblast_step ((U Type) (a U) (b U))
  :signature (U U) Bool
  (
  (($eovc_bv_bitblast_step b a) ($eo_requires_eq ($eo_model_sat ($eor_bv_bitblast_step (_ (= a) b)) false false) true true))
  )
)
(echo "smt-meta $eovc_bv_bitblast_step")
; program: $eor_bv_poly_norm.fev4
(program $eor_bv_poly_norm.fev4 ((n Int) (a (BitVec n)) ($eo_5 Int))
  :signature ((BitVec n) Int) Int
  (
  (($eor_bv_poly_norm.fev4 a $eo_5) (int.pow2 $eo_5))
  )
)
; program: $eor_bv_poly_norm.fev3
(program $eor_bv_poly_norm.fev3 ((n Int) (a (BitVec n)))
  :signature ((BitVec n) Bool) Int
  (
  (($eor_bv_poly_norm.fev3 a true) 0)
  (($eor_bv_poly_norm.fev3 a false) ($arith_eval_int_pow_2_rec ($bv_bitwidth (eo::typeof a))))
  )
)
; program: $eor_bv_poly_norm.fev2
(program $eor_bv_poly_norm.fev2 ((n Int) (b (BitVec n)) (a (BitVec n)))
  :signature ((BitVec n) (BitVec n) Bool) Int
  (
  (($eor_bv_poly_norm.fev2 b a true) ($eor_bv_poly_norm.fev3 a (eo::is_neg ($bv_bitwidth (eo::typeof a)))))
  (($eor_bv_poly_norm.fev2 b a false) ($eor_bv_poly_norm.fev4 a ($bv_bitwidth (eo::typeof a))))
  )
)
; program: $eor_bv_poly_norm.fev5
(program $eor_bv_poly_norm.fev5 ((n Int) ($eo_1 Int) ($eo_2 @Polynomial) ($eo_3 @Polynomial) ($eo_7 Bool) (a (BitVec n)) (b (BitVec n)))
  :signature ((BitVec n) (BitVec n) Int @Polynomial @Polynomial Bool Bool) Bool
  (
  (($eor_bv_poly_norm.fev5 b a $eo_1 $eo_2 $eo_3 $eo_7 $eo_7) (_ (= a) b))
  )
)
; program: $eor_bv_poly_norm.fev1
(program $eor_bv_poly_norm.fev1 ((n Int) (b (BitVec n)) (a (BitVec n)) ($eo_3 @Polynomial) ($eo_2 @Polynomial) ($eo_1 Int))
  :signature ((BitVec n) (BitVec n) Int @Polynomial @Polynomial) Bool
  (
  (($eor_bv_poly_norm.fev1 b a $eo_1 $eo_2 $eo_3) ($eor_bv_poly_norm.fev5 b a $eo_1 $eo_2 $eo_3 (eo::eq ($poly_mod_coeffs $eo_3 $eo_1) ($poly_mod_coeffs $eo_2 $eo_1)) true))
  )
)
; program: $eor_bv_poly_norm
(program $eor_bv_poly_norm ((n Int) (b (BitVec n)) (a (BitVec n)))
  :signature (Bool) Bool
  (
  (($eor_bv_poly_norm (_ (= a) b)) ($eor_bv_poly_norm.fev1 b a ($eor_bv_poly_norm.fev2 b a (eo::is_z ($bv_bitwidth (eo::typeof a)))) ($get_bv_poly_norm_rec b) ($get_bv_poly_norm_rec a)))
  )
)
; program: $eovc_bv_poly_norm
(program $eovc_bv_poly_norm ((n Int) (a (BitVec n)) (b (BitVec n)))
  :signature ((BitVec n) (BitVec n)) Bool
  (
  (($eovc_bv_poly_norm b a) ($eo_requires_eq ($eo_model_sat ($eor_bv_poly_norm (_ (= a) b)) false false) true true))
  )
)
(echo "smt-meta $eovc_bv_poly_norm")
; program: $eor_bv_poly_norm_eq.fev3
(program $eor_bv_poly_norm_eq.fev3 ((n Int) (cy (BitVec n)) ($eo_6 Bool) (xb1 (BitVec n)) (xb2 (BitVec n)) (yb1 (BitVec n)) (yb2 (BitVec n)))
  :signature ((BitVec n) (BitVec n) (BitVec n) (BitVec n) (BitVec n) Bool Bool) Bool
  (
  (($eor_bv_poly_norm_eq.fev3 yb2 yb1 xb2 xb1 cy $eo_6 $eo_6) (_ (= (_ (= xb1) xb2)) (_ (= yb1) yb2)))
  )
)
; program: $eor_bv_poly_norm_eq.fev2
(program $eor_bv_poly_norm_eq.fev2 ((n Int) (cx (BitVec n)) ($eo_4 Bool) (yb2 (BitVec n)) (yb1 (BitVec n)) (xb2 (BitVec n)) (xb1 (BitVec n)) (cy (BitVec n)))
  :signature ((BitVec n) (BitVec n) (BitVec n) (BitVec n) (BitVec n) (BitVec n) Bool Bool) Bool
  (
  (($eor_bv_poly_norm_eq.fev2 yb2 yb1 xb2 xb1 cy cx $eo_4 $eo_4) ($eor_bv_poly_norm_eq.fev3 yb2 yb1 xb2 xb1 cy (eo::zmod (eo::to_z cy) 2) 1))
  )
)
; program: $eor_bv_poly_norm_eq.fev1
(program $eor_bv_poly_norm_eq.fev1 ((n Int) (one (BitVec n)) ($eo_2 Bool) (yb2 (BitVec n)) (yb1 (BitVec n)) (xb2 (BitVec n)) (xb1 (BitVec n)) (cy (BitVec n)) (cx (BitVec n)))
  :signature ((BitVec n) (BitVec n) (BitVec n) (BitVec n) (BitVec n) (BitVec n) (BitVec n) Bool Bool) Bool
  (
  (($eor_bv_poly_norm_eq.fev1 yb2 yb1 xb2 xb1 cy cx one $eo_2 $eo_2) ($eor_bv_poly_norm_eq.fev2 yb2 yb1 xb2 xb1 cy cx (eo::zmod (eo::to_z cx) 2) 1))
  )
)
; program: $eor_bv_poly_norm_eq
(program $eor_bv_poly_norm_eq ((n Int) (yb2 (BitVec n)) (yb1 (BitVec n)) (xb2 (BitVec n)) (xb1 (BitVec n)) (cy (BitVec n)) (cx (BitVec n)) (one (BitVec n)))
  :signature (Bool Bool) Bool
  (
  (($eor_bv_poly_norm_eq (_ (= (_ (= xb1) xb2)) (_ (= yb1) yb2)) (_ (= (_ (bvmul cx) (_ (bvmul (_ (bvsub xb1) xb2)) one))) (_ (bvmul cy) (_ (bvmul (_ (bvsub yb1) yb2)) one)))) ($eor_bv_poly_norm_eq.fev1 yb2 yb1 xb2 xb1 cy cx one (eo::to_z one) 1))
  )
)
; program: $eovc_bv_poly_norm_eq
(program $eovc_bv_poly_norm_eq ((n Int) (cx (BitVec n)) (xb1 (BitVec n)) (xb2 (BitVec n)) (cy (BitVec n)) (yb1 (BitVec n)) (yb2 (BitVec n)) (one (BitVec n)))
  :signature ((BitVec n) (BitVec n) (BitVec n) (BitVec n) (BitVec n) (BitVec n) (BitVec n)) Bool
  (
  (($eovc_bv_poly_norm_eq one yb2 yb1 cy xb2 xb1 cx) (eo::define ((_v0 (_ (= (_ (bvmul cx) (_ (bvmul (_ (bvsub xb1) xb2)) one))) (_ (bvmul cy) (_ (bvmul (_ (bvsub yb1) yb2)) one))))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv_poly_norm_eq (_ (= (_ (= xb1) xb2)) (_ (= yb1) yb2)) _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_bv_poly_norm_eq")
; program: $eor_string_length_pos.fev1
(program $eor_string_length_pos.fev1 ((U Type) ($eoT.fev1 Type) ($eoT.fev3 Type) ($eo_2 $eoT.fev1) (s U))
  :signature (U $eoT.fev1) $eoT.fev3
  (
  (($eor_string_length_pos.fev1 s $eo_2) (eo::define ((_v0 (str.len s))) (_ (or (_ (and (_ (= _v0) 0)) (_ (and (_ (= s) $eo_2)) true))) (_ (or (_ (> _v0) 0)) false))))
  )
)
; program: $eor_string_length_pos
(program $eor_string_length_pos ((U Type) (s U))
  :signature (U) Bool
  (
  (($eor_string_length_pos s) ($eor_string_length_pos.fev1 s ($seq_empty (eo::typeof s))))
  )
)
; program: $eovc_string_length_pos
(program $eovc_string_length_pos ((U Type) (s U))
  :signature (U) Bool
  (
  (($eovc_string_length_pos s) ($eo_requires_eq ($eo_model_sat ($eor_string_length_pos s) false false) true true))
  )
)
(echo "smt-meta $eovc_string_length_pos")
; program: $eor_string_length_non_empty.fev1
(program $eor_string_length_non_empty.fev1 ((U Type) (t (Seq U)) ($eo_2 Bool) (s (Seq U)))
  :signature ((Seq U) (Seq U) Bool Bool) Bool
  (
  (($eor_string_length_non_empty.fev1 s t $eo_2 $eo_2) (not (_ (= (str.len s)) 0)))
  )
)
; program: $eor_string_length_non_empty
(program $eor_string_length_non_empty ((U Type) (s (Seq U)) (t (Seq U)))
  :signature (Bool) Bool
  (
  (($eor_string_length_non_empty (not (_ (= s) t))) ($eor_string_length_non_empty.fev1 s t ($str_is_empty t) true))
  )
)
; program: $eovc_string_length_non_empty
(program $eovc_string_length_non_empty ((U Type) (s (Seq U)) (t (Seq U)))
  :signature ((Seq U) (Seq U)) Bool
  (
  (($eovc_string_length_non_empty t s) (eo::define ((_v0 (not (_ (= s) t)))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_string_length_non_empty _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_string_length_non_empty")
; program: $eor_concat_eq.fev9
(program $eor_concat_eq.fev9 ((U Type) (t (Seq U)) (rev Bool) (s (Seq U)))
  :signature ((Seq U) Bool (Seq U) Bool) (Seq U)
  (
  (($eor_concat_eq.fev9 t rev s true) (eo::list_rev str.++ ($str_nary_intro s)))
  (($eor_concat_eq.fev9 t rev s false) ($str_nary_intro s))
  )
)
; program: $eor_concat_eq.fev8
(program $eor_concat_eq.fev8 ((U Type) (rev Bool) (s (Seq U)) (t (Seq U)))
  :signature ((Seq U) Bool (Seq U) Bool) (Seq U)
  (
  (($eor_concat_eq.fev8 t rev s true) (eo::list_rev str.++ ($str_nary_intro t)))
  (($eor_concat_eq.fev8 t rev s false) ($str_nary_intro t))
  )
)
; program: $eor_concat_eq.fev7
(program $eor_concat_eq.fev7 ((U Type) (t (Seq U)) (rev Bool) (s (Seq U)) ($eo_6 (Seq U)) ($eo_5 (Seq U)))
  :signature ((Seq U) Bool (Seq U) (Seq U) (Seq U)) (Seq U)
  (
  (($eor_concat_eq.fev7 t rev s $eo_5 $eo_6) ($pair_first ($str_strip_prefix $eo_6 $eo_5)))
  )
)
; program: $eor_concat_eq.fev6
(program $eor_concat_eq.fev6 ((U Type) (t (Seq U)) (rev Bool) (s (Seq U)))
  :signature ((Seq U) Bool (Seq U) Bool) (Seq U)
  (
  (($eor_concat_eq.fev6 t rev s true) (eo::list_rev str.++ ($str_nary_intro s)))
  (($eor_concat_eq.fev6 t rev s false) ($str_nary_intro s))
  )
)
; program: $eor_concat_eq.fev5
(program $eor_concat_eq.fev5 ((U Type) (rev Bool) (s (Seq U)) (t (Seq U)))
  :signature ((Seq U) Bool (Seq U) Bool) (Seq U)
  (
  (($eor_concat_eq.fev5 t rev s true) (eo::list_rev str.++ ($str_nary_intro t)))
  (($eor_concat_eq.fev5 t rev s false) ($str_nary_intro t))
  )
)
; program: $eor_concat_eq.fev4
(program $eor_concat_eq.fev4 ((U Type) (t (Seq U)) (rev Bool) (s (Seq U)) ($eo_4 (Seq U)) ($eo_3 (Seq U)))
  :signature ((Seq U) Bool (Seq U) (Seq U) (Seq U)) (Seq U)
  (
  (($eor_concat_eq.fev4 t rev s $eo_3 $eo_4) (eo::list_rev str.++ ($pair_first ($str_strip_prefix $eo_4 $eo_3))))
  )
)
; program: $eor_concat_eq.fev3
(program $eor_concat_eq.fev3 ((U Type) (t (Seq U)) (s (Seq U)) (rev Bool))
  :signature ((Seq U) Bool (Seq U) Bool) (Seq U)
  (
  (($eor_concat_eq.fev3 t rev s true) ($eor_concat_eq.fev4 t rev s ($eor_concat_eq.fev5 t rev s rev) ($eor_concat_eq.fev6 t rev s rev)))
  (($eor_concat_eq.fev3 t rev s false) ($eor_concat_eq.fev7 t rev s ($eor_concat_eq.fev8 t rev s rev) ($eor_concat_eq.fev9 t rev s rev)))
  )
)
; program: $eor_concat_eq.fev15
(program $eor_concat_eq.fev15 ((U Type) (t (Seq U)) (rev Bool) (s (Seq U)))
  :signature ((Seq U) Bool (Seq U) Bool) (Seq U)
  (
  (($eor_concat_eq.fev15 t rev s true) (eo::list_rev str.++ ($str_nary_intro s)))
  (($eor_concat_eq.fev15 t rev s false) ($str_nary_intro s))
  )
)
; program: $eor_concat_eq.fev14
(program $eor_concat_eq.fev14 ((U Type) (rev Bool) (s (Seq U)) (t (Seq U)))
  :signature ((Seq U) Bool (Seq U) Bool) (Seq U)
  (
  (($eor_concat_eq.fev14 t rev s true) (eo::list_rev str.++ ($str_nary_intro t)))
  (($eor_concat_eq.fev14 t rev s false) ($str_nary_intro t))
  )
)
; program: $eor_concat_eq.fev13
(program $eor_concat_eq.fev13 ((U Type) (t (Seq U)) (rev Bool) (s (Seq U)) ($eo_10 (Seq U)) ($eo_9 (Seq U)))
  :signature ((Seq U) Bool (Seq U) (Seq U) (Seq U)) (Seq U)
  (
  (($eor_concat_eq.fev13 t rev s $eo_9 $eo_10) ($pair_second ($str_strip_prefix $eo_10 $eo_9)))
  )
)
; program: $eor_concat_eq.fev12
(program $eor_concat_eq.fev12 ((U Type) (t (Seq U)) (rev Bool) (s (Seq U)))
  :signature ((Seq U) Bool (Seq U) Bool) (Seq U)
  (
  (($eor_concat_eq.fev12 t rev s true) (eo::list_rev str.++ ($str_nary_intro s)))
  (($eor_concat_eq.fev12 t rev s false) ($str_nary_intro s))
  )
)
; program: $eor_concat_eq.fev11
(program $eor_concat_eq.fev11 ((U Type) (rev Bool) (s (Seq U)) (t (Seq U)))
  :signature ((Seq U) Bool (Seq U) Bool) (Seq U)
  (
  (($eor_concat_eq.fev11 t rev s true) (eo::list_rev str.++ ($str_nary_intro t)))
  (($eor_concat_eq.fev11 t rev s false) ($str_nary_intro t))
  )
)
; program: $eor_concat_eq.fev10
(program $eor_concat_eq.fev10 ((U Type) (t (Seq U)) (rev Bool) (s (Seq U)) ($eo_8 (Seq U)) ($eo_7 (Seq U)))
  :signature ((Seq U) Bool (Seq U) (Seq U) (Seq U)) (Seq U)
  (
  (($eor_concat_eq.fev10 t rev s $eo_7 $eo_8) (eo::list_rev str.++ ($pair_second ($str_strip_prefix $eo_8 $eo_7))))
  )
)
; program: $eor_concat_eq.fev2
(program $eor_concat_eq.fev2 ((U Type) (t (Seq U)) (s (Seq U)) (rev Bool))
  :signature ((Seq U) Bool (Seq U) Bool) (Seq U)
  (
  (($eor_concat_eq.fev2 t rev s true) ($eor_concat_eq.fev10 t rev s ($eor_concat_eq.fev11 t rev s rev) ($eor_concat_eq.fev12 t rev s rev)))
  (($eor_concat_eq.fev2 t rev s false) ($eor_concat_eq.fev13 t rev s ($eor_concat_eq.fev14 t rev s rev) ($eor_concat_eq.fev15 t rev s rev)))
  )
)
; program: $eor_concat_eq.fev16
(program $eor_concat_eq.fev16 ((U Type) ($eo_1 (Seq U)) ($eo_2 (Seq U)) ($eo_12 (Seq U)) ($eo_11 (Seq U)))
  :signature ((Seq U) (Seq U) (Seq U) (Seq U)) Bool
  (
  (($eor_concat_eq.fev16 $eo_1 $eo_2 $eo_11 $eo_12) (_ (= $eo_12) $eo_11))
  )
)
; program: $eor_concat_eq.fev1
(program $eor_concat_eq.fev1 ((U Type) (t (Seq U)) (rev Bool) (s (Seq U)) ($eo_1 (Seq U)) ($eo_2 (Seq U)))
  :signature ((Seq U) Bool (Seq U) (Seq U) (Seq U)) Bool
  (
  (($eor_concat_eq.fev1 t rev s $eo_1 $eo_2) ($eor_concat_eq.fev16 $eo_1 $eo_2 ($str_nary_elim $eo_1) ($str_nary_elim $eo_2)))
  )
)
; program: $eor_concat_eq
(program $eor_concat_eq ((U Type) (t (Seq U)) (s (Seq U)) (rev Bool))
  :signature (Bool Bool) Bool
  (
  (($eor_concat_eq rev (_ (= s) t)) ($eor_concat_eq.fev1 t rev s ($eor_concat_eq.fev2 t rev s rev) ($eor_concat_eq.fev3 t rev s rev)))
  )
)
; program: $eovc_concat_eq
(program $eovc_concat_eq ((U Type) (rev Bool) (s (Seq U)) (t (Seq U)))
  :signature ((Seq U) (Seq U) Bool) Bool
  (
  (($eovc_concat_eq t s rev) (eo::define ((_v0 (_ (= s) t))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_concat_eq rev _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_concat_eq")
; program: $eor_concat_unify.fev2
(program $eor_concat_unify.fev2 ((U Type) ($eoT.fev4 Type) (t1 U) (s1 U) (t U) (rev Bool) (s U))
  :signature (U U U Bool U Bool) $eoT.fev4
  (
  (($eor_concat_unify.fev2 t1 s1 t rev s true) (eo::list_rev str.++ ($str_nary_intro s)))
  (($eor_concat_unify.fev2 t1 s1 t rev s false) ($str_nary_intro s))
  )
)
; program: $eor_concat_unify.fev5
(program $eor_concat_unify.fev5 ((U Type) ($eoT.fev11 Type) (t1 U) (s1 U) (rev Bool) (t U))
  :signature (U U U Bool Bool) $eoT.fev11
  (
  (($eor_concat_unify.fev5 t1 s1 t rev true) (eo::list_rev str.++ ($str_nary_intro t)))
  (($eor_concat_unify.fev5 t1 s1 t rev false) ($str_nary_intro t))
  )
)
; program: $eor_concat_unify.fev6
(program $eor_concat_unify.fev6 ((U Type) ($eoT.fev9 Type) ($eo_10 $eoT.fev9) ($eo_13 Bool) (s1 U) (t1 U))
  :signature (U U $eoT.fev9 Bool Bool) Bool
  (
  (($eor_concat_unify.fev6 t1 s1 $eo_10 $eo_13 $eo_13) (_ (= s1) t1))
  )
)
; program: $eor_concat_unify.fev4
(program $eor_concat_unify.fev4 ((U Type) ($eoT.fev9 Type) (t U) (rev Bool) (s1 U) ($eo_10 $eoT.fev9) (t1 U))
  :signature (U U U Bool $eoT.fev9) Bool
  (
  (($eor_concat_unify.fev4 t1 s1 t rev $eo_10) ($eor_concat_unify.fev6 t1 s1 $eo_10 (eo::list_nth str.++ $eo_10 0) t1))
  )
)
; program: $eor_concat_unify.fev3
(program $eor_concat_unify.fev3 ((U Type) ($eoT.fev1 Type) ($eoT.fev7 Type) ($eo_2 $eoT.fev1) ($eo_8 $eoT.fev7) (t1 U) (s1 U) (t U) (rev Bool))
  :signature (U U U Bool $eoT.fev1 $eoT.fev7 $eoT.fev7) $eoT.fev7
  (
  (($eor_concat_unify.fev3 t1 s1 t rev $eo_2 $eo_8 $eo_8) ($eor_concat_unify.fev4 t1 s1 t rev ($eor_concat_unify.fev5 t1 s1 t rev rev)))
  )
)
; program: $eor_concat_unify.fev1
(program $eor_concat_unify.fev1 ((U Type) ($eoT.fev1 Type) ($eoT.fev3 Type) (s U) (t1 U) (t U) (rev Bool) ($eo_2 $eoT.fev1) (s1 U))
  :signature (U U U Bool U $eoT.fev1) $eoT.fev3
  (
  (($eor_concat_unify.fev1 t1 s1 t rev s $eo_2) ($eor_concat_unify.fev3 t1 s1 t rev $eo_2 (eo::list_nth str.++ $eo_2 0) s1))
  )
)
; program: $eor_concat_unify
(program $eor_concat_unify (($eoT_14 Type) (U Type) (t1 U) (s1 U) (t U) (s U) (rev Bool))
  :signature (Bool Bool $eoT_14) Bool
  (
  (($eor_concat_unify rev (_ (= s) t) (_ (= (str.len s1)) (str.len t1))) ($eor_concat_unify.fev1 t1 s1 t rev s ($eor_concat_unify.fev2 t1 s1 t rev s rev)))
  )
)
; program: $eovc_concat_unify
(program $eovc_concat_unify ((U Type) (rev Bool) (s U) (t U) (s1 U) (t1 U))
  :signature (U U U U Bool) Bool
  (
  (($eovc_concat_unify t1 s1 t s rev) (eo::define ((_v0 (_ (= (str.len s1)) (str.len t1)))) (eo::define ((_v1 (_ (= s) t))) ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_concat_unify rev _v1 _v0) false false) true true))))))
  )
)
(echo "smt-meta $eovc_concat_unify")
; program: $eor_concat_csplit.fev2
(program $eor_concat_csplit.fev2 ((U Type) (rev Bool) (u (Seq U)) (s (Seq U)))
  :signature ((Seq U) Bool (Seq U) Bool) (Seq U)
  (
  (($eor_concat_csplit.fev2 s rev u true) (eo::list_rev str.++ ($str_nary_intro s)))
  (($eor_concat_csplit.fev2 s rev u false) ($str_nary_intro s))
  )
)
; program: $eor_concat_csplit.fev9
(program $eor_concat_csplit.fev9 ((U Type) (rev Bool) (u (Seq U)) (s (Seq U)))
  :signature ((Seq U) Bool (Seq U) Bool) (Seq U)
  (
  (($eor_concat_csplit.fev9 s rev u true) (eo::list_rev str.++ ($str_nary_intro s)))
  (($eor_concat_csplit.fev9 s rev u false) ($str_nary_intro s))
  )
)
; program: $eor_concat_csplit.fev10
(program $eor_concat_csplit.fev10 (($eoT.fev17 Type) (U Type) ($eoT.fev20 Type) ($eo_15 (Seq U)) ($eo_19 (Seq U)) (u (Seq U)) ($eo_18 $eoT.fev17))
  :signature ((Seq U) (Seq U) $eoT.fev17 (Seq U)) $eoT.fev20
  (
  (($eor_concat_csplit.fev10 $eo_15 u $eo_18 $eo_19) (_ (str.++ $eo_19) (_ (str.++ (@purify (_ (_ (str.substr u) 1) (_ (- (str.len u)) 1)))) $eo_18)))
  )
)
; program: $eor_concat_csplit.fev8
(program $eor_concat_csplit.fev8 ((U Type) ($eoT.fev16 Type) (s (Seq U)) (rev Bool) (u (Seq U)) ($eo_15 (Seq U)))
  :signature ((Seq U) Bool (Seq U) (Seq U)) $eoT.fev16
  (
  (($eor_concat_csplit.fev8 s rev u $eo_15) (eo::define ((_v0 (eo::list_nth str.++ $eo_15 0))) ($eor_concat_csplit.fev10 $eo_15 u (eo::nil str.++ (eo::typeof _v0)) _v0)))
  )
)
; program: $eor_concat_csplit.fev7
(program $eor_concat_csplit.fev7 ((U Type) (u (Seq U)) (rev Bool) (s (Seq U)))
  :signature ((Seq U) (Seq U) Bool Bool) (Seq U)
  (
  (($eor_concat_csplit.fev7 u s rev true) (eo::list_rev str.++ ($str_nary_intro s)))
  (($eor_concat_csplit.fev7 u s rev false) ($str_nary_intro s))
  )
)
; program: $eor_concat_csplit.fev11
(program $eor_concat_csplit.fev11 (($eoT.fev11 Type) (U Type) ($eoT.fev22 Type) ($eo_13 (Seq U)) (u (Seq U)) ($eo_21 (Seq U)) ($eo_12 $eoT.fev11))
  :signature ($eoT.fev11 (Seq U) (Seq U) (Seq U)) $eoT.fev22
  (
  (($eor_concat_csplit.fev11 $eo_12 $eo_13 u $eo_21) (_ (str.++ (@purify (_ (_ (str.substr u) 0) (_ (- (str.len u)) 1)))) (_ (str.++ $eo_21) $eo_12)))
  )
)
; program: $eor_concat_csplit.fev6
(program $eor_concat_csplit.fev6 (($eoT.fev11 Type) (U Type) ($eoT.fev14 Type) (s (Seq U)) (rev Bool) ($eo_12 $eoT.fev11) (u (Seq U)) ($eo_13 (Seq U)))
  :signature ((Seq U) (Seq U) Bool $eoT.fev11 (Seq U)) $eoT.fev14
  (
  (($eor_concat_csplit.fev6 u s rev $eo_12 $eo_13) ($eor_concat_csplit.fev11 $eo_12 $eo_13 u (eo::list_nth str.++ $eo_13 0)))
  )
)
; program: $eor_concat_csplit.fev5
(program $eor_concat_csplit.fev5 ((U Type) ($eoT.fev10 Type) (s (Seq U)) (u (Seq U)) (rev Bool))
  :signature ((Seq U) Bool (Seq U) Bool) $eoT.fev10
  (
  (($eor_concat_csplit.fev5 s rev u true) ($eor_concat_csplit.fev6 u s rev (eo::nil str.++ (eo::typeof (@purify (_ (_ (str.substr u) 0) (_ (- (str.len u)) 1))))) ($eor_concat_csplit.fev7 u s rev rev)))
  (($eor_concat_csplit.fev5 s rev u false) ($eor_concat_csplit.fev8 s rev u ($eor_concat_csplit.fev9 s rev u rev)))
  )
)
; program: $eor_concat_csplit.fev4
(program $eor_concat_csplit.fev4 ((U Type) ($eoT.fev7 Type) ($eoT.fev9 Type) (s (Seq U)) (rev Bool) (u (Seq U)) ($eo_8 $eoT.fev7))
  :signature ((Seq U) Bool (Seq U) $eoT.fev7) $eoT.fev9
  (
  (($eor_concat_csplit.fev4 s rev u $eo_8) (_ (= u) $eo_8))
  )
)
; program: $eor_concat_csplit.fev3
(program $eor_concat_csplit.fev3 ((U Type) ($eoT.fev5 Type) ($eo_1 (Seq U)) ($eo_6 $eoT.fev5) (s (Seq U)) (u (Seq U)) (rev Bool))
  :signature ((Seq U) Bool (Seq U) (Seq U) $eoT.fev5 $eoT.fev5) $eoT.fev5
  (
  (($eor_concat_csplit.fev3 s rev u $eo_1 $eo_6 $eo_6) ($eor_concat_csplit.fev4 s rev u ($eor_concat_csplit.fev5 s rev u rev)))
  )
)
; program: $eor_concat_csplit.fev1
(program $eor_concat_csplit.fev1 ((U Type) ($eoT.fev2 Type) (s (Seq U)) (rev Bool) (u (Seq U)) ($eo_1 (Seq U)))
  :signature ((Seq U) Bool (Seq U) (Seq U)) $eoT.fev2
  (
  (($eor_concat_csplit.fev1 s rev u $eo_1) ($eor_concat_csplit.fev3 s rev u $eo_1 (eo::is_eq (eo::len (eo::list_nth str.++ $eo_1 0)) 1) true))
  )
)
; program: $eor_concat_csplit
(program $eor_concat_csplit ((U Type) (t (Seq U)) (s (Seq U)) (u (Seq U)) (rev Bool))
  :signature (Bool Bool Bool) Bool
  (
  (($eor_concat_csplit rev (_ (= t) s) (not (_ (= (str.len u)) 0))) ($eor_concat_csplit.fev1 s rev u ($eor_concat_csplit.fev2 s rev u rev)))
  )
)
; program: $eovc_concat_csplit
(program $eovc_concat_csplit ((U Type) (rev Bool) (t (Seq U)) (s (Seq U)) (u (Seq U)))
  :signature ((Seq U) (Seq U) (Seq U) Bool) Bool
  (
  (($eovc_concat_csplit u s t rev) (eo::define ((_v0 (not (_ (= (str.len u)) 0)))) (eo::define ((_v1 (_ (= t) s))) ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_concat_csplit rev _v1 _v0) false false) true true))))))
  )
)
(echo "smt-meta $eovc_concat_csplit")
; program: $eor_concat_split.fev2
(program $eor_concat_split.fev2 ((U Type) (rev Bool) (s (Seq U)) (sc (Seq U)) (tc (Seq U)) (t (Seq U)))
  :signature (Bool (Seq U) (Seq U) (Seq U) (Seq U) Bool) (Seq U)
  (
  (($eor_concat_split.fev2 rev s t sc tc true) (eo::list_rev str.++ ($str_nary_intro t)))
  (($eor_concat_split.fev2 rev s t sc tc false) ($str_nary_intro t))
  )
)
; program: $eor_concat_split.fev5
(program $eor_concat_split.fev5 ((U Type) (rev Bool) (t (Seq U)) (sc (Seq U)) (s (Seq U)))
  :signature (Bool (Seq U) (Seq U) (Seq U) Bool) (Seq U)
  (
  (($eor_concat_split.fev5 rev s t sc true) (eo::list_rev str.++ ($str_nary_intro s)))
  (($eor_concat_split.fev5 rev s t sc false) ($str_nary_intro s))
  )
)
; program: $eor_concat_split.fev17
(program $eor_concat_split.fev17 ((U Type) (s (Seq U)) (rev Bool) (t (Seq U)))
  :signature ((Seq U) Bool (Seq U) Bool) (Seq U)
  (
  (($eor_concat_split.fev17 s rev t true) (eo::list_rev str.++ ($str_nary_intro t)))
  (($eor_concat_split.fev17 s rev t false) ($str_nary_intro t))
  )
)
; program: $eor_concat_split.fev16
(program $eor_concat_split.fev16 ((U Type) (rev Bool) (t (Seq U)) (s (Seq U)))
  :signature ((Seq U) Bool (Seq U) Bool) (Seq U)
  (
  (($eor_concat_split.fev16 s rev t true) (eo::list_rev str.++ ($str_nary_intro s)))
  (($eor_concat_split.fev16 s rev t false) ($str_nary_intro s))
  )
)
; program: $eor_concat_split.fev18
(program $eor_concat_split.fev18 (($eoT.fev28 Type) (U Type) ($eoT.fev32 Type) ($eo_25 (Seq U)) (rev Bool) ($eo_26 (Seq U)) ($eo_31 (Seq U)) ($eo_30 (Seq U)) ($eo_29 $eoT.fev28))
  :signature ((Seq U) Bool (Seq U) $eoT.fev28 (Seq U) (Seq U)) $eoT.fev32
  (
  (($eor_concat_split.fev18 $eo_25 rev $eo_26 $eo_29 $eo_30 $eo_31) (_ (str.++ $eo_31) (_ (str.++ (@purify $eo_30)) $eo_29)))
  )
)
; program: $eor_concat_split.fev15
(program $eor_concat_split.fev15 ((U Type) ($eoT.fev27 Type) (s (Seq U)) (t (Seq U)) ($eo_26 (Seq U)) (rev Bool) ($eo_25 (Seq U)))
  :signature ((Seq U) Bool (Seq U) (Seq U) (Seq U)) $eoT.fev27
  (
  (($eor_concat_split.fev15 s rev t $eo_25 $eo_26) (eo::define ((_v0 (eo::list_nth str.++ $eo_25 0))) ($eor_concat_split.fev18 $eo_25 rev $eo_26 (eo::nil str.++ (eo::typeof _v0)) ($str_unify_split (eo::list_nth str.++ $eo_26 0) _v0 rev) _v0)))
  )
)
; program: $eor_concat_split.fev14
(program $eor_concat_split.fev14 ((U Type) (rev Bool) (s (Seq U)) (t (Seq U)))
  :signature (Bool (Seq U) (Seq U) Bool) (Seq U)
  (
  (($eor_concat_split.fev14 rev s t true) (eo::list_rev str.++ ($str_nary_intro t)))
  (($eor_concat_split.fev14 rev s t false) ($str_nary_intro t))
  )
)
; program: $eor_concat_split.fev13
(program $eor_concat_split.fev13 ((U Type) (rev Bool) (t (Seq U)) (s (Seq U)))
  :signature (Bool (Seq U) (Seq U) Bool) (Seq U)
  (
  (($eor_concat_split.fev13 rev s t true) (eo::list_rev str.++ ($str_nary_intro s)))
  (($eor_concat_split.fev13 rev s t false) ($str_nary_intro s))
  )
)
; program: $eor_concat_split.fev20
(program $eor_concat_split.fev20 ((U Type) ($eoT.fev36 Type) ($eoT.fev38 Type) ($eo_33 (Seq U)) ($eo_34 (Seq U)) ($eo_37 $eoT.fev36))
  :signature ((Seq U) (Seq U) $eoT.fev36) $eoT.fev38
  (
  (($eor_concat_split.fev20 $eo_33 $eo_34 $eo_37) (_ (str.++ (@purify $eo_33)) (_ (str.++ $eo_34) $eo_37)))
  )
)
; program: $eor_concat_split.fev19
(program $eor_concat_split.fev19 ((U Type) ($eoT.fev35 Type) (rev Bool) ($eo_22 (Seq U)) ($eo_23 (Seq U)) ($eo_34 (Seq U)) ($eo_33 (Seq U)))
  :signature (Bool (Seq U) (Seq U) (Seq U) (Seq U)) $eoT.fev35
  (
  (($eor_concat_split.fev19 rev $eo_22 $eo_23 $eo_33 $eo_34) ($eor_concat_split.fev20 $eo_33 $eo_34 (eo::nil str.++ (eo::typeof (@purify $eo_33)))))
  )
)
; program: $eor_concat_split.fev12
(program $eor_concat_split.fev12 ((U Type) ($eoT.fev24 Type) (s (Seq U)) (t (Seq U)) ($eo_23 (Seq U)) (rev Bool) ($eo_22 (Seq U)))
  :signature (Bool (Seq U) (Seq U) (Seq U) (Seq U)) $eoT.fev24
  (
  (($eor_concat_split.fev12 rev s t $eo_22 $eo_23) (eo::define ((_v0 (eo::list_nth str.++ $eo_22 0))) ($eor_concat_split.fev19 rev $eo_22 $eo_23 ($str_unify_split (eo::list_nth str.++ $eo_23 0) _v0 rev) _v0)))
  )
)
; program: $eor_concat_split.fev11
(program $eor_concat_split.fev11 ((U Type) ($eoT.fev21 Type) (s (Seq U)) (t (Seq U)) (rev Bool))
  :signature (Bool (Seq U) (Seq U) Bool) $eoT.fev21
  (
  (($eor_concat_split.fev11 rev s t true) ($eor_concat_split.fev12 rev s t ($eor_concat_split.fev13 rev s t rev) ($eor_concat_split.fev14 rev s t rev)))
  (($eor_concat_split.fev11 rev s t false) ($eor_concat_split.fev15 s rev t ($eor_concat_split.fev16 s rev t rev) ($eor_concat_split.fev17 s rev t rev)))
  )
)
; program: $eor_concat_split.fev26
(program $eor_concat_split.fev26 ((U Type) (t (Seq U)) (rev Bool) (s (Seq U)))
  :signature ((Seq U) Bool (Seq U) Bool) (Seq U)
  (
  (($eor_concat_split.fev26 t rev s true) (eo::list_rev str.++ ($str_nary_intro s)))
  (($eor_concat_split.fev26 t rev s false) ($str_nary_intro s))
  )
)
; program: $eor_concat_split.fev25
(program $eor_concat_split.fev25 ((U Type) (rev Bool) (s (Seq U)) (t (Seq U)))
  :signature ((Seq U) Bool (Seq U) Bool) (Seq U)
  (
  (($eor_concat_split.fev25 t rev s true) (eo::list_rev str.++ ($str_nary_intro t)))
  (($eor_concat_split.fev25 t rev s false) ($str_nary_intro t))
  )
)
; program: $eor_concat_split.fev27
(program $eor_concat_split.fev27 (($eoT.fev45 Type) (U Type) ($eoT.fev49 Type) ($eo_42 (Seq U)) (rev Bool) ($eo_43 (Seq U)) ($eo_48 (Seq U)) ($eo_47 (Seq U)) ($eo_46 $eoT.fev45))
  :signature ((Seq U) Bool (Seq U) $eoT.fev45 (Seq U) (Seq U)) $eoT.fev49
  (
  (($eor_concat_split.fev27 $eo_42 rev $eo_43 $eo_46 $eo_47 $eo_48) (_ (str.++ $eo_48) (_ (str.++ (@purify $eo_47)) $eo_46)))
  )
)
; program: $eor_concat_split.fev24
(program $eor_concat_split.fev24 ((U Type) ($eoT.fev44 Type) (t (Seq U)) (s (Seq U)) ($eo_43 (Seq U)) (rev Bool) ($eo_42 (Seq U)))
  :signature ((Seq U) Bool (Seq U) (Seq U) (Seq U)) $eoT.fev44
  (
  (($eor_concat_split.fev24 t rev s $eo_42 $eo_43) (eo::define ((_v0 (eo::list_nth str.++ $eo_42 0))) ($eor_concat_split.fev27 $eo_42 rev $eo_43 (eo::nil str.++ (eo::typeof _v0)) ($str_unify_split _v0 (eo::list_nth str.++ $eo_43 0) rev) _v0)))
  )
)
; program: $eor_concat_split.fev23
(program $eor_concat_split.fev23 ((U Type) (rev Bool) (s (Seq U)) (t (Seq U)))
  :signature (Bool (Seq U) (Seq U) Bool) (Seq U)
  (
  (($eor_concat_split.fev23 rev s t true) (eo::list_rev str.++ ($str_nary_intro t)))
  (($eor_concat_split.fev23 rev s t false) ($str_nary_intro t))
  )
)
; program: $eor_concat_split.fev22
(program $eor_concat_split.fev22 ((U Type) (rev Bool) (t (Seq U)) (s (Seq U)))
  :signature (Bool (Seq U) (Seq U) Bool) (Seq U)
  (
  (($eor_concat_split.fev22 rev s t true) (eo::list_rev str.++ ($str_nary_intro s)))
  (($eor_concat_split.fev22 rev s t false) ($str_nary_intro s))
  )
)
; program: $eor_concat_split.fev29
(program $eor_concat_split.fev29 ((U Type) ($eoT.fev53 Type) ($eoT.fev55 Type) ($eo_50 (Seq U)) ($eo_51 (Seq U)) ($eo_54 $eoT.fev53))
  :signature ((Seq U) (Seq U) $eoT.fev53) $eoT.fev55
  (
  (($eor_concat_split.fev29 $eo_50 $eo_51 $eo_54) (_ (str.++ (@purify $eo_50)) (_ (str.++ $eo_51) $eo_54)))
  )
)
; program: $eor_concat_split.fev28
(program $eor_concat_split.fev28 ((U Type) ($eoT.fev52 Type) (rev Bool) ($eo_39 (Seq U)) ($eo_40 (Seq U)) ($eo_51 (Seq U)) ($eo_50 (Seq U)))
  :signature (Bool (Seq U) (Seq U) (Seq U) (Seq U)) $eoT.fev52
  (
  (($eor_concat_split.fev28 rev $eo_39 $eo_40 $eo_50 $eo_51) ($eor_concat_split.fev29 $eo_50 $eo_51 (eo::nil str.++ (eo::typeof (@purify $eo_50)))))
  )
)
; program: $eor_concat_split.fev21
(program $eor_concat_split.fev21 ((U Type) ($eoT.fev41 Type) (s (Seq U)) (t (Seq U)) ($eo_39 (Seq U)) (rev Bool) ($eo_40 (Seq U)))
  :signature (Bool (Seq U) (Seq U) (Seq U) (Seq U)) $eoT.fev41
  (
  (($eor_concat_split.fev21 rev s t $eo_39 $eo_40) (eo::define ((_v0 (eo::list_nth str.++ $eo_40 0))) ($eor_concat_split.fev28 rev $eo_39 $eo_40 ($str_unify_split _v0 (eo::list_nth str.++ $eo_39 0) rev) _v0)))
  )
)
; program: $eor_concat_split.fev10
(program $eor_concat_split.fev10 ((U Type) ($eoT.fev20 Type) (t (Seq U)) (s (Seq U)) (rev Bool))
  :signature (Bool (Seq U) (Seq U) Bool) $eoT.fev20
  (
  (($eor_concat_split.fev10 rev s t true) ($eor_concat_split.fev21 rev s t ($eor_concat_split.fev22 rev s t rev) ($eor_concat_split.fev23 rev s t rev)))
  (($eor_concat_split.fev10 rev s t false) ($eor_concat_split.fev24 t rev s ($eor_concat_split.fev25 t rev s rev) ($eor_concat_split.fev26 t rev s rev)))
  )
)
; program: $eor_concat_split.fev9
(program $eor_concat_split.fev9 ((U Type) (rev Bool) (s (Seq U)) (t (Seq U)))
  :signature (Bool (Seq U) (Seq U) Bool) (Seq U)
  (
  (($eor_concat_split.fev9 rev s t true) (eo::list_rev str.++ ($str_nary_intro t)))
  (($eor_concat_split.fev9 rev s t false) ($str_nary_intro t))
  )
)
; program: $eor_concat_split.fev8
(program $eor_concat_split.fev8 ((U Type) (rev Bool) (t (Seq U)) (s (Seq U)))
  :signature (Bool (Seq U) (Seq U) Bool) (Seq U)
  (
  (($eor_concat_split.fev8 rev s t true) (eo::list_rev str.++ ($str_nary_intro s)))
  (($eor_concat_split.fev8 rev s t false) ($str_nary_intro s))
  )
)
; program: $eor_concat_split.fev31
(program $eor_concat_split.fev31 (($eoT.fev15 Type) ($eoT.fev17 Type) (U Type) ($eoT.fev60 Type) ($eoT.fev62 Type) ($eo_58 (Seq U)) ($eo_18 $eoT.fev17) ($eo_57 (Seq U)) ($eo_16 $eoT.fev15) ($eo_61 $eoT.fev60) ($eo_56 (Seq U)))
  :signature ((Seq U) $eoT.fev15 (Seq U) $eoT.fev17 (Seq U) $eoT.fev60) $eoT.fev62
  (
  (($eor_concat_split.fev31 $eo_56 $eo_16 $eo_57 $eo_18 $eo_58 $eo_61) (eo::define ((_v0 (@purify $eo_56))) (_ (and (_ (or (_ (= $eo_58) $eo_18)) (_ (or (_ (= $eo_57) $eo_16)) false))) (_ (and (not (_ (= _v0) $eo_61))) (_ (and (_ (> (str.len _v0)) 0)) true)))))
  )
)
; program: $eor_concat_split.fev30
(program $eor_concat_split.fev30 (($eoT.fev15 Type) ($eoT.fev17 Type) (U Type) ($eoT.fev59 Type) (rev Bool) ($eo_13 (Seq U)) ($eo_14 (Seq U)) ($eo_16 $eoT.fev15) ($eo_57 (Seq U)) ($eo_18 $eoT.fev17) ($eo_58 (Seq U)) ($eo_56 (Seq U)))
  :signature (Bool (Seq U) (Seq U) $eoT.fev15 $eoT.fev17 (Seq U) (Seq U) (Seq U)) $eoT.fev59
  (
  (($eor_concat_split.fev30 rev $eo_13 $eo_14 $eo_16 $eo_18 $eo_56 $eo_57 $eo_58) ($eor_concat_split.fev31 $eo_56 $eo_16 $eo_57 $eo_18 $eo_58 ($seq_empty (eo::typeof (@purify $eo_56)))))
  )
)
; program: $eor_concat_split.fev7
(program $eor_concat_split.fev7 ((U Type) ($eoT.fev15 Type) ($eoT.fev17 Type) ($eoT.fev19 Type) (s (Seq U)) (t (Seq U)) ($eo_16 $eoT.fev15) ($eo_18 $eoT.fev17) (rev Bool) ($eo_13 (Seq U)) ($eo_14 (Seq U)))
  :signature (Bool (Seq U) (Seq U) (Seq U) (Seq U) $eoT.fev15 $eoT.fev17) $eoT.fev19
  (
  (($eor_concat_split.fev7 rev s t $eo_13 $eo_14 $eo_16 $eo_18) (eo::define ((_v0 (eo::list_nth str.++ $eo_14 0))) (eo::define ((_v1 (eo::list_nth str.++ $eo_13 0))) ($eor_concat_split.fev30 rev $eo_13 $eo_14 $eo_16 $eo_18 ($str_unify_split _v0 _v1 rev) _v1 _v0))))
  )
)
; program: $eor_concat_split.fev6
(program $eor_concat_split.fev6 ((U Type) ($eoT.fev11 Type) (sc (Seq U)) ($eo_7 (Seq U)) ($eo_12 $eoT.fev11) (s (Seq U)) (t (Seq U)) (rev Bool))
  :signature (Bool (Seq U) (Seq U) (Seq U) (Seq U) $eoT.fev11 $eoT.fev11) $eoT.fev11
  (
  (($eor_concat_split.fev6 rev s t sc $eo_7 $eo_12 $eo_12) ($eor_concat_split.fev7 rev s t ($eor_concat_split.fev8 rev s t rev) ($eor_concat_split.fev9 rev s t rev) ($eor_concat_split.fev10 rev s t rev) ($eor_concat_split.fev11 rev s t rev)))
  )
)
; program: $eor_concat_split.fev4
(program $eor_concat_split.fev4 ((U Type) ($eoT.fev8 Type) (rev Bool) (s (Seq U)) (t (Seq U)) ($eo_7 (Seq U)) (sc (Seq U)))
  :signature (Bool (Seq U) (Seq U) (Seq U) (Seq U)) $eoT.fev8
  (
  (($eor_concat_split.fev4 rev s t sc $eo_7) ($eor_concat_split.fev6 rev s t sc $eo_7 (eo::list_nth str.++ $eo_7 0) sc))
  )
)
; program: $eor_concat_split.fev3
(program $eor_concat_split.fev3 ((U Type) ($eoT.fev5 Type) (tc (Seq U)) ($eo_1 (Seq U)) ($eo_6 $eoT.fev5) (s (Seq U)) (t (Seq U)) (sc (Seq U)) (rev Bool))
  :signature (Bool (Seq U) (Seq U) (Seq U) (Seq U) (Seq U) $eoT.fev5 $eoT.fev5) $eoT.fev5
  (
  (($eor_concat_split.fev3 rev s t sc tc $eo_1 $eo_6 $eo_6) ($eor_concat_split.fev4 rev s t sc ($eor_concat_split.fev5 rev s t sc rev)))
  )
)
; program: $eor_concat_split.fev1
(program $eor_concat_split.fev1 ((U Type) ($eoT.fev2 Type) (rev Bool) (s (Seq U)) (t (Seq U)) (sc (Seq U)) ($eo_1 (Seq U)) (tc (Seq U)))
  :signature (Bool (Seq U) (Seq U) (Seq U) (Seq U) (Seq U)) $eoT.fev2
  (
  (($eor_concat_split.fev1 rev s t sc tc $eo_1) ($eor_concat_split.fev3 rev s t sc tc $eo_1 (eo::list_nth str.++ $eo_1 0) tc))
  )
)
; program: $eor_concat_split
(program $eor_concat_split ((U Type) (s (Seq U)) (t (Seq U)) (sc (Seq U)) (tc (Seq U)) (rev Bool))
  :signature (Bool Bool Bool) Bool
  (
  (($eor_concat_split rev (_ (= t) s) (not (_ (= (str.len tc)) (str.len sc)))) ($eor_concat_split.fev1 rev s t sc tc ($eor_concat_split.fev2 rev s t sc tc rev)))
  )
)
; program: $eovc_concat_split
(program $eovc_concat_split ((U Type) (rev Bool) (t (Seq U)) (s (Seq U)) (tc (Seq U)) (sc (Seq U)))
  :signature ((Seq U) (Seq U) (Seq U) (Seq U) Bool) Bool
  (
  (($eovc_concat_split sc tc s t rev) (eo::define ((_v0 (not (_ (= (str.len tc)) (str.len sc))))) (eo::define ((_v1 (_ (= t) s))) ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_concat_split rev _v1 _v0) false false) true true))))))
  )
)
(echo "smt-meta $eovc_concat_split")
; program: $eor_concat_lprop.fev2
(program $eor_concat_lprop.fev2 ((U Type) (rev Bool) (s (Seq U)) (sc (Seq U)) (tc (Seq U)) (t (Seq U)))
  :signature (Bool (Seq U) (Seq U) (Seq U) (Seq U) Bool) (Seq U)
  (
  (($eor_concat_lprop.fev2 rev s t sc tc true) (eo::list_rev str.++ ($str_nary_intro t)))
  (($eor_concat_lprop.fev2 rev s t sc tc false) ($str_nary_intro t))
  )
)
; program: $eor_concat_lprop.fev5
(program $eor_concat_lprop.fev5 ((U Type) (rev Bool) (t (Seq U)) (sc (Seq U)) (s (Seq U)))
  :signature (Bool (Seq U) (Seq U) (Seq U) Bool) (Seq U)
  (
  (($eor_concat_lprop.fev5 rev s t sc true) (eo::list_rev str.++ ($str_nary_intro s)))
  (($eor_concat_lprop.fev5 rev s t sc false) ($str_nary_intro s))
  )
)
; program: $eor_concat_lprop.fev16
(program $eor_concat_lprop.fev16 ((U Type) (s (Seq U)) (rev Bool) (t (Seq U)))
  :signature ((Seq U) Bool (Seq U) Bool) (Seq U)
  (
  (($eor_concat_lprop.fev16 s rev t true) (eo::list_rev str.++ ($str_nary_intro t)))
  (($eor_concat_lprop.fev16 s rev t false) ($str_nary_intro t))
  )
)
; program: $eor_concat_lprop.fev15
(program $eor_concat_lprop.fev15 ((U Type) (rev Bool) (t (Seq U)) (s (Seq U)))
  :signature ((Seq U) Bool (Seq U) Bool) (Seq U)
  (
  (($eor_concat_lprop.fev15 s rev t true) (eo::list_rev str.++ ($str_nary_intro s)))
  (($eor_concat_lprop.fev15 s rev t false) ($str_nary_intro s))
  )
)
; program: $eor_concat_lprop.fev17
(program $eor_concat_lprop.fev17 (($eoT.fev25 Type) (U Type) ($eoT.fev29 Type) ($eo_22 (Seq U)) (rev Bool) ($eo_23 (Seq U)) ($eo_28 (Seq U)) ($eo_27 (Seq U)) ($eo_26 $eoT.fev25))
  :signature ((Seq U) Bool (Seq U) $eoT.fev25 (Seq U) (Seq U)) $eoT.fev29
  (
  (($eor_concat_lprop.fev17 $eo_22 rev $eo_23 $eo_26 $eo_27 $eo_28) (_ (str.++ $eo_28) (_ (str.++ (@purify $eo_27)) $eo_26)))
  )
)
; program: $eor_concat_lprop.fev14
(program $eor_concat_lprop.fev14 ((U Type) ($eoT.fev24 Type) (s (Seq U)) (t (Seq U)) ($eo_23 (Seq U)) (rev Bool) ($eo_22 (Seq U)))
  :signature ((Seq U) Bool (Seq U) (Seq U) (Seq U)) $eoT.fev24
  (
  (($eor_concat_lprop.fev14 s rev t $eo_22 $eo_23) (eo::define ((_v0 (eo::list_nth str.++ $eo_22 0))) ($eor_concat_lprop.fev17 $eo_22 rev $eo_23 (eo::nil str.++ (eo::typeof _v0)) ($str_unify_split (eo::list_nth str.++ $eo_23 0) _v0 rev) _v0)))
  )
)
; program: $eor_concat_lprop.fev13
(program $eor_concat_lprop.fev13 ((U Type) (rev Bool) (s (Seq U)) (t (Seq U)))
  :signature (Bool (Seq U) (Seq U) Bool) (Seq U)
  (
  (($eor_concat_lprop.fev13 rev s t true) (eo::list_rev str.++ ($str_nary_intro t)))
  (($eor_concat_lprop.fev13 rev s t false) ($str_nary_intro t))
  )
)
; program: $eor_concat_lprop.fev12
(program $eor_concat_lprop.fev12 ((U Type) (rev Bool) (t (Seq U)) (s (Seq U)))
  :signature (Bool (Seq U) (Seq U) Bool) (Seq U)
  (
  (($eor_concat_lprop.fev12 rev s t true) (eo::list_rev str.++ ($str_nary_intro s)))
  (($eor_concat_lprop.fev12 rev s t false) ($str_nary_intro s))
  )
)
; program: $eor_concat_lprop.fev19
(program $eor_concat_lprop.fev19 ((U Type) ($eoT.fev33 Type) ($eoT.fev35 Type) ($eo_30 (Seq U)) ($eo_31 (Seq U)) ($eo_34 $eoT.fev33))
  :signature ((Seq U) (Seq U) $eoT.fev33) $eoT.fev35
  (
  (($eor_concat_lprop.fev19 $eo_30 $eo_31 $eo_34) (_ (str.++ (@purify $eo_30)) (_ (str.++ $eo_31) $eo_34)))
  )
)
; program: $eor_concat_lprop.fev18
(program $eor_concat_lprop.fev18 ((U Type) ($eoT.fev32 Type) (rev Bool) ($eo_19 (Seq U)) ($eo_20 (Seq U)) ($eo_31 (Seq U)) ($eo_30 (Seq U)))
  :signature (Bool (Seq U) (Seq U) (Seq U) (Seq U)) $eoT.fev32
  (
  (($eor_concat_lprop.fev18 rev $eo_19 $eo_20 $eo_30 $eo_31) ($eor_concat_lprop.fev19 $eo_30 $eo_31 (eo::nil str.++ (eo::typeof (@purify $eo_30)))))
  )
)
; program: $eor_concat_lprop.fev11
(program $eor_concat_lprop.fev11 ((U Type) ($eoT.fev21 Type) (s (Seq U)) (t (Seq U)) ($eo_20 (Seq U)) (rev Bool) ($eo_19 (Seq U)))
  :signature (Bool (Seq U) (Seq U) (Seq U) (Seq U)) $eoT.fev21
  (
  (($eor_concat_lprop.fev11 rev s t $eo_19 $eo_20) (eo::define ((_v0 (eo::list_nth str.++ $eo_19 0))) ($eor_concat_lprop.fev18 rev $eo_19 $eo_20 ($str_unify_split (eo::list_nth str.++ $eo_20 0) _v0 rev) _v0)))
  )
)
; program: $eor_concat_lprop.fev10
(program $eor_concat_lprop.fev10 ((U Type) ($eoT.fev18 Type) (s (Seq U)) (t (Seq U)) (rev Bool))
  :signature (Bool (Seq U) (Seq U) Bool) $eoT.fev18
  (
  (($eor_concat_lprop.fev10 rev s t true) ($eor_concat_lprop.fev11 rev s t ($eor_concat_lprop.fev12 rev s t rev) ($eor_concat_lprop.fev13 rev s t rev)))
  (($eor_concat_lprop.fev10 rev s t false) ($eor_concat_lprop.fev14 s rev t ($eor_concat_lprop.fev15 s rev t rev) ($eor_concat_lprop.fev16 s rev t rev)))
  )
)
; program: $eor_concat_lprop.fev9
(program $eor_concat_lprop.fev9 ((U Type) (rev Bool) (s (Seq U)) (t (Seq U)))
  :signature (Bool (Seq U) (Seq U) Bool) (Seq U)
  (
  (($eor_concat_lprop.fev9 rev s t true) (eo::list_rev str.++ ($str_nary_intro t)))
  (($eor_concat_lprop.fev9 rev s t false) ($str_nary_intro t))
  )
)
; program: $eor_concat_lprop.fev8
(program $eor_concat_lprop.fev8 ((U Type) (rev Bool) (t (Seq U)) (s (Seq U)))
  :signature (Bool (Seq U) (Seq U) Bool) (Seq U)
  (
  (($eor_concat_lprop.fev8 rev s t true) (eo::list_rev str.++ ($str_nary_intro s)))
  (($eor_concat_lprop.fev8 rev s t false) ($str_nary_intro s))
  )
)
; program: $eor_concat_lprop.fev21
(program $eor_concat_lprop.fev21 (($eoT.fev15 Type) (U Type) ($eoT.fev39 Type) ($eoT.fev41 Type) ($eo_37 (Seq U)) ($eo_16 $eoT.fev15) ($eo_40 $eoT.fev39) ($eo_36 (Seq U)))
  :signature ((Seq U) $eoT.fev15 (Seq U) $eoT.fev39) $eoT.fev41
  (
  (($eor_concat_lprop.fev21 $eo_36 $eo_16 $eo_37 $eo_40) (eo::define ((_v0 (@purify $eo_36))) (_ (and (_ (= $eo_37) $eo_16)) (_ (and (not (_ (= _v0) $eo_40))) (_ (and (_ (> (str.len _v0)) 0)) true)))))
  )
)
; program: $eor_concat_lprop.fev20
(program $eor_concat_lprop.fev20 (($eoT.fev15 Type) (U Type) ($eoT.fev38 Type) (rev Bool) ($eo_13 (Seq U)) ($eo_14 (Seq U)) ($eo_16 $eoT.fev15) ($eo_37 (Seq U)) ($eo_36 (Seq U)))
  :signature (Bool (Seq U) (Seq U) $eoT.fev15 (Seq U) (Seq U)) $eoT.fev38
  (
  (($eor_concat_lprop.fev20 rev $eo_13 $eo_14 $eo_16 $eo_36 $eo_37) ($eor_concat_lprop.fev21 $eo_36 $eo_16 $eo_37 ($seq_empty (eo::typeof (@purify $eo_36)))))
  )
)
; program: $eor_concat_lprop.fev7
(program $eor_concat_lprop.fev7 ((U Type) ($eoT.fev15 Type) ($eoT.fev17 Type) (s (Seq U)) (t (Seq U)) ($eo_16 $eoT.fev15) ($eo_13 (Seq U)) (rev Bool) ($eo_14 (Seq U)))
  :signature (Bool (Seq U) (Seq U) (Seq U) (Seq U) $eoT.fev15) $eoT.fev17
  (
  (($eor_concat_lprop.fev7 rev s t $eo_13 $eo_14 $eo_16) (eo::define ((_v0 (eo::list_nth str.++ $eo_14 0))) ($eor_concat_lprop.fev20 rev $eo_13 $eo_14 $eo_16 ($str_unify_split _v0 (eo::list_nth str.++ $eo_13 0) rev) _v0)))
  )
)
; program: $eor_concat_lprop.fev6
(program $eor_concat_lprop.fev6 ((U Type) ($eoT.fev11 Type) (sc (Seq U)) ($eo_7 (Seq U)) ($eo_12 $eoT.fev11) (s (Seq U)) (t (Seq U)) (rev Bool))
  :signature (Bool (Seq U) (Seq U) (Seq U) (Seq U) $eoT.fev11 $eoT.fev11) $eoT.fev11
  (
  (($eor_concat_lprop.fev6 rev s t sc $eo_7 $eo_12 $eo_12) ($eor_concat_lprop.fev7 rev s t ($eor_concat_lprop.fev8 rev s t rev) ($eor_concat_lprop.fev9 rev s t rev) ($eor_concat_lprop.fev10 rev s t rev)))
  )
)
; program: $eor_concat_lprop.fev4
(program $eor_concat_lprop.fev4 ((U Type) ($eoT.fev8 Type) (rev Bool) (s (Seq U)) (t (Seq U)) ($eo_7 (Seq U)) (sc (Seq U)))
  :signature (Bool (Seq U) (Seq U) (Seq U) (Seq U)) $eoT.fev8
  (
  (($eor_concat_lprop.fev4 rev s t sc $eo_7) ($eor_concat_lprop.fev6 rev s t sc $eo_7 (eo::list_nth str.++ $eo_7 0) sc))
  )
)
; program: $eor_concat_lprop.fev3
(program $eor_concat_lprop.fev3 ((U Type) ($eoT.fev5 Type) (tc (Seq U)) ($eo_1 (Seq U)) ($eo_6 $eoT.fev5) (s (Seq U)) (t (Seq U)) (sc (Seq U)) (rev Bool))
  :signature (Bool (Seq U) (Seq U) (Seq U) (Seq U) (Seq U) $eoT.fev5 $eoT.fev5) $eoT.fev5
  (
  (($eor_concat_lprop.fev3 rev s t sc tc $eo_1 $eo_6 $eo_6) ($eor_concat_lprop.fev4 rev s t sc ($eor_concat_lprop.fev5 rev s t sc rev)))
  )
)
; program: $eor_concat_lprop.fev1
(program $eor_concat_lprop.fev1 ((U Type) ($eoT.fev2 Type) (rev Bool) (s (Seq U)) (t (Seq U)) (sc (Seq U)) ($eo_1 (Seq U)) (tc (Seq U)))
  :signature (Bool (Seq U) (Seq U) (Seq U) (Seq U) (Seq U)) $eoT.fev2
  (
  (($eor_concat_lprop.fev1 rev s t sc tc $eo_1) ($eor_concat_lprop.fev3 rev s t sc tc $eo_1 (eo::list_nth str.++ $eo_1 0) tc))
  )
)
; program: $eor_concat_lprop
(program $eor_concat_lprop ((U Type) (s (Seq U)) (t (Seq U)) (sc (Seq U)) (tc (Seq U)) (rev Bool))
  :signature (Bool Bool Bool) Bool
  (
  (($eor_concat_lprop rev (_ (= t) s) (_ (> (str.len tc)) (str.len sc))) ($eor_concat_lprop.fev1 rev s t sc tc ($eor_concat_lprop.fev2 rev s t sc tc rev)))
  )
)
; program: $eovc_concat_lprop
(program $eovc_concat_lprop ((U Type) (rev Bool) (t (Seq U)) (s (Seq U)) (tc (Seq U)) (sc (Seq U)))
  :signature ((Seq U) (Seq U) (Seq U) (Seq U) Bool) Bool
  (
  (($eovc_concat_lprop sc tc s t rev) (eo::define ((_v0 (_ (> (str.len tc)) (str.len sc)))) (eo::define ((_v1 (_ (= t) s))) ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_concat_lprop rev _v1 _v0) false false) true true))))))
  )
)
(echo "smt-meta $eovc_concat_lprop")
; program: $eor_concat_cprop.fev2
(program $eor_concat_cprop.fev2 ((U Type) (rev Bool) (s (Seq U)) (tc (Seq U)) (t (Seq U)))
  :signature ((Seq U) Bool (Seq U) (Seq U) Bool) (Seq U)
  (
  (($eor_concat_cprop.fev2 t rev s tc true) (eo::list_rev str.++ ($str_nary_intro t)))
  (($eor_concat_cprop.fev2 t rev s tc false) ($str_nary_intro t))
  )
)
; program: $eor_concat_cprop.fev13
(program $eor_concat_cprop.fev13 ((U Type) (t (Seq U)) (rev Bool) (tc (Seq U)) (s (Seq U)))
  :signature ((Seq U) Bool (Seq U) (Seq U) Bool) (Seq U)
  (
  (($eor_concat_cprop.fev13 t rev s tc true) (eo::list_rev str.++ ($str_nary_intro s)))
  (($eor_concat_cprop.fev13 t rev s tc false) ($str_nary_intro s))
  )
)
; program: $eor_concat_cprop.fev21
(program $eor_concat_cprop.fev21 ((U Type) (rev Bool) (s (Seq U)))
  :signature ((Seq U) Bool Bool) (Seq U)
  (
  (($eor_concat_cprop.fev21 s rev true) (eo::list_rev str.++ ($str_nary_intro s)))
  (($eor_concat_cprop.fev21 s rev false) ($str_nary_intro s))
  )
)
; program: $eor_concat_cprop.fev20
(program $eor_concat_cprop.fev20 ((U Type) (s (Seq U)) (rev Bool) ($eo_22 (Seq U)))
  :signature ((Seq U) Bool (Seq U)) (Seq U)
  (
  (($eor_concat_cprop.fev20 s rev $eo_22) (eo::define ((_v0 (eo::list_nth str.++ $eo_22 0))) (eo::extract _v0 1 (eo::len _v0))))
  )
)
; program: $eor_concat_cprop.fev19
(program $eor_concat_cprop.fev19 ((U Type) (rev Bool) (s (Seq U)))
  :signature ((Seq U) Bool Bool) (Seq U)
  (
  (($eor_concat_cprop.fev19 s rev true) (eo::list_rev str.++ ($str_nary_intro s)))
  (($eor_concat_cprop.fev19 s rev false) ($str_nary_intro s))
  )
)
; program: $eor_concat_cprop.fev18
(program $eor_concat_cprop.fev18 ((U Type) (s (Seq U)) (rev Bool) ($eo_21 (Seq U)))
  :signature ((Seq U) Bool (Seq U)) (Seq U)
  (
  (($eor_concat_cprop.fev18 s rev $eo_21) (eo::define ((_v0 (eo::list_nth str.++ $eo_21 0))) (eo::extract _v0 0 (eo::add (eo::len _v0) -2))))
  )
)
; program: $eor_concat_cprop.fev17
(program $eor_concat_cprop.fev17 ((U Type) (s (Seq U)) (rev Bool))
  :signature ((Seq U) Bool Bool) (Seq U)
  (
  (($eor_concat_cprop.fev17 s rev true) ($eor_concat_cprop.fev18 s rev ($eor_concat_cprop.fev19 s rev rev)))
  (($eor_concat_cprop.fev17 s rev false) ($eor_concat_cprop.fev20 s rev ($eor_concat_cprop.fev21 s rev rev)))
  )
)
; program: $eor_concat_cprop.fev16
(program $eor_concat_cprop.fev16 ((U Type) (s (Seq U)) (rev Bool) ($eo_20 (Seq U)))
  :signature ((Seq U) Bool (Seq U)) (Seq U)
  (
  (($eor_concat_cprop.fev16 s rev $eo_20) ($str_flatten ($str_nary_intro $eo_20)))
  )
)
; program: $eor_concat_cprop.fev25
(program $eor_concat_cprop.fev25 ((U Type) (rev Bool) (s (Seq U)))
  :signature ((Seq U) Bool Bool) (Seq U)
  (
  (($eor_concat_cprop.fev25 s rev true) (eo::list_rev str.++ ($str_nary_intro s)))
  (($eor_concat_cprop.fev25 s rev false) ($str_nary_intro s))
  )
)
; program: $eor_concat_cprop.fev24
(program $eor_concat_cprop.fev24 ((U Type) (s (Seq U)) (rev Bool) ($eo_24 (Seq U)))
  :signature ((Seq U) Bool (Seq U)) (Seq U)
  (
  (($eor_concat_cprop.fev24 s rev $eo_24) (eo::define ((_v0 (eo::list_nth str.++ $eo_24 0))) (eo::extract _v0 1 (eo::len _v0))))
  )
)
; program: $eor_concat_cprop.fev23
(program $eor_concat_cprop.fev23 ((U Type) (rev Bool) (s (Seq U)))
  :signature ((Seq U) Bool Bool) (Seq U)
  (
  (($eor_concat_cprop.fev23 s rev true) (eo::list_rev str.++ ($str_nary_intro s)))
  (($eor_concat_cprop.fev23 s rev false) ($str_nary_intro s))
  )
)
; program: $eor_concat_cprop.fev22
(program $eor_concat_cprop.fev22 ((U Type) (s (Seq U)) (rev Bool) ($eo_23 (Seq U)))
  :signature ((Seq U) Bool (Seq U)) (Seq U)
  (
  (($eor_concat_cprop.fev22 s rev $eo_23) (eo::define ((_v0 (eo::list_nth str.++ $eo_23 0))) (eo::extract _v0 0 (eo::add (eo::len _v0) -2))))
  )
)
; program: $eor_concat_cprop.fev15
(program $eor_concat_cprop.fev15 ((U Type) (s (Seq U)) (rev Bool))
  :signature ((Seq U) Bool Bool) (Seq U)
  (
  (($eor_concat_cprop.fev15 s rev true) ($eor_concat_cprop.fev22 s rev ($eor_concat_cprop.fev23 s rev rev)))
  (($eor_concat_cprop.fev15 s rev false) ($eor_concat_cprop.fev24 s rev ($eor_concat_cprop.fev25 s rev rev)))
  )
)
; program: $eor_concat_cprop.fev14
(program $eor_concat_cprop.fev14 ((U Type) (s (Seq U)) (rev Bool) ($eo_19 (Seq U)))
  :signature ((Seq U) Bool (Seq U)) (Seq U)
  (
  (($eor_concat_cprop.fev14 s rev $eo_19) (eo::list_rev str.++ ($str_flatten ($str_nary_intro $eo_19))))
  )
)
; program: $eor_concat_cprop.fev12
(program $eor_concat_cprop.fev12 ((U Type) (t (Seq U)) (tc (Seq U)) (s (Seq U)) (rev Bool))
  :signature ((Seq U) Bool (Seq U) (Seq U) Bool) (Seq U)
  (
  (($eor_concat_cprop.fev12 t rev s tc true) ($eor_concat_cprop.fev14 s rev ($eor_concat_cprop.fev15 s rev rev)))
  (($eor_concat_cprop.fev12 t rev s tc false) ($eor_concat_cprop.fev16 s rev ($eor_concat_cprop.fev17 s rev rev)))
  )
)
; program: $eor_concat_cprop.fev29
(program $eor_concat_cprop.fev29 ((U Type) (rev Bool) (t (Seq U)))
  :signature ((Seq U) Bool Bool) (Seq U)
  (
  (($eor_concat_cprop.fev29 t rev true) (eo::list_rev str.++ ($str_nary_intro t)))
  (($eor_concat_cprop.fev29 t rev false) ($str_nary_intro t))
  )
)
; program: $eor_concat_cprop.fev28
(program $eor_concat_cprop.fev28 ((U Type) (t (Seq U)) (rev Bool) ($eo_26 (Seq U)))
  :signature ((Seq U) Bool (Seq U)) (Seq U)
  (
  (($eor_concat_cprop.fev28 t rev $eo_26) ($str_flatten ($str_nary_intro (eo::list_nth str.++ $eo_26 1))))
  )
)
; program: $eor_concat_cprop.fev27
(program $eor_concat_cprop.fev27 ((U Type) (rev Bool) (t (Seq U)))
  :signature ((Seq U) Bool Bool) (Seq U)
  (
  (($eor_concat_cprop.fev27 t rev true) (eo::list_rev str.++ ($str_nary_intro t)))
  (($eor_concat_cprop.fev27 t rev false) ($str_nary_intro t))
  )
)
; program: $eor_concat_cprop.fev26
(program $eor_concat_cprop.fev26 ((U Type) (t (Seq U)) (rev Bool) ($eo_25 (Seq U)))
  :signature ((Seq U) Bool (Seq U)) (Seq U)
  (
  (($eor_concat_cprop.fev26 t rev $eo_25) (eo::list_rev str.++ ($str_flatten ($str_nary_intro (eo::list_nth str.++ $eo_25 1)))))
  )
)
; program: $eor_concat_cprop.fev11
(program $eor_concat_cprop.fev11 ((U Type) (s (Seq U)) (tc (Seq U)) (t (Seq U)) (rev Bool))
  :signature ((Seq U) Bool (Seq U) (Seq U) Bool) (Seq U)
  (
  (($eor_concat_cprop.fev11 t rev s tc true) ($eor_concat_cprop.fev26 t rev ($eor_concat_cprop.fev27 t rev rev)))
  (($eor_concat_cprop.fev11 t rev s tc false) ($eor_concat_cprop.fev28 t rev ($eor_concat_cprop.fev29 t rev rev)))
  )
)
; program: $eor_concat_cprop.fev31
(program $eor_concat_cprop.fev31 (($eoT.fev27 Type) (U Type) ($eoT.fev31 Type) ($eoT.fev33 Type) (tc (Seq U)) ($eo_29 (Seq U)) ($eo_28 $eoT.fev27) ($eo_32 $eoT.fev31))
  :signature ($eoT.fev27 (Seq U) (Seq U) $eoT.fev31) $eoT.fev33
  (
  (($eor_concat_cprop.fev31 $eo_28 $eo_29 tc $eo_32) (eo::define ((_v0 (_ (_ (str.substr $eo_29) 0) $eo_28))) (eo::define ((_v1 (str.len _v0))) (_ (str.++ _v0) (_ (str.++ (@purify (_ (_ (str.substr tc) _v1) (_ (- (str.len tc)) _v1)))) $eo_32)))))
  )
)
; program: $eor_concat_cprop.fev30
(program $eor_concat_cprop.fev30 (($eoT.fev27 Type) (U Type) ($eoT.fev30 Type) ($eo_15 (Seq U)) ($eo_16 (Seq U)) ($eo_17 (Seq U)) (tc (Seq U)) ($eo_29 (Seq U)) ($eo_28 $eoT.fev27))
  :signature ((Seq U) (Seq U) (Seq U) (Seq U) $eoT.fev27 (Seq U)) $eoT.fev30
  (
  (($eor_concat_cprop.fev30 $eo_15 $eo_16 $eo_17 tc $eo_28 $eo_29) ($eor_concat_cprop.fev31 $eo_28 $eo_29 tc (eo::nil str.++ (eo::typeof (_ (_ (str.substr $eo_29) 0) $eo_28)))))
  )
)
; program: $eor_concat_cprop.fev10
(program $eor_concat_cprop.fev10 ((U Type) ($eoT.fev18 Type) (t (Seq U)) (rev Bool) (s (Seq U)) (tc (Seq U)) ($eo_16 (Seq U)) ($eo_15 (Seq U)) ($eo_17 (Seq U)))
  :signature ((Seq U) Bool (Seq U) (Seq U) (Seq U) (Seq U) (Seq U)) $eoT.fev18
  (
  (($eor_concat_cprop.fev10 t rev s tc $eo_15 $eo_16 $eo_17) ($eor_concat_cprop.fev30 $eo_15 $eo_16 $eo_17 tc (eo::add 1 ($str_overlap_rec $eo_16 $eo_15)) (eo::list_nth str.++ $eo_17 0)))
  )
)
; program: $eor_concat_cprop.fev9
(program $eor_concat_cprop.fev9 ((U Type) (t (Seq U)) (rev Bool) (tc (Seq U)) (s (Seq U)))
  :signature ((Seq U) Bool (Seq U) (Seq U) Bool) (Seq U)
  (
  (($eor_concat_cprop.fev9 t rev s tc true) (eo::list_rev str.++ ($str_nary_intro s)))
  (($eor_concat_cprop.fev9 t rev s tc false) ($str_nary_intro s))
  )
)
; program: $eor_concat_cprop.fev39
(program $eor_concat_cprop.fev39 ((U Type) (rev Bool) (s (Seq U)))
  :signature ((Seq U) Bool Bool) (Seq U)
  (
  (($eor_concat_cprop.fev39 s rev true) (eo::list_rev str.++ ($str_nary_intro s)))
  (($eor_concat_cprop.fev39 s rev false) ($str_nary_intro s))
  )
)
; program: $eor_concat_cprop.fev38
(program $eor_concat_cprop.fev38 ((U Type) (s (Seq U)) (rev Bool) ($eo_37 (Seq U)))
  :signature ((Seq U) Bool (Seq U)) (Seq U)
  (
  (($eor_concat_cprop.fev38 s rev $eo_37) (eo::define ((_v0 (eo::list_nth str.++ $eo_37 0))) (eo::extract _v0 1 (eo::len _v0))))
  )
)
; program: $eor_concat_cprop.fev37
(program $eor_concat_cprop.fev37 ((U Type) (rev Bool) (s (Seq U)))
  :signature ((Seq U) Bool Bool) (Seq U)
  (
  (($eor_concat_cprop.fev37 s rev true) (eo::list_rev str.++ ($str_nary_intro s)))
  (($eor_concat_cprop.fev37 s rev false) ($str_nary_intro s))
  )
)
; program: $eor_concat_cprop.fev36
(program $eor_concat_cprop.fev36 ((U Type) (s (Seq U)) (rev Bool) ($eo_36 (Seq U)))
  :signature ((Seq U) Bool (Seq U)) (Seq U)
  (
  (($eor_concat_cprop.fev36 s rev $eo_36) (eo::define ((_v0 (eo::list_nth str.++ $eo_36 0))) (eo::extract _v0 0 (eo::add (eo::len _v0) -2))))
  )
)
; program: $eor_concat_cprop.fev35
(program $eor_concat_cprop.fev35 ((U Type) (s (Seq U)) (rev Bool))
  :signature ((Seq U) Bool Bool) (Seq U)
  (
  (($eor_concat_cprop.fev35 s rev true) ($eor_concat_cprop.fev36 s rev ($eor_concat_cprop.fev37 s rev rev)))
  (($eor_concat_cprop.fev35 s rev false) ($eor_concat_cprop.fev38 s rev ($eor_concat_cprop.fev39 s rev rev)))
  )
)
; program: $eor_concat_cprop.fev34
(program $eor_concat_cprop.fev34 ((U Type) (s (Seq U)) (rev Bool) ($eo_35 (Seq U)))
  :signature ((Seq U) Bool (Seq U)) (Seq U)
  (
  (($eor_concat_cprop.fev34 s rev $eo_35) ($str_flatten ($str_nary_intro $eo_35)))
  )
)
; program: $eor_concat_cprop.fev43
(program $eor_concat_cprop.fev43 ((U Type) (rev Bool) (s (Seq U)))
  :signature ((Seq U) Bool Bool) (Seq U)
  (
  (($eor_concat_cprop.fev43 s rev true) (eo::list_rev str.++ ($str_nary_intro s)))
  (($eor_concat_cprop.fev43 s rev false) ($str_nary_intro s))
  )
)
; program: $eor_concat_cprop.fev42
(program $eor_concat_cprop.fev42 ((U Type) (s (Seq U)) (rev Bool) ($eo_39 (Seq U)))
  :signature ((Seq U) Bool (Seq U)) (Seq U)
  (
  (($eor_concat_cprop.fev42 s rev $eo_39) (eo::define ((_v0 (eo::list_nth str.++ $eo_39 0))) (eo::extract _v0 1 (eo::len _v0))))
  )
)
; program: $eor_concat_cprop.fev41
(program $eor_concat_cprop.fev41 ((U Type) (rev Bool) (s (Seq U)))
  :signature ((Seq U) Bool Bool) (Seq U)
  (
  (($eor_concat_cprop.fev41 s rev true) (eo::list_rev str.++ ($str_nary_intro s)))
  (($eor_concat_cprop.fev41 s rev false) ($str_nary_intro s))
  )
)
; program: $eor_concat_cprop.fev40
(program $eor_concat_cprop.fev40 ((U Type) (s (Seq U)) (rev Bool) ($eo_38 (Seq U)))
  :signature ((Seq U) Bool (Seq U)) (Seq U)
  (
  (($eor_concat_cprop.fev40 s rev $eo_38) (eo::define ((_v0 (eo::list_nth str.++ $eo_38 0))) (eo::extract _v0 0 (eo::add (eo::len _v0) -2))))
  )
)
; program: $eor_concat_cprop.fev33
(program $eor_concat_cprop.fev33 ((U Type) (s (Seq U)) (rev Bool))
  :signature ((Seq U) Bool Bool) (Seq U)
  (
  (($eor_concat_cprop.fev33 s rev true) ($eor_concat_cprop.fev40 s rev ($eor_concat_cprop.fev41 s rev rev)))
  (($eor_concat_cprop.fev33 s rev false) ($eor_concat_cprop.fev42 s rev ($eor_concat_cprop.fev43 s rev rev)))
  )
)
; program: $eor_concat_cprop.fev32
(program $eor_concat_cprop.fev32 ((U Type) (s (Seq U)) (rev Bool) ($eo_34 (Seq U)))
  :signature ((Seq U) Bool (Seq U)) (Seq U)
  (
  (($eor_concat_cprop.fev32 s rev $eo_34) (eo::list_rev str.++ ($str_flatten ($str_nary_intro $eo_34))))
  )
)
; program: $eor_concat_cprop.fev8
(program $eor_concat_cprop.fev8 ((U Type) (t (Seq U)) (tc (Seq U)) (s (Seq U)) (rev Bool))
  :signature ((Seq U) Bool (Seq U) (Seq U) Bool) (Seq U)
  (
  (($eor_concat_cprop.fev8 t rev s tc true) ($eor_concat_cprop.fev32 s rev ($eor_concat_cprop.fev33 s rev rev)))
  (($eor_concat_cprop.fev8 t rev s tc false) ($eor_concat_cprop.fev34 s rev ($eor_concat_cprop.fev35 s rev rev)))
  )
)
; program: $eor_concat_cprop.fev47
(program $eor_concat_cprop.fev47 ((U Type) (rev Bool) (t (Seq U)))
  :signature ((Seq U) Bool Bool) (Seq U)
  (
  (($eor_concat_cprop.fev47 t rev true) (eo::list_rev str.++ ($str_nary_intro t)))
  (($eor_concat_cprop.fev47 t rev false) ($str_nary_intro t))
  )
)
; program: $eor_concat_cprop.fev46
(program $eor_concat_cprop.fev46 ((U Type) (t (Seq U)) (rev Bool) ($eo_41 (Seq U)))
  :signature ((Seq U) Bool (Seq U)) (Seq U)
  (
  (($eor_concat_cprop.fev46 t rev $eo_41) ($str_flatten ($str_nary_intro (eo::list_nth str.++ $eo_41 1))))
  )
)
; program: $eor_concat_cprop.fev45
(program $eor_concat_cprop.fev45 ((U Type) (rev Bool) (t (Seq U)))
  :signature ((Seq U) Bool Bool) (Seq U)
  (
  (($eor_concat_cprop.fev45 t rev true) (eo::list_rev str.++ ($str_nary_intro t)))
  (($eor_concat_cprop.fev45 t rev false) ($str_nary_intro t))
  )
)
; program: $eor_concat_cprop.fev44
(program $eor_concat_cprop.fev44 ((U Type) (t (Seq U)) (rev Bool) ($eo_40 (Seq U)))
  :signature ((Seq U) Bool (Seq U)) (Seq U)
  (
  (($eor_concat_cprop.fev44 t rev $eo_40) (eo::list_rev str.++ ($str_flatten ($str_nary_intro (eo::list_nth str.++ $eo_40 1)))))
  )
)
; program: $eor_concat_cprop.fev7
(program $eor_concat_cprop.fev7 ((U Type) (s (Seq U)) (tc (Seq U)) (t (Seq U)) (rev Bool))
  :signature ((Seq U) Bool (Seq U) (Seq U) Bool) (Seq U)
  (
  (($eor_concat_cprop.fev7 t rev s tc true) ($eor_concat_cprop.fev44 t rev ($eor_concat_cprop.fev45 t rev rev)))
  (($eor_concat_cprop.fev7 t rev s tc false) ($eor_concat_cprop.fev46 t rev ($eor_concat_cprop.fev47 t rev rev)))
  )
)
; program: $eor_concat_cprop.fev49
(program $eor_concat_cprop.fev49 (($eoT.fev42 Type) (U Type) ($eoT.fev46 Type) ($eoT.fev48 Type) (tc (Seq U)) ($eo_44 (Seq U)) ($eo_43 $eoT.fev42) ($eo_47 $eoT.fev46))
  :signature ($eoT.fev42 (Seq U) (Seq U) $eoT.fev46) $eoT.fev48
  (
  (($eor_concat_cprop.fev49 $eo_43 $eo_44 tc $eo_47) (eo::define ((_v0 (_ (_ (str.substr $eo_44) (_ (- (str.len $eo_44)) $eo_43)) $eo_43))) (_ (str.++ (@purify (_ (_ (str.substr tc) 0) (_ (- (str.len tc)) (str.len _v0))))) (_ (str.++ _v0) $eo_47))))
  )
)
; program: $eor_concat_cprop.fev48
(program $eor_concat_cprop.fev48 (($eoT.fev42 Type) (U Type) ($eoT.fev45 Type) ($eo_11 (Seq U)) ($eo_12 (Seq U)) ($eo_13 (Seq U)) (tc (Seq U)) ($eo_44 (Seq U)) ($eo_43 $eoT.fev42))
  :signature ((Seq U) (Seq U) (Seq U) (Seq U) $eoT.fev42 (Seq U)) $eoT.fev45
  (
  (($eor_concat_cprop.fev48 $eo_11 $eo_12 $eo_13 tc $eo_43 $eo_44) ($eor_concat_cprop.fev49 $eo_43 $eo_44 tc (eo::nil str.++ (eo::typeof (@purify (_ (_ (str.substr tc) 0) (_ (- (str.len tc)) (str.len (_ (_ (str.substr $eo_44) (_ (- (str.len $eo_44)) $eo_43)) $eo_43)))))))))
  )
)
; program: $eor_concat_cprop.fev6
(program $eor_concat_cprop.fev6 ((U Type) ($eoT.fev14 Type) (t (Seq U)) (rev Bool) (s (Seq U)) (tc (Seq U)) ($eo_12 (Seq U)) ($eo_11 (Seq U)) ($eo_13 (Seq U)))
  :signature ((Seq U) Bool (Seq U) (Seq U) (Seq U) (Seq U) (Seq U)) $eoT.fev14
  (
  (($eor_concat_cprop.fev6 t rev s tc $eo_11 $eo_12 $eo_13) ($eor_concat_cprop.fev48 $eo_11 $eo_12 $eo_13 tc (eo::add 1 ($str_overlap_rec $eo_12 $eo_11)) (eo::list_nth str.++ $eo_13 0)))
  )
)
; program: $eor_concat_cprop.fev5
(program $eor_concat_cprop.fev5 ((U Type) ($eoT.fev10 Type) (t (Seq U)) (s (Seq U)) (tc (Seq U)) (rev Bool))
  :signature ((Seq U) Bool (Seq U) (Seq U) Bool) $eoT.fev10
  (
  (($eor_concat_cprop.fev5 t rev s tc true) ($eor_concat_cprop.fev6 t rev s tc ($eor_concat_cprop.fev7 t rev s tc rev) ($eor_concat_cprop.fev8 t rev s tc rev) ($eor_concat_cprop.fev9 t rev s tc rev)))
  (($eor_concat_cprop.fev5 t rev s tc false) ($eor_concat_cprop.fev10 t rev s tc ($eor_concat_cprop.fev11 t rev s tc rev) ($eor_concat_cprop.fev12 t rev s tc rev) ($eor_concat_cprop.fev13 t rev s tc rev)))
  )
)
; program: $eor_concat_cprop.fev4
(program $eor_concat_cprop.fev4 ((U Type) ($eoT.fev7 Type) ($eoT.fev9 Type) (t (Seq U)) (rev Bool) (s (Seq U)) (tc (Seq U)) ($eo_8 $eoT.fev7))
  :signature ((Seq U) Bool (Seq U) (Seq U) $eoT.fev7) $eoT.fev9
  (
  (($eor_concat_cprop.fev4 t rev s tc $eo_8) (_ (= tc) $eo_8))
  )
)
; program: $eor_concat_cprop.fev3
(program $eor_concat_cprop.fev3 ((U Type) ($eoT.fev5 Type) ($eo_1 (Seq U)) ($eo_6 $eoT.fev5) (t (Seq U)) (s (Seq U)) (tc (Seq U)) (rev Bool))
  :signature ((Seq U) Bool (Seq U) (Seq U) (Seq U) $eoT.fev5 $eoT.fev5) $eoT.fev5
  (
  (($eor_concat_cprop.fev3 t rev s tc $eo_1 $eo_6 $eo_6) ($eor_concat_cprop.fev4 t rev s tc ($eor_concat_cprop.fev5 t rev s tc rev)))
  )
)
; program: $eor_concat_cprop.fev1
(program $eor_concat_cprop.fev1 ((U Type) ($eoT.fev2 Type) (t (Seq U)) (rev Bool) (s (Seq U)) ($eo_1 (Seq U)) (tc (Seq U)))
  :signature ((Seq U) Bool (Seq U) (Seq U) (Seq U)) $eoT.fev2
  (
  (($eor_concat_cprop.fev1 t rev s tc $eo_1) ($eor_concat_cprop.fev3 t rev s tc $eo_1 (eo::list_nth str.++ $eo_1 0) tc))
  )
)
; program: $eor_concat_cprop
(program $eor_concat_cprop ((U Type) (t (Seq U)) (s (Seq U)) (tc (Seq U)) (rev Bool))
  :signature (Bool Bool Bool) Bool
  (
  (($eor_concat_cprop rev (_ (= t) s) (not (_ (= (str.len tc)) 0))) ($eor_concat_cprop.fev1 t rev s tc ($eor_concat_cprop.fev2 t rev s tc rev)))
  )
)
; program: $eovc_concat_cprop
(program $eovc_concat_cprop ((U Type) (rev Bool) (t (Seq U)) (s (Seq U)) (tc (Seq U)))
  :signature ((Seq U) (Seq U) (Seq U) Bool) Bool
  (
  (($eovc_concat_cprop tc s t rev) (eo::define ((_v0 (not (_ (= (str.len tc)) 0)))) (eo::define ((_v1 (_ (= t) s))) ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_concat_cprop rev _v1 _v0) false false) true true))))))
  )
)
(echo "smt-meta $eovc_concat_cprop")
; program: $eor_string_decompose.fev3
(program $eor_string_decompose.fev3 ((U Type) ($eoT.fev7 Type) ($eoT.fev9 Type) ($eo_8 $eoT.fev7) (s (Seq U)) (n Int))
  :signature (Int (Seq U) $eoT.fev7) $eoT.fev9
  (
  (($eor_string_decompose.fev3 n s $eo_8) (eo::define ((_v0 (str.substr s))) (eo::define ((_v1 (@purify (_ (_ _v0 0) n)))) (_ (and (_ (= s) (_ (str.++ _v1) (_ (str.++ (@purify (_ (_ _v0 n) (_ (- (str.len s)) n)))) $eo_8)))) (_ (and (_ (= (str.len _v1)) n)) true)))))
  )
)
; program: $eor_string_decompose.fev2
(program $eor_string_decompose.fev2 ((U Type) ($eoT.fev4 Type) ($eoT.fev6 Type) ($eo_5 $eoT.fev4) (s (Seq U)) (n Int))
  :signature (Int (Seq U) $eoT.fev4) $eoT.fev6
  (
  (($eor_string_decompose.fev2 n s $eo_5) (eo::define ((_v0 (_ (- (str.len s)) n))) (eo::define ((_v1 (str.substr s))) (eo::define ((_v2 (@purify (_ (_ _v1 _v0) n)))) (_ (and (_ (= s) (_ (str.++ (@purify (_ (_ _v1 0) _v0))) (_ (str.++ _v2) $eo_5)))) (_ (and (_ (= (str.len _v2)) n)) true))))))
  )
)
; program: $eor_string_decompose.fev1
(program $eor_string_decompose.fev1 ((U Type) ($eoT.fev3 Type) (b Bool) (s (Seq U)) (n Int))
  :signature (Int (Seq U) Bool Bool) $eoT.fev3
  (
  (($eor_string_decompose.fev1 n s b true) ($eor_string_decompose.fev2 n s (eo::nil str.++ (eo::typeof (@purify (_ (_ (str.substr s) 0) (_ (- (str.len s)) n)))))))
  (($eor_string_decompose.fev1 n s b false) ($eor_string_decompose.fev3 n s (eo::nil str.++ (eo::typeof (@purify (_ (_ (str.substr s) 0) n))))))
  )
)
; program: $eor_string_decompose
(program $eor_string_decompose ((n Int) (U Type) (s (Seq U)) (b Bool))
  :signature (Bool Bool) Bool
  (
  (($eor_string_decompose b (_ (>= (str.len s)) n)) ($eor_string_decompose.fev1 n s b b))
  )
)
; program: $eovc_string_decompose
(program $eovc_string_decompose ((U Type) (b Bool) (s (Seq U)) (n Int))
  :signature (Int (Seq U) Bool) Bool
  (
  (($eovc_string_decompose n s b) (eo::define ((_v0 (_ (>= (str.len s)) n))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_string_decompose b _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_string_decompose")
; program: $eor_exists_string_length.fev1
(program $eor_exists_string_length.fev1 (($eo_2 Bool) (U Type) (id Int) (n Int))
  :signature (Int Int Type Bool Bool) Bool
  (
  (($eor_exists_string_length.fev1 n id U $eo_2 $eo_2) (_ (= (str.len (_ (_ (@witness_string_length (Seq U)) n) id))) n))
  )
)
; program: $eor_exists_string_length
(program $eor_exists_string_length ((id Int) (U Type) (n Int))
  :signature (Type Int Int) Bool
  (
  (($eor_exists_string_length (Seq U) n id) ($eor_exists_string_length.fev1 n id U (eo::gt n -1) true))
  )
)
; program: $eovc_exists_string_length
(program $eovc_exists_string_length ((U Type) (n Int) (id Int))
  :signature (Int Int Type) Bool
  (
  (($eovc_exists_string_length id n U) ($eo_requires_eq ($eo_model_sat ($eor_exists_string_length (Seq U) n id) false false) true true))
  )
)
(echo "smt-meta $eovc_exists_string_length")
; program: $eor_string_code_inj
(program $eor_string_code_inj ((t (Seq Char)) (s (Seq Char)))
  :signature ((Seq Char) (Seq Char)) Bool
  (
  (($eor_string_code_inj t s) (eo::define ((_v0 (= (str.to_code t)))) (_ (or (_ _v0 -1)) (_ (or (not (_ _v0 (str.to_code s)))) (_ (or (_ (= t) s)) false)))))
  )
)
; program: $eovc_string_code_inj
(program $eovc_string_code_inj ((t (Seq Char)) (s (Seq Char)))
  :signature ((Seq Char) (Seq Char)) Bool
  (
  (($eovc_string_code_inj s t) ($eo_requires_eq ($eo_model_sat ($eor_string_code_inj t s) false false) true true))
  )
)
(echo "smt-meta $eovc_string_code_inj")
; program: $eor_string_seq_unit_inj
(program $eor_string_seq_unit_inj ((U Type) (a U) (b U))
  :signature (Bool) Bool
  (
  (($eor_string_seq_unit_inj (_ (= (seq.unit a)) (seq.unit b))) (_ (= a) b))
  )
)
; program: $eovc_string_seq_unit_inj
(program $eovc_string_seq_unit_inj ((U Type) (a U) (b U))
  :signature (U U) Bool
  (
  (($eovc_string_seq_unit_inj b a) (eo::define ((_v0 (_ (= (seq.unit a)) (seq.unit b)))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_string_seq_unit_inj _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_string_seq_unit_inj")
; program: $eor_re_inter
(program $eor_re_inter ((x (Seq Char)) (s RegLan) (t RegLan))
  :signature (Bool Bool) Bool
  (
  ((eo::define ((_v0 (str.in_re x))) ($eor_re_inter (_ _v0 s) (_ _v0 t))) (_ (str.in_re x) (_ (re.inter s) (_ (re.inter t) re.all))))
  )
)
; program: $eovc_re_inter
(program $eovc_re_inter ((s RegLan) (x (Seq Char)) (t RegLan))
  :signature (RegLan (Seq Char) RegLan) Bool
  (
  (($eovc_re_inter t x s) (eo::define ((_v0 (str.in_re x))) (eo::define ((_v1 (_ _v0 t))) (eo::define ((_v2 (_ _v0 s))) ($eo_requires_eq ($eo_model_sat _v2 true false) true ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat ($eor_re_inter _v2 _v1) false false) true true)))))))
  )
)
(echo "smt-meta $eovc_re_inter")
; program: $eor_re_concat
(program $eor_re_concat ((E Bool))
  :signature (Bool) Bool
  (
  (($eor_re_concat E) ($mk_re_concat (eo::list_rev and E) (_ (str.in_re "") (str.to_re ""))))
  )
)
; program: $eovc_re_concat
(program $eovc_re_concat ((E Bool))
  :signature (Bool) Bool
  (
  (($eovc_re_concat E) ($eo_requires_eq ($eo_model_sat E true false) true ($eo_requires_eq ($eo_model_sat ($eor_re_concat E) false false) true true)))
  )
)
(echo "smt-meta $eovc_re_concat")
; program: $eor_re_unfold_pos
(program $eor_re_unfold_pos ((t (Seq Char)) (r RegLan))
  :signature (Bool) Bool
  (
  (($eor_re_unfold_pos (_ (str.in_re t) r)) ($mk_re_unfold_pos t r))
  )
)
; program: $eovc_re_unfold_pos
(program $eovc_re_unfold_pos ((t (Seq Char)) (r RegLan))
  :signature (RegLan (Seq Char)) Bool
  (
  (($eovc_re_unfold_pos r t) (eo::define ((_v0 (_ (str.in_re t) r))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_re_unfold_pos _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_re_unfold_pos")
; program: $eor_re_unfold_neg_concat_fixed.fev2
(program $eor_re_unfold_neg_concat_fixed.fev2 ((rev Bool) (s (Seq Char)) (r RegLan))
  :signature (Bool RegLan (Seq Char) Bool) RegLan
  (
  (($eor_re_unfold_neg_concat_fixed.fev2 rev r s true) (eo::list_rev re.++ r))
  (($eor_re_unfold_neg_concat_fixed.fev2 rev r s false) r)
  )
)
; program: $eor_re_unfold_neg_concat_fixed.fev1
(program $eor_re_unfold_neg_concat_fixed.fev1 ((r RegLan) (s (Seq Char)) ($eo_1 RegLan) (rev Bool))
  :signature (Bool RegLan (Seq Char) RegLan) Bool
  (
  (($eor_re_unfold_neg_concat_fixed.fev1 rev r s $eo_1) ($mk_re_unfold_neg_concat_fixed s $eo_1 rev))
  )
)
; program: $eor_re_unfold_neg_concat_fixed
(program $eor_re_unfold_neg_concat_fixed ((r RegLan) (s (Seq Char)) (rev Bool))
  :signature (Bool Bool) Bool
  (
  (($eor_re_unfold_neg_concat_fixed rev (not (_ (str.in_re s) r))) ($eor_re_unfold_neg_concat_fixed.fev1 rev r s ($eor_re_unfold_neg_concat_fixed.fev2 rev r s rev)))
  )
)
; program: $eovc_re_unfold_neg_concat_fixed
(program $eovc_re_unfold_neg_concat_fixed ((rev Bool) (s (Seq Char)) (r RegLan))
  :signature (RegLan (Seq Char) Bool) Bool
  (
  (($eovc_re_unfold_neg_concat_fixed r s rev) (eo::define ((_v0 (not (_ (str.in_re s) r)))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_re_unfold_neg_concat_fixed rev _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_re_unfold_neg_concat_fixed")
; program: $eor_re_unfold_neg
(program $eor_re_unfold_neg ((t (Seq Char)) (r RegLan))
  :signature (Bool) Bool
  (
  (($eor_re_unfold_neg (not (_ (str.in_re t) r))) ($mk_re_unfold_neg t r))
  )
)
; program: $eovc_re_unfold_neg
(program $eovc_re_unfold_neg ((t (Seq Char)) (r RegLan))
  :signature (RegLan (Seq Char)) Bool
  (
  (($eovc_re_unfold_neg r t) (eo::define ((_v0 (not (_ (str.in_re t) r)))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_re_unfold_neg _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_re_unfold_neg")
; program: $eor_string_ext.fev1
(program $eor_string_ext.fev1 ((T Type) ($eo_1 Bool) (t (Seq T)) (s (Seq T)))
  :signature ((Seq T) (Seq T) Bool) Bool
  (
  (($eor_string_ext.fev1 s t $eo_1) (eo::define ((_v0 (str.len s))) (eo::define ((_v1 (@strings_deq_diff s t))) (_ (or (not (_ (= _v0) (str.len t)))) (_ (or (_ (and $eo_1) (_ (and (_ (<= 0) _v1)) (_ (and (_ (< _v1) _v0)) true)))) false)))))
  )
)
; program: $eor_string_ext
(program $eor_string_ext ((T Type) (t (Seq T)) (s (Seq T)))
  :signature (Bool) Bool
  (
  (($eor_string_ext (not (_ (= s) t))) ($eor_string_ext.fev1 s t ($str_mk_ext_deq s t (@strings_deq_diff s t) (eo::typeof s))))
  )
)
; program: $eovc_string_ext
(program $eovc_string_ext ((T Type) (s (Seq T)) (t (Seq T)))
  :signature ((Seq T) (Seq T)) Bool
  (
  (($eovc_string_ext t s) (eo::define ((_v0 (not (_ (= s) t)))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_string_ext _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_string_ext")
; program: $eor_string_reduction.fev1
(program $eor_string_reduction.fev1 ((U Type) ($eo_1 Bool) (s U))
  :signature (U Bool) Bool
  (
  (($eor_string_reduction.fev1 s $eo_1) (_ (and $eo_1) (_ (and (_ (= s) (@purify s))) true)))
  )
)
; program: $eor_string_reduction
(program $eor_string_reduction ((U Type) (s U))
  :signature (U) Bool
  (
  (($eor_string_reduction s) ($eor_string_reduction.fev1 s ($str_reduction_pred s)))
  )
)
; program: $eovc_string_reduction
(program $eovc_string_reduction ((U Type) (s U))
  :signature (U) Bool
  (
  (($eovc_string_reduction s) ($eo_requires_eq ($eo_model_sat ($eor_string_reduction s) false false) true true))
  )
)
(echo "smt-meta $eovc_string_reduction")
; program: $eor_string_eager_reduction
(program $eor_string_eager_reduction ((U Type) (s U))
  :signature (U) Bool
  (
  (($eor_string_eager_reduction s) ($mk_str_eager_reduction s))
  )
)
; program: $eovc_string_eager_reduction
(program $eovc_string_eager_reduction ((U Type) (s U))
  :signature (U) Bool
  (
  (($eovc_string_eager_reduction s) ($eo_requires_eq ($eo_model_sat ($eor_string_eager_reduction s) false false) true true))
  )
)
(echo "smt-meta $eovc_string_eager_reduction")
; program: $eor_arith-string-pred-entail.fev1
(program $eor_arith-string-pred-entail.fev1 (($eo_2 Bool) (n Int))
  :signature (Int Bool Bool) Bool
  (
  (($eor_arith-string-pred-entail.fev1 n $eo_2 $eo_2) (_ (= (_ (>= n) 0)) true))
  )
)
; program: $eor_arith-string-pred-entail
(program $eor_arith-string-pred-entail ((n Int))
  :signature (Bool) Bool
  (
  (($eor_arith-string-pred-entail (_ (= (_ (>= n) 0)) true)) ($eor_arith-string-pred-entail.fev1 n ($str_arith_entail_simple n) true))
  )
)
; program: $eovc_arith-string-pred-entail
(program $eovc_arith-string-pred-entail ((n Int))
  :signature (Int) Bool
  (
  (($eovc_arith-string-pred-entail n) ($eo_requires_eq ($eo_model_sat ($eor_arith-string-pred-entail (_ (= (_ (>= n) 0)) true)) false false) true true))
  )
)
(echo "smt-meta $eovc_arith-string-pred-entail")
; program: $eor_arith-string-pred-safe-approx.fev2
(program $eor_arith-string-pred-safe-approx.fev2 (($eo_4 Bool) (n Int) (m Int))
  :signature (Int Int Bool Bool) Bool
  (
  (($eor_arith-string-pred-safe-approx.fev2 m n $eo_4 $eo_4) (_ (= (_ (>= n) 0)) (_ (>= m) 0)))
  )
)
; program: $eor_arith-string-pred-safe-approx.fev1
(program $eor_arith-string-pred-safe-approx.fev1 (($eo_2 Bool) (n Int) (m Int))
  :signature (Int Int Bool Bool) Bool
  (
  (($eor_arith-string-pred-safe-approx.fev1 m n $eo_2 $eo_2) ($eor_arith-string-pred-safe-approx.fev2 m n ($str_arith_entail_simple_pred (_ (>= m) 0)) true))
  )
)
; program: $eor_arith-string-pred-safe-approx
(program $eor_arith-string-pred-safe-approx ((n Int) (m Int))
  :signature (Bool) Bool
  (
  (($eor_arith-string-pred-safe-approx (_ (= (_ (>= n) 0)) (_ (>= m) 0))) ($eor_arith-string-pred-safe-approx.fev1 m n ($str_arith_entail_is_approx n m true) true))
  )
)
; program: $eovc_arith-string-pred-safe-approx
(program $eovc_arith-string-pred-safe-approx ((n Int) (m Int))
  :signature (Int Int) Bool
  (
  (($eovc_arith-string-pred-safe-approx m n) ($eo_requires_eq ($eo_model_sat ($eor_arith-string-pred-safe-approx (_ (= (_ (>= n) 0)) (_ (>= m) 0))) false false) true true))
  )
)
(echo "smt-meta $eovc_arith-string-pred-safe-approx")
; program: $eor_str-in-re-eval.fev3
(program $eor_str-in-re-eval.fev3 ((s (Seq Char)) (r RegLan))
  :signature (RegLan (Seq Char) Bool) Bool
  (
  (($eor_str-in-re-eval.fev3 r s true) ($nfa_match "" s ($build_nfa r (_ (@nfa.list @nfa.accept) @nfa.decline)) @nfa.decline))
  (($eor_str-in-re-eval.fev3 r s false) ($str_eval_str_in_re_rec s 0 r @re.null))
  )
)
; program: $eor_str-in-re-eval.fev2
(program $eor_str-in-re-eval.fev2 ((b Bool) (s (Seq Char)) (r RegLan))
  :signature (Bool RegLan (Seq Char) Bool) Bool
  (
  (($eor_str-in-re-eval.fev2 b r s true) ($eor_str-in-re-eval.fev3 r s (eo::is_ok ($build_nfa r (_ (@nfa.list @nfa.accept) @nfa.decline)))))
  (($eor_str-in-re-eval.fev2 b r s false) (_ (str.in_re s) r))
  )
)
; program: $eor_str-in-re-eval.fev4
(program $eor_str-in-re-eval.fev4 (($eo_1 Bool) ($eo_4 Bool) (s (Seq Char)) (r RegLan) (b Bool))
  :signature (Bool RegLan (Seq Char) Bool Bool Bool) Bool
  (
  (($eor_str-in-re-eval.fev4 b r s $eo_1 $eo_4 $eo_4) (_ (= (_ (str.in_re s) r)) b))
  )
)
; program: $eor_str-in-re-eval.fev1
(program $eor_str-in-re-eval.fev1 ((r RegLan) (s (Seq Char)) ($eo_1 Bool) (b Bool))
  :signature (Bool RegLan (Seq Char) Bool) Bool
  (
  (($eor_str-in-re-eval.fev1 b r s $eo_1) ($eor_str-in-re-eval.fev4 b r s $eo_1 $eo_1 b))
  )
)
; program: $eor_str-in-re-eval
(program $eor_str-in-re-eval ((b Bool) (r RegLan) (s (Seq Char)))
  :signature (Bool) Bool
  (
  (($eor_str-in-re-eval (_ (= (_ (str.in_re s) r)) b)) ($eor_str-in-re-eval.fev1 b r s ($eor_str-in-re-eval.fev2 b r s (eo::is_str s))))
  )
)
; program: $eovc_str-in-re-eval
(program $eovc_str-in-re-eval ((s (Seq Char)) (r RegLan) (b Bool))
  :signature (Bool RegLan (Seq Char)) Bool
  (
  (($eovc_str-in-re-eval b r s) ($eo_requires_eq ($eo_model_sat ($eor_str-in-re-eval (_ (= (_ (str.in_re s) r)) b)) false false) true true))
  )
)
(echo "smt-meta $eovc_str-in-re-eval")
; program: $eor_str-in-re-consume.fev1
(program $eor_str-in-re-consume.fev1 (($eo_2 Bool) (s (Seq Char)) (r RegLan) (b Bool))
  :signature (Bool RegLan (Seq Char) Bool Bool) Bool
  (
  (($eor_str-in-re-consume.fev1 b r s $eo_2 $eo_2) (_ (= (_ (str.in_re s) r)) b))
  )
)
; program: $eor_str-in-re-consume
(program $eor_str-in-re-consume ((s (Seq Char)) (r RegLan) (b Bool))
  :signature (Bool) Bool
  (
  (($eor_str-in-re-consume (_ (= (_ (str.in_re s) r)) b)) ($eor_str-in-re-consume.fev1 b r s ($str_re_consume s r) b))
  )
)
; program: $eovc_str-in-re-consume
(program $eovc_str-in-re-consume ((s (Seq Char)) (r RegLan) (b Bool))
  :signature (Bool RegLan (Seq Char)) Bool
  (
  (($eovc_str-in-re-consume b r s) ($eo_requires_eq ($eo_model_sat ($eor_str-in-re-consume (_ (= (_ (str.in_re s) r)) b)) false false) true true))
  )
)
(echo "smt-meta $eovc_str-in-re-consume")
; program: $eor_re-loop-elim.fev2
(program $eor_re-loop-elim.fev2 (($eo_4 Bool) (l Int) (u Int) (r1 RegLan) (r2 RegLan))
  :signature (RegLan RegLan Int Int Bool Bool) Bool
  (
  (($eor_re-loop-elim.fev2 r2 r1 u l $eo_4 $eo_4) (_ (= (_ (_ (re.loop l) u) r1)) r2))
  )
)
; program: $eor_re-loop-elim.fev1
(program $eor_re-loop-elim.fev1 (($eo_2 Bool) (l Int) (u Int) (r1 RegLan) (r2 RegLan))
  :signature (RegLan RegLan Int Int Bool Bool) Bool
  (
  (($eor_re-loop-elim.fev1 r2 r1 u l $eo_2 $eo_2) ($eor_re-loop-elim.fev2 r2 r1 u l ($singleton_elim ($str_mk_re_loop_elim_rec l (eo::add (eo::neg l) u) r1 (str.to_re ""))) r2))
  )
)
; program: $eor_re-loop-elim
(program $eor_re-loop-elim ((r2 RegLan) (r1 RegLan) (l Int) (u Int))
  :signature (Bool) Bool
  (
  (($eor_re-loop-elim (_ (= (_ (_ (re.loop l) u) r1)) r2)) ($eor_re-loop-elim.fev1 r2 r1 u l (eo::is_neg (eo::add (eo::neg l) u)) false))
  )
)
; program: $eovc_re-loop-elim
(program $eovc_re-loop-elim ((l Int) (u Int) (r1 RegLan) (r2 RegLan))
  :signature (RegLan RegLan Int Int) Bool
  (
  (($eovc_re-loop-elim r2 r1 u l) ($eo_requires_eq ($eo_model_sat ($eor_re-loop-elim (_ (= (_ (_ (re.loop l) u) r1)) r2)) false false) true true))
  )
)
(echo "smt-meta $eovc_re-loop-elim")
; program: $eor_re-inter-inclusion.fev1
(program $eor_re-inter-inclusion.fev1 (($eo_2 Bool) (r1 RegLan) (r2 RegLan))
  :signature (RegLan RegLan Bool Bool) Bool
  (
  (($eor_re-inter-inclusion.fev1 r2 r1 $eo_2 $eo_2) (_ (= (_ (re.inter r1) (_ (re.inter (re.comp r2)) re.all))) re.none))
  )
)
; program: $eor_re-inter-inclusion
(program $eor_re-inter-inclusion ((r2 RegLan) (r1 RegLan))
  :signature (Bool) Bool
  (
  (($eor_re-inter-inclusion (_ (= (_ (re.inter r1) (_ (re.inter (re.comp r2)) re.all))) re.none)) ($eor_re-inter-inclusion.fev1 r2 r1 ($str_re_includes r2 r1) true))
  )
)
; program: $eovc_re-inter-inclusion
(program $eovc_re-inter-inclusion ((r1 RegLan) (r2 RegLan))
  :signature (RegLan RegLan) Bool
  (
  (($eovc_re-inter-inclusion r2 r1) ($eo_requires_eq ($eo_model_sat ($eor_re-inter-inclusion (_ (= (_ (re.inter r1) (_ (re.inter (re.comp r2)) re.all))) re.none)) false false) true true))
  )
)
(echo "smt-meta $eovc_re-inter-inclusion")
; program: $eor_re-union-inclusion.fev1
(program $eor_re-union-inclusion.fev1 (($eo_2 Bool) (r1 RegLan) (r2 RegLan))
  :signature (RegLan RegLan Bool Bool) Bool
  (
  (($eor_re-union-inclusion.fev1 r2 r1 $eo_2 $eo_2) (_ (= (_ (re.union r1) (_ (re.union (re.comp r2)) re.none))) (re.* re.allchar)))
  )
)
; program: $eor_re-union-inclusion
(program $eor_re-union-inclusion ((r1 RegLan) (r2 RegLan))
  :signature (Bool) Bool
  (
  (($eor_re-union-inclusion (_ (= (_ (re.union r1) (_ (re.union (re.comp r2)) re.none))) (re.* re.allchar))) ($eor_re-union-inclusion.fev1 r2 r1 ($str_re_includes r1 r2) true))
  )
)
; program: $eovc_re-union-inclusion
(program $eovc_re-union-inclusion ((r1 RegLan) (r2 RegLan))
  :signature (RegLan RegLan) Bool
  (
  (($eovc_re-union-inclusion r2 r1) ($eo_requires_eq ($eo_model_sat ($eor_re-union-inclusion (_ (= (_ (re.union r1) (_ (re.union (re.comp r2)) re.none))) (re.* re.allchar))) false false) true true))
  )
)
(echo "smt-meta $eovc_re-union-inclusion")
; program: $eor_str-in-re-concat-star-char.fev2
(program $eor_str-in-re-concat-star-char.fev2 (($eo_4 Bool) (s1 (Seq Char)) (s2 (Seq Char)) (r RegLan) (b Bool))
  :signature (Bool RegLan (Seq Char) (Seq Char) Bool Bool) Bool
  (
  (($eor_str-in-re-concat-star-char.fev2 b r s2 s1 $eo_4 $eo_4) (_ (= (_ (str.in_re (_ (str.++ s1) s2)) (re.* r))) b))
  )
)
; program: $eor_str-in-re-concat-star-char.fev1
(program $eor_str-in-re-concat-star-char.fev1 (($eo_2 Bool) (s1 (Seq Char)) (s2 (Seq Char)) (r RegLan) (b Bool))
  :signature (Bool RegLan (Seq Char) (Seq Char) Bool Bool) Bool
  (
  (($eor_str-in-re-concat-star-char.fev1 b r s2 s1 $eo_2 $eo_2) ($eor_str-in-re-concat-star-char.fev2 b r s2 s1 ($str_mk_str_in_re_concat_star_char (_ (str.++ s1) s2) (re.* r)) b))
  )
)
; program: $eor_str-in-re-concat-star-char
(program $eor_str-in-re-concat-star-char ((b Bool) (s2 (Seq Char)) (s1 (Seq Char)) (r RegLan))
  :signature (Bool) Bool
  (
  (($eor_str-in-re-concat-star-char (_ (= (_ (str.in_re (_ (str.++ s1) s2)) (re.* r))) b)) ($eor_str-in-re-concat-star-char.fev1 b r s2 s1 ($str_fixed_len_re r) 1))
  )
)
; program: $eovc_str-in-re-concat-star-char
(program $eovc_str-in-re-concat-star-char ((s1 (Seq Char)) (s2 (Seq Char)) (r RegLan) (b Bool))
  :signature (Bool RegLan (Seq Char) (Seq Char)) Bool
  (
  (($eovc_str-in-re-concat-star-char b r s2 s1) ($eo_requires_eq ($eo_model_sat ($eor_str-in-re-concat-star-char (_ (= (_ (str.in_re (_ (str.++ s1) s2)) (re.* r))) b)) false false) true true))
  )
)
(echo "smt-meta $eovc_str-in-re-concat-star-char")
; program: $eor_str-in-re-sigma.fev1
(program $eor_str-in-re-sigma.fev1 (($eo_2 Bool) (s (Seq Char)) (r RegLan) (b Bool))
  :signature (Bool RegLan (Seq Char) Bool Bool) Bool
  (
  (($eor_str-in-re-sigma.fev1 b r s $eo_2 $eo_2) (_ (= (_ (str.in_re s) r)) b))
  )
)
; program: $eor_str-in-re-sigma
(program $eor_str-in-re-sigma ((s (Seq Char)) (r RegLan) (b Bool))
  :signature (Bool) Bool
  (
  (($eor_str-in-re-sigma (_ (= (_ (str.in_re s) r)) b)) ($eor_str-in-re-sigma.fev1 b r s ($str_mk_str_in_re_sigma_rec s r 0 true) b))
  )
)
; program: $eovc_str-in-re-sigma
(program $eovc_str-in-re-sigma ((s (Seq Char)) (r RegLan) (b Bool))
  :signature (Bool RegLan (Seq Char)) Bool
  (
  (($eovc_str-in-re-sigma b r s) ($eo_requires_eq ($eo_model_sat ($eor_str-in-re-sigma (_ (= (_ (str.in_re s) r)) b)) false false) true true))
  )
)
(echo "smt-meta $eovc_str-in-re-sigma")
; program: $eor_str-in-re-sigma-star.fev1
(program $eor_str-in-re-sigma-star.fev1 (($eo_2 Bool) (s (Seq Char)) (r RegLan) (b Bool))
  :signature (Bool RegLan (Seq Char) Bool Bool) Bool
  (
  (($eor_str-in-re-sigma-star.fev1 b r s $eo_2 $eo_2) (_ (= (_ (str.in_re s) (re.* r))) b))
  )
)
; program: $eor_str-in-re-sigma-star
(program $eor_str-in-re-sigma-star ((s (Seq Char)) (r RegLan) (b Bool))
  :signature (Bool) Bool
  (
  (($eor_str-in-re-sigma-star (_ (= (_ (str.in_re s) (re.* r))) b)) ($eor_str-in-re-sigma-star.fev1 b r s ($str_mk_str_in_re_sigma_star_rec s r 0) b))
  )
)
; program: $eovc_str-in-re-sigma-star
(program $eovc_str-in-re-sigma-star ((s (Seq Char)) (r RegLan) (b Bool))
  :signature (Bool RegLan (Seq Char)) Bool
  (
  (($eovc_str-in-re-sigma-star b r s) ($eo_requires_eq ($eo_model_sat ($eor_str-in-re-sigma-star (_ (= (_ (str.in_re s) (re.* r))) b)) false false) true true))
  )
)
(echo "smt-meta $eovc_str-in-re-sigma-star")
; program: $eor_str-ctn-multiset-subset.fev1
(program $eor_str-ctn-multiset-subset.fev1 ((T Type) ($eo_2 Bool) (t (Seq T)) (s (Seq T)))
  :signature ((Seq T) (Seq T) Bool Bool) Bool
  (
  (($eor_str-ctn-multiset-subset.fev1 s t $eo_2 $eo_2) (_ (= (_ (str.contains t) s)) false))
  )
)
; program: $eor_str-ctn-multiset-subset
(program $eor_str-ctn-multiset-subset ((T Type) (s (Seq T)) (t (Seq T)))
  :signature (Bool) Bool
  (
  (($eor_str-ctn-multiset-subset (_ (= (_ (str.contains t) s)) false)) ($eor_str-ctn-multiset-subset.fev1 s t ($str_is_multiset_subset_strict ($str_flatten ($str_nary_intro s)) ($str_multiset_overapprox t) $eo_List_nil) true))
  )
)
; program: $eovc_str-ctn-multiset-subset
(program $eovc_str-ctn-multiset-subset ((T Type) (t (Seq T)) (s (Seq T)))
  :signature ((Seq T) (Seq T)) Bool
  (
  (($eovc_str-ctn-multiset-subset s t) ($eo_requires_eq ($eo_model_sat ($eor_str-ctn-multiset-subset (_ (= (_ (str.contains t) s)) false)) false false) true true))
  )
)
(echo "smt-meta $eovc_str-ctn-multiset-subset")
; program: $eor_str-overlap-split-ctn.fev3
(program $eor_str-overlap-split-ctn.fev3 ((T Type) ($eoT.fev11 Type) ($eo_12 $eoT.fev11) (c (Seq T)) (emp (Seq T)) (t (Seq T)) (s (Seq T)) (d (Seq T)))
  :signature ((Seq T) (Seq T) (Seq T) (Seq T) (Seq T) $eoT.fev11 $eoT.fev11) $eoT.fev11
  (
  (($eor_str-overlap-split-ctn.fev3 d s t emp c $eo_12 $eo_12) (_ (= (_ (str.contains (_ (str.++ t) (_ (str.++ c) (_ (str.++ s) emp)))) d)) (_ (or (_ (str.contains t) d)) (_ (or (_ (str.contains s) d)) false))))
  )
)
; program: $eor_str-overlap-split-ctn.fev2
(program $eor_str-overlap-split-ctn.fev2 ((T Type) ($eoT.fev7 Type) ($eo_8 $eoT.fev7) (s (Seq T)) (t (Seq T)) (emp (Seq T)) (d (Seq T)) (c (Seq T)))
  :signature ((Seq T) (Seq T) (Seq T) (Seq T) (Seq T) $eoT.fev7 $eoT.fev7) $eoT.fev7
  (
  (($eor_str-overlap-split-ctn.fev2 d s t emp c $eo_8 $eo_8) ($eor_str-overlap-split-ctn.fev3 d s t emp c (eo::gt ($str_value_len d) ($str_overlap_rec ($str_flatten ($str_nary_intro d)) ($str_flatten ($str_nary_intro c)))) false))
  )
)
; program: $eor_str-overlap-split-ctn.fev1
(program $eor_str-overlap-split-ctn.fev1 ((T Type) ($eoT.fev3 Type) ($eo_4 $eoT.fev3) (s (Seq T)) (t (Seq T)) (emp (Seq T)) (c (Seq T)) (d (Seq T)))
  :signature ((Seq T) (Seq T) (Seq T) (Seq T) (Seq T) $eoT.fev3 $eoT.fev3) $eoT.fev3
  (
  (($eor_str-overlap-split-ctn.fev1 d s t emp c $eo_4 $eo_4) ($eor_str-overlap-split-ctn.fev2 d s t emp c (eo::gt ($str_value_len c) ($str_overlap_rec ($str_flatten ($str_nary_intro c)) ($str_flatten ($str_nary_intro d)))) false))
  )
)
; program: $eor_str-overlap-split-ctn
(program $eor_str-overlap-split-ctn ((T Type) (d (Seq T)) (s (Seq T)) (t (Seq T)) (c (Seq T)) (emp (Seq T)))
  :signature (Bool) Bool
  (
  (($eor_str-overlap-split-ctn (_ (= (_ (str.contains (_ (str.++ t) (_ (str.++ c) (_ (str.++ s) emp)))) d)) (_ (or (_ (str.contains t) d)) (_ (or (_ (str.contains s) d)) false)))) ($eor_str-overlap-split-ctn.fev1 d s t emp c ($str_is_empty emp) true))
  )
)
; program: $eovc_str-overlap-split-ctn
(program $eovc_str-overlap-split-ctn ((T Type) (c (Seq T)) (emp (Seq T)) (t (Seq T)) (s (Seq T)) (d (Seq T)))
  :signature ((Seq T) (Seq T) (Seq T) (Seq T) (Seq T)) Bool
  (
  (($eovc_str-overlap-split-ctn d s t emp c) ($eo_requires_eq ($eo_model_sat ($eor_str-overlap-split-ctn (_ (= (_ (str.contains (_ (str.++ t) (_ (str.++ c) (_ (str.++ s) emp)))) d)) (_ (or (_ (str.contains t) d)) (_ (or (_ (str.contains s) d)) false)))) false false) true true))
  )
)
(echo "smt-meta $eovc_str-overlap-split-ctn")
; program: $eor_str-overlap-endpoints-ctn.fev3
(program $eor_str-overlap-endpoints-ctn.fev3 ((T Type) ($eoT.fev11 Type) ($eo_12 $eoT.fev11) (c1 (Seq T)) (c2 (Seq T)) (s (Seq T)) (d1 (Seq T)) (t (Seq T)) (d2 (Seq T)) (emp (Seq T)))
  :signature ((Seq T) (Seq T) (Seq T) (Seq T) (Seq T) (Seq T) (Seq T) $eoT.fev11 $eoT.fev11) $eoT.fev11
  (
  (($eor_str-overlap-endpoints-ctn.fev3 emp d2 t d1 s c2 c1 $eo_12 $eo_12) (eo::define ((_v0 (_ (str.++ d1) (_ (str.++ t) (_ (str.++ d2) emp))))) (_ (= (_ (str.contains (_ (str.++ c1) (_ (str.++ s) (_ (str.++ c2) emp)))) _v0)) (_ (str.contains s) _v0))))
  )
)
; program: $eor_str-overlap-endpoints-ctn.fev2
(program $eor_str-overlap-endpoints-ctn.fev2 ((T Type) ($eoT.fev7 Type) ($eo_8 $eoT.fev7) (emp (Seq T)) (t (Seq T)) (d1 (Seq T)) (s (Seq T)) (c1 (Seq T)) (c2 (Seq T)) (d2 (Seq T)))
  :signature ((Seq T) (Seq T) (Seq T) (Seq T) (Seq T) (Seq T) (Seq T) $eoT.fev7 $eoT.fev7) $eoT.fev7
  (
  (($eor_str-overlap-endpoints-ctn.fev2 emp d2 t d1 s c2 c1 $eo_8 $eo_8) ($eor_str-overlap-endpoints-ctn.fev3 emp d2 t d1 s c2 c1 (eo::gt ($str_value_len c2) ($str_overlap_rec (eo::list_rev str.++ ($str_flatten ($str_nary_intro c2))) (eo::list_rev str.++ ($str_flatten ($str_nary_intro d2))))) false))
  )
)
; program: $eor_str-overlap-endpoints-ctn.fev1
(program $eor_str-overlap-endpoints-ctn.fev1 ((T Type) ($eoT.fev3 Type) ($eo_4 $eoT.fev3) (emp (Seq T)) (d2 (Seq T)) (t (Seq T)) (s (Seq T)) (c2 (Seq T)) (c1 (Seq T)) (d1 (Seq T)))
  :signature ((Seq T) (Seq T) (Seq T) (Seq T) (Seq T) (Seq T) (Seq T) $eoT.fev3 $eoT.fev3) $eoT.fev3
  (
  (($eor_str-overlap-endpoints-ctn.fev1 emp d2 t d1 s c2 c1 $eo_4 $eo_4) ($eor_str-overlap-endpoints-ctn.fev2 emp d2 t d1 s c2 c1 (eo::gt ($str_value_len c1) ($str_overlap_rec ($str_flatten ($str_nary_intro c1)) ($str_flatten ($str_nary_intro d1)))) false))
  )
)
; program: $eor_str-overlap-endpoints-ctn
(program $eor_str-overlap-endpoints-ctn ((T Type) (d2 (Seq T)) (t (Seq T)) (d1 (Seq T)) (s (Seq T)) (c2 (Seq T)) (c1 (Seq T)) (emp (Seq T)))
  :signature (Bool) Bool
  (
  ((eo::define ((_v0 (_ (str.++ d1) (_ (str.++ t) (_ (str.++ d2) emp))))) ($eor_str-overlap-endpoints-ctn (_ (= (_ (str.contains (_ (str.++ c1) (_ (str.++ s) (_ (str.++ c2) emp)))) _v0)) (_ (str.contains s) _v0)))) ($eor_str-overlap-endpoints-ctn.fev1 emp d2 t d1 s c2 c1 ($str_is_empty emp) true))
  )
)
; program: $eovc_str-overlap-endpoints-ctn
(program $eovc_str-overlap-endpoints-ctn ((T Type) (c1 (Seq T)) (c2 (Seq T)) (s (Seq T)) (d1 (Seq T)) (t (Seq T)) (d2 (Seq T)) (emp (Seq T)))
  :signature ((Seq T) (Seq T) (Seq T) (Seq T) (Seq T) (Seq T) (Seq T)) Bool
  (
  (($eovc_str-overlap-endpoints-ctn emp d2 t d1 s c2 c1) (eo::define ((_v0 (_ (str.++ d1) (_ (str.++ t) (_ (str.++ d2) emp))))) ($eo_requires_eq ($eo_model_sat ($eor_str-overlap-endpoints-ctn (_ (= (_ (str.contains (_ (str.++ c1) (_ (str.++ s) (_ (str.++ c2) emp)))) _v0)) (_ (str.contains s) _v0))) false false) true true)))
  )
)
(echo "smt-meta $eovc_str-overlap-endpoints-ctn")
; program: $eor_str-overlap-endpoints-indexof.fev2
(program $eor_str-overlap-endpoints-indexof.fev2 ((T Type) ($eoT.fev7 Type) ($eo_8 $eoT.fev7) (c (Seq T)) (s (Seq T)) (t (Seq T)) (d (Seq T)) (emp (Seq T)))
  :signature ((Seq T) (Seq T) (Seq T) (Seq T) (Seq T) $eoT.fev7 $eoT.fev7) $eoT.fev7
  (
  (($eor_str-overlap-endpoints-indexof.fev2 emp d t s c $eo_8 $eo_8) (eo::define ((_v0 (_ (str.++ t) (_ (str.++ d) emp)))) (_ (= (_ (_ (str.indexof (_ (str.++ s) (_ (str.++ c) emp))) _v0) 0)) (_ (_ (str.indexof s) _v0) 0))))
  )
)
; program: $eor_str-overlap-endpoints-indexof.fev1
(program $eor_str-overlap-endpoints-indexof.fev1 ((T Type) ($eoT.fev3 Type) ($eo_4 $eoT.fev3) (emp (Seq T)) (t (Seq T)) (s (Seq T)) (c (Seq T)) (d (Seq T)))
  :signature ((Seq T) (Seq T) (Seq T) (Seq T) (Seq T) $eoT.fev3 $eoT.fev3) $eoT.fev3
  (
  (($eor_str-overlap-endpoints-indexof.fev1 emp d t s c $eo_4 $eo_4) ($eor_str-overlap-endpoints-indexof.fev2 emp d t s c (eo::gt ($str_value_len c) ($str_overlap_rec (eo::list_rev str.++ ($str_flatten ($str_nary_intro c))) (eo::list_rev str.++ ($str_flatten ($str_nary_intro d))))) false))
  )
)
; program: $eor_str-overlap-endpoints-indexof
(program $eor_str-overlap-endpoints-indexof ((T Type) (d (Seq T)) (t (Seq T)) (s (Seq T)) (c (Seq T)) (emp (Seq T)))
  :signature (Bool) Bool
  (
  ((eo::define ((_v0 (_ (str.++ t) (_ (str.++ d) emp)))) ($eor_str-overlap-endpoints-indexof (_ (= (_ (_ (str.indexof (_ (str.++ s) (_ (str.++ c) emp))) _v0) 0)) (_ (_ (str.indexof s) _v0) 0)))) ($eor_str-overlap-endpoints-indexof.fev1 emp d t s c ($str_is_empty emp) true))
  )
)
; program: $eovc_str-overlap-endpoints-indexof
(program $eovc_str-overlap-endpoints-indexof ((T Type) (c (Seq T)) (s (Seq T)) (t (Seq T)) (d (Seq T)) (emp (Seq T)))
  :signature ((Seq T) (Seq T) (Seq T) (Seq T) (Seq T)) Bool
  (
  (($eovc_str-overlap-endpoints-indexof emp d t s c) (eo::define ((_v0 (_ (str.++ t) (_ (str.++ d) emp)))) ($eo_requires_eq ($eo_model_sat ($eor_str-overlap-endpoints-indexof (_ (= (_ (_ (str.indexof (_ (str.++ s) (_ (str.++ c) emp))) _v0) 0)) (_ (_ (str.indexof s) _v0) 0))) false false) true true)))
  )
)
(echo "smt-meta $eovc_str-overlap-endpoints-indexof")
; program: $eor_str-overlap-endpoints-replace.fev3
(program $eor_str-overlap-endpoints-replace.fev3 ((T Type) ($eoT.fev11 Type) ($eo_12 $eoT.fev11) (c1 (Seq T)) (s (Seq T)) (d1 (Seq T)) (t (Seq T)) (d2 (Seq T)) (r (Seq T)) (c2 (Seq T)) (emp (Seq T)))
  :signature ((Seq T) (Seq T) (Seq T) (Seq T) (Seq T) (Seq T) (Seq T) (Seq T) $eoT.fev11 $eoT.fev11) $eoT.fev11
  (
  (($eor_str-overlap-endpoints-replace.fev3 emp c2 r d2 t d1 s c1 $eo_12 $eo_12) (eo::define ((_v0 (_ (str.++ c2) emp))) (eo::define ((_v1 (_ (str.++ d1) (_ (str.++ t) (_ (str.++ d2) emp))))) (eo::define ((_v2 (str.++ c1))) (_ (= (_ (_ (str.replace (_ _v2 (_ (str.++ s) _v0))) _v1) r)) (_ _v2 (_ (str.++ (_ (_ (str.replace s) _v1) r)) _v0)))))))
  )
)
; program: $eor_str-overlap-endpoints-replace.fev2
(program $eor_str-overlap-endpoints-replace.fev2 ((T Type) ($eoT.fev7 Type) ($eo_8 $eoT.fev7) (emp (Seq T)) (r (Seq T)) (t (Seq T)) (d1 (Seq T)) (s (Seq T)) (c1 (Seq T)) (c2 (Seq T)) (d2 (Seq T)))
  :signature ((Seq T) (Seq T) (Seq T) (Seq T) (Seq T) (Seq T) (Seq T) (Seq T) $eoT.fev7 $eoT.fev7) $eoT.fev7
  (
  (($eor_str-overlap-endpoints-replace.fev2 emp c2 r d2 t d1 s c1 $eo_8 $eo_8) ($eor_str-overlap-endpoints-replace.fev3 emp c2 r d2 t d1 s c1 (eo::gt ($str_value_len c2) ($str_overlap_rec (eo::list_rev str.++ ($str_flatten ($str_nary_intro c2))) (eo::list_rev str.++ ($str_flatten ($str_nary_intro d2))))) false))
  )
)
; program: $eor_str-overlap-endpoints-replace.fev1
(program $eor_str-overlap-endpoints-replace.fev1 ((T Type) ($eoT.fev3 Type) ($eo_4 $eoT.fev3) (emp (Seq T)) (c2 (Seq T)) (r (Seq T)) (d2 (Seq T)) (t (Seq T)) (s (Seq T)) (c1 (Seq T)) (d1 (Seq T)))
  :signature ((Seq T) (Seq T) (Seq T) (Seq T) (Seq T) (Seq T) (Seq T) (Seq T) $eoT.fev3 $eoT.fev3) $eoT.fev3
  (
  (($eor_str-overlap-endpoints-replace.fev1 emp c2 r d2 t d1 s c1 $eo_4 $eo_4) ($eor_str-overlap-endpoints-replace.fev2 emp c2 r d2 t d1 s c1 (eo::gt ($str_value_len c1) ($str_overlap_rec ($str_flatten ($str_nary_intro c1)) ($str_flatten ($str_nary_intro d1)))) false))
  )
)
; program: $eor_str-overlap-endpoints-replace
(program $eor_str-overlap-endpoints-replace ((T Type) (c2 (Seq T)) (r (Seq T)) (d2 (Seq T)) (t (Seq T)) (d1 (Seq T)) (s (Seq T)) (c1 (Seq T)) (emp (Seq T)))
  :signature (Bool) Bool
  (
  ((eo::define ((_v0 (_ (str.++ c2) emp))) (eo::define ((_v1 (_ (str.++ d1) (_ (str.++ t) (_ (str.++ d2) emp))))) (eo::define ((_v2 (str.++ c1))) ($eor_str-overlap-endpoints-replace (_ (= (_ (_ (str.replace (_ _v2 (_ (str.++ s) _v0))) _v1) r)) (_ _v2 (_ (str.++ (_ (_ (str.replace s) _v1) r)) _v0))))))) ($eor_str-overlap-endpoints-replace.fev1 emp c2 r d2 t d1 s c1 ($str_is_empty emp) true))
  )
)
; program: $eovc_str-overlap-endpoints-replace
(program $eovc_str-overlap-endpoints-replace ((T Type) (c1 (Seq T)) (s (Seq T)) (d1 (Seq T)) (t (Seq T)) (d2 (Seq T)) (r (Seq T)) (c2 (Seq T)) (emp (Seq T)))
  :signature ((Seq T) (Seq T) (Seq T) (Seq T) (Seq T) (Seq T) (Seq T) (Seq T)) Bool
  (
  (($eovc_str-overlap-endpoints-replace emp c2 r d2 t d1 s c1) (eo::define ((_v0 (_ (str.++ c2) emp))) (eo::define ((_v1 (_ (str.++ d1) (_ (str.++ t) (_ (str.++ d2) emp))))) (eo::define ((_v2 (str.++ c1))) ($eo_requires_eq ($eo_model_sat ($eor_str-overlap-endpoints-replace (_ (= (_ (_ (str.replace (_ _v2 (_ (str.++ s) _v0))) _v1) r)) (_ _v2 (_ (str.++ (_ (_ (str.replace s) _v1) r)) _v0)))) false false) true true)))))
  )
)
(echo "smt-meta $eovc_str-overlap-endpoints-replace")
; program: $eor_str-indexof-re-eval.fev4
(program $eor_str-indexof-re-eval.fev4 (($eo_3 (_ (@Pair Int) Int)) (r RegLan) (n Int) (s (Seq Char)))
  :signature ((Seq Char) Int RegLan (_ (@Pair Int) Int) (_ (@Pair Int) Int)) (_ (@Pair Int) Int)
  (
  (($eor_str-indexof-re-eval.fev4 s n r $eo_3 $eo_3) (eo::define ((_v0 (eo::extract s n (eo::len s)))) ($str_first_match_rec _v0 r (_ (re.++ r) (_ (re.++ re.all) (str.to_re ""))) 0 (eo::len _v0))))
  )
)
; program: $eor_str-indexof-re-eval.fev7
(program $eor_str-indexof-re-eval.fev7 (($eo_6 (_ (@Pair Int) Int)) (r RegLan) (n Int) (s (Seq Char)))
  :signature ((Seq Char) Int RegLan (_ (@Pair Int) Int) (_ (@Pair Int) Int)) (_ (@Pair Int) Int)
  (
  (($eor_str-indexof-re-eval.fev7 s n r $eo_6 $eo_6) (eo::define ((_v0 (eo::extract s n (eo::len s)))) ($str_first_match_rec _v0 r (_ (re.++ r) (_ (re.++ re.all) (str.to_re ""))) 0 (eo::len _v0))))
  )
)
; program: $eor_str-indexof-re-eval.fev6
(program $eor_str-indexof-re-eval.fev6 ((s (Seq Char)) (r RegLan) (n Int) ($eo_5 (_ (@Pair Int) Int)))
  :signature ((Seq Char) Int RegLan (_ (@Pair Int) Int)) Int
  (
  (($eor_str-indexof-re-eval.fev6 s n r $eo_5) (eo::add n ($pair_first $eo_5)))
  )
)
; program: $eor_str-indexof-re-eval.fev5
(program $eor_str-indexof-re-eval.fev5 (($eo_2 (_ (@Pair Int) Int)) (r RegLan) (n Int) (s (Seq Char)))
  :signature ((Seq Char) Int RegLan (_ (@Pair Int) Int) Bool) Int
  (
  (($eor_str-indexof-re-eval.fev5 s n r $eo_2 true) -1)
  (($eor_str-indexof-re-eval.fev5 s n r $eo_2 false) ($eor_str-indexof-re-eval.fev6 s n r ($eor_str-indexof-re-eval.fev7 s n r (eo::is_str (eo::extract s n (eo::len s))) true)))
  )
)
; program: $eor_str-indexof-re-eval.fev3
(program $eor_str-indexof-re-eval.fev3 ((s (Seq Char)) (n Int) (r RegLan) ($eo_2 (_ (@Pair Int) Int)))
  :signature ((Seq Char) Int RegLan (_ (@Pair Int) Int)) Int
  (
  (($eor_str-indexof-re-eval.fev3 s n r $eo_2) ($eor_str-indexof-re-eval.fev5 s n r $eo_2 (eo::eq ($pair_first $eo_2) -1)))
  )
)
; program: $eor_str-indexof-re-eval.fev2
(program $eor_str-indexof-re-eval.fev2 ((m Int) (r RegLan) (n Int) (s (Seq Char)))
  :signature (Int Int RegLan (Seq Char) Bool) Int
  (
  (($eor_str-indexof-re-eval.fev2 m n r s true) -1)
  (($eor_str-indexof-re-eval.fev2 m n r s false) ($eor_str-indexof-re-eval.fev3 s n r ($eor_str-indexof-re-eval.fev4 s n r (eo::is_str (eo::extract s n (eo::len s))) true)))
  )
)
; program: $eor_str-indexof-re-eval.fev8
(program $eor_str-indexof-re-eval.fev8 (($eo_1 Int) ($eo_8 Bool) (s (Seq Char)) (r RegLan) (n Int) (m Int))
  :signature (Int Int RegLan (Seq Char) Int Bool Bool) Bool
  (
  (($eor_str-indexof-re-eval.fev8 m n r s $eo_1 $eo_8 $eo_8) (_ (= (_ (_ (str.indexof_re s) r) n)) m))
  )
)
; program: $eor_str-indexof-re-eval.fev1
(program $eor_str-indexof-re-eval.fev1 ((n Int) (r RegLan) (s (Seq Char)) ($eo_1 Int) (m Int))
  :signature (Int Int RegLan (Seq Char) Int) Bool
  (
  (($eor_str-indexof-re-eval.fev1 m n r s $eo_1) ($eor_str-indexof-re-eval.fev8 m n r s $eo_1 $eo_1 m))
  )
)
; program: $eor_str-indexof-re-eval
(program $eor_str-indexof-re-eval ((m Int) (r RegLan) (s (Seq Char)) (n Int))
  :signature (Bool) Bool
  (
  (($eor_str-indexof-re-eval (_ (= (_ (_ (str.indexof_re s) r) n)) m)) ($eor_str-indexof-re-eval.fev1 m n r s ($eor_str-indexof-re-eval.fev2 m n r s (eo::or (eo::gt n (eo::len s)) (eo::is_neg n)))))
  )
)
; program: $eovc_str-indexof-re-eval
(program $eovc_str-indexof-re-eval ((s (Seq Char)) (r RegLan) (n Int) (m Int))
  :signature (Int Int RegLan (Seq Char)) Bool
  (
  (($eovc_str-indexof-re-eval m n r s) ($eo_requires_eq ($eo_model_sat ($eor_str-indexof-re-eval (_ (= (_ (_ (str.indexof_re s) r) n)) m)) false false) true true))
  )
)
(echo "smt-meta $eovc_str-indexof-re-eval")
; program: $eor_str-replace-re-eval.fev2
(program $eor_str-replace-re-eval.fev2 ((u (Seq Char)) (t (Seq Char)) ($eo_2 (_ (@Pair Int) Int)) (r RegLan) (s (Seq Char)))
  :signature ((Seq Char) (Seq Char) RegLan (Seq Char) (_ (@Pair Int) Int) (_ (@Pair Int) Int)) (_ (@Pair Int) Int)
  (
  (($eor_str-replace-re-eval.fev2 u t r s $eo_2 $eo_2) ($str_first_match_rec s r (_ (re.++ r) (_ (re.++ re.all) (str.to_re ""))) 0 (eo::len s)))
  )
)
; program: $eor_str-replace-re-eval.fev3
(program $eor_str-replace-re-eval.fev3 (($eo_1 (_ (@Pair Int) Int)) ($eo_4 Bool) (s (Seq Char)) (r RegLan) (t (Seq Char)) (u (Seq Char)))
  :signature ((Seq Char) (Seq Char) RegLan (Seq Char) (_ (@Pair Int) Int) Bool Bool) Bool
  (
  (($eor_str-replace-re-eval.fev3 u t r s $eo_1 $eo_4 $eo_4) (_ (= (_ (_ (str.replace_re s) r) t)) u))
  )
)
; program: $eor_str-replace-re-eval.fev1
(program $eor_str-replace-re-eval.fev1 ((s (Seq Char)) (r RegLan) (t (Seq Char)) ($eo_1 (_ (@Pair Int) Int)) (u (Seq Char)))
  :signature ((Seq Char) (Seq Char) RegLan (Seq Char) (_ (@Pair Int) Int)) Bool
  (
  (($eor_str-replace-re-eval.fev1 u t r s $eo_1) ($eor_str-replace-re-eval.fev3 u t r s $eo_1 ($str_eval_replace_re s r t $eo_1) u))
  )
)
; program: $eor_str-replace-re-eval
(program $eor_str-replace-re-eval ((u (Seq Char)) (t (Seq Char)) (r RegLan) (s (Seq Char)))
  :signature (Bool) Bool
  (
  (($eor_str-replace-re-eval (_ (= (_ (_ (str.replace_re s) r) t)) u)) ($eor_str-replace-re-eval.fev1 u t r s ($eor_str-replace-re-eval.fev2 u t r s (eo::is_str s) true)))
  )
)
; program: $eovc_str-replace-re-eval
(program $eovc_str-replace-re-eval ((s (Seq Char)) (r RegLan) (t (Seq Char)) (u (Seq Char)))
  :signature ((Seq Char) (Seq Char) RegLan (Seq Char)) Bool
  (
  (($eovc_str-replace-re-eval u t r s) ($eo_requires_eq ($eo_model_sat ($eor_str-replace-re-eval (_ (= (_ (_ (str.replace_re s) r) t)) u)) false false) true true))
  )
)
(echo "smt-meta $eovc_str-replace-re-eval")
; program: $eor_str-replace-re-all-eval.fev2
(program $eor_str-replace-re-all-eval.fev2 ((u (Seq Char)) (t (Seq Char)) ($eo_2 (_ (@Pair Int) Int)) (r RegLan) (s (Seq Char)))
  :signature ((Seq Char) (Seq Char) RegLan (Seq Char) (_ (@Pair Int) Int) (_ (@Pair Int) Int)) (_ (@Pair Int) Int)
  (
  (($eor_str-replace-re-all-eval.fev2 u t r s $eo_2 $eo_2) (eo::define ((_v0 (str.to_re ""))) (eo::define ((_v1 (_ (re.inter r) (_ (re.inter (re.comp _v0)) re.all)))) ($str_first_match_rec s _v1 (_ (re.++ _v1) (_ (re.++ re.all) _v0)) 0 (eo::len s)))))
  )
)
; program: $eor_str-replace-re-all-eval.fev3
(program $eor_str-replace-re-all-eval.fev3 (($eo_1 (_ (@Pair Int) Int)) ($eo_4 Bool) (s (Seq Char)) (r RegLan) (t (Seq Char)) (u (Seq Char)))
  :signature ((Seq Char) (Seq Char) RegLan (Seq Char) (_ (@Pair Int) Int) Bool Bool) Bool
  (
  (($eor_str-replace-re-all-eval.fev3 u t r s $eo_1 $eo_4 $eo_4) (_ (= (_ (_ (str.replace_re_all s) r) t)) u))
  )
)
; program: $eor_str-replace-re-all-eval.fev1
(program $eor_str-replace-re-all-eval.fev1 ((s (Seq Char)) (r RegLan) (t (Seq Char)) ($eo_1 (_ (@Pair Int) Int)) (u (Seq Char)))
  :signature ((Seq Char) (Seq Char) RegLan (Seq Char) (_ (@Pair Int) Int)) Bool
  (
  (($eor_str-replace-re-all-eval.fev1 u t r s $eo_1) ($eor_str-replace-re-all-eval.fev3 u t r s $eo_1 ($singleton_elim ($str_eval_replace_re_all_rec s (_ (re.inter r) (_ (re.inter (re.comp (str.to_re ""))) re.all)) t $eo_1)) u))
  )
)
; program: $eor_str-replace-re-all-eval
(program $eor_str-replace-re-all-eval ((u (Seq Char)) (t (Seq Char)) (r RegLan) (s (Seq Char)))
  :signature (Bool) Bool
  (
  (($eor_str-replace-re-all-eval (_ (= (_ (_ (str.replace_re_all s) r) t)) u)) ($eor_str-replace-re-all-eval.fev1 u t r s ($eor_str-replace-re-all-eval.fev2 u t r s (eo::is_str s) true)))
  )
)
; program: $eovc_str-replace-re-all-eval
(program $eovc_str-replace-re-all-eval ((s (Seq Char)) (r RegLan) (t (Seq Char)) (u (Seq Char)))
  :signature ((Seq Char) (Seq Char) RegLan (Seq Char)) Bool
  (
  (($eovc_str-replace-re-all-eval u t r s) ($eo_requires_eq ($eo_model_sat ($eor_str-replace-re-all-eval (_ (= (_ (_ (str.replace_re_all s) r) t)) u)) false false) true true))
  )
)
(echo "smt-meta $eovc_str-replace-re-all-eval")
; program: $eor_seq-eval-op.fev1
(program $eor_seq-eval-op.fev1 ((T Type) ($eo_2 Bool) (t T) (u T))
  :signature (T T Bool Bool) Bool
  (
  (($eor_seq-eval-op.fev1 u t $eo_2 $eo_2) (_ (= t) u))
  )
)
; program: $eor_seq-eval-op
(program $eor_seq-eval-op ((T Type) (t T) (u T))
  :signature (Bool) Bool
  (
  (($eor_seq-eval-op (_ (= t) u)) ($eor_seq-eval-op.fev1 u t ($seq_eval t) u))
  )
)
; program: $eovc_seq-eval-op
(program $eovc_seq-eval-op ((T Type) (t T) (u T))
  :signature (T T) Bool
  (
  (($eovc_seq-eval-op u t) ($eo_requires_eq ($eo_model_sat ($eor_seq-eval-op (_ (= t) u)) false false) true true))
  )
)
(echo "smt-meta $eovc_seq-eval-op")
; program: $eor_sets_singleton_inj
(program $eor_sets_singleton_inj ((T Type) (a T) (b T))
  :signature (Bool) Bool
  (
  (($eor_sets_singleton_inj (_ (= (set.singleton a)) (set.singleton b))) (_ (= a) b))
  )
)
; program: $eovc_sets_singleton_inj
(program $eovc_sets_singleton_inj ((T Type) (a T) (b T))
  :signature (T T) Bool
  (
  (($eovc_sets_singleton_inj b a) (eo::define ((_v0 (_ (= (set.singleton a)) (set.singleton b)))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_sets_singleton_inj _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_sets_singleton_inj")
; program: $eor_sets_ext
(program $eor_sets_ext ((T Type) (a (Set T)) (b (Set T)))
  :signature (Bool) Bool
  (
  (($eor_sets_ext (not (_ (= a) b))) (eo::define ((_v0 (set.member (@sets_deq_diff a b)))) (not (_ (= (_ _v0 a)) (_ _v0 b)))))
  )
)
; program: $eovc_sets_ext
(program $eovc_sets_ext ((T Type) (a (Set T)) (b (Set T)))
  :signature ((Set T) (Set T)) Bool
  (
  (($eovc_sets_ext b a) (eo::define ((_v0 (not (_ (= a) b)))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_sets_ext _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_sets_ext")
; program: $eor_sets-eval-op.fev1
(program $eor_sets-eval-op.fev1 ((T Type) ($eo_2 Bool) (a (Set T)) (b (Set T)))
  :signature ((Set T) (Set T) Bool Bool) Bool
  (
  (($eor_sets-eval-op.fev1 b a $eo_2 $eo_2) (_ (= a) b))
  )
)
; program: $eor_sets-eval-op
(program $eor_sets-eval-op ((T Type) (a (Set T)) (b (Set T)))
  :signature (Bool) Bool
  (
  (($eor_sets-eval-op (_ (= a) b)) ($eor_sets-eval-op.fev1 b a (eo::list_meq $eo_List_cons (eo::list_setof $eo_List_cons ($eval_sets_op a)) ($set_union_to_list b)) true))
  )
)
; program: $eovc_sets-eval-op
(program $eovc_sets-eval-op ((T Type) (a (Set T)) (b (Set T)))
  :signature ((Set T) (Set T)) Bool
  (
  (($eovc_sets-eval-op b a) ($eo_requires_eq ($eo_model_sat ($eor_sets-eval-op (_ (= a) b)) false false) true true))
  )
)
(echo "smt-meta $eovc_sets-eval-op")
; program: $eor_sets-insert-elim.fev1
(program $eor_sets-insert-elim.fev1 ((T Type) ($eo_2 Bool) (es $eo_List) (s (Set T)) (t (Set T)))
  :signature ((Set T) (Set T) $eo_List Bool Bool) Bool
  (
  (($eor_sets-insert-elim.fev1 t s es $eo_2 $eo_2) (_ (= (_ (set.insert es) s)) t))
  )
)
; program: $eor_sets-insert-elim
(program $eor_sets-insert-elim ((es $eo_List) (T Type) (s (Set T)) (t (Set T)))
  :signature (Bool) Bool
  (
  (($eor_sets-insert-elim (_ (= (_ (set.insert es) s)) t)) ($eor_sets-insert-elim.fev1 t s es ($set_eval_insert es s) t))
  )
)
; program: $eovc_sets-insert-elim
(program $eovc_sets-insert-elim ((T Type) (es $eo_List) (s (Set T)) (t (Set T)))
  :signature ((Set T) (Set T) $eo_List) Bool
  (
  (($eovc_sets-insert-elim t s es) ($eo_requires_eq ($eo_model_sat ($eor_sets-insert-elim (_ (= (_ (set.insert es) s)) t)) false false) true true))
  )
)
(echo "smt-meta $eovc_sets-insert-elim")
; program: $eor_ubv-to-int-elim.fev1
(program $eor_ubv-to-int-elim.fev1 ((n Int) ($eo_2 Bool) (b (BitVec n)) (m Int))
  :signature (Int (BitVec n) Bool Bool) Bool
  (
  (($eor_ubv-to-int-elim.fev1 m b $eo_2 $eo_2) (_ (= (ubv_to_int b)) m))
  )
)
; program: $eor_ubv-to-int-elim
(program $eor_ubv-to-int-elim ((n Int) (b (BitVec n)) (m Int))
  :signature (Bool) Bool
  (
  (($eor_ubv-to-int-elim (_ (= (ubv_to_int b)) m)) ($eor_ubv-to-int-elim.fev1 m b ($singleton_elim ($abconv_ubv_to_int_elim b 0 ($bv_bitwidth (eo::typeof b)) 1)) m))
  )
)
; program: $eovc_ubv-to-int-elim
(program $eovc_ubv-to-int-elim ((n Int) (b (BitVec n)) (m Int))
  :signature (Int (BitVec n)) Bool
  (
  (($eovc_ubv-to-int-elim m b) ($eo_requires_eq ($eo_model_sat ($eor_ubv-to-int-elim (_ (= (ubv_to_int b)) m)) false false) true true))
  )
)
(echo "smt-meta $eovc_ubv-to-int-elim")
; program: $eor_int-to-bv-elim.fev3
(program $eor_int-to-bv-elim.fev3 ((w Int))
  :signature (Int Bool) Int
  (
  (($eor_int-to-bv-elim.fev3 w true) 0)
  (($eor_int-to-bv-elim.fev3 w false) ($arith_eval_int_pow_2_rec w))
  )
)
; program: $eor_int-to-bv-elim.fev2
(program $eor_int-to-bv-elim.fev2 ((w Int) (b (BitVec w)) (n Int))
  :signature ((BitVec w) Int Int Bool) Int
  (
  (($eor_int-to-bv-elim.fev2 b n w true) ($eor_int-to-bv-elim.fev3 w (eo::is_neg w)))
  (($eor_int-to-bv-elim.fev2 b n w false) (int.pow2 w))
  )
)
; program: $eor_int-to-bv-elim.fev4
(program $eor_int-to-bv-elim.fev4 (($eo_1 Int) ($eo_4 Bool) (w Int) (n Int) (b (BitVec w)))
  :signature ((BitVec w) Int Int Int Bool Bool) Bool
  (
  (($eor_int-to-bv-elim.fev4 b n w $eo_1 $eo_4 $eo_4) (_ (= (_ (int_to_bv w) n)) b))
  )
)
; program: $eor_int-to-bv-elim.fev1
(program $eor_int-to-bv-elim.fev1 ((n Int) (w Int) ($eo_1 Int) (b (BitVec w)))
  :signature ((BitVec w) Int Int Int) Bool
  (
  (($eor_int-to-bv-elim.fev1 b n w $eo_1) ($eor_int-to-bv-elim.fev4 b n w $eo_1 ($singleton_elim ($abconv_int_to_bv_elim n w $eo_1)) b))
  )
)
; program: $eor_int-to-bv-elim
(program $eor_int-to-bv-elim ((w Int) (b (BitVec w)) (n Int))
  :signature (Bool) Bool
  (
  (($eor_int-to-bv-elim (_ (= (_ (int_to_bv w) n)) b)) ($eor_int-to-bv-elim.fev1 b n w ($eor_int-to-bv-elim.fev2 b n w (eo::is_z w))))
  )
)
; program: $eovc_int-to-bv-elim
(program $eovc_int-to-bv-elim ((w Int) (n Int) (b (BitVec w)))
  :signature ((BitVec w) Int Int) Bool
  (
  (($eovc_int-to-bv-elim b n w) ($eo_requires_eq ($eo_model_sat ($eor_int-to-bv-elim (_ (= (_ (int_to_bv w) n)) b)) false false) true true))
  )
)
(echo "smt-meta $eovc_int-to-bv-elim")
; program: $eor_instantiate
(program $eor_instantiate ((F Bool) (xs $eo_List) (ts $eo_List))
  :signature ($eo_List Bool) Bool
  (
  (($eor_instantiate ts (_ (forall xs) F)) ($substitute_simul F xs ts))
  )
)
; program: $eovc_instantiate
(program $eovc_instantiate ((ts $eo_List) (xs $eo_List) (F Bool))
  :signature (Bool $eo_List $eo_List) Bool
  (
  (($eovc_instantiate F xs ts) (eo::define ((_v0 (_ (forall xs) F))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_instantiate ts _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_instantiate")
; program: $eor_skolemize
(program $eor_skolemize ((x $eo_List) (G Bool))
  :signature (Bool) Bool
  (
  (($eor_skolemize (not (_ (forall x) G))) ($substitute_simul (not G) x ($mk_skolems x (_ (forall x) G) 0)))
  )
)
; program: $eovc_skolemize
(program $eovc_skolemize ((x $eo_List) (G Bool))
  :signature (Bool $eo_List) Bool
  (
  (($eovc_skolemize G x) (eo::define ((_v0 (not (_ (forall x) G)))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_skolemize _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_skolemize")
; program: $eor_skolem_intro
(program $eor_skolem_intro ((T Type) (x T))
  :signature (T) Bool
  (
  (($eor_skolem_intro (@purify x)) (_ (= (@purify x)) x))
  )
)
; program: $eovc_skolem_intro
(program $eovc_skolem_intro ((T Type) (x T))
  :signature (T) Bool
  (
  (($eovc_skolem_intro x) ($eo_requires_eq ($eo_model_sat ($eor_skolem_intro (@purify x)) false false) true true))
  )
)
(echo "smt-meta $eovc_skolem_intro")
; program: $eor_alpha_equiv.fev2
(program $eor_alpha_equiv.fev2 ((T Type) (ts $eo_List) (vs $eo_List) (t T) ($eo_3 T))
  :signature ($eo_List $eo_List T T) Bool
  (
  (($eor_alpha_equiv.fev2 ts vs t $eo_3) (_ (= t) $eo_3))
  )
)
; program: $eor_alpha_equiv.fev1
(program $eor_alpha_equiv.fev1 ((T Type) ($eo_2 Bool) (t T) (vs $eo_List) (ts $eo_List))
  :signature ($eo_List $eo_List T Bool Bool) Bool
  (
  (($eor_alpha_equiv.fev1 ts vs t $eo_2 $eo_2) ($eor_alpha_equiv.fev2 ts vs t ($substitute_simul t vs ts)))
  )
)
; program: $eor_alpha_equiv
(program $eor_alpha_equiv ((T Type) (vs $eo_List) (t T) (ts $eo_List))
  :signature (T $eo_List $eo_List) Bool
  (
  (($eor_alpha_equiv t vs ts) ($eor_alpha_equiv.fev1 ts vs t ($contains_aterm_list t ts) false))
  )
)
; program: $eovc_alpha_equiv
(program $eovc_alpha_equiv ((T Type) (t T) (vs $eo_List) (ts $eo_List))
  :signature ($eo_List $eo_List T) Bool
  (
  (($eovc_alpha_equiv ts vs t) ($eo_requires_eq ($eo_model_sat ($eor_alpha_equiv t vs ts) false false) true true))
  )
)
(echo "smt-meta $eovc_alpha_equiv")
; program: $eor_beta-reduce.fev1
(program $eor_beta-reduce.fev1 ((T Type) ($eo_2 Bool) (a T) (b T))
  :signature (T T Bool Bool) Bool
  (
  (($eor_beta-reduce.fev1 b a $eo_2 $eo_2) (_ (= a) b))
  )
)
; program: $eor_beta-reduce
(program $eor_beta-reduce ((T Type) (a T) (b T))
  :signature (Bool) Bool
  (
  (($eor_beta-reduce (_ (= a) b)) ($eor_beta-reduce.fev1 b a ($beta_reduce a $eo_List_nil) b))
  )
)
; program: $eovc_beta-reduce
(program $eovc_beta-reduce ((T Type) (a T) (b T))
  :signature (T T) Bool
  (
  (($eovc_beta-reduce b a) ($eo_requires_eq ($eo_model_sat ($eor_beta-reduce (_ (= a) b)) false false) true true))
  )
)
(echo "smt-meta $eovc_beta-reduce")
; program: $eor_quant_var_reordering.fev1
(program $eor_quant_var_reordering.fev1 (($eo_2 Bool) (x $eo_List) (y $eo_List) (F Bool))
  :signature (Bool $eo_List $eo_List Bool Bool) Bool
  (
  (($eor_quant_var_reordering.fev1 F y x $eo_2 $eo_2) (_ (= (_ (forall x) F)) (_ (forall y) F)))
  )
)
; program: $eor_quant_var_reordering
(program $eor_quant_var_reordering ((F Bool) (x $eo_List) (y $eo_List))
  :signature (Bool) Bool
  (
  (($eor_quant_var_reordering (_ (= (_ (forall x) F)) (_ (forall y) F))) ($eor_quant_var_reordering.fev1 F y x (eo::list_meq $eo_List_cons x y) true))
  )
)
; program: $eovc_quant_var_reordering
(program $eovc_quant_var_reordering ((x $eo_List) (y $eo_List) (F Bool))
  :signature (Bool $eo_List $eo_List) Bool
  (
  (($eovc_quant_var_reordering F y x) ($eo_requires_eq ($eo_model_sat ($eor_quant_var_reordering (_ (= (_ (forall x) F)) (_ (forall y) F))) false false) true true))
  )
)
(echo "smt-meta $eovc_quant_var_reordering")
; program: $eor_exists-elim
(program $eor_exists-elim ((x $eo_List) (F Bool))
  :signature (Bool) Bool
  (
  (($eor_exists-elim (_ (= (_ (exists x) F)) (not (_ (forall x) (not F))))) (_ (= (_ (exists x) F)) (not (_ (forall x) (not F)))))
  )
)
; program: $eovc_exists-elim
(program $eovc_exists-elim ((x $eo_List) (F Bool))
  :signature (Bool $eo_List) Bool
  (
  (($eovc_exists-elim F x) ($eo_requires_eq ($eo_model_sat ($eor_exists-elim (_ (= (_ (exists x) F)) (not (_ (forall x) (not F))))) false false) true true))
  )
)
(echo "smt-meta $eovc_exists-elim")
; program: $eor_quant-unused-vars.fev1
(program $eor_quant-unused-vars.fev1 (($eo_2 Bool) (Q (-> $eo_List (-> Bool Bool))) (x $eo_List) (F Bool) (G Bool))
  :signature (Bool Bool $eo_List (-> $eo_List (-> Bool Bool)) Bool Bool) Bool
  (
  (($eor_quant-unused-vars.fev1 G F x Q $eo_2 $eo_2) (_ (= (_ (Q x) F)) G))
  )
)
; program: $eor_quant-unused-vars
(program $eor_quant-unused-vars ((Q (-> $eo_List (-> Bool Bool))) (x $eo_List) (F Bool) (G Bool))
  :signature (Bool) Bool
  (
  (($eor_quant-unused-vars (_ (= (_ (Q x) F)) G)) ($eor_quant-unused-vars.fev1 G F x Q ($mk_quant Q ($mk_quant_unused_vars_rec x F) F) G))
  )
)
; program: $eovc_quant-unused-vars
(program $eovc_quant-unused-vars ((Q (-> $eo_List (-> Bool Bool))) (x $eo_List) (F Bool) (G Bool))
  :signature (Bool Bool $eo_List (-> $eo_List (-> Bool Bool))) Bool
  (
  (($eovc_quant-unused-vars G F x Q) ($eo_requires_eq ($eo_model_sat ($eor_quant-unused-vars (_ (= (_ (Q x) F)) G)) false false) true true))
  )
)
(echo "smt-meta $eovc_quant-unused-vars")
; program: $eor_quant-merge-prenex.fev2
(program $eor_quant-merge-prenex.fev2 (($eo_4 Bool) (Q (-> $eo_List (-> Bool Bool))) (x $eo_List) (F Bool) (G Bool))
  :signature (Bool Bool $eo_List (-> $eo_List (-> Bool Bool)) Bool Bool) Bool
  (
  (($eor_quant-merge-prenex.fev2 G F x Q $eo_4 $eo_4) (_ (= (_ (Q x) F)) G))
  )
)
; program: $eor_quant-merge-prenex.fev1
(program $eor_quant-merge-prenex.fev1 (($eo_2 Bool) (Q (-> $eo_List (-> Bool Bool))) (x $eo_List) (F Bool) (G Bool))
  :signature (Bool Bool $eo_List (-> $eo_List (-> Bool Bool)) Bool Bool) Bool
  (
  (($eor_quant-merge-prenex.fev1 G F x Q $eo_2 $eo_2) ($eor_quant-merge-prenex.fev2 G F x Q ($mk_quant_merge_prenex Q (_ (Q x) F) $eo_List_nil) G))
  )
)
; program: $eor_quant-merge-prenex
(program $eor_quant-merge-prenex ((G Bool) (F Bool) (x $eo_List) (Q (-> $eo_List (-> Bool Bool))))
  :signature (Bool) Bool
  (
  (($eor_quant-merge-prenex (_ (= (_ (Q x) F)) G)) ($eor_quant-merge-prenex.fev1 G F x Q (eo::or (eo::eq Q forall) (eo::eq Q exists)) true))
  )
)
; program: $eovc_quant-merge-prenex
(program $eovc_quant-merge-prenex ((Q (-> $eo_List (-> Bool Bool))) (x $eo_List) (F Bool) (G Bool))
  :signature (Bool Bool $eo_List (-> $eo_List (-> Bool Bool))) Bool
  (
  (($eovc_quant-merge-prenex G F x Q) ($eo_requires_eq ($eo_model_sat ($eor_quant-merge-prenex (_ (= (_ (Q x) F)) G)) false false) true true))
  )
)
(echo "smt-meta $eovc_quant-merge-prenex")
; program: $eor_quant-miniscope-and.fev1
(program $eor_quant-miniscope-and.fev1 (($eo_2 Bool) (x $eo_List) (F Bool) (G Bool))
  :signature (Bool Bool $eo_List Bool Bool) Bool
  (
  (($eor_quant-miniscope-and.fev1 G F x $eo_2 $eo_2) (_ (= (_ (forall x) F)) G))
  )
)
; program: $eor_quant-miniscope-and
(program $eor_quant-miniscope-and ((x $eo_List) (F Bool) (G Bool))
  :signature (Bool) Bool
  (
  (($eor_quant-miniscope-and (_ (= (_ (forall x) F)) G)) ($eor_quant-miniscope-and.fev1 G F x ($mk_quant_miniscope_and x F) G))
  )
)
; program: $eovc_quant-miniscope-and
(program $eovc_quant-miniscope-and ((x $eo_List) (F Bool) (G Bool))
  :signature (Bool Bool $eo_List) Bool
  (
  (($eovc_quant-miniscope-and G F x) ($eo_requires_eq ($eo_model_sat ($eor_quant-miniscope-and (_ (= (_ (forall x) F)) G)) false false) true true))
  )
)
(echo "smt-meta $eovc_quant-miniscope-and")
; program: $eor_quant-miniscope-or.fev1
(program $eor_quant-miniscope-or.fev1 (($eo_2 Bool) (x $eo_List) (F Bool) (G Bool))
  :signature (Bool Bool $eo_List Bool Bool) Bool
  (
  (($eor_quant-miniscope-or.fev1 G F x $eo_2 $eo_2) (_ (= (_ (forall x) F)) G))
  )
)
; program: $eor_quant-miniscope-or
(program $eor_quant-miniscope-or ((x $eo_List) (F Bool) (G Bool))
  :signature (Bool) Bool
  (
  (($eor_quant-miniscope-or (_ (= (_ (forall x) F)) G)) ($eor_quant-miniscope-or.fev1 G F x ($is_quant_miniscope_or x F G) true))
  )
)
; program: $eovc_quant-miniscope-or
(program $eovc_quant-miniscope-or ((x $eo_List) (F Bool) (G Bool))
  :signature (Bool Bool $eo_List) Bool
  (
  (($eovc_quant-miniscope-or G F x) ($eo_requires_eq ($eo_model_sat ($eor_quant-miniscope-or (_ (= (_ (forall x) F)) G)) false false) true true))
  )
)
(echo "smt-meta $eovc_quant-miniscope-or")
; program: $eor_quant-miniscope-ite.fev1
(program $eor_quant-miniscope-ite.fev1 (($eo_2 Bool) (A Bool) (F1 Bool) (x $eo_List) (F2 Bool))
  :signature (Bool $eo_List Bool Bool Bool Bool) Bool
  (
  (($eor_quant-miniscope-ite.fev1 F2 x F1 A $eo_2 $eo_2) (eo::define ((_v0 (forall x))) (eo::define ((_v1 (ite A))) (_ (= (_ _v0 (_ (_ _v1 F1) F2))) (_ (_ _v1 (_ _v0 F1)) (_ _v0 F2))))))
  )
)
; program: $eor_quant-miniscope-ite
(program $eor_quant-miniscope-ite ((F2 Bool) (F1 Bool) (A Bool) (x $eo_List))
  :signature (Bool) Bool
  (
  ((eo::define ((_v0 (forall x))) (eo::define ((_v1 (ite A))) ($eor_quant-miniscope-ite (_ (= (_ _v0 (_ (_ _v1 F1) F2))) (_ (_ _v1 (_ _v0 F1)) (_ _v0 F2)))))) ($eor_quant-miniscope-ite.fev1 F2 x F1 A ($contains_aterm_list A x) false))
  )
)
; program: $eovc_quant-miniscope-ite
(program $eovc_quant-miniscope-ite ((A Bool) (F1 Bool) (x $eo_List) (F2 Bool))
  :signature (Bool $eo_List Bool Bool) Bool
  (
  (($eovc_quant-miniscope-ite F2 x F1 A) (eo::define ((_v0 (forall x))) (eo::define ((_v1 (ite A))) ($eo_requires_eq ($eo_model_sat ($eor_quant-miniscope-ite (_ (= (_ _v0 (_ (_ _v1 F1) F2))) (_ (_ _v1 (_ _v0 F1)) (_ _v0 F2)))) false false) true true))))
  )
)
(echo "smt-meta $eovc_quant-miniscope-ite")
; program: $eor_quant-var-elim-eq.fev1
(program $eor_quant-var-elim-eq.fev1 ((T Type) ($eo_2 Bool) (x T) (F Bool) (G Bool))
  :signature (Bool Bool T Bool Bool) Bool
  (
  (($eor_quant-var-elim-eq.fev1 G F x $eo_2 $eo_2) (_ (= (_ (forall (_ ($eo_List_cons x) $eo_List_nil)) F)) G))
  )
)
; program: $eor_quant-var-elim-eq
(program $eor_quant-var-elim-eq ((T Type) (x T) (F Bool) (G Bool))
  :signature (Bool) Bool
  (
  (($eor_quant-var-elim-eq (_ (= (_ (forall (_ ($eo_List_cons x) $eo_List_nil)) F)) G)) ($eor_quant-var-elim-eq.fev1 G F x ($mk_quant_var_elim_eq x F) G))
  )
)
; program: $eovc_quant-var-elim-eq
(program $eovc_quant-var-elim-eq ((T Type) (x T) (F Bool) (G Bool))
  :signature (Bool Bool T) Bool
  (
  (($eovc_quant-var-elim-eq G F x) ($eo_requires_eq ($eo_model_sat ($eor_quant-var-elim-eq (_ (= (_ (forall (_ ($eo_List_cons x) $eo_List_nil)) F)) G)) false false) true true))
  )
)
(echo "smt-meta $eovc_quant-var-elim-eq")
; program: $eor_quant-dt-split.fev1
(program $eor_quant-dt-split.fev1 ((T Type) ($eo_2 Bool) (x T) (ys $eo_List) (F Bool) (G Bool))
  :signature (Bool Bool $eo_List T Bool Bool) Bool
  (
  (($eor_quant-dt-split.fev1 G F ys x $eo_2 $eo_2) (_ (= (_ (forall (_ ($eo_List_cons x) ys)) F)) G))
  )
)
; program: $eor_quant-dt-split
(program $eor_quant-dt-split ((T Type) (x T) (ys $eo_List) (F Bool) (G Bool))
  :signature (Bool) Bool
  (
  (($eor_quant-dt-split (_ (= (_ (forall (_ ($eo_List_cons x) ys)) F)) G)) ($eor_quant-dt-split.fev1 G F ys x ($is_quant_dt_split x ($dt_get_constructors (eo::typeof x)) ys F G) true))
  )
)
; program: $eovc_quant-dt-split
(program $eovc_quant-dt-split ((T Type) (x T) (ys $eo_List) (F Bool) (G Bool))
  :signature (Bool Bool $eo_List T) Bool
  (
  (($eovc_quant-dt-split G F ys x) ($eo_requires_eq ($eo_model_sat ($eor_quant-dt-split (_ (= (_ (forall (_ ($eo_List_cons x) ys)) F)) G)) false false) true true))
  )
)
(echo "smt-meta $eovc_quant-dt-split")
; program: $eor_exists_inv_condition.fev1
(program $eor_exists_inv_condition.fev1 ((n Int) ($eoT.fev1 Type) ($eoT.fev4 Type) (R Bool) (x (BitVec n)) ($eo_3 Bool) ($eo_2 $eoT.fev1))
  :signature (Bool (BitVec n) $eoT.fev1 Bool) $eoT.fev4
  (
  (($eor_exists_inv_condition.fev1 R x $eo_2 $eo_3) (_ (=> $eo_3) $eo_2))
  )
)
; program: $eor_exists_inv_condition
(program $eor_exists_inv_condition ((n Int) (x (BitVec n)) (R Bool))
  :signature (Bool) Bool
  (
  (($eor_exists_inv_condition (_ (exists (_ ($eo_List_cons x) $eo_List_nil)) R)) ($eor_exists_inv_condition.fev1 R x ($substitute x (@witness_inv_condition (_ (exists (_ ($eo_List_cons x) $eo_List_nil)) R)) R) ($mk_invertibility_condition x R)))
  )
)
; program: $eovc_exists_inv_condition
(program $eovc_exists_inv_condition ((n Int) (x (BitVec n)) (R Bool))
  :signature (Bool (BitVec n)) Bool
  (
  (($eovc_exists_inv_condition R x) ($eo_requires_eq ($eo_model_sat ($eor_exists_inv_condition (_ (exists (_ ($eo_List_cons x) $eo_List_nil)) R)) false false) true true))
  )
)
(echo "smt-meta $eovc_exists_inv_condition")
; program: $eor_dt_split
(program $eor_dt_split ((D Type) (x D))
  :signature (D) Bool
  (
  (($eor_dt_split x) ($singleton_elim ($mk_dt_split ($dt_get_constructors (eo::typeof x)) x)))
  )
)
; program: $eovc_dt_split
(program $eovc_dt_split ((D Type) (x D))
  :signature (D) Bool
  (
  (($eovc_dt_split x) ($eo_requires_eq ($eo_model_sat ($eor_dt_split x) false false) true true))
  )
)
(echo "smt-meta $eovc_dt_split")
; program: $eor_dt-inst.fev1
(program $eor_dt-inst.fev1 ((D Type) (T Type) ($eo_2 Bool) (c T) (x D) (t D))
  :signature (D D T Bool Bool) Bool
  (
  (($eor_dt-inst.fev1 t x c $eo_2 $eo_2) (_ (= (_ (is c) x)) (_ (= x) t)))
  )
)
; program: $eor_dt-inst
(program $eor_dt-inst ((T Type) (c T) (D Type) (x D) (t D))
  :signature (Bool) Bool
  (
  (($eor_dt-inst (_ (= (_ (is c) x)) (_ (= x) t))) ($eor_dt-inst.fev1 t x c ($mk_dt_inst (eo::typeof x) c x) t))
  )
)
; program: $eovc_dt-inst
(program $eovc_dt-inst ((D Type) (T Type) (c T) (x D) (t D))
  :signature (D D T) Bool
  (
  (($eovc_dt-inst t x c) ($eo_requires_eq ($eo_model_sat ($eor_dt-inst (_ (= (_ (is c) x)) (_ (= x) t))) false false) true true))
  )
)
(echo "smt-meta $eovc_dt-inst")
; program: $eor_dt-collapse-selector.fev1
(program $eor_dt-collapse-selector.fev1 ((T Type) (D Type) (S1 Type) (S2 Type) ($eo_2 Bool) (s (-> S1 S2)) (t D) (ti T))
  :signature (T D (-> S1 S2) Bool Bool) Bool
  (
  (($eor_dt-collapse-selector.fev1 ti t s $eo_2 $eo_2) (_ (= (s t)) ti))
  )
)
; program: $eor_dt-collapse-selector
(program $eor_dt-collapse-selector ((D Type) (t D) (S1 Type) (S2 Type) (s (-> S1 S2)) (T Type) (ti T))
  :signature (Bool) Bool
  (
  (($eor_dt-collapse-selector (_ (= (s t)) ti)) ($eor_dt-collapse-selector.fev1 ti t s ($assoc_nil_nth $eo_List_cons ($dt_arg_list t) (eo::list_find $eo_List_cons ($dt_get_selectors_of_app (eo::typeof t) t) s)) ti))
  )
)
; program: $eovc_dt-collapse-selector
(program $eovc_dt-collapse-selector ((T Type) (D Type) (S1 Type) (S2 Type) (s (-> S1 S2)) (t D) (ti T))
  :signature (T D (-> S1 S2)) Bool
  (
  (($eovc_dt-collapse-selector ti t s) ($eo_requires_eq ($eo_model_sat ($eor_dt-collapse-selector (_ (= (s t)) ti)) false false) true true))
  )
)
(echo "smt-meta $eovc_dt-collapse-selector")
; program: $eor_dt-collapse-tester.fev1
(program $eor_dt-collapse-tester.fev1 ((D Type) (T Type) ($eo_2 Bool) (c T) (t D) (b Bool))
  :signature (Bool D T Bool Bool) Bool
  (
  (($eor_dt-collapse-tester.fev1 b t c $eo_2 $eo_2) (_ (= (_ (is c) t)) b))
  )
)
; program: $eor_dt-collapse-tester
(program $eor_dt-collapse-tester ((T Type) (c T) (D Type) (t D) (b Bool))
  :signature (Bool) Bool
  (
  (($eor_dt-collapse-tester (_ (= (_ (is c) t)) b)) ($eor_dt-collapse-tester.fev1 b t c ($dt_eq_cons c t) b))
  )
)
; program: $eovc_dt-collapse-tester
(program $eovc_dt-collapse-tester ((D Type) (T Type) (c T) (t D) (b Bool))
  :signature (Bool D T) Bool
  (
  (($eovc_dt-collapse-tester b t c) ($eo_requires_eq ($eo_model_sat ($eor_dt-collapse-tester (_ (= (_ (is c) t)) b)) false false) true true))
  )
)
(echo "smt-meta $eovc_dt-collapse-tester")
; program: $eor_dt-collapse-tester-singleton.fev1
(program $eor_dt-collapse-tester-singleton.fev1 ((D Type) (T Type) ($eo_2 Bool) (c T) (t D))
  :signature (D T Bool Bool) Bool
  (
  (($eor_dt-collapse-tester-singleton.fev1 t c $eo_2 $eo_2) (_ (= (_ (is c) t)) true))
  )
)
; program: $eor_dt-collapse-tester-singleton
(program $eor_dt-collapse-tester-singleton ((T Type) (c T) (D Type) (t D))
  :signature (Bool) Bool
  (
  (($eor_dt-collapse-tester-singleton (_ (= (_ (is c) t)) true)) ($eor_dt-collapse-tester-singleton.fev1 t c (eo::list_len $eo_List_cons ($dt_get_constructors (eo::typeof t))) 1))
  )
)
; program: $eovc_dt-collapse-tester-singleton
(program $eovc_dt-collapse-tester-singleton ((D Type) (T Type) (c T) (t D))
  :signature (D T) Bool
  (
  (($eovc_dt-collapse-tester-singleton t c) ($eo_requires_eq ($eo_model_sat ($eor_dt-collapse-tester-singleton (_ (= (_ (is c) t)) true)) false false) true true))
  )
)
(echo "smt-meta $eovc_dt-collapse-tester-singleton")
; program: $eor_dt-cons-eq.fev1
(program $eor_dt-cons-eq.fev1 ((D Type) ($eo_2 Bool) (t D) (s D) (B Bool))
  :signature (Bool D D Bool Bool) Bool
  (
  (($eor_dt-cons-eq.fev1 B s t $eo_2 $eo_2) (_ (= (_ (= t) s)) B))
  )
)
; program: $eor_dt-cons-eq
(program $eor_dt-cons-eq ((D Type) (t D) (s D) (B Bool))
  :signature (Bool) Bool
  (
  (($eor_dt-cons-eq (_ (= (_ (= t) s)) B)) ($eor_dt-cons-eq.fev1 B s t ($singleton_elim ($mk_dt_cons_eq t s)) B))
  )
)
; program: $eovc_dt-cons-eq
(program $eovc_dt-cons-eq ((D Type) (t D) (s D) (B Bool))
  :signature (Bool D D) Bool
  (
  (($eovc_dt-cons-eq B s t) ($eo_requires_eq ($eo_model_sat ($eor_dt-cons-eq (_ (= (_ (= t) s)) B)) false false) true true))
  )
)
(echo "smt-meta $eovc_dt-cons-eq")
; program: $eor_dt-cons-eq-clash.fev2
(program $eor_dt-cons-eq-clash.fev2 ((D Type) (s D) (t D))
  :signature (D D Bool) Bool
  (
  (($eor_dt-cons-eq-clash.fev2 s t true) false)
  (($eor_dt-cons-eq-clash.fev2 s t false) ($are_distinct_terms_list (_ ($eo_List_cons t) (_ ($eo_List_cons s) $eo_List_nil)) (eo::typeof t)))
  )
)
; program: $eor_dt-cons-eq-clash.fev3
(program $eor_dt-cons-eq-clash.fev3 ((D Type) ($eo_1 Bool) ($eo_3 Bool) (t D) (s D))
  :signature (D D Bool Bool Bool) Bool
  (
  (($eor_dt-cons-eq-clash.fev3 s t $eo_1 $eo_3 $eo_3) (_ (= (_ (= t) s)) false))
  )
)
; program: $eor_dt-cons-eq-clash.fev1
(program $eor_dt-cons-eq-clash.fev1 ((D Type) (s D) (t D) ($eo_1 Bool))
  :signature (D D Bool) Bool
  (
  (($eor_dt-cons-eq-clash.fev1 s t $eo_1) ($eor_dt-cons-eq-clash.fev3 s t $eo_1 $eo_1 true))
  )
)
; program: $eor_dt-cons-eq-clash
(program $eor_dt-cons-eq-clash ((D Type) (t D) (s D))
  :signature (Bool) Bool
  (
  (($eor_dt-cons-eq-clash (_ (= (_ (= t) s)) false)) ($eor_dt-cons-eq-clash.fev1 s t ($eor_dt-cons-eq-clash.fev2 s t (eo::eq t s))))
  )
)
; program: $eovc_dt-cons-eq-clash
(program $eovc_dt-cons-eq-clash ((D Type) (t D) (s D))
  :signature (D D) Bool
  (
  (($eovc_dt-cons-eq-clash s t) ($eo_requires_eq ($eo_model_sat ($eor_dt-cons-eq-clash (_ (= (_ (= t) s)) false)) false false) true true))
  )
)
(echo "smt-meta $eovc_dt-cons-eq-clash")
; program: $eor_dt-cycle.fev1
(program $eor_dt-cycle.fev1 ((D Type) ($eo_2 Bool) (s D) (t D))
  :signature (D D Bool Bool) Bool
  (
  (($eor_dt-cycle.fev1 t s $eo_2 $eo_2) (_ (= (_ (= s) t)) false))
  )
)
; program: $eor_dt-cycle
(program $eor_dt-cycle ((D Type) (t D) (s D))
  :signature (Bool) Bool
  (
  (($eor_dt-cycle (_ (= (_ (= s) t)) false)) ($eor_dt-cycle.fev1 t s ($dt_find_cycle_rec t (_ ($eo_List_cons s) $eo_List_nil) $eo_List_nil) true))
  )
)
; program: $eovc_dt-cycle
(program $eovc_dt-cycle ((D Type) (s D) (t D))
  :signature (D D) Bool
  (
  (($eovc_dt-cycle t s) ($eo_requires_eq ($eo_model_sat ($eor_dt-cycle (_ (= (_ (= s) t)) false)) false false) true true))
  )
)
(echo "smt-meta $eovc_dt-cycle")
; program: $eor_dt-collapse-updater.fev1
(program $eor_dt-collapse-updater.fev1 ((D Type) ($eo_2 Bool) (t D) (s D))
  :signature (D D Bool Bool) Bool
  (
  (($eor_dt-collapse-updater.fev1 s t $eo_2 $eo_2) (_ (= t) s))
  )
)
; program: $eor_dt-collapse-updater
(program $eor_dt-collapse-updater ((D Type) (t D) (s D))
  :signature (Bool) Bool
  (
  (($eor_dt-collapse-updater (_ (= t) s)) ($eor_dt-collapse-updater.fev1 s t ($mk_dt_collapse_updater_rhs t) s))
  )
)
; program: $eovc_dt-collapse-updater
(program $eovc_dt-collapse-updater ((D Type) (t D) (s D))
  :signature (D D) Bool
  (
  (($eovc_dt-collapse-updater s t) ($eo_requires_eq ($eo_model_sat ($eor_dt-collapse-updater (_ (= t) s)) false false) true true))
  )
)
(echo "smt-meta $eovc_dt-collapse-updater")
; program: $eor_dt-updater-elim.fev1
(program $eor_dt-updater-elim.fev1 ((D Type) (C Type) (T Type) (S Type) (U1 Type) (U2 Type) (U3 Type) (U4 Type) ($eo_2 Bool) (u (-> U1 (-> U2 (-> U3 U4)))) (s S) (a T) (c C) (tu D) (t D))
  :signature (D D C T S (-> U1 (-> U2 (-> U3 U4))) Bool Bool) Bool
  (
  (($eor_dt-updater-elim.fev1 t tu c a s u $eo_2 $eo_2) (_ (= (_ (_ (u s) t) a)) (_ (_ (ite (_ (is c) t)) tu) t)))
  )
)
; program: $eor_dt-updater-elim
(program $eor_dt-updater-elim ((U1 Type) (U2 Type) (U3 Type) (U4 Type) (u (-> U1 (-> U2 (-> U3 U4)))) (S Type) (s S) (T Type) (a T) (D Type) (t D) (C Type) (c C) (tu D))
  :signature (Bool) Bool
  (
  (($eor_dt-updater-elim (_ (= (_ (_ (u s) t) a)) (_ (_ (ite (_ (is c) t)) tu) t))) ($eor_dt-updater-elim.fev1 t tu c a s u ($mk_dt_updater_elim_rhs (_ (_ (u s) t) a) c ($dt_get_selectors (eo::typeof t) c)) tu))
  )
)
; program: $eovc_dt-updater-elim
(program $eovc_dt-updater-elim ((D Type) (C Type) (T Type) (S Type) (U1 Type) (U2 Type) (U3 Type) (U4 Type) (u (-> U1 (-> U2 (-> U3 U4)))) (s S) (a T) (c C) (tu D) (t D))
  :signature (D D C T S (-> U1 (-> U2 (-> U3 U4)))) Bool
  (
  (($eovc_dt-updater-elim t tu c a s u) ($eo_requires_eq ($eo_model_sat ($eor_dt-updater-elim (_ (= (_ (_ (u s) t) a)) (_ (_ (ite (_ (is c) t)) tu) t))) false false) true true))
  )
)
(echo "smt-meta $eovc_dt-updater-elim")
; program: $eor_arith-div-total-zero-real
(program $eor_arith-div-total-zero-real ((@T0 Type) (t1 @T0))
  :signature (@T0) Bool
  (
  (($eor_arith-div-total-zero-real t1) (_ (= (_ (/_total t1) 0/1)) 0/1))
  )
)
; program: $eovc_arith-div-total-zero-real
(program $eovc_arith-div-total-zero-real ((@T0 Type) (t1 @T0))
  :signature (@T0) Bool
  (
  (($eovc_arith-div-total-zero-real t1) ($eo_requires_eq ($eo_model_sat ($eor_arith-div-total-zero-real t1) false false) true true))
  )
)
(echo "smt-meta $eovc_arith-div-total-zero-real")
; program: $eor_arith-div-total-zero-int
(program $eor_arith-div-total-zero-int ((@T0 Type) (t1 @T0))
  :signature (@T0) Bool
  (
  (($eor_arith-div-total-zero-int t1) (_ (= (_ (/_total t1) 0)) 0/1))
  )
)
; program: $eovc_arith-div-total-zero-int
(program $eovc_arith-div-total-zero-int ((@T0 Type) (t1 @T0))
  :signature (@T0) Bool
  (
  (($eovc_arith-div-total-zero-int t1) ($eo_requires_eq ($eo_model_sat ($eor_arith-div-total-zero-int t1) false false) true true))
  )
)
(echo "smt-meta $eovc_arith-div-total-zero-int")
; program: $eor_arith-int-div-total
(program $eor_arith-int-div-total ((t1 Int) (s1 Int))
  :signature (Int Int Bool) Bool
  (
  (($eor_arith-int-div-total t1 s1 (_ (= (_ (= s1) 0)) false)) (_ (= (_ (div t1) s1)) (_ (div_total t1) s1)))
  )
)
; program: $eovc_arith-int-div-total
(program $eovc_arith-int-div-total ((t1 Int) (s1 Int))
  :signature (Int Int) Bool
  (
  (($eovc_arith-int-div-total s1 t1) (eo::define ((_v0 (_ (= (_ (= s1) 0)) false))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_arith-int-div-total t1 s1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_arith-int-div-total")
; program: $eor_arith-int-div-total-one
(program $eor_arith-int-div-total-one ((t1 Int))
  :signature (Int) Bool
  (
  (($eor_arith-int-div-total-one t1) (_ (= (_ (div_total t1) 1)) t1))
  )
)
; program: $eovc_arith-int-div-total-one
(program $eovc_arith-int-div-total-one ((t1 Int))
  :signature (Int) Bool
  (
  (($eovc_arith-int-div-total-one t1) ($eo_requires_eq ($eo_model_sat ($eor_arith-int-div-total-one t1) false false) true true))
  )
)
(echo "smt-meta $eovc_arith-int-div-total-one")
; program: $eor_arith-int-div-total-zero
(program $eor_arith-int-div-total-zero ((t1 Int))
  :signature (Int) Bool
  (
  (($eor_arith-int-div-total-zero t1) (_ (= (_ (div_total t1) 0)) 0))
  )
)
; program: $eovc_arith-int-div-total-zero
(program $eovc_arith-int-div-total-zero ((t1 Int))
  :signature (Int) Bool
  (
  (($eovc_arith-int-div-total-zero t1) ($eo_requires_eq ($eo_model_sat ($eor_arith-int-div-total-zero t1) false false) true true))
  )
)
(echo "smt-meta $eovc_arith-int-div-total-zero")
; program: $eor_arith-int-div-total-neg
(program $eor_arith-int-div-total-neg ((t1 Int) (s1 Int))
  :signature (Int Int Bool) Bool
  (
  (($eor_arith-int-div-total-neg t1 s1 (_ (= (_ (< s1) 0)) true)) (eo::define ((_v0 (div_total t1))) (_ (= (_ _v0 s1)) ($eoo_-.2 (_ _v0 ($eoo_-.2 s1))))))
  )
)
; program: $eovc_arith-int-div-total-neg
(program $eovc_arith-int-div-total-neg ((t1 Int) (s1 Int))
  :signature (Int Int) Bool
  (
  (($eovc_arith-int-div-total-neg s1 t1) (eo::define ((_v0 (_ (= (_ (< s1) 0)) true))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_arith-int-div-total-neg t1 s1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_arith-int-div-total-neg")
; program: $eor_arith-int-mod-total
(program $eor_arith-int-mod-total ((t1 Int) (s1 Int))
  :signature (Int Int Bool) Bool
  (
  (($eor_arith-int-mod-total t1 s1 (_ (= (_ (= s1) 0)) false)) (_ (= (_ (mod t1) s1)) (_ (mod_total t1) s1)))
  )
)
; program: $eovc_arith-int-mod-total
(program $eovc_arith-int-mod-total ((t1 Int) (s1 Int))
  :signature (Int Int) Bool
  (
  (($eovc_arith-int-mod-total s1 t1) (eo::define ((_v0 (_ (= (_ (= s1) 0)) false))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_arith-int-mod-total t1 s1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_arith-int-mod-total")
; program: $eor_arith-int-mod-total-one
(program $eor_arith-int-mod-total-one ((t1 Int))
  :signature (Int) Bool
  (
  (($eor_arith-int-mod-total-one t1) (_ (= (_ (mod_total t1) 1)) 0))
  )
)
; program: $eovc_arith-int-mod-total-one
(program $eovc_arith-int-mod-total-one ((t1 Int))
  :signature (Int) Bool
  (
  (($eovc_arith-int-mod-total-one t1) ($eo_requires_eq ($eo_model_sat ($eor_arith-int-mod-total-one t1) false false) true true))
  )
)
(echo "smt-meta $eovc_arith-int-mod-total-one")
; program: $eor_arith-int-mod-total-zero
(program $eor_arith-int-mod-total-zero ((t1 Int))
  :signature (Int) Bool
  (
  (($eor_arith-int-mod-total-zero t1) (_ (= (_ (mod_total t1) 0)) t1))
  )
)
; program: $eovc_arith-int-mod-total-zero
(program $eovc_arith-int-mod-total-zero ((t1 Int))
  :signature (Int) Bool
  (
  (($eovc_arith-int-mod-total-zero t1) ($eo_requires_eq ($eo_model_sat ($eor_arith-int-mod-total-zero t1) false false) true true))
  )
)
(echo "smt-meta $eovc_arith-int-mod-total-zero")
; program: $eor_arith-int-mod-total-neg
(program $eor_arith-int-mod-total-neg ((t1 Int) (s1 Int))
  :signature (Int Int Bool) Bool
  (
  (($eor_arith-int-mod-total-neg t1 s1 (_ (= (_ (< s1) 0)) true)) (eo::define ((_v0 (mod_total t1))) (_ (= (_ _v0 s1)) (_ _v0 ($eoo_-.2 s1)))))
  )
)
; program: $eovc_arith-int-mod-total-neg
(program $eovc_arith-int-mod-total-neg ((t1 Int) (s1 Int))
  :signature (Int Int) Bool
  (
  (($eovc_arith-int-mod-total-neg s1 t1) (eo::define ((_v0 (_ (= (_ (< s1) 0)) true))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_arith-int-mod-total-neg t1 s1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_arith-int-mod-total-neg")
; program: $eor_arith-elim-gt
(program $eor_arith-elim-gt ((@T0 Type) (@T1 Type) (s1 @T1) (t1 @T0))
  :signature (@T0 @T1) Bool
  (
  (($eor_arith-elim-gt t1 s1) (_ (= (_ (> t1) s1)) (not (_ (>= s1) t1))))
  )
)
; program: $eovc_arith-elim-gt
(program $eovc_arith-elim-gt ((@T1 Type) (@T0 Type) (t1 @T0) (s1 @T1))
  :signature (@T1 @T0) Bool
  (
  (($eovc_arith-elim-gt s1 t1) ($eo_requires_eq ($eo_model_sat ($eor_arith-elim-gt t1 s1) false false) true true))
  )
)
(echo "smt-meta $eovc_arith-elim-gt")
; program: $eor_arith-elim-lt
(program $eor_arith-elim-lt ((@T0 Type) (@T1 Type) (t1 @T0) (s1 @T1))
  :signature (@T0 @T1) Bool
  (
  (($eor_arith-elim-lt t1 s1) (_ (= (_ (< t1) s1)) (not (_ (>= t1) s1))))
  )
)
; program: $eovc_arith-elim-lt
(program $eovc_arith-elim-lt ((@T1 Type) (@T0 Type) (t1 @T0) (s1 @T1))
  :signature (@T1 @T0) Bool
  (
  (($eovc_arith-elim-lt s1 t1) ($eo_requires_eq ($eo_model_sat ($eor_arith-elim-lt t1 s1) false false) true true))
  )
)
(echo "smt-meta $eovc_arith-elim-lt")
; program: $eor_arith-elim-int-gt
(program $eor_arith-elim-int-gt ((t1 Int) (s1 Int))
  :signature (Int Int) Bool
  (
  (($eor_arith-elim-int-gt t1 s1) (_ (= (_ (> t1) s1)) (_ (>= t1) (_ (+ s1) (_ (+ 1) 0)))))
  )
)
; program: $eovc_arith-elim-int-gt
(program $eovc_arith-elim-int-gt ((t1 Int) (s1 Int))
  :signature (Int Int) Bool
  (
  (($eovc_arith-elim-int-gt s1 t1) ($eo_requires_eq ($eo_model_sat ($eor_arith-elim-int-gt t1 s1) false false) true true))
  )
)
(echo "smt-meta $eovc_arith-elim-int-gt")
; program: $eor_arith-elim-int-lt
(program $eor_arith-elim-int-lt ((s1 Int) (t1 Int))
  :signature (Int Int) Bool
  (
  (($eor_arith-elim-int-lt t1 s1) (_ (= (_ (< t1) s1)) (_ (>= s1) (_ (+ t1) (_ (+ 1) 0)))))
  )
)
; program: $eovc_arith-elim-int-lt
(program $eovc_arith-elim-int-lt ((t1 Int) (s1 Int))
  :signature (Int Int) Bool
  (
  (($eovc_arith-elim-int-lt s1 t1) ($eo_requires_eq ($eo_model_sat ($eor_arith-elim-int-lt t1 s1) false false) true true))
  )
)
(echo "smt-meta $eovc_arith-elim-int-lt")
; program: $eor_arith-elim-leq
(program $eor_arith-elim-leq ((@T0 Type) (@T1 Type) (s1 @T1) (t1 @T0))
  :signature (@T0 @T1) Bool
  (
  (($eor_arith-elim-leq t1 s1) (_ (= (_ (<= t1) s1)) (_ (>= s1) t1)))
  )
)
; program: $eovc_arith-elim-leq
(program $eovc_arith-elim-leq ((@T1 Type) (@T0 Type) (t1 @T0) (s1 @T1))
  :signature (@T1 @T0) Bool
  (
  (($eovc_arith-elim-leq s1 t1) ($eo_requires_eq ($eo_model_sat ($eor_arith-elim-leq t1 s1) false false) true true))
  )
)
(echo "smt-meta $eovc_arith-elim-leq")
; program: $eor_arith-leq-norm
(program $eor_arith-leq-norm ((t1 Int) (s1 Int))
  :signature (Int Int) Bool
  (
  (($eor_arith-leq-norm t1 s1) (_ (= (_ (<= t1) s1)) (not (_ (>= t1) (_ (+ s1) (_ (+ 1) 0))))))
  )
)
; program: $eovc_arith-leq-norm
(program $eovc_arith-leq-norm ((t1 Int) (s1 Int))
  :signature (Int Int) Bool
  (
  (($eovc_arith-leq-norm s1 t1) ($eo_requires_eq ($eo_model_sat ($eor_arith-leq-norm t1 s1) false false) true true))
  )
)
(echo "smt-meta $eovc_arith-leq-norm")
; program: $eor_arith-geq-tighten
(program $eor_arith-geq-tighten ((s1 Int) (t1 Int))
  :signature (Int Int) Bool
  (
  (($eor_arith-geq-tighten t1 s1) (_ (= (not (_ (>= t1) s1))) (_ (>= s1) (_ (+ t1) (_ (+ 1) 0)))))
  )
)
; program: $eovc_arith-geq-tighten
(program $eovc_arith-geq-tighten ((t1 Int) (s1 Int))
  :signature (Int Int) Bool
  (
  (($eovc_arith-geq-tighten s1 t1) ($eo_requires_eq ($eo_model_sat ($eor_arith-geq-tighten t1 s1) false false) true true))
  )
)
(echo "smt-meta $eovc_arith-geq-tighten")
; program: $eor_arith-geq-norm1-int
(program $eor_arith-geq-norm1-int ((t1 Int) (s1 Int))
  :signature (Int Int) Bool
  (
  (($eor_arith-geq-norm1-int t1 s1) (_ (= (_ (>= t1) s1)) (_ (>= (_ (- t1) s1)) 0)))
  )
)
; program: $eovc_arith-geq-norm1-int
(program $eovc_arith-geq-norm1-int ((t1 Int) (s1 Int))
  :signature (Int Int) Bool
  (
  (($eovc_arith-geq-norm1-int s1 t1) ($eo_requires_eq ($eo_model_sat ($eor_arith-geq-norm1-int t1 s1) false false) true true))
  )
)
(echo "smt-meta $eovc_arith-geq-norm1-int")
; program: $eor_arith-geq-norm1-real
(program $eor_arith-geq-norm1-real ((t1 Real) (s1 Real))
  :signature (Real Real) Bool
  (
  (($eor_arith-geq-norm1-real t1 s1) (_ (= (_ (>= t1) s1)) (_ (>= (_ (- t1) s1)) 0/1)))
  )
)
; program: $eovc_arith-geq-norm1-real
(program $eovc_arith-geq-norm1-real ((t1 Real) (s1 Real))
  :signature (Real Real) Bool
  (
  (($eovc_arith-geq-norm1-real s1 t1) ($eo_requires_eq ($eo_model_sat ($eor_arith-geq-norm1-real t1 s1) false false) true true))
  )
)
(echo "smt-meta $eovc_arith-geq-norm1-real")
; program: $eor_arith-eq-elim-real
(program $eor_arith-eq-elim-real ((t1 Real) (s1 Real))
  :signature (Real Real) Bool
  (
  (($eor_arith-eq-elim-real t1 s1) (_ (= (_ (= t1) s1)) (_ (and (_ (>= t1) s1)) (_ (and (_ (<= t1) s1)) true))))
  )
)
; program: $eovc_arith-eq-elim-real
(program $eovc_arith-eq-elim-real ((t1 Real) (s1 Real))
  :signature (Real Real) Bool
  (
  (($eovc_arith-eq-elim-real s1 t1) ($eo_requires_eq ($eo_model_sat ($eor_arith-eq-elim-real t1 s1) false false) true true))
  )
)
(echo "smt-meta $eovc_arith-eq-elim-real")
; program: $eor_arith-eq-elim-int
(program $eor_arith-eq-elim-int ((t1 Int) (s1 Int))
  :signature (Int Int) Bool
  (
  (($eor_arith-eq-elim-int t1 s1) (_ (= (_ (= t1) s1)) (_ (and (_ (>= t1) s1)) (_ (and (_ (<= t1) s1)) true))))
  )
)
; program: $eovc_arith-eq-elim-int
(program $eovc_arith-eq-elim-int ((t1 Int) (s1 Int))
  :signature (Int Int) Bool
  (
  (($eovc_arith-eq-elim-int s1 t1) ($eo_requires_eq ($eo_model_sat ($eor_arith-eq-elim-int t1 s1) false false) true true))
  )
)
(echo "smt-meta $eovc_arith-eq-elim-int")
; program: $eor_arith-to-int-elim
(program $eor_arith-to-int-elim ((x1 Int))
  :signature (Int) Bool
  (
  (($eor_arith-to-int-elim x1) (_ (= (to_int x1)) x1))
  )
)
; program: $eovc_arith-to-int-elim
(program $eovc_arith-to-int-elim ((x1 Int))
  :signature (Int) Bool
  (
  (($eovc_arith-to-int-elim x1) ($eo_requires_eq ($eo_model_sat ($eor_arith-to-int-elim x1) false false) true true))
  )
)
(echo "smt-meta $eovc_arith-to-int-elim")
; program: $eor_arith-to-int-elim-to-real
(program $eor_arith-to-int-elim-to-real ((@T0 Type) (x1 @T0))
  :signature (@T0) Bool
  (
  (($eor_arith-to-int-elim-to-real x1) (_ (= (to_int (to_real x1))) (to_int x1)))
  )
)
; program: $eovc_arith-to-int-elim-to-real
(program $eovc_arith-to-int-elim-to-real ((@T0 Type) (x1 @T0))
  :signature (@T0) Bool
  (
  (($eovc_arith-to-int-elim-to-real x1) ($eo_requires_eq ($eo_model_sat ($eor_arith-to-int-elim-to-real x1) false false) true true))
  )
)
(echo "smt-meta $eovc_arith-to-int-elim-to-real")
; program: $eor_arith-div-elim-to-real1
(program $eor_arith-div-elim-to-real1 ((@T0 Type) (@T1 Type) (x1 @T0) (y1 @T1))
  :signature (@T0 @T1) Bool
  (
  (($eor_arith-div-elim-to-real1 x1 y1) (_ (= (_ (/ (to_real x1)) y1)) (_ (/ x1) y1)))
  )
)
; program: $eovc_arith-div-elim-to-real1
(program $eovc_arith-div-elim-to-real1 ((@T1 Type) (@T0 Type) (x1 @T0) (y1 @T1))
  :signature (@T1 @T0) Bool
  (
  (($eovc_arith-div-elim-to-real1 y1 x1) ($eo_requires_eq ($eo_model_sat ($eor_arith-div-elim-to-real1 x1 y1) false false) true true))
  )
)
(echo "smt-meta $eovc_arith-div-elim-to-real1")
; program: $eor_arith-div-elim-to-real2
(program $eor_arith-div-elim-to-real2 ((@T0 Type) (@T1 Type) (x1 @T0) (y1 @T1))
  :signature (@T0 @T1) Bool
  (
  (($eor_arith-div-elim-to-real2 x1 y1) (eo::define ((_v0 (/ x1))) (_ (= (_ _v0 (to_real y1))) (_ _v0 y1))))
  )
)
; program: $eovc_arith-div-elim-to-real2
(program $eovc_arith-div-elim-to-real2 ((@T1 Type) (@T0 Type) (x1 @T0) (y1 @T1))
  :signature (@T1 @T0) Bool
  (
  (($eovc_arith-div-elim-to-real2 y1 x1) ($eo_requires_eq ($eo_model_sat ($eor_arith-div-elim-to-real2 x1 y1) false false) true true))
  )
)
(echo "smt-meta $eovc_arith-div-elim-to-real2")
; program: $eor_arith-mod-over-mod.fev1
(program $eor_arith-mod-over-mod.fev1 ((ss1 Int) (r1 Int) (ts1 Int) ($eo_2 Int) ($eo_1 Int) (c1 Int))
  :signature (Int Int Int Int Int Int) Bool
  (
  (($eor_arith-mod-over-mod.fev1 c1 ss1 r1 ts1 $eo_1 $eo_2) (_ (= (_ (mod_total $eo_2) c1)) (_ (mod_total $eo_1) c1)))
  )
)
; program: $eor_arith-mod-over-mod
(program $eor_arith-mod-over-mod ((ts1 Int) (r1 Int) (c1 Int) (ss1 Int))
  :signature (Int Int Int Int Bool) Bool
  (
  (($eor_arith-mod-over-mod c1 ts1 r1 ss1 (_ (= (_ (= c1) 0)) false)) ($eor_arith-mod-over-mod.fev1 c1 ss1 r1 ts1 ($singleton_elim (eo::list_concat + ts1 (_ (+ r1) ss1))) (eo::list_concat + ts1 (_ (+ (_ (mod_total r1) c1)) ss1))))
  )
)
; program: $eovc_arith-mod-over-mod
(program $eovc_arith-mod-over-mod ((ts1 Int) (r1 Int) (ss1 Int) (c1 Int))
  :signature (Int Int Int Int) Bool
  (
  (($eovc_arith-mod-over-mod c1 ss1 r1 ts1) (eo::define ((_v0 (_ (= (_ (= c1) 0)) false))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_arith-mod-over-mod c1 ts1 r1 ss1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_arith-mod-over-mod")
; program: $eor_arith-int-eq-conflict
(program $eor_arith-int-eq-conflict ((t1 Int) (c1 Real))
  :signature (Int Real Bool) Bool
  (
  (($eor_arith-int-eq-conflict t1 c1 (_ (= (_ (= (to_real (to_int c1))) c1)) false)) (_ (= (_ (= (to_real t1)) c1)) false))
  )
)
; program: $eovc_arith-int-eq-conflict
(program $eovc_arith-int-eq-conflict ((t1 Int) (c1 Real))
  :signature (Real Int) Bool
  (
  (($eovc_arith-int-eq-conflict c1 t1) (eo::define ((_v0 (_ (= (_ (= (to_real (to_int c1))) c1)) false))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_arith-int-eq-conflict t1 c1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_arith-int-eq-conflict")
; program: $eor_arith-int-geq-tighten
(program $eor_arith-int-geq-tighten ((c1 Real) (t1 Int) (cc1 Int))
  :signature (Int Real Int Bool Bool) Bool
  (
  ((eo::define ((_v0 (to_int c1))) ($eor_arith-int-geq-tighten t1 c1 cc1 (_ (= (_ (= (to_real _v0)) c1)) false) (_ (= cc1) (_ (+ _v0) (_ (+ 1) 0))))) (_ (= (_ (>= (to_real t1)) c1)) (_ (>= t1) cc1)))
  )
)
; program: $eovc_arith-int-geq-tighten
(program $eovc_arith-int-geq-tighten ((t1 Int) (cc1 Int) (c1 Real))
  :signature (Real Int Int) Bool
  (
  (($eovc_arith-int-geq-tighten c1 cc1 t1) (eo::define ((_v0 (to_int c1))) (eo::define ((_v1 (_ (= cc1) (_ (+ _v0) (_ (+ 1) 0))))) (eo::define ((_v2 (_ (= (_ (= (to_real _v0)) c1)) false))) ($eo_requires_eq ($eo_model_sat _v2 true false) true ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat ($eor_arith-int-geq-tighten t1 c1 cc1 _v2 _v1) false false) true true)))))))
  )
)
(echo "smt-meta $eovc_arith-int-geq-tighten")
; program: $eor_arith-divisible-elim
(program $eor_arith-divisible-elim ((t1 Int) (n1 Int))
  :signature (Int Int Bool) Bool
  (
  (($eor_arith-divisible-elim n1 t1 (_ (= (_ (= n1) 0)) false)) (_ (= (_ (divisible n1) t1)) (_ (= (_ (mod_total t1) n1)) 0)))
  )
)
; program: $eovc_arith-divisible-elim
(program $eovc_arith-divisible-elim ((t1 Int) (n1 Int))
  :signature (Int Int) Bool
  (
  (($eovc_arith-divisible-elim n1 t1) (eo::define ((_v0 (_ (= (_ (= n1) 0)) false))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_arith-divisible-elim n1 t1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_arith-divisible-elim")
; program: $eor_arith-abs-eq
(program $eor_arith-abs-eq ((@T0 Type) (@T1 Type) (x1 @T0) (y1 @T1))
  :signature (@T0 @T1) Bool
  (
  (($eor_arith-abs-eq x1 y1) (eo::define ((_v0 (= x1))) (_ (= (_ (= (abs x1)) (abs y1))) (_ (or (_ _v0 y1)) (_ (or (_ _v0 ($eoo_-.2 y1))) false)))))
  )
)
; program: $eovc_arith-abs-eq
(program $eovc_arith-abs-eq ((@T1 Type) (@T0 Type) (x1 @T0) (y1 @T1))
  :signature (@T1 @T0) Bool
  (
  (($eovc_arith-abs-eq y1 x1) ($eo_requires_eq ($eo_model_sat ($eor_arith-abs-eq x1 y1) false false) true true))
  )
)
(echo "smt-meta $eovc_arith-abs-eq")
; program: $eor_arith-abs-int-gt
(program $eor_arith-abs-int-gt ((x1 Int) (y1 Int))
  :signature (Int Int) Bool
  (
  (($eor_arith-abs-int-gt x1 y1) (eo::define ((_v0 ($eoo_-.2 y1))) (eo::define ((_v1 (> ($eoo_-.2 x1)))) (eo::define ((_v2 (ite (_ (>= y1) 0)))) (eo::define ((_v3 (> x1))) (_ (= (_ (> (abs x1)) (abs y1))) (_ (_ (ite (_ (>= x1) 0)) (_ (_ _v2 (_ _v3 y1)) (_ _v3 _v0))) (_ (_ _v2 (_ _v1 y1)) (_ _v1 _v0)))))))))
  )
)
; program: $eovc_arith-abs-int-gt
(program $eovc_arith-abs-int-gt ((x1 Int) (y1 Int))
  :signature (Int Int) Bool
  (
  (($eovc_arith-abs-int-gt y1 x1) ($eo_requires_eq ($eo_model_sat ($eor_arith-abs-int-gt x1 y1) false false) true true))
  )
)
(echo "smt-meta $eovc_arith-abs-int-gt")
; program: $eor_arith-abs-real-gt
(program $eor_arith-abs-real-gt ((x1 Real) (y1 Real))
  :signature (Real Real) Bool
  (
  (($eor_arith-abs-real-gt x1 y1) (eo::define ((_v0 ($eoo_-.2 y1))) (eo::define ((_v1 (> ($eoo_-.2 x1)))) (eo::define ((_v2 (ite (_ (>= y1) 0/1)))) (eo::define ((_v3 (> x1))) (_ (= (_ (> (abs x1)) (abs y1))) (_ (_ (ite (_ (>= x1) 0/1)) (_ (_ _v2 (_ _v3 y1)) (_ _v3 _v0))) (_ (_ _v2 (_ _v1 y1)) (_ _v1 _v0)))))))))
  )
)
; program: $eovc_arith-abs-real-gt
(program $eovc_arith-abs-real-gt ((x1 Real) (y1 Real))
  :signature (Real Real) Bool
  (
  (($eovc_arith-abs-real-gt y1 x1) ($eo_requires_eq ($eo_model_sat ($eor_arith-abs-real-gt x1 y1) false false) true true))
  )
)
(echo "smt-meta $eovc_arith-abs-real-gt")
; program: $eor_arith-geq-ite-lift
(program $eor_arith-geq-ite-lift ((@T0 Type) (@T1 Type) (@T2 Type) (C1 Bool) (t1 @T0) (s1 @T1) (r1 @T2))
  :signature (Bool @T0 @T1 @T2) Bool
  (
  (($eor_arith-geq-ite-lift C1 t1 s1 r1) (eo::define ((_v0 (ite C1))) (_ (= (_ (>= (_ (_ _v0 t1) s1)) r1)) (_ (_ _v0 (_ (>= t1) r1)) (_ (>= s1) r1)))))
  )
)
; program: $eovc_arith-geq-ite-lift
(program $eovc_arith-geq-ite-lift ((@T2 Type) (@T1 Type) (@T0 Type) (C1 Bool) (t1 @T0) (s1 @T1) (r1 @T2))
  :signature (@T2 @T1 @T0 Bool) Bool
  (
  (($eovc_arith-geq-ite-lift r1 s1 t1 C1) ($eo_requires_eq ($eo_model_sat ($eor_arith-geq-ite-lift C1 t1 s1 r1) false false) true true))
  )
)
(echo "smt-meta $eovc_arith-geq-ite-lift")
; program: $eor_arith-leq-ite-lift
(program $eor_arith-leq-ite-lift ((@T0 Type) (@T1 Type) (@T2 Type) (C1 Bool) (t1 @T0) (s1 @T1) (r1 @T2))
  :signature (Bool @T0 @T1 @T2) Bool
  (
  (($eor_arith-leq-ite-lift C1 t1 s1 r1) (eo::define ((_v0 (ite C1))) (_ (= (_ (<= (_ (_ _v0 t1) s1)) r1)) (_ (_ _v0 (_ (<= t1) r1)) (_ (<= s1) r1)))))
  )
)
; program: $eovc_arith-leq-ite-lift
(program $eovc_arith-leq-ite-lift ((@T2 Type) (@T1 Type) (@T0 Type) (C1 Bool) (t1 @T0) (s1 @T1) (r1 @T2))
  :signature (@T2 @T1 @T0 Bool) Bool
  (
  (($eovc_arith-leq-ite-lift r1 s1 t1 C1) ($eo_requires_eq ($eo_model_sat ($eor_arith-leq-ite-lift C1 t1 s1 r1) false false) true true))
  )
)
(echo "smt-meta $eovc_arith-leq-ite-lift")
; program: $eor_arith-min-lt1
(program $eor_arith-min-lt1 ((@T0 Type) (@T1 Type) (s1 @T1) (t1 @T0))
  :signature (@T0 @T1) Bool
  (
  (($eor_arith-min-lt1 t1 s1) (_ (= (_ (<= (_ (_ (ite (_ (< t1) s1)) t1) s1)) t1)) true))
  )
)
; program: $eovc_arith-min-lt1
(program $eovc_arith-min-lt1 ((@T1 Type) (@T0 Type) (t1 @T0) (s1 @T1))
  :signature (@T1 @T0) Bool
  (
  (($eovc_arith-min-lt1 s1 t1) ($eo_requires_eq ($eo_model_sat ($eor_arith-min-lt1 t1 s1) false false) true true))
  )
)
(echo "smt-meta $eovc_arith-min-lt1")
; program: $eor_arith-min-lt2
(program $eor_arith-min-lt2 ((@T0 Type) (@T1 Type) (t1 @T0) (s1 @T1))
  :signature (@T0 @T1) Bool
  (
  (($eor_arith-min-lt2 t1 s1) (_ (= (_ (<= (_ (_ (ite (_ (< t1) s1)) t1) s1)) s1)) true))
  )
)
; program: $eovc_arith-min-lt2
(program $eovc_arith-min-lt2 ((@T1 Type) (@T0 Type) (t1 @T0) (s1 @T1))
  :signature (@T1 @T0) Bool
  (
  (($eovc_arith-min-lt2 s1 t1) ($eo_requires_eq ($eo_model_sat ($eor_arith-min-lt2 t1 s1) false false) true true))
  )
)
(echo "smt-meta $eovc_arith-min-lt2")
; program: $eor_arith-max-geq1
(program $eor_arith-max-geq1 ((@T0 Type) (@T1 Type) (s1 @T1) (t1 @T0))
  :signature (@T0 @T1) Bool
  (
  (($eor_arith-max-geq1 t1 s1) (_ (= (_ (>= (_ (_ (ite (_ (>= t1) s1)) t1) s1)) t1)) true))
  )
)
; program: $eovc_arith-max-geq1
(program $eovc_arith-max-geq1 ((@T1 Type) (@T0 Type) (t1 @T0) (s1 @T1))
  :signature (@T1 @T0) Bool
  (
  (($eovc_arith-max-geq1 s1 t1) ($eo_requires_eq ($eo_model_sat ($eor_arith-max-geq1 t1 s1) false false) true true))
  )
)
(echo "smt-meta $eovc_arith-max-geq1")
; program: $eor_arith-max-geq2
(program $eor_arith-max-geq2 ((@T0 Type) (@T1 Type) (t1 @T0) (s1 @T1))
  :signature (@T0 @T1) Bool
  (
  (($eor_arith-max-geq2 t1 s1) (_ (= (_ (>= (_ (_ (ite (_ (>= t1) s1)) t1) s1)) s1)) true))
  )
)
; program: $eovc_arith-max-geq2
(program $eovc_arith-max-geq2 ((@T1 Type) (@T0 Type) (t1 @T0) (s1 @T1))
  :signature (@T1 @T0) Bool
  (
  (($eovc_arith-max-geq2 s1 t1) ($eo_requires_eq ($eo_model_sat ($eor_arith-max-geq2 t1 s1) false false) true true))
  )
)
(echo "smt-meta $eovc_arith-max-geq2")
; program: $eor_array-read-over-write
(program $eor_array-read-over-write ((@T0 Type) (@T1 Type) (@T2 Type) (@T3 Type) (t1 (_ (Array @T0) @T1)) (i1 @T2) (e1 @T3))
  :signature ((_ (Array @T0) @T1) @T2 @T3) Bool
  (
  (($eor_array-read-over-write t1 i1 e1) (_ (= (_ (select (_ (_ (store t1) i1) e1)) i1)) e1))
  )
)
; program: $eovc_array-read-over-write
(program $eovc_array-read-over-write ((@T3 Type) (@T2 Type) (@T0 Type) (@T1 Type) (t1 (_ (Array @T0) @T1)) (i1 @T2) (e1 @T3))
  :signature (@T3 @T2 (_ (Array @T0) @T1)) Bool
  (
  (($eovc_array-read-over-write e1 i1 t1) ($eo_requires_eq ($eo_model_sat ($eor_array-read-over-write t1 i1 e1) false false) true true))
  )
)
(echo "smt-meta $eovc_array-read-over-write")
; program: $eor_array-read-over-write2
(program $eor_array-read-over-write2 ((@T0 Type) (@T1 Type) (@T2 Type) (@T3 Type) (@T4 Type) (i1 @T2) (e1 @T4) (t1 (_ (Array @T0) @T1)) (j1 @T3))
  :signature ((_ (Array @T0) @T1) @T2 @T3 @T4 Bool) Bool
  (
  (($eor_array-read-over-write2 t1 i1 j1 e1 (_ (= (_ (= i1) j1)) false)) (_ (= (_ (select (_ (_ (store t1) i1) e1)) j1)) (_ (select t1) j1)))
  )
)
; program: $eovc_array-read-over-write2
(program $eovc_array-read-over-write2 ((@T3 Type) (@T2 Type) (@T4 Type) (@T0 Type) (@T1 Type) (t1 (_ (Array @T0) @T1)) (e1 @T4) (i1 @T2) (j1 @T3))
  :signature (@T3 @T2 @T4 (_ (Array @T0) @T1)) Bool
  (
  (($eovc_array-read-over-write2 j1 i1 e1 t1) (eo::define ((_v0 (_ (= (_ (= i1) j1)) false))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_array-read-over-write2 t1 i1 j1 e1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_array-read-over-write2")
; program: $eor_array-store-overwrite
(program $eor_array-store-overwrite ((@T0 Type) (@T1 Type) (@T2 Type) (@T3 Type) (@T4 Type) (e1 @T3) (t1 (_ (Array @T0) @T1)) (i1 @T2) (f1 @T4))
  :signature ((_ (Array @T0) @T1) @T2 @T3 @T4) Bool
  (
  (($eor_array-store-overwrite t1 i1 e1 f1) (eo::define ((_v0 (_ (store t1) i1))) (_ (= (_ (_ (store (_ _v0 e1)) i1) f1)) (_ _v0 f1))))
  )
)
; program: $eovc_array-store-overwrite
(program $eovc_array-store-overwrite ((@T4 Type) (@T3 Type) (@T2 Type) (@T0 Type) (@T1 Type) (t1 (_ (Array @T0) @T1)) (i1 @T2) (e1 @T3) (f1 @T4))
  :signature (@T4 @T3 @T2 (_ (Array @T0) @T1)) Bool
  (
  (($eovc_array-store-overwrite f1 e1 i1 t1) ($eo_requires_eq ($eo_model_sat ($eor_array-store-overwrite t1 i1 e1 f1) false false) true true))
  )
)
(echo "smt-meta $eovc_array-store-overwrite")
; program: $eor_array-store-self
(program $eor_array-store-self ((@T0 Type) (@T1 Type) (@T2 Type) (i1 @T2) (t1 (_ (Array @T0) @T1)))
  :signature ((_ (Array @T0) @T1) @T2) Bool
  (
  (($eor_array-store-self t1 i1) (_ (= (_ (_ (store t1) i1) (_ (select t1) i1))) t1))
  )
)
; program: $eovc_array-store-self
(program $eovc_array-store-self ((@T2 Type) (@T0 Type) (@T1 Type) (t1 (_ (Array @T0) @T1)) (i1 @T2))
  :signature (@T2 (_ (Array @T0) @T1)) Bool
  (
  (($eovc_array-store-self i1 t1) ($eo_requires_eq ($eo_model_sat ($eor_array-store-self t1 i1) false false) true true))
  )
)
(echo "smt-meta $eovc_array-store-self")
; program: $eor_array-read-over-write-split
(program $eor_array-read-over-write-split ((@T0 Type) (@T1 Type) (@T2 Type) (@T3 Type) (@T4 Type) (j1 @T4) (e1 @T3) (t1 (_ (Array @T0) @T1)) (i1 @T2))
  :signature ((_ (Array @T0) @T1) @T2 @T3 @T4) Bool
  (
  (($eor_array-read-over-write-split t1 i1 e1 j1) (_ (= (_ (select (_ (_ (store t1) j1) e1)) i1)) (_ (_ (ite (_ (= i1) j1)) e1) (_ (select t1) i1))))
  )
)
; program: $eovc_array-read-over-write-split
(program $eovc_array-read-over-write-split ((@T4 Type) (@T3 Type) (@T2 Type) (@T0 Type) (@T1 Type) (t1 (_ (Array @T0) @T1)) (i1 @T2) (e1 @T3) (j1 @T4))
  :signature (@T4 @T3 @T2 (_ (Array @T0) @T1)) Bool
  (
  (($eovc_array-read-over-write-split j1 e1 i1 t1) ($eo_requires_eq ($eo_model_sat ($eor_array-read-over-write-split t1 i1 e1 j1) false false) true true))
  )
)
(echo "smt-meta $eovc_array-read-over-write-split")
; program: $eor_array-store-swap
(program $eor_array-store-swap ((@T0 Type) (@T1 Type) (@T2 Type) (@T3 Type) (@T4 Type) (@T5 Type) (t1 (_ (Array @T0) @T1)) (j1 @T3) (f1 @T5) (i1 @T2) (e1 @T4))
  :signature ((_ (Array @T0) @T1) @T2 @T3 @T4 @T5 Bool) Bool
  (
  (($eor_array-store-swap t1 i1 j1 e1 f1 (_ (= (_ (= i1) j1)) false)) (eo::define ((_v0 (store t1))) (_ (= (_ (_ (store (_ (_ _v0 i1) e1)) j1) f1)) (_ (_ (store (_ (_ _v0 j1) f1)) i1) e1))))
  )
)
; program: $eovc_array-store-swap
(program $eovc_array-store-swap ((@T3 Type) (@T2 Type) (@T5 Type) (@T4 Type) (@T0 Type) (@T1 Type) (t1 (_ (Array @T0) @T1)) (e1 @T4) (f1 @T5) (i1 @T2) (j1 @T3))
  :signature (@T3 @T2 @T5 @T4 (_ (Array @T0) @T1)) Bool
  (
  (($eovc_array-store-swap j1 i1 f1 e1 t1) (eo::define ((_v0 (_ (= (_ (= i1) j1)) false))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_array-store-swap t1 i1 j1 e1 f1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_array-store-swap")
; program: $eor_bool-double-not-elim
(program $eor_bool-double-not-elim ((t1 Bool))
  :signature (Bool) Bool
  (
  (($eor_bool-double-not-elim t1) (_ (= (not (not t1))) t1))
  )
)
; program: $eovc_bool-double-not-elim
(program $eovc_bool-double-not-elim ((t1 Bool))
  :signature (Bool) Bool
  (
  (($eovc_bool-double-not-elim t1) ($eo_requires_eq ($eo_model_sat ($eor_bool-double-not-elim t1) false false) true true))
  )
)
(echo "smt-meta $eovc_bool-double-not-elim")
; program: $eor_bool-not-true
(program $eor_bool-not-true ((t1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eor_bool-not-true t1 (_ (= t1) false)) (_ (= (not t1)) true))
  )
)
; program: $eovc_bool-not-true
(program $eovc_bool-not-true ((t1 Bool))
  :signature (Bool) Bool
  (
  (($eovc_bool-not-true t1) (eo::define ((_v0 (_ (= t1) false))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bool-not-true t1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_bool-not-true")
; program: $eor_bool-not-false
(program $eor_bool-not-false ((t1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eor_bool-not-false t1 (_ (= t1) true)) (_ (= (not t1)) false))
  )
)
; program: $eovc_bool-not-false
(program $eovc_bool-not-false ((t1 Bool))
  :signature (Bool) Bool
  (
  (($eovc_bool-not-false t1) (eo::define ((_v0 (_ (= t1) true))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bool-not-false t1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_bool-not-false")
; program: $eor_bool-eq-true
(program $eor_bool-eq-true ((t1 Bool))
  :signature (Bool) Bool
  (
  (($eor_bool-eq-true t1) (_ (= (_ (= t1) true)) t1))
  )
)
; program: $eovc_bool-eq-true
(program $eovc_bool-eq-true ((t1 Bool))
  :signature (Bool) Bool
  (
  (($eovc_bool-eq-true t1) ($eo_requires_eq ($eo_model_sat ($eor_bool-eq-true t1) false false) true true))
  )
)
(echo "smt-meta $eovc_bool-eq-true")
; program: $eor_bool-eq-false
(program $eor_bool-eq-false ((t1 Bool))
  :signature (Bool) Bool
  (
  (($eor_bool-eq-false t1) (_ (= (_ (= t1) false)) (not t1)))
  )
)
; program: $eovc_bool-eq-false
(program $eovc_bool-eq-false ((t1 Bool))
  :signature (Bool) Bool
  (
  (($eovc_bool-eq-false t1) ($eo_requires_eq ($eo_model_sat ($eor_bool-eq-false t1) false false) true true))
  )
)
(echo "smt-meta $eovc_bool-eq-false")
; program: $eor_bool-eq-nrefl
(program $eor_bool-eq-nrefl ((x1 Bool))
  :signature (Bool) Bool
  (
  (($eor_bool-eq-nrefl x1) (_ (= (_ (= x1) (not x1))) false))
  )
)
; program: $eovc_bool-eq-nrefl
(program $eovc_bool-eq-nrefl ((x1 Bool))
  :signature (Bool) Bool
  (
  (($eovc_bool-eq-nrefl x1) ($eo_requires_eq ($eo_model_sat ($eor_bool-eq-nrefl x1) false false) true true))
  )
)
(echo "smt-meta $eovc_bool-eq-nrefl")
; program: $eor_bool-impl-false1
(program $eor_bool-impl-false1 ((t1 Bool))
  :signature (Bool) Bool
  (
  (($eor_bool-impl-false1 t1) (_ (= (_ (=> t1) false)) (not t1)))
  )
)
; program: $eovc_bool-impl-false1
(program $eovc_bool-impl-false1 ((t1 Bool))
  :signature (Bool) Bool
  (
  (($eovc_bool-impl-false1 t1) ($eo_requires_eq ($eo_model_sat ($eor_bool-impl-false1 t1) false false) true true))
  )
)
(echo "smt-meta $eovc_bool-impl-false1")
; program: $eor_bool-impl-false2
(program $eor_bool-impl-false2 ((t1 Bool))
  :signature (Bool) Bool
  (
  (($eor_bool-impl-false2 t1) (_ (= (_ (=> false) t1)) true))
  )
)
; program: $eovc_bool-impl-false2
(program $eovc_bool-impl-false2 ((t1 Bool))
  :signature (Bool) Bool
  (
  (($eovc_bool-impl-false2 t1) ($eo_requires_eq ($eo_model_sat ($eor_bool-impl-false2 t1) false false) true true))
  )
)
(echo "smt-meta $eovc_bool-impl-false2")
; program: $eor_bool-impl-true1
(program $eor_bool-impl-true1 ((t1 Bool))
  :signature (Bool) Bool
  (
  (($eor_bool-impl-true1 t1) (_ (= (_ (=> t1) true)) true))
  )
)
; program: $eovc_bool-impl-true1
(program $eovc_bool-impl-true1 ((t1 Bool))
  :signature (Bool) Bool
  (
  (($eovc_bool-impl-true1 t1) ($eo_requires_eq ($eo_model_sat ($eor_bool-impl-true1 t1) false false) true true))
  )
)
(echo "smt-meta $eovc_bool-impl-true1")
; program: $eor_bool-impl-true2
(program $eor_bool-impl-true2 ((t1 Bool))
  :signature (Bool) Bool
  (
  (($eor_bool-impl-true2 t1) (_ (= (_ (=> true) t1)) t1))
  )
)
; program: $eovc_bool-impl-true2
(program $eovc_bool-impl-true2 ((t1 Bool))
  :signature (Bool) Bool
  (
  (($eovc_bool-impl-true2 t1) ($eo_requires_eq ($eo_model_sat ($eor_bool-impl-true2 t1) false false) true true))
  )
)
(echo "smt-meta $eovc_bool-impl-true2")
; program: $eor_bool-impl-elim
(program $eor_bool-impl-elim ((t1 Bool) (s1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eor_bool-impl-elim t1 s1) (_ (= (_ (=> t1) s1)) (_ (or (not t1)) (_ (or s1) false))))
  )
)
; program: $eovc_bool-impl-elim
(program $eovc_bool-impl-elim ((t1 Bool) (s1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_bool-impl-elim s1 t1) ($eo_requires_eq ($eo_model_sat ($eor_bool-impl-elim t1 s1) false false) true true))
  )
)
(echo "smt-meta $eovc_bool-impl-elim")
; program: $eor_bool-dual-impl-eq
(program $eor_bool-dual-impl-eq ((t1 Bool) (s1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eor_bool-dual-impl-eq t1 s1) (_ (= (_ (and (_ (=> t1) s1)) (_ (and (_ (=> s1) t1)) true))) (_ (= t1) s1)))
  )
)
; program: $eovc_bool-dual-impl-eq
(program $eovc_bool-dual-impl-eq ((t1 Bool) (s1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_bool-dual-impl-eq s1 t1) ($eo_requires_eq ($eo_model_sat ($eor_bool-dual-impl-eq t1 s1) false false) true true))
  )
)
(echo "smt-meta $eovc_bool-dual-impl-eq")
; program: $eor_bool-and-conf.fev2
(program $eor_bool-and-conf.fev2 (($eo_1 Bool) (w1 Bool) (xs1 Bool) ($eo_2 Bool))
  :signature (Bool Bool Bool Bool) Bool
  (
  (($eor_bool-and-conf.fev2 $eo_1 w1 xs1 $eo_2) (_ (= $eo_2) false))
  )
)
; program: $eor_bool-and-conf.fev1
(program $eor_bool-and-conf.fev1 ((zs1 Bool) (ys1 Bool) (xs1 Bool) (w1 Bool) ($eo_1 Bool))
  :signature (Bool Bool Bool Bool Bool) Bool
  (
  (($eor_bool-and-conf.fev1 zs1 w1 ys1 xs1 $eo_1) ($eor_bool-and-conf.fev2 $eo_1 w1 xs1 (eo::list_concat and xs1 (_ (and w1) $eo_1))))
  )
)
; program: $eor_bool-and-conf
(program $eor_bool-and-conf ((xs1 Bool) (ys1 Bool) (w1 Bool) (zs1 Bool))
  :signature (Bool Bool Bool Bool) Bool
  (
  (($eor_bool-and-conf xs1 w1 ys1 zs1) ($eor_bool-and-conf.fev1 zs1 w1 ys1 xs1 (eo::list_concat and ys1 (_ (and (not w1)) zs1))))
  )
)
; program: $eovc_bool-and-conf
(program $eovc_bool-and-conf ((xs1 Bool) (w1 Bool) (ys1 Bool) (zs1 Bool))
  :signature (Bool Bool Bool Bool) Bool
  (
  (($eovc_bool-and-conf zs1 ys1 w1 xs1) ($eo_requires_eq ($eo_model_sat ($eor_bool-and-conf xs1 w1 ys1 zs1) false false) true true))
  )
)
(echo "smt-meta $eovc_bool-and-conf")
; program: $eor_bool-and-conf2.fev2
(program $eor_bool-and-conf2.fev2 (($eo_1 Bool) (w1 Bool) (xs1 Bool) ($eo_2 Bool))
  :signature (Bool Bool Bool Bool) Bool
  (
  (($eor_bool-and-conf2.fev2 $eo_1 w1 xs1 $eo_2) (_ (= $eo_2) false))
  )
)
; program: $eor_bool-and-conf2.fev1
(program $eor_bool-and-conf2.fev1 ((zs1 Bool) (ys1 Bool) (xs1 Bool) (w1 Bool) ($eo_1 Bool))
  :signature (Bool Bool Bool Bool Bool) Bool
  (
  (($eor_bool-and-conf2.fev1 zs1 w1 ys1 xs1 $eo_1) ($eor_bool-and-conf2.fev2 $eo_1 w1 xs1 (eo::list_concat and xs1 (_ (and (not w1)) $eo_1))))
  )
)
; program: $eor_bool-and-conf2
(program $eor_bool-and-conf2 ((xs1 Bool) (ys1 Bool) (w1 Bool) (zs1 Bool))
  :signature (Bool Bool Bool Bool) Bool
  (
  (($eor_bool-and-conf2 xs1 w1 ys1 zs1) ($eor_bool-and-conf2.fev1 zs1 w1 ys1 xs1 (eo::list_concat and ys1 (_ (and w1) zs1))))
  )
)
; program: $eovc_bool-and-conf2
(program $eovc_bool-and-conf2 ((xs1 Bool) (w1 Bool) (ys1 Bool) (zs1 Bool))
  :signature (Bool Bool Bool Bool) Bool
  (
  (($eovc_bool-and-conf2 zs1 ys1 w1 xs1) ($eo_requires_eq ($eo_model_sat ($eor_bool-and-conf2 xs1 w1 ys1 zs1) false false) true true))
  )
)
(echo "smt-meta $eovc_bool-and-conf2")
; program: $eor_bool-or-taut.fev2
(program $eor_bool-or-taut.fev2 (($eo_1 Bool) (w1 Bool) (xs1 Bool) ($eo_2 Bool))
  :signature (Bool Bool Bool Bool) Bool
  (
  (($eor_bool-or-taut.fev2 $eo_1 w1 xs1 $eo_2) (_ (= $eo_2) true))
  )
)
; program: $eor_bool-or-taut.fev1
(program $eor_bool-or-taut.fev1 ((zs1 Bool) (ys1 Bool) (xs1 Bool) (w1 Bool) ($eo_1 Bool))
  :signature (Bool Bool Bool Bool Bool) Bool
  (
  (($eor_bool-or-taut.fev1 zs1 w1 ys1 xs1 $eo_1) ($eor_bool-or-taut.fev2 $eo_1 w1 xs1 (eo::list_concat or xs1 (_ (or w1) $eo_1))))
  )
)
; program: $eor_bool-or-taut
(program $eor_bool-or-taut ((xs1 Bool) (ys1 Bool) (w1 Bool) (zs1 Bool))
  :signature (Bool Bool Bool Bool) Bool
  (
  (($eor_bool-or-taut xs1 w1 ys1 zs1) ($eor_bool-or-taut.fev1 zs1 w1 ys1 xs1 (eo::list_concat or ys1 (_ (or (not w1)) zs1))))
  )
)
; program: $eovc_bool-or-taut
(program $eovc_bool-or-taut ((xs1 Bool) (w1 Bool) (ys1 Bool) (zs1 Bool))
  :signature (Bool Bool Bool Bool) Bool
  (
  (($eovc_bool-or-taut zs1 ys1 w1 xs1) ($eo_requires_eq ($eo_model_sat ($eor_bool-or-taut xs1 w1 ys1 zs1) false false) true true))
  )
)
(echo "smt-meta $eovc_bool-or-taut")
; program: $eor_bool-or-taut2.fev2
(program $eor_bool-or-taut2.fev2 (($eo_1 Bool) (w1 Bool) (xs1 Bool) ($eo_2 Bool))
  :signature (Bool Bool Bool Bool) Bool
  (
  (($eor_bool-or-taut2.fev2 $eo_1 w1 xs1 $eo_2) (_ (= $eo_2) true))
  )
)
; program: $eor_bool-or-taut2.fev1
(program $eor_bool-or-taut2.fev1 ((zs1 Bool) (ys1 Bool) (xs1 Bool) (w1 Bool) ($eo_1 Bool))
  :signature (Bool Bool Bool Bool Bool) Bool
  (
  (($eor_bool-or-taut2.fev1 zs1 w1 ys1 xs1 $eo_1) ($eor_bool-or-taut2.fev2 $eo_1 w1 xs1 (eo::list_concat or xs1 (_ (or (not w1)) $eo_1))))
  )
)
; program: $eor_bool-or-taut2
(program $eor_bool-or-taut2 ((xs1 Bool) (ys1 Bool) (w1 Bool) (zs1 Bool))
  :signature (Bool Bool Bool Bool) Bool
  (
  (($eor_bool-or-taut2 xs1 w1 ys1 zs1) ($eor_bool-or-taut2.fev1 zs1 w1 ys1 xs1 (eo::list_concat or ys1 (_ (or w1) zs1))))
  )
)
; program: $eovc_bool-or-taut2
(program $eovc_bool-or-taut2 ((xs1 Bool) (w1 Bool) (ys1 Bool) (zs1 Bool))
  :signature (Bool Bool Bool Bool) Bool
  (
  (($eovc_bool-or-taut2 zs1 ys1 w1 xs1) ($eo_requires_eq ($eo_model_sat ($eor_bool-or-taut2 xs1 w1 ys1 zs1) false false) true true))
  )
)
(echo "smt-meta $eovc_bool-or-taut2")
; program: $eor_bool-or-de-morgan.fev1
(program $eor_bool-or-de-morgan.fev1 ((y1 Bool) (zs1 Bool) (x1 Bool) ($eo_1 Bool))
  :signature (Bool Bool Bool Bool) Bool
  (
  (($eor_bool-or-de-morgan.fev1 zs1 y1 x1 $eo_1) (_ (= (not (_ (or x1) (_ (or y1) zs1)))) (_ (and (not x1)) (_ (and (not $eo_1)) true))))
  )
)
; program: $eor_bool-or-de-morgan
(program $eor_bool-or-de-morgan ((x1 Bool) (y1 Bool) (zs1 Bool))
  :signature (Bool Bool Bool) Bool
  (
  (($eor_bool-or-de-morgan x1 y1 zs1) ($eor_bool-or-de-morgan.fev1 zs1 y1 x1 ($singleton_elim (_ (or y1) zs1))))
  )
)
; program: $eovc_bool-or-de-morgan
(program $eovc_bool-or-de-morgan ((x1 Bool) (y1 Bool) (zs1 Bool))
  :signature (Bool Bool Bool) Bool
  (
  (($eovc_bool-or-de-morgan zs1 y1 x1) ($eo_requires_eq ($eo_model_sat ($eor_bool-or-de-morgan x1 y1 zs1) false false) true true))
  )
)
(echo "smt-meta $eovc_bool-or-de-morgan")
; program: $eor_bool-implies-de-morgan
(program $eor_bool-implies-de-morgan ((x1 Bool) (y1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eor_bool-implies-de-morgan x1 y1) (_ (= (not (_ (=> x1) y1))) (_ (and x1) (_ (and (not y1)) true))))
  )
)
; program: $eovc_bool-implies-de-morgan
(program $eovc_bool-implies-de-morgan ((x1 Bool) (y1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_bool-implies-de-morgan y1 x1) ($eo_requires_eq ($eo_model_sat ($eor_bool-implies-de-morgan x1 y1) false false) true true))
  )
)
(echo "smt-meta $eovc_bool-implies-de-morgan")
; program: $eor_bool-and-de-morgan.fev1
(program $eor_bool-and-de-morgan.fev1 ((y1 Bool) (zs1 Bool) (x1 Bool) ($eo_1 Bool))
  :signature (Bool Bool Bool Bool) Bool
  (
  (($eor_bool-and-de-morgan.fev1 zs1 y1 x1 $eo_1) (_ (= (not (_ (and x1) (_ (and y1) zs1)))) (_ (or (not x1)) (_ (or (not $eo_1)) false))))
  )
)
; program: $eor_bool-and-de-morgan
(program $eor_bool-and-de-morgan ((x1 Bool) (y1 Bool) (zs1 Bool))
  :signature (Bool Bool Bool) Bool
  (
  (($eor_bool-and-de-morgan x1 y1 zs1) ($eor_bool-and-de-morgan.fev1 zs1 y1 x1 ($singleton_elim (_ (and y1) zs1))))
  )
)
; program: $eovc_bool-and-de-morgan
(program $eovc_bool-and-de-morgan ((x1 Bool) (y1 Bool) (zs1 Bool))
  :signature (Bool Bool Bool) Bool
  (
  (($eovc_bool-and-de-morgan zs1 y1 x1) ($eo_requires_eq ($eo_model_sat ($eor_bool-and-de-morgan x1 y1 zs1) false false) true true))
  )
)
(echo "smt-meta $eovc_bool-and-de-morgan")
; program: $eor_bool-or-and-distrib.fev1
(program $eor_bool-or-and-distrib.fev1 ((y2 Bool) (ys1 Bool) (y1 Bool) ($eo_1 Bool) (z1 Bool) (zs1 Bool))
  :signature (Bool Bool Bool Bool Bool Bool) Bool
  (
  (($eor_bool-or-and-distrib.fev1 zs1 z1 ys1 y2 y1 $eo_1) (eo::define ((_v0 (_ (or z1) zs1))) (_ (= (_ (or (_ (and y1) (_ (and y2) ys1))) _v0)) (_ (and (_ (or y1) _v0)) (_ (and (_ (or $eo_1) _v0)) true)))))
  )
)
; program: $eor_bool-or-and-distrib
(program $eor_bool-or-and-distrib ((zs1 Bool) (z1 Bool) (y1 Bool) (y2 Bool) (ys1 Bool))
  :signature (Bool Bool Bool Bool Bool) Bool
  (
  (($eor_bool-or-and-distrib y1 y2 ys1 z1 zs1) ($eor_bool-or-and-distrib.fev1 zs1 z1 ys1 y2 y1 ($singleton_elim (_ (and y2) ys1))))
  )
)
; program: $eovc_bool-or-and-distrib
(program $eovc_bool-or-and-distrib ((y1 Bool) (y2 Bool) (ys1 Bool) (z1 Bool) (zs1 Bool))
  :signature (Bool Bool Bool Bool Bool) Bool
  (
  (($eovc_bool-or-and-distrib zs1 z1 ys1 y2 y1) ($eo_requires_eq ($eo_model_sat ($eor_bool-or-and-distrib y1 y2 ys1 z1 zs1) false false) true true))
  )
)
(echo "smt-meta $eovc_bool-or-and-distrib")
; program: $eor_bool-implies-or-distrib.fev1
(program $eor_bool-implies-or-distrib.fev1 ((y2 Bool) (ys1 Bool) (y1 Bool) ($eo_1 Bool) (z1 Bool))
  :signature (Bool Bool Bool Bool Bool) Bool
  (
  (($eor_bool-implies-or-distrib.fev1 z1 ys1 y2 y1 $eo_1) (_ (= (_ (=> (_ (or y1) (_ (or y2) ys1))) z1)) (_ (and (_ (=> y1) z1)) (_ (and (_ (=> $eo_1) z1)) true))))
  )
)
; program: $eor_bool-implies-or-distrib
(program $eor_bool-implies-or-distrib ((z1 Bool) (y1 Bool) (y2 Bool) (ys1 Bool))
  :signature (Bool Bool Bool Bool) Bool
  (
  (($eor_bool-implies-or-distrib y1 y2 ys1 z1) ($eor_bool-implies-or-distrib.fev1 z1 ys1 y2 y1 ($singleton_elim (_ (or y2) ys1))))
  )
)
; program: $eovc_bool-implies-or-distrib
(program $eovc_bool-implies-or-distrib ((y1 Bool) (y2 Bool) (ys1 Bool) (z1 Bool))
  :signature (Bool Bool Bool Bool) Bool
  (
  (($eovc_bool-implies-or-distrib z1 ys1 y2 y1) ($eo_requires_eq ($eo_model_sat ($eor_bool-implies-or-distrib y1 y2 ys1 z1) false false) true true))
  )
)
(echo "smt-meta $eovc_bool-implies-or-distrib")
; program: $eor_bool-xor-refl
(program $eor_bool-xor-refl ((x1 Bool))
  :signature (Bool) Bool
  (
  (($eor_bool-xor-refl x1) (_ (= (_ (xor x1) x1)) false))
  )
)
; program: $eovc_bool-xor-refl
(program $eovc_bool-xor-refl ((x1 Bool))
  :signature (Bool) Bool
  (
  (($eovc_bool-xor-refl x1) ($eo_requires_eq ($eo_model_sat ($eor_bool-xor-refl x1) false false) true true))
  )
)
(echo "smt-meta $eovc_bool-xor-refl")
; program: $eor_bool-xor-nrefl
(program $eor_bool-xor-nrefl ((x1 Bool))
  :signature (Bool) Bool
  (
  (($eor_bool-xor-nrefl x1) (_ (= (_ (xor x1) (not x1))) true))
  )
)
; program: $eovc_bool-xor-nrefl
(program $eovc_bool-xor-nrefl ((x1 Bool))
  :signature (Bool) Bool
  (
  (($eovc_bool-xor-nrefl x1) ($eo_requires_eq ($eo_model_sat ($eor_bool-xor-nrefl x1) false false) true true))
  )
)
(echo "smt-meta $eovc_bool-xor-nrefl")
; program: $eor_bool-xor-false
(program $eor_bool-xor-false ((x1 Bool))
  :signature (Bool) Bool
  (
  (($eor_bool-xor-false x1) (_ (= (_ (xor x1) false)) x1))
  )
)
; program: $eovc_bool-xor-false
(program $eovc_bool-xor-false ((x1 Bool))
  :signature (Bool) Bool
  (
  (($eovc_bool-xor-false x1) ($eo_requires_eq ($eo_model_sat ($eor_bool-xor-false x1) false false) true true))
  )
)
(echo "smt-meta $eovc_bool-xor-false")
; program: $eor_bool-xor-true
(program $eor_bool-xor-true ((x1 Bool))
  :signature (Bool) Bool
  (
  (($eor_bool-xor-true x1) (_ (= (_ (xor x1) true)) (not x1)))
  )
)
; program: $eovc_bool-xor-true
(program $eovc_bool-xor-true ((x1 Bool))
  :signature (Bool) Bool
  (
  (($eovc_bool-xor-true x1) ($eo_requires_eq ($eo_model_sat ($eor_bool-xor-true x1) false false) true true))
  )
)
(echo "smt-meta $eovc_bool-xor-true")
; program: $eor_bool-xor-comm
(program $eor_bool-xor-comm ((y1 Bool) (x1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eor_bool-xor-comm x1 y1) (_ (= (_ (xor x1) y1)) (_ (xor y1) x1)))
  )
)
; program: $eovc_bool-xor-comm
(program $eovc_bool-xor-comm ((x1 Bool) (y1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_bool-xor-comm y1 x1) ($eo_requires_eq ($eo_model_sat ($eor_bool-xor-comm x1 y1) false false) true true))
  )
)
(echo "smt-meta $eovc_bool-xor-comm")
; program: $eor_bool-xor-elim
(program $eor_bool-xor-elim ((x1 Bool) (y1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eor_bool-xor-elim x1 y1) (_ (= (_ (xor x1) y1)) (_ (= (not x1)) y1)))
  )
)
; program: $eovc_bool-xor-elim
(program $eovc_bool-xor-elim ((x1 Bool) (y1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_bool-xor-elim y1 x1) ($eo_requires_eq ($eo_model_sat ($eor_bool-xor-elim x1 y1) false false) true true))
  )
)
(echo "smt-meta $eovc_bool-xor-elim")
; program: $eor_bool-not-xor-elim
(program $eor_bool-not-xor-elim ((x1 Bool) (y1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eor_bool-not-xor-elim x1 y1) (_ (= (not (_ (xor x1) y1))) (_ (= x1) y1)))
  )
)
; program: $eovc_bool-not-xor-elim
(program $eovc_bool-not-xor-elim ((x1 Bool) (y1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_bool-not-xor-elim y1 x1) ($eo_requires_eq ($eo_model_sat ($eor_bool-not-xor-elim x1 y1) false false) true true))
  )
)
(echo "smt-meta $eovc_bool-not-xor-elim")
; program: $eor_bool-not-eq-elim1
(program $eor_bool-not-eq-elim1 ((x1 Bool) (y1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eor_bool-not-eq-elim1 x1 y1) (_ (= (not (_ (= x1) y1))) (_ (= (not x1)) y1)))
  )
)
; program: $eovc_bool-not-eq-elim1
(program $eovc_bool-not-eq-elim1 ((x1 Bool) (y1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_bool-not-eq-elim1 y1 x1) ($eo_requires_eq ($eo_model_sat ($eor_bool-not-eq-elim1 x1 y1) false false) true true))
  )
)
(echo "smt-meta $eovc_bool-not-eq-elim1")
; program: $eor_bool-not-eq-elim2
(program $eor_bool-not-eq-elim2 ((x1 Bool) (y1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eor_bool-not-eq-elim2 x1 y1) (eo::define ((_v0 (= x1))) (_ (= (not (_ _v0 y1))) (_ _v0 (not y1)))))
  )
)
; program: $eovc_bool-not-eq-elim2
(program $eovc_bool-not-eq-elim2 ((x1 Bool) (y1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_bool-not-eq-elim2 y1 x1) ($eo_requires_eq ($eo_model_sat ($eor_bool-not-eq-elim2 x1 y1) false false) true true))
  )
)
(echo "smt-meta $eovc_bool-not-eq-elim2")
; program: $eor_ite-neg-branch
(program $eor_ite-neg-branch ((y1 Bool) (c1 Bool) (x1 Bool))
  :signature (Bool Bool Bool Bool) Bool
  (
  (($eor_ite-neg-branch c1 x1 y1 (_ (= (not y1)) x1)) (_ (= (_ (_ (ite c1) x1) y1)) (_ (= c1) x1)))
  )
)
; program: $eovc_ite-neg-branch
(program $eovc_ite-neg-branch ((c1 Bool) (y1 Bool) (x1 Bool))
  :signature (Bool Bool Bool) Bool
  (
  (($eovc_ite-neg-branch x1 y1 c1) (eo::define ((_v0 (_ (= (not y1)) x1))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_ite-neg-branch c1 x1 y1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_ite-neg-branch")
; program: $eor_ite-then-true
(program $eor_ite-then-true ((c1 Bool) (x1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eor_ite-then-true c1 x1) (_ (= (_ (_ (ite c1) true) x1)) (_ (or c1) (_ (or x1) false))))
  )
)
; program: $eovc_ite-then-true
(program $eovc_ite-then-true ((c1 Bool) (x1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_ite-then-true x1 c1) ($eo_requires_eq ($eo_model_sat ($eor_ite-then-true c1 x1) false false) true true))
  )
)
(echo "smt-meta $eovc_ite-then-true")
; program: $eor_ite-else-false
(program $eor_ite-else-false ((c1 Bool) (x1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eor_ite-else-false c1 x1) (_ (= (_ (_ (ite c1) x1) false)) (_ (and c1) (_ (and x1) true))))
  )
)
; program: $eovc_ite-else-false
(program $eovc_ite-else-false ((c1 Bool) (x1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_ite-else-false x1 c1) ($eo_requires_eq ($eo_model_sat ($eor_ite-else-false c1 x1) false false) true true))
  )
)
(echo "smt-meta $eovc_ite-else-false")
; program: $eor_ite-then-false
(program $eor_ite-then-false ((c1 Bool) (x1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eor_ite-then-false c1 x1) (_ (= (_ (_ (ite c1) false) x1)) (_ (and (not c1)) (_ (and x1) true))))
  )
)
; program: $eovc_ite-then-false
(program $eovc_ite-then-false ((c1 Bool) (x1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_ite-then-false x1 c1) ($eo_requires_eq ($eo_model_sat ($eor_ite-then-false c1 x1) false false) true true))
  )
)
(echo "smt-meta $eovc_ite-then-false")
; program: $eor_ite-else-true
(program $eor_ite-else-true ((c1 Bool) (x1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eor_ite-else-true c1 x1) (_ (= (_ (_ (ite c1) x1) true)) (_ (or (not c1)) (_ (or x1) false))))
  )
)
; program: $eovc_ite-else-true
(program $eovc_ite-else-true ((c1 Bool) (x1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_ite-else-true x1 c1) ($eo_requires_eq ($eo_model_sat ($eor_ite-else-true c1 x1) false false) true true))
  )
)
(echo "smt-meta $eovc_ite-else-true")
; program: $eor_ite-then-lookahead-self
(program $eor_ite-then-lookahead-self ((c1 Bool) (x1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eor_ite-then-lookahead-self c1 x1) (eo::define ((_v0 (ite c1))) (_ (= (_ (_ _v0 c1) x1)) (_ (_ _v0 true) x1))))
  )
)
; program: $eovc_ite-then-lookahead-self
(program $eovc_ite-then-lookahead-self ((c1 Bool) (x1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_ite-then-lookahead-self x1 c1) ($eo_requires_eq ($eo_model_sat ($eor_ite-then-lookahead-self c1 x1) false false) true true))
  )
)
(echo "smt-meta $eovc_ite-then-lookahead-self")
; program: $eor_ite-else-lookahead-self
(program $eor_ite-else-lookahead-self ((c1 Bool) (x1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eor_ite-else-lookahead-self c1 x1) (eo::define ((_v0 (_ (ite c1) x1))) (_ (= (_ _v0 c1)) (_ _v0 false))))
  )
)
; program: $eovc_ite-else-lookahead-self
(program $eovc_ite-else-lookahead-self ((c1 Bool) (x1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_ite-else-lookahead-self x1 c1) ($eo_requires_eq ($eo_model_sat ($eor_ite-else-lookahead-self c1 x1) false false) true true))
  )
)
(echo "smt-meta $eovc_ite-else-lookahead-self")
; program: $eor_ite-then-lookahead-not-self
(program $eor_ite-then-lookahead-not-self ((c1 Bool) (x1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eor_ite-then-lookahead-not-self c1 x1) (eo::define ((_v0 (ite c1))) (_ (= (_ (_ _v0 (not c1)) x1)) (_ (_ _v0 false) x1))))
  )
)
; program: $eovc_ite-then-lookahead-not-self
(program $eovc_ite-then-lookahead-not-self ((c1 Bool) (x1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_ite-then-lookahead-not-self x1 c1) ($eo_requires_eq ($eo_model_sat ($eor_ite-then-lookahead-not-self c1 x1) false false) true true))
  )
)
(echo "smt-meta $eovc_ite-then-lookahead-not-self")
; program: $eor_ite-else-lookahead-not-self
(program $eor_ite-else-lookahead-not-self ((c1 Bool) (x1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eor_ite-else-lookahead-not-self c1 x1) (eo::define ((_v0 (_ (ite c1) x1))) (_ (= (_ _v0 (not c1))) (_ _v0 true))))
  )
)
; program: $eovc_ite-else-lookahead-not-self
(program $eovc_ite-else-lookahead-not-self ((c1 Bool) (x1 Bool))
  :signature (Bool Bool) Bool
  (
  (($eovc_ite-else-lookahead-not-self x1 c1) ($eo_requires_eq ($eo_model_sat ($eor_ite-else-lookahead-not-self c1 x1) false false) true true))
  )
)
(echo "smt-meta $eovc_ite-else-lookahead-not-self")
; program: $eor_ite-expand
(program $eor_ite-expand ((x1 Bool) (c1 Bool) (y1 Bool))
  :signature (Bool Bool Bool) Bool
  (
  (($eor_ite-expand c1 x1 y1) (_ (= (_ (_ (ite c1) x1) y1)) (_ (and (_ (or (not c1)) (_ (or x1) false))) (_ (and (_ (or c1) (_ (or y1) false))) true))))
  )
)
; program: $eovc_ite-expand
(program $eovc_ite-expand ((c1 Bool) (x1 Bool) (y1 Bool))
  :signature (Bool Bool Bool) Bool
  (
  (($eovc_ite-expand y1 x1 c1) ($eo_requires_eq ($eo_model_sat ($eor_ite-expand c1 x1 y1) false false) true true))
  )
)
(echo "smt-meta $eovc_ite-expand")
; program: $eor_bool-not-ite-elim
(program $eor_bool-not-ite-elim ((c1 Bool) (x1 Bool) (y1 Bool))
  :signature (Bool Bool Bool) Bool
  (
  (($eor_bool-not-ite-elim c1 x1 y1) (eo::define ((_v0 (ite c1))) (_ (= (not (_ (_ _v0 x1) y1))) (_ (_ _v0 (not x1)) (not y1)))))
  )
)
; program: $eovc_bool-not-ite-elim
(program $eovc_bool-not-ite-elim ((c1 Bool) (x1 Bool) (y1 Bool))
  :signature (Bool Bool Bool) Bool
  (
  (($eovc_bool-not-ite-elim y1 x1 c1) ($eo_requires_eq ($eo_model_sat ($eor_bool-not-ite-elim c1 x1 y1) false false) true true))
  )
)
(echo "smt-meta $eovc_bool-not-ite-elim")
; program: $eor_ite-true-cond
(program $eor_ite-true-cond ((@T0 Type) (@T1 Type) (y1 @T1) (x1 @T0))
  :signature (@T0 @T1) Bool
  (
  (($eor_ite-true-cond x1 y1) (_ (= (_ (_ (ite true) x1) y1)) x1))
  )
)
; program: $eovc_ite-true-cond
(program $eovc_ite-true-cond ((@T1 Type) (@T0 Type) (x1 @T0) (y1 @T1))
  :signature (@T1 @T0) Bool
  (
  (($eovc_ite-true-cond y1 x1) ($eo_requires_eq ($eo_model_sat ($eor_ite-true-cond x1 y1) false false) true true))
  )
)
(echo "smt-meta $eovc_ite-true-cond")
; program: $eor_ite-false-cond
(program $eor_ite-false-cond ((@T0 Type) (@T1 Type) (x1 @T0) (y1 @T1))
  :signature (@T0 @T1) Bool
  (
  (($eor_ite-false-cond x1 y1) (_ (= (_ (_ (ite false) x1) y1)) y1))
  )
)
; program: $eovc_ite-false-cond
(program $eovc_ite-false-cond ((@T1 Type) (@T0 Type) (x1 @T0) (y1 @T1))
  :signature (@T1 @T0) Bool
  (
  (($eovc_ite-false-cond y1 x1) ($eo_requires_eq ($eo_model_sat ($eor_ite-false-cond x1 y1) false false) true true))
  )
)
(echo "smt-meta $eovc_ite-false-cond")
; program: $eor_ite-not-cond
(program $eor_ite-not-cond ((@T0 Type) (@T1 Type) (c1 Bool) (y1 @T1) (x1 @T0))
  :signature (Bool @T0 @T1) Bool
  (
  (($eor_ite-not-cond c1 x1 y1) (_ (= (_ (_ (ite (not c1)) x1) y1)) (_ (_ (ite c1) y1) x1)))
  )
)
; program: $eovc_ite-not-cond
(program $eovc_ite-not-cond ((@T1 Type) (@T0 Type) (c1 Bool) (x1 @T0) (y1 @T1))
  :signature (@T1 @T0 Bool) Bool
  (
  (($eovc_ite-not-cond y1 x1 c1) ($eo_requires_eq ($eo_model_sat ($eor_ite-not-cond c1 x1 y1) false false) true true))
  )
)
(echo "smt-meta $eovc_ite-not-cond")
; program: $eor_ite-eq-branch
(program $eor_ite-eq-branch ((@T0 Type) (c1 Bool) (x1 @T0))
  :signature (Bool @T0) Bool
  (
  (($eor_ite-eq-branch c1 x1) (_ (= (_ (_ (ite c1) x1) x1)) x1))
  )
)
; program: $eovc_ite-eq-branch
(program $eovc_ite-eq-branch ((@T0 Type) (c1 Bool) (x1 @T0))
  :signature (@T0 Bool) Bool
  (
  (($eovc_ite-eq-branch x1 c1) ($eo_requires_eq ($eo_model_sat ($eor_ite-eq-branch c1 x1) false false) true true))
  )
)
(echo "smt-meta $eovc_ite-eq-branch")
; program: $eor_ite-then-lookahead
(program $eor_ite-then-lookahead ((@T0 Type) (@T1 Type) (@T2 Type) (y1 @T1) (c1 Bool) (x1 @T0) (z1 @T2))
  :signature (Bool @T0 @T1 @T2) Bool
  (
  (($eor_ite-then-lookahead c1 x1 y1 z1) (eo::define ((_v0 (ite c1))) (eo::define ((_v1 (_ _v0 x1))) (_ (= (_ (_ _v0 (_ _v1 y1)) z1)) (_ _v1 z1)))))
  )
)
; program: $eovc_ite-then-lookahead
(program $eovc_ite-then-lookahead ((@T2 Type) (@T1 Type) (@T0 Type) (c1 Bool) (x1 @T0) (y1 @T1) (z1 @T2))
  :signature (@T2 @T1 @T0 Bool) Bool
  (
  (($eovc_ite-then-lookahead z1 y1 x1 c1) ($eo_requires_eq ($eo_model_sat ($eor_ite-then-lookahead c1 x1 y1 z1) false false) true true))
  )
)
(echo "smt-meta $eovc_ite-then-lookahead")
; program: $eor_ite-else-lookahead
(program $eor_ite-else-lookahead ((@T0 Type) (@T1 Type) (@T2 Type) (y1 @T1) (c1 Bool) (x1 @T0) (z1 @T2))
  :signature (Bool @T0 @T1 @T2) Bool
  (
  (($eor_ite-else-lookahead c1 x1 y1 z1) (eo::define ((_v0 (ite c1))) (eo::define ((_v1 (_ _v0 x1))) (_ (= (_ _v1 (_ (_ _v0 y1) z1))) (_ _v1 z1)))))
  )
)
; program: $eovc_ite-else-lookahead
(program $eovc_ite-else-lookahead ((@T2 Type) (@T1 Type) (@T0 Type) (c1 Bool) (x1 @T0) (y1 @T1) (z1 @T2))
  :signature (@T2 @T1 @T0 Bool) Bool
  (
  (($eovc_ite-else-lookahead z1 y1 x1 c1) ($eo_requires_eq ($eo_model_sat ($eor_ite-else-lookahead c1 x1 y1 z1) false false) true true))
  )
)
(echo "smt-meta $eovc_ite-else-lookahead")
; program: $eor_ite-then-neg-lookahead
(program $eor_ite-then-neg-lookahead ((@T0 Type) (@T1 Type) (@T2 Type) (x1 @T0) (c1 Bool) (y1 @T1) (z1 @T2))
  :signature (Bool @T0 @T1 @T2) Bool
  (
  (($eor_ite-then-neg-lookahead c1 x1 y1 z1) (eo::define ((_v0 (ite c1))) (_ (= (_ (_ _v0 (_ (_ (ite (not c1)) x1) y1)) z1)) (_ (_ _v0 y1) z1))))
  )
)
; program: $eovc_ite-then-neg-lookahead
(program $eovc_ite-then-neg-lookahead ((@T2 Type) (@T1 Type) (@T0 Type) (c1 Bool) (x1 @T0) (y1 @T1) (z1 @T2))
  :signature (@T2 @T1 @T0 Bool) Bool
  (
  (($eovc_ite-then-neg-lookahead z1 y1 x1 c1) ($eo_requires_eq ($eo_model_sat ($eor_ite-then-neg-lookahead c1 x1 y1 z1) false false) true true))
  )
)
(echo "smt-meta $eovc_ite-then-neg-lookahead")
; program: $eor_ite-else-neg-lookahead
(program $eor_ite-else-neg-lookahead ((@T0 Type) (@T1 Type) (@T2 Type) (z1 @T2) (c1 Bool) (x1 @T0) (y1 @T1))
  :signature (Bool @T0 @T1 @T2) Bool
  (
  (($eor_ite-else-neg-lookahead c1 x1 y1 z1) (eo::define ((_v0 (_ (ite c1) x1))) (_ (= (_ _v0 (_ (_ (ite (not c1)) y1) z1))) (_ _v0 y1))))
  )
)
; program: $eovc_ite-else-neg-lookahead
(program $eovc_ite-else-neg-lookahead ((@T2 Type) (@T1 Type) (@T0 Type) (c1 Bool) (x1 @T0) (y1 @T1) (z1 @T2))
  :signature (@T2 @T1 @T0 Bool) Bool
  (
  (($eovc_ite-else-neg-lookahead z1 y1 x1 c1) ($eo_requires_eq ($eo_model_sat ($eor_ite-else-neg-lookahead c1 x1 y1 z1) false false) true true))
  )
)
(echo "smt-meta $eovc_ite-else-neg-lookahead")
; program: $eor_bv-concat-extract-merge.fev1
(program $eor_bv-concat-extract-merge.fev1 ((@n2 Int) (@n1 Int) (@n0 Int) (ys1 (BitVec @n2)) (s1 (BitVec @n1)) (i1 Int) (k1 Int) (xs1 (BitVec @n0)) (j1 Int) (j2 Int) ($eo_2 (BitVec @n0)) ($eo_1 (BitVec @n0)))
  :signature ((BitVec @n2) (BitVec @n1) Int Int (BitVec @n0) Int Int (BitVec @n0) (BitVec @n0)) Bool
  (
  (($eor_bv-concat-extract-merge.fev1 ys1 s1 i1 k1 xs1 j1 j2 $eo_1 $eo_2) (_ (= $eo_2) $eo_1))
  )
)
; program: $eor_bv-concat-extract-merge
(program $eor_bv-concat-extract-merge ((@n0 Int) (@n1 Int) (@n2 Int) (xs1 (BitVec @n0)) (k1 Int) (j2 Int) (j1 Int) (i1 Int) (s1 (BitVec @n1)) (ys1 (BitVec @n2)))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n2) Int Int Int Int Bool) Bool
  (
  (($eor_bv-concat-extract-merge xs1 s1 ys1 i1 j1 j2 k1 (_ (= j2) (_ (+ j1) (_ (+ 1) 0)))) (eo::define ((_v0 (extract k1))) ($eor_bv-concat-extract-merge.fev1 ys1 s1 i1 k1 xs1 j1 j2 ($singleton_elim (eo::list_concat concat xs1 (_ (concat (_ (_ _v0 i1) s1)) ys1))) (eo::list_concat concat xs1 (_ (concat (_ (_ _v0 j2) s1)) (_ (concat (_ (_ (extract j1) i1) s1)) ys1))))))
  )
)
; program: $eovc_bv-concat-extract-merge
(program $eovc_bv-concat-extract-merge ((@n2 Int) (@n1 Int) (@n0 Int) (xs1 (BitVec @n0)) (s1 (BitVec @n1)) (ys1 (BitVec @n2)) (i1 Int) (k1 Int) (j2 Int) (j1 Int))
  :signature (Int Int Int Int (BitVec @n2) (BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-concat-extract-merge j1 j2 k1 i1 ys1 s1 xs1) (eo::define ((_v0 (_ (= j2) (_ (+ j1) (_ (+ 1) 0))))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-concat-extract-merge xs1 s1 ys1 i1 j1 j2 k1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_bv-concat-extract-merge")
; program: $eor_bv-extract-extract
(program $eor_bv-extract-extract ((@n0 Int) (l1 Int) (k1 Int) (j1 Int) (i1 Int) (ll1 Int) (kk1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int Int Int Int Bool Bool) Bool
  (
  ((eo::define ((_v0 (+ i1))) ($eor_bv-extract-extract x1 i1 j1 k1 l1 ll1 kk1 (_ (= ll1) (_ _v0 (_ (+ l1) 0))) (_ (= kk1) (_ _v0 (_ (+ k1) 0))))) (_ (= (_ (_ (extract l1) k1) (_ (_ (extract j1) i1) x1))) (_ (_ (extract ll1) kk1) x1)))
  )
)
; program: $eovc_bv-extract-extract
(program $eovc_bv-extract-extract ((@n0 Int) (x1 (BitVec @n0)) (j1 Int) (ll1 Int) (l1 Int) (kk1 Int) (i1 Int) (k1 Int))
  :signature (Int Int Int Int Int Int (BitVec @n0)) Bool
  (
  (($eovc_bv-extract-extract k1 i1 kk1 l1 ll1 j1 x1) (eo::define ((_v0 (+ i1))) (eo::define ((_v1 (_ (= kk1) (_ _v0 (_ (+ k1) 0))))) (eo::define ((_v2 (_ (= ll1) (_ _v0 (_ (+ l1) 0))))) ($eo_requires_eq ($eo_model_sat _v2 true false) true ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-extract-extract x1 i1 j1 k1 l1 ll1 kk1 _v2 _v1) false false) true true)))))))
  )
)
(echo "smt-meta $eovc_bv-extract-extract")
; program: $eor_bv-extract-whole
(program $eor_bv-extract-whole ((@n0 Int) (n1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Bool) Bool
  (
  (($eor_bv-extract-whole x1 n1 (_ (= (_ (>= n1) (_ (- (@bvsize x1)) 1))) true)) (_ (= (_ (_ (extract n1) 0) x1)) x1))
  )
)
; program: $eovc_bv-extract-whole
(program $eovc_bv-extract-whole ((@n0 Int) (n1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int) Bool
  (
  (($eovc_bv-extract-whole x1 n1) (eo::define ((_v0 (_ (= (_ (>= n1) (_ (- (@bvsize x1)) 1))) true))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-extract-whole x1 n1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_bv-extract-whole")
; program: $eor_bv-extract-concat-1.fev1
(program $eor_bv-extract-concat-1.fev1 ((@n0 Int) (@n2 Int) (@n1 Int) (y1 (BitVec @n2)) (xs1 (BitVec @n1)) ($eo_1 (BitVec @n1)) (j1 Int) (i1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int (BitVec @n2) (BitVec @n1) (BitVec @n1)) Bool
  (
  (($eor_bv-extract-concat-1.fev1 x1 i1 j1 y1 xs1 $eo_1) (eo::define ((_v0 (_ (extract j1) i1))) (_ (= (_ _v0 $eo_1)) (_ _v0 x1))))
  )
)
; program: $eor_bv-extract-concat-1
(program $eor_bv-extract-concat-1 ((@n0 Int) (@n1 Int) (@n2 Int) (i1 Int) (j1 Int) (xs1 (BitVec @n1)) (y1 (BitVec @n2)) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n2) Int Int Bool) Bool
  (
  (($eor_bv-extract-concat-1 x1 xs1 y1 i1 j1 (_ (= (_ (<= j1) (@bvsize x1))) true)) ($eor_bv-extract-concat-1.fev1 x1 i1 j1 y1 xs1 (eo::list_concat concat xs1 (_ (concat y1) (_ (concat x1) (eo::to_bin 0 0))))))
  )
)
; program: $eovc_bv-extract-concat-1
(program $eovc_bv-extract-concat-1 ((@n0 Int) (@n2 Int) (@n1 Int) (xs1 (BitVec @n1)) (y1 (BitVec @n2)) (i1 Int) (j1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int (BitVec @n2) (BitVec @n1)) Bool
  (
  (($eovc_bv-extract-concat-1 x1 j1 i1 y1 xs1) (eo::define ((_v0 (_ (= (_ (<= j1) (@bvsize x1))) true))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-extract-concat-1 x1 xs1 y1 i1 j1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_bv-extract-concat-1")
; program: $eor_bv-extract-concat-2.fev1
(program $eor_bv-extract-concat-2.fev1 ((@n0 Int) (@n2 Int) (@n1 Int) ($eoT.fev3 Type) (y1 (BitVec @n2)) (xs1 (BitVec @n1)) (j1 Int) ($eo_2 (BitVec @n1)) (u1 Int) ($eo_1 (BitVec @n1)) (u2 Int) (i1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int (BitVec @n2) (BitVec @n1) Int Int (BitVec @n1) (BitVec @n1)) $eoT.fev3
  (
  (($eor_bv-extract-concat-2.fev1 x1 i1 u2 y1 xs1 u1 j1 $eo_1 $eo_2) (_ (= (_ (_ (extract j1) i1) $eo_2)) (_ (concat (_ (_ (extract u1) 0) $eo_1)) (_ (concat (_ (_ (extract u2) i1) x1)) (eo::to_bin 0 0)))))
  )
)
; program: $eor_bv-extract-concat-2
(program $eor_bv-extract-concat-2 ((@n0 Int) (@n1 Int) (@n2 Int) (i1 Int) (u2 Int) (u1 Int) (j1 Int) (xs1 (BitVec @n1)) (y1 (BitVec @n2)) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n2) Int Int Int Int Bool Bool Bool Bool) Bool
  (
  ((eo::define ((_v0 (@bvsize x1))) ($eor_bv-extract-concat-2 x1 xs1 y1 i1 j1 u1 u2 (_ (= (_ (< i1) _v0)) true) (_ (= (_ (>= j1) _v0)) true) (_ (= u1) (_ (- j1) _v0)) (_ (= u2) (_ (- _v0) 1)))) (eo::define ((_v0 (concat y1))) ($eor_bv-extract-concat-2.fev1 x1 i1 u2 y1 xs1 u1 j1 ($singleton_elim (eo::list_concat concat xs1 (_ _v0 (eo::to_bin 0 0)))) (eo::list_concat concat xs1 (_ _v0 (_ (concat x1) (eo::to_bin 0 0)))))))
  )
)
; program: $eovc_bv-extract-concat-2
(program $eovc_bv-extract-concat-2 ((@n0 Int) (@n2 Int) (@n1 Int) (xs1 (BitVec @n1)) (y1 (BitVec @n2)) (i1 Int) (u1 Int) (j1 Int) (u2 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int Int (BitVec @n2) (BitVec @n1)) Bool
  (
  (($eovc_bv-extract-concat-2 x1 u2 j1 u1 i1 y1 xs1) (eo::define ((_v0 (@bvsize x1))) (eo::define ((_v1 (_ (= u2) (_ (- _v0) 1)))) (eo::define ((_v2 (_ (= u1) (_ (- j1) _v0)))) (eo::define ((_v3 (_ (= (_ (>= j1) _v0)) true))) (eo::define ((_v4 (_ (= (_ (< i1) _v0)) true))) ($eo_requires_eq ($eo_model_sat _v4 true false) true ($eo_requires_eq ($eo_model_sat _v3 true false) true ($eo_requires_eq ($eo_model_sat _v2 true false) true ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-extract-concat-2 x1 xs1 y1 i1 j1 u1 u2 _v4 _v3 _v2 _v1) false false) true true)))))))))))
  )
)
(echo "smt-meta $eovc_bv-extract-concat-2")
; program: $eor_bv-extract-concat-3.fev1
(program $eor_bv-extract-concat-3.fev1 ((@n1 Int) (@n0 Int) (@n2 Int) (y1 (BitVec @n1)) (xs1 (BitVec @n2)) (x1 (BitVec @n0)) (j1 Int) (i1 Int) ($eo_2 (BitVec @n2)) (u1 Int) (l1 Int) ($eo_1 (BitVec @n2)))
  :signature ((BitVec @n1) (BitVec @n2) Int Int (BitVec @n0) Int Int (BitVec @n2) (BitVec @n2)) Bool
  (
  (($eor_bv-extract-concat-3.fev1 y1 xs1 l1 u1 x1 i1 j1 $eo_1 $eo_2) (_ (= (_ (_ (extract j1) i1) $eo_2)) (_ (_ (extract u1) l1) $eo_1)))
  )
)
; program: $eor_bv-extract-concat-3
(program $eor_bv-extract-concat-3 ((@n0 Int) (@n1 Int) (@n2 Int) (l1 Int) (u1 Int) (i1 Int) (j1 Int) (xs1 (BitVec @n2)) (y1 (BitVec @n1)) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n2) Int Int Int Int Bool Bool Bool) Bool
  (
  ((eo::define ((_v0 (@bvsize x1))) ($eor_bv-extract-concat-3 x1 y1 xs1 i1 j1 u1 l1 (_ (= (_ (>= i1) _v0)) true) (_ (= u1) (_ (- j1) _v0)) (_ (= l1) (_ (- i1) _v0)))) (eo::define ((_v0 (concat y1))) ($eor_bv-extract-concat-3.fev1 y1 xs1 l1 u1 x1 i1 j1 ($singleton_elim (eo::list_concat concat xs1 (_ _v0 (eo::to_bin 0 0)))) (eo::list_concat concat xs1 (_ _v0 (_ (concat x1) (eo::to_bin 0 0)))))))
  )
)
; program: $eovc_bv-extract-concat-3
(program $eovc_bv-extract-concat-3 ((@n0 Int) (@n2 Int) (@n1 Int) (y1 (BitVec @n1)) (xs1 (BitVec @n2)) (u1 Int) (j1 Int) (l1 Int) (i1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int Int (BitVec @n2) (BitVec @n1)) Bool
  (
  (($eovc_bv-extract-concat-3 x1 i1 l1 j1 u1 xs1 y1) (eo::define ((_v0 (@bvsize x1))) (eo::define ((_v1 (_ (= l1) (_ (- i1) _v0)))) (eo::define ((_v2 (_ (= u1) (_ (- j1) _v0)))) (eo::define ((_v3 (_ (= (_ (>= i1) _v0)) true))) ($eo_requires_eq ($eo_model_sat _v3 true false) true ($eo_requires_eq ($eo_model_sat _v2 true false) true ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-extract-concat-3 x1 y1 xs1 i1 j1 u1 l1 _v3 _v2 _v1) false false) true true)))))))))
  )
)
(echo "smt-meta $eovc_bv-extract-concat-3")
; program: $eor_bv-extract-concat-4.fev2
(program $eor_bv-extract-concat-4.fev2 ((@n1 Int) (@n0 Int) (@n2 Int) (y1 (BitVec @n1)) (xs1 (BitVec @n2)) (x1 (BitVec @n0)) ($eo_4 (BitVec @n2)) (j1 Int) (i1 Int) ($eo_3 (BitVec @n2)))
  :signature ((BitVec @n1) (BitVec @n2) Int Int (BitVec @n0) (BitVec @n2) (BitVec @n2)) Bool
  (
  (($eor_bv-extract-concat-4.fev2 y1 xs1 i1 j1 x1 $eo_3 $eo_4) (eo::define ((_v0 (_ (extract j1) i1))) (_ (= (_ _v0 (_ (concat x1) $eo_4))) (_ _v0 $eo_3))))
  )
)
; program: $eor_bv-extract-concat-4.fev1
(program $eor_bv-extract-concat-4.fev1 ((@n1 Int) (@n0 Int) (@n2 Int) ($ex_1 (BitVec @n2)) ($eo_2 Bool) (i1 Int) (j1 Int) (x1 (BitVec @n0)) (xs1 (BitVec @n2)) (y1 (BitVec @n1)))
  :signature ((BitVec @n1) (BitVec @n2) Int Int (BitVec @n0) (BitVec @n2) Bool Bool) Bool
  (
  (($eor_bv-extract-concat-4.fev1 y1 xs1 i1 j1 x1 $ex_1 $eo_2 $eo_2) (eo::define ((_v0 (eo::list_concat concat xs1 (_ (concat y1) (eo::to_bin 0 0))))) ($eor_bv-extract-concat-4.fev2 y1 xs1 i1 j1 x1 ($singleton_elim _v0) _v0)))
  )
)
; program: $eor_bv-extract-concat-4
(program $eor_bv-extract-concat-4 ((@n0 Int) (@n1 Int) (@n2 Int) (i1 Int) (j1 Int) (x1 (BitVec @n0)) ($ex_1 (BitVec @n2)) (xs1 (BitVec @n2)) (y1 (BitVec @n1)))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n2) Int Int Bool) Bool
  (
  (($eor_bv-extract-concat-4 x1 y1 xs1 i1 j1 (_ (= (_ (< j1) (_ (- (@bvsize (_ (concat x1) $ex_1))) (@bvsize x1)))) true)) ($eor_bv-extract-concat-4.fev1 y1 xs1 i1 j1 x1 $ex_1 $ex_1 (eo::list_concat concat xs1 (_ (concat y1) (eo::to_bin 0 0)))))
  )
)
; program: $eovc_bv-extract-concat-4.fev1
(program $eovc_bv-extract-concat-4.fev1 ((@n0 Int) (@n1 Int) (@n2 Int) (y1 (BitVec @n1)) (xs1 (BitVec @n2)) (i1 Int) (j1 Int) ($eo_1 (BitVec @n2)) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n2) Int Int (BitVec @n2)) Bool
  (
  (($eovc_bv-extract-concat-4.fev1 x1 y1 xs1 j1 i1 $eo_1) (eo::define ((_v0 (_ (= (_ (< j1) (_ (- (@bvsize (_ (concat x1) $eo_1))) (@bvsize x1)))) true))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-extract-concat-4 x1 y1 xs1 i1 j1 _v0) false false) true true))))
  )
)
; program: $eovc_bv-extract-concat-4
(program $eovc_bv-extract-concat-4 ((@n0 Int) (@n1 Int) (@n2 Int) (x1 (BitVec @n0)) (j1 Int) (i1 Int) (xs1 (BitVec @n2)) (y1 (BitVec @n1)))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n2) Int Int) Bool
  (
  (($eovc_bv-extract-concat-4 x1 y1 xs1 j1 i1) ($eovc_bv-extract-concat-4.fev1 x1 y1 xs1 j1 i1 (eo::list_concat concat xs1 (_ (concat y1) (eo::to_bin 0 0)))))
  )
)
(echo "smt-meta $eovc_bv-extract-concat-4")
; program: $eor_bv-eq-extract-elim1
(program $eor_bv-eq-extract-elim1 ((@n0 Int) (@n1 Int) (j1 Int) (i1 Int) (wm1 Int) (jp1 Int) (y1 (BitVec @n1)) (im1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) (BitVec @n1) Int Int Int Int Int Bool Bool Bool Bool Bool) Bool
  (
  (($eor_bv-eq-extract-elim1 x1 y1 i1 j1 wm1 jp1 im1 (_ (= wm1) (_ (- (@bvsize x1)) 1)) (_ (= jp1) (_ (+ j1) (_ (+ 1) 0))) (_ (= im1) (_ (- i1) 1)) (_ (= (_ (> wm1) j1)) true) (_ (= (_ (> i1) 0)) true)) (_ (= (_ (= (_ (_ (extract j1) i1) x1)) y1)) (_ (= x1) (_ (concat (_ (_ (extract wm1) jp1) x1)) (_ (concat y1) (_ (concat (_ (_ (extract im1) 0) x1)) (eo::to_bin 0 0)))))))
  )
)
; program: $eovc_bv-eq-extract-elim1
(program $eovc_bv-eq-extract-elim1 ((@n0 Int) (@n1 Int) (y1 (BitVec @n1)) (x1 (BitVec @n0)) (jp1 Int) (im1 Int) (wm1 Int) (j1 Int) (i1 Int))
  :signature (Int Int Int Int Int (BitVec @n0) (BitVec @n1)) Bool
  (
  (($eovc_bv-eq-extract-elim1 i1 j1 wm1 im1 jp1 x1 y1) (eo::define ((_v0 (_ (= (_ (> i1) 0)) true))) (eo::define ((_v1 (_ (= (_ (> wm1) j1)) true))) (eo::define ((_v2 (_ (= im1) (_ (- i1) 1)))) (eo::define ((_v3 (_ (= jp1) (_ (+ j1) (_ (+ 1) 0))))) (eo::define ((_v4 (_ (= wm1) (_ (- (@bvsize x1)) 1)))) ($eo_requires_eq ($eo_model_sat _v4 true false) true ($eo_requires_eq ($eo_model_sat _v3 true false) true ($eo_requires_eq ($eo_model_sat _v2 true false) true ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-eq-extract-elim1 x1 y1 i1 j1 wm1 jp1 im1 _v4 _v3 _v2 _v1 _v0) false false) true true))))))))))))
  )
)
(echo "smt-meta $eovc_bv-eq-extract-elim1")
; program: $eor_bv-eq-extract-elim2
(program $eor_bv-eq-extract-elim2 ((@n0 Int) (@n1 Int) (j1 Int) (wm1 Int) (jp1 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :signature ((BitVec @n0) (BitVec @n1) Int Int Int Bool Bool Bool) Bool
  (
  (($eor_bv-eq-extract-elim2 x1 y1 j1 wm1 jp1 (_ (= wm1) (_ (- (@bvsize x1)) 1)) (_ (= jp1) (_ (+ j1) (_ (+ 1) 0))) (_ (= (_ (> wm1) j1)) true)) (_ (= (_ (= (_ (_ (extract j1) 0) x1)) y1)) (_ (= x1) (_ (concat (_ (_ (extract wm1) jp1) x1)) (_ (concat y1) (eo::to_bin 0 0))))))
  )
)
; program: $eovc_bv-eq-extract-elim2
(program $eovc_bv-eq-extract-elim2 ((@n0 Int) (@n1 Int) (y1 (BitVec @n1)) (x1 (BitVec @n0)) (jp1 Int) (wm1 Int) (j1 Int))
  :signature (Int Int Int (BitVec @n0) (BitVec @n1)) Bool
  (
  (($eovc_bv-eq-extract-elim2 j1 wm1 jp1 x1 y1) (eo::define ((_v0 (_ (= (_ (> wm1) j1)) true))) (eo::define ((_v1 (_ (= jp1) (_ (+ j1) (_ (+ 1) 0))))) (eo::define ((_v2 (_ (= wm1) (_ (- (@bvsize x1)) 1)))) ($eo_requires_eq ($eo_model_sat _v2 true false) true ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-eq-extract-elim2 x1 y1 j1 wm1 jp1 _v2 _v1 _v0) false false) true true))))))))
  )
)
(echo "smt-meta $eovc_bv-eq-extract-elim2")
; program: $eor_bv-eq-extract-elim3
(program $eor_bv-eq-extract-elim3 ((@n0 Int) (@n1 Int) (j1 Int) (i1 Int) (y1 (BitVec @n1)) (im1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) (BitVec @n1) Int Int Int Bool Bool Bool) Bool
  (
  (($eor_bv-eq-extract-elim3 x1 y1 i1 j1 im1 (_ (= j1) (_ (- (@bvsize x1)) 1)) (_ (= im1) (_ (- i1) 1)) (_ (= (_ (> i1) 0)) true)) (_ (= (_ (= (_ (_ (extract j1) i1) x1)) y1)) (_ (= x1) (_ (concat y1) (_ (concat (_ (_ (extract im1) 0) x1)) (eo::to_bin 0 0))))))
  )
)
; program: $eovc_bv-eq-extract-elim3
(program $eovc_bv-eq-extract-elim3 ((@n0 Int) (@n1 Int) (y1 (BitVec @n1)) (j1 Int) (x1 (BitVec @n0)) (im1 Int) (i1 Int))
  :signature (Int Int (BitVec @n0) Int (BitVec @n1)) Bool
  (
  (($eovc_bv-eq-extract-elim3 i1 im1 x1 j1 y1) (eo::define ((_v0 (_ (= (_ (> i1) 0)) true))) (eo::define ((_v1 (_ (= im1) (_ (- i1) 1)))) (eo::define ((_v2 (_ (= j1) (_ (- (@bvsize x1)) 1)))) ($eo_requires_eq ($eo_model_sat _v2 true false) true ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-eq-extract-elim3 x1 y1 i1 j1 im1 _v2 _v1 _v0) false false) true true))))))))
  )
)
(echo "smt-meta $eovc_bv-eq-extract-elim3")
; program: $eor_bv-extract-not
(program $eor_bv-extract-not ((@n0 Int) (j1 Int) (i1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int) Bool
  (
  (($eor_bv-extract-not x1 i1 j1) (eo::define ((_v0 (_ (extract j1) i1))) (_ (= (_ _v0 (bvnot x1))) (bvnot (_ _v0 x1)))))
  )
)
; program: $eovc_bv-extract-not
(program $eovc_bv-extract-not ((@n0 Int) (x1 (BitVec @n0)) (i1 Int) (j1 Int))
  :signature (Int Int (BitVec @n0)) Bool
  (
  (($eovc_bv-extract-not j1 i1 x1) ($eo_requires_eq ($eo_model_sat ($eor_bv-extract-not x1 i1 j1) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-extract-not")
; program: $eor_bv-extract-sign-extend-1
(program $eor_bv-extract-sign-extend-1 ((@n0 Int) (k1 Int) (high1 Int) (low1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int Bool) Bool
  (
  (($eor_bv-extract-sign-extend-1 x1 low1 high1 k1 (_ (= (_ (< high1) (@bvsize x1))) true)) (eo::define ((_v0 (_ (extract high1) low1))) (_ (= (_ _v0 (_ (sign_extend k1) x1))) (_ _v0 x1))))
  )
)
; program: $eovc_bv-extract-sign-extend-1
(program $eovc_bv-extract-sign-extend-1 ((@n0 Int) (low1 Int) (k1 Int) (high1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int) Bool
  (
  (($eovc_bv-extract-sign-extend-1 x1 high1 k1 low1) (eo::define ((_v0 (_ (= (_ (< high1) (@bvsize x1))) true))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-extract-sign-extend-1 x1 low1 high1 k1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_bv-extract-sign-extend-1")
; program: $eor_bv-extract-sign-extend-2
(program $eor_bv-extract-sign-extend-2 ((@n0 Int) (high1 Int) (k1 Int) (sn1 Int) (nm1 Int) (low1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int Int Int Bool Bool Bool Bool) Bool
  (
  ((eo::define ((_v0 (@bvsize x1))) ($eor_bv-extract-sign-extend-2 x1 low1 high1 k1 nm1 sn1 (_ (= (_ (< low1) _v0)) true) (_ (= (_ (>= high1) _v0)) true) (_ (= nm1) (_ (- _v0) 1)) (_ (= sn1) (_ (+ 1) (_ (+ (_ (- high1) _v0)) 0))))) (_ (= (_ (_ (extract high1) low1) (_ (sign_extend k1) x1))) (_ (sign_extend sn1) (_ (_ (extract nm1) low1) x1))))
  )
)
; program: $eovc_bv-extract-sign-extend-2
(program $eovc_bv-extract-sign-extend-2 ((@n0 Int) (k1 Int) (low1 Int) (nm1 Int) (sn1 Int) (high1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int Int Int) Bool
  (
  (($eovc_bv-extract-sign-extend-2 x1 high1 sn1 nm1 low1 k1) (eo::define ((_v0 (@bvsize x1))) (eo::define ((_v1 (_ (= sn1) (_ (+ 1) (_ (+ (_ (- high1) _v0)) 0))))) (eo::define ((_v2 (_ (= nm1) (_ (- _v0) 1)))) (eo::define ((_v3 (_ (= (_ (>= high1) _v0)) true))) (eo::define ((_v4 (_ (= (_ (< low1) _v0)) true))) ($eo_requires_eq ($eo_model_sat _v4 true false) true ($eo_requires_eq ($eo_model_sat _v3 true false) true ($eo_requires_eq ($eo_model_sat _v2 true false) true ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-extract-sign-extend-2 x1 low1 high1 k1 nm1 sn1 _v4 _v3 _v2 _v1) false false) true true)))))))))))
  )
)
(echo "smt-meta $eovc_bv-extract-sign-extend-2")
; program: $eor_bv-extract-sign-extend-3
(program $eor_bv-extract-sign-extend-3 ((@n0 Int) (high1 Int) (low1 Int) (k1 Int) (rn1 Int) (nm1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int Int Int Bool Bool Bool) Bool
  (
  ((eo::define ((_v0 (@bvsize x1))) ($eor_bv-extract-sign-extend-3 x1 low1 high1 k1 rn1 nm1 (_ (= (_ (>= low1) _v0)) true) (_ (= rn1) (_ (+ 1) (_ (+ (_ (- high1) low1)) 0))) (_ (= nm1) (_ (- _v0) 1)))) (_ (= (_ (_ (extract high1) low1) (_ (sign_extend k1) x1))) (_ (repeat rn1) (_ (_ (extract nm1) nm1) x1))))
  )
)
; program: $eovc_bv-extract-sign-extend-3
(program $eovc_bv-extract-sign-extend-3 ((@n0 Int) (k1 Int) (rn1 Int) (high1 Int) (low1 Int) (nm1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int Int Int) Bool
  (
  (($eovc_bv-extract-sign-extend-3 x1 nm1 low1 high1 rn1 k1) (eo::define ((_v0 (@bvsize x1))) (eo::define ((_v1 (_ (= nm1) (_ (- _v0) 1)))) (eo::define ((_v2 (_ (= rn1) (_ (+ 1) (_ (+ (_ (- high1) low1)) 0))))) (eo::define ((_v3 (_ (= (_ (>= low1) _v0)) true))) ($eo_requires_eq ($eo_model_sat _v3 true false) true ($eo_requires_eq ($eo_model_sat _v2 true false) true ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-extract-sign-extend-3 x1 low1 high1 k1 rn1 nm1 _v3 _v2 _v1) false false) true true)))))))))
  )
)
(echo "smt-meta $eovc_bv-extract-sign-extend-3")
; program: $eor_bv-not-xor
(program $eor_bv-not-xor ((@n0 Int) (@n1 Int) (@n2 Int) (x1 (BitVec @n0)) (x2 (BitVec @n1)) (xs1 (BitVec @n2)))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n2)) Bool
  (
  (($eor_bv-not-xor x1 x2 xs1) (eo::define ((_v0 (_ (bvxor x2) xs1))) (_ (= (bvnot (_ (bvxor x1) _v0))) (_ (bvxor (bvnot x1)) _v0))))
  )
)
; program: $eovc_bv-not-xor
(program $eovc_bv-not-xor ((@n2 Int) (@n1 Int) (@n0 Int) (x1 (BitVec @n0)) (x2 (BitVec @n1)) (xs1 (BitVec @n2)))
  :signature ((BitVec @n2) (BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-not-xor xs1 x2 x1) ($eo_requires_eq ($eo_model_sat ($eor_bv-not-xor x1 x2 xs1) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-not-xor")
; program: $eor_bv-and-simplify-1.fev2
(program $eor_bv-and-simplify-1.fev2 ((@n1 Int) (@n3 Int) (@n0 Int) ($eo_1 (BitVec @n1)) (x1 (BitVec @n3)) (xs1 (BitVec @n0)) ($eo_2 (BitVec @n0)) (w1 Int))
  :signature (Int (BitVec @n1) (BitVec @n3) (BitVec @n0) (BitVec @n0)) Bool
  (
  (($eor_bv-and-simplify-1.fev2 w1 $eo_1 x1 xs1 $eo_2) (_ (= $eo_2) (_ (@bv 0) w1)))
  )
)
; program: $eor_bv-and-simplify-1.fev1
(program $eor_bv-and-simplify-1.fev1 ((@n2 Int) (@n3 Int) (@n0 Int) (@n1 Int) (zs1 (BitVec @n2)) (ys1 (BitVec @n1)) (w1 Int) (xs1 (BitVec @n0)) (x1 (BitVec @n3)) ($eo_1 (BitVec @n1)))
  :signature (Int (BitVec @n2) (BitVec @n3) (BitVec @n1) (BitVec @n0) (BitVec @n1)) Bool
  (
  (($eor_bv-and-simplify-1.fev1 w1 zs1 x1 ys1 xs1 $eo_1) ($eor_bv-and-simplify-1.fev2 w1 $eo_1 x1 xs1 (eo::list_concat bvand xs1 (_ (bvand (bvnot x1)) $eo_1))))
  )
)
; program: $eor_bv-and-simplify-1
(program $eor_bv-and-simplify-1 ((@n0 Int) (@n1 Int) (@n2 Int) (@n3 Int) (w1 Int) (xs1 (BitVec @n0)) (ys1 (BitVec @n1)) (x1 (BitVec @n3)) (zs1 (BitVec @n2)))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n2) (BitVec @n3) Int Bool) Bool
  (
  (($eor_bv-and-simplify-1 xs1 ys1 zs1 x1 w1 (_ (= w1) (@bvsize x1))) ($eor_bv-and-simplify-1.fev1 w1 zs1 x1 ys1 xs1 (eo::list_concat bvand ys1 (_ (bvand x1) zs1))))
  )
)
; program: $eovc_bv-and-simplify-1
(program $eovc_bv-and-simplify-1 ((@n3 Int) (@n2 Int) (@n1 Int) (@n0 Int) (xs1 (BitVec @n0)) (ys1 (BitVec @n1)) (zs1 (BitVec @n2)) (w1 Int) (x1 (BitVec @n3)))
  :signature ((BitVec @n3) Int (BitVec @n2) (BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-and-simplify-1 x1 w1 zs1 ys1 xs1) (eo::define ((_v0 (_ (= w1) (@bvsize x1)))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-and-simplify-1 xs1 ys1 zs1 x1 w1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_bv-and-simplify-1")
; program: $eor_bv-and-simplify-2.fev2
(program $eor_bv-and-simplify-2.fev2 ((@n1 Int) (@n3 Int) (@n0 Int) ($eo_1 (BitVec @n1)) (x1 (BitVec @n3)) (xs1 (BitVec @n0)) ($eo_2 (BitVec @n0)) (w1 Int))
  :signature (Int (BitVec @n1) (BitVec @n3) (BitVec @n0) (BitVec @n0)) Bool
  (
  (($eor_bv-and-simplify-2.fev2 w1 $eo_1 x1 xs1 $eo_2) (_ (= $eo_2) (_ (@bv 0) w1)))
  )
)
; program: $eor_bv-and-simplify-2.fev1
(program $eor_bv-and-simplify-2.fev1 ((@n2 Int) (@n3 Int) (@n0 Int) (@n1 Int) (zs1 (BitVec @n2)) (ys1 (BitVec @n1)) (w1 Int) (xs1 (BitVec @n0)) (x1 (BitVec @n3)) ($eo_1 (BitVec @n1)))
  :signature (Int (BitVec @n2) (BitVec @n3) (BitVec @n1) (BitVec @n0) (BitVec @n1)) Bool
  (
  (($eor_bv-and-simplify-2.fev1 w1 zs1 x1 ys1 xs1 $eo_1) ($eor_bv-and-simplify-2.fev2 w1 $eo_1 x1 xs1 (eo::list_concat bvand xs1 (_ (bvand x1) $eo_1))))
  )
)
; program: $eor_bv-and-simplify-2
(program $eor_bv-and-simplify-2 ((@n0 Int) (@n1 Int) (@n2 Int) (@n3 Int) (w1 Int) (xs1 (BitVec @n0)) (ys1 (BitVec @n1)) (x1 (BitVec @n3)) (zs1 (BitVec @n2)))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n2) (BitVec @n3) Int Bool) Bool
  (
  (($eor_bv-and-simplify-2 xs1 ys1 zs1 x1 w1 (_ (= w1) (@bvsize x1))) ($eor_bv-and-simplify-2.fev1 w1 zs1 x1 ys1 xs1 (eo::list_concat bvand ys1 (_ (bvand (bvnot x1)) zs1))))
  )
)
; program: $eovc_bv-and-simplify-2
(program $eovc_bv-and-simplify-2 ((@n3 Int) (@n2 Int) (@n1 Int) (@n0 Int) (xs1 (BitVec @n0)) (ys1 (BitVec @n1)) (zs1 (BitVec @n2)) (w1 Int) (x1 (BitVec @n3)))
  :signature ((BitVec @n3) Int (BitVec @n2) (BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-and-simplify-2 x1 w1 zs1 ys1 xs1) (eo::define ((_v0 (_ (= w1) (@bvsize x1)))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-and-simplify-2 xs1 ys1 zs1 x1 w1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_bv-and-simplify-2")
; program: $eor_bv-or-simplify-1.fev2
(program $eor_bv-or-simplify-1.fev2 ((@n1 Int) (@n3 Int) (@n0 Int) ($eo_1 (BitVec @n1)) (x1 (BitVec @n3)) (xs1 (BitVec @n0)) ($eo_2 (BitVec @n0)) (w1 Int))
  :signature (Int (BitVec @n1) (BitVec @n3) (BitVec @n0) (BitVec @n0)) Bool
  (
  (($eor_bv-or-simplify-1.fev2 w1 $eo_1 x1 xs1 $eo_2) (_ (= $eo_2) (bvnot (_ (@bv 0) w1))))
  )
)
; program: $eor_bv-or-simplify-1.fev1
(program $eor_bv-or-simplify-1.fev1 ((@n2 Int) (@n3 Int) (@n0 Int) (@n1 Int) (zs1 (BitVec @n2)) (ys1 (BitVec @n1)) (w1 Int) (xs1 (BitVec @n0)) (x1 (BitVec @n3)) ($eo_1 (BitVec @n1)))
  :signature (Int (BitVec @n2) (BitVec @n3) (BitVec @n1) (BitVec @n0) (BitVec @n1)) Bool
  (
  (($eor_bv-or-simplify-1.fev1 w1 zs1 x1 ys1 xs1 $eo_1) ($eor_bv-or-simplify-1.fev2 w1 $eo_1 x1 xs1 (eo::list_concat bvor xs1 (_ (bvor (bvnot x1)) $eo_1))))
  )
)
; program: $eor_bv-or-simplify-1
(program $eor_bv-or-simplify-1 ((@n0 Int) (@n1 Int) (@n2 Int) (@n3 Int) (w1 Int) (xs1 (BitVec @n0)) (ys1 (BitVec @n1)) (x1 (BitVec @n3)) (zs1 (BitVec @n2)))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n2) (BitVec @n3) Int Bool) Bool
  (
  (($eor_bv-or-simplify-1 xs1 ys1 zs1 x1 w1 (_ (= w1) (@bvsize x1))) ($eor_bv-or-simplify-1.fev1 w1 zs1 x1 ys1 xs1 (eo::list_concat bvor ys1 (_ (bvor x1) zs1))))
  )
)
; program: $eovc_bv-or-simplify-1
(program $eovc_bv-or-simplify-1 ((@n3 Int) (@n2 Int) (@n1 Int) (@n0 Int) (xs1 (BitVec @n0)) (ys1 (BitVec @n1)) (zs1 (BitVec @n2)) (w1 Int) (x1 (BitVec @n3)))
  :signature ((BitVec @n3) Int (BitVec @n2) (BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-or-simplify-1 x1 w1 zs1 ys1 xs1) (eo::define ((_v0 (_ (= w1) (@bvsize x1)))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-or-simplify-1 xs1 ys1 zs1 x1 w1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_bv-or-simplify-1")
; program: $eor_bv-or-simplify-2.fev2
(program $eor_bv-or-simplify-2.fev2 ((@n1 Int) (@n3 Int) (@n0 Int) ($eo_1 (BitVec @n1)) (x1 (BitVec @n3)) (xs1 (BitVec @n0)) ($eo_2 (BitVec @n0)) (w1 Int))
  :signature (Int (BitVec @n1) (BitVec @n3) (BitVec @n0) (BitVec @n0)) Bool
  (
  (($eor_bv-or-simplify-2.fev2 w1 $eo_1 x1 xs1 $eo_2) (_ (= $eo_2) (bvnot (_ (@bv 0) w1))))
  )
)
; program: $eor_bv-or-simplify-2.fev1
(program $eor_bv-or-simplify-2.fev1 ((@n2 Int) (@n3 Int) (@n0 Int) (@n1 Int) (zs1 (BitVec @n2)) (ys1 (BitVec @n1)) (w1 Int) (xs1 (BitVec @n0)) (x1 (BitVec @n3)) ($eo_1 (BitVec @n1)))
  :signature (Int (BitVec @n2) (BitVec @n3) (BitVec @n1) (BitVec @n0) (BitVec @n1)) Bool
  (
  (($eor_bv-or-simplify-2.fev1 w1 zs1 x1 ys1 xs1 $eo_1) ($eor_bv-or-simplify-2.fev2 w1 $eo_1 x1 xs1 (eo::list_concat bvor xs1 (_ (bvor x1) $eo_1))))
  )
)
; program: $eor_bv-or-simplify-2
(program $eor_bv-or-simplify-2 ((@n0 Int) (@n1 Int) (@n2 Int) (@n3 Int) (w1 Int) (xs1 (BitVec @n0)) (ys1 (BitVec @n1)) (x1 (BitVec @n3)) (zs1 (BitVec @n2)))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n2) (BitVec @n3) Int Bool) Bool
  (
  (($eor_bv-or-simplify-2 xs1 ys1 zs1 x1 w1 (_ (= w1) (@bvsize x1))) ($eor_bv-or-simplify-2.fev1 w1 zs1 x1 ys1 xs1 (eo::list_concat bvor ys1 (_ (bvor (bvnot x1)) zs1))))
  )
)
; program: $eovc_bv-or-simplify-2
(program $eovc_bv-or-simplify-2 ((@n3 Int) (@n2 Int) (@n1 Int) (@n0 Int) (xs1 (BitVec @n0)) (ys1 (BitVec @n1)) (zs1 (BitVec @n2)) (w1 Int) (x1 (BitVec @n3)))
  :signature ((BitVec @n3) Int (BitVec @n2) (BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-or-simplify-2 x1 w1 zs1 ys1 xs1) (eo::define ((_v0 (_ (= w1) (@bvsize x1)))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-or-simplify-2 xs1 ys1 zs1 x1 w1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_bv-or-simplify-2")
; program: $eor_bv-xor-simplify-1.fev2
(program $eor_bv-xor-simplify-1.fev2 ((@n1 Int) (@n3 Int) (@n0 Int) ($eo_2 (BitVec @n1)) (x1 (BitVec @n3)) (xs1 (BitVec @n0)) ($eo_3 (BitVec @n0)) ($eo_1 (BitVec @n0)))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n3) (BitVec @n0) (BitVec @n0)) Bool
  (
  (($eor_bv-xor-simplify-1.fev2 $eo_1 $eo_2 x1 xs1 $eo_3) (_ (= $eo_3) $eo_1))
  )
)
; program: $eor_bv-xor-simplify-1.fev1
(program $eor_bv-xor-simplify-1.fev1 ((@n2 Int) (@n3 Int) (@n0 Int) (@n1 Int) (zs1 (BitVec @n2)) (ys1 (BitVec @n1)) ($eo_1 (BitVec @n0)) (xs1 (BitVec @n0)) (x1 (BitVec @n3)) ($eo_2 (BitVec @n1)))
  :signature ((BitVec @n2) (BitVec @n1) (BitVec @n0) (BitVec @n3) (BitVec @n0) (BitVec @n1)) Bool
  (
  (($eor_bv-xor-simplify-1.fev1 zs1 ys1 xs1 x1 $eo_1 $eo_2) ($eor_bv-xor-simplify-1.fev2 $eo_1 $eo_2 x1 xs1 (eo::list_concat bvxor xs1 (_ (bvxor x1) $eo_2))))
  )
)
; program: $eor_bv-xor-simplify-1
(program $eor_bv-xor-simplify-1 ((@n0 Int) (@n1 Int) (@n2 Int) (@n3 Int) (xs1 (BitVec @n0)) (ys1 (BitVec @n1)) (x1 (BitVec @n3)) (zs1 (BitVec @n2)))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n2) (BitVec @n3)) Bool
  (
  (($eor_bv-xor-simplify-1 xs1 ys1 zs1 x1) ($eor_bv-xor-simplify-1.fev1 zs1 ys1 xs1 x1 ($singleton_elim (eo::list_concat bvxor xs1 (eo::list_concat bvxor ys1 zs1))) (eo::list_concat bvxor ys1 (_ (bvxor x1) zs1))))
  )
)
; program: $eovc_bv-xor-simplify-1
(program $eovc_bv-xor-simplify-1 ((@n3 Int) (@n2 Int) (@n1 Int) (@n0 Int) (xs1 (BitVec @n0)) (ys1 (BitVec @n1)) (zs1 (BitVec @n2)) (x1 (BitVec @n3)))
  :signature ((BitVec @n3) (BitVec @n2) (BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-xor-simplify-1 x1 zs1 ys1 xs1) ($eo_requires_eq ($eo_model_sat ($eor_bv-xor-simplify-1 xs1 ys1 zs1 x1) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-xor-simplify-1")
; program: $eor_bv-xor-simplify-2.fev2
(program $eor_bv-xor-simplify-2.fev2 ((@n1 Int) (@n3 Int) (@n0 Int) ($eo_2 (BitVec @n1)) (x1 (BitVec @n3)) (xs1 (BitVec @n0)) ($eo_3 (BitVec @n0)) ($eo_1 (BitVec @n0)))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n3) (BitVec @n0) (BitVec @n0)) Bool
  (
  (($eor_bv-xor-simplify-2.fev2 $eo_1 $eo_2 x1 xs1 $eo_3) (_ (= $eo_3) (bvnot $eo_1)))
  )
)
; program: $eor_bv-xor-simplify-2.fev1
(program $eor_bv-xor-simplify-2.fev1 ((@n2 Int) (@n3 Int) (@n0 Int) (@n1 Int) (zs1 (BitVec @n2)) (ys1 (BitVec @n1)) ($eo_1 (BitVec @n0)) (xs1 (BitVec @n0)) (x1 (BitVec @n3)) ($eo_2 (BitVec @n1)))
  :signature ((BitVec @n2) (BitVec @n1) (BitVec @n0) (BitVec @n3) (BitVec @n0) (BitVec @n1)) Bool
  (
  (($eor_bv-xor-simplify-2.fev1 zs1 ys1 xs1 x1 $eo_1 $eo_2) ($eor_bv-xor-simplify-2.fev2 $eo_1 $eo_2 x1 xs1 (eo::list_concat bvxor xs1 (_ (bvxor x1) $eo_2))))
  )
)
; program: $eor_bv-xor-simplify-2
(program $eor_bv-xor-simplify-2 ((@n0 Int) (@n1 Int) (@n2 Int) (@n3 Int) (xs1 (BitVec @n0)) (ys1 (BitVec @n1)) (x1 (BitVec @n3)) (zs1 (BitVec @n2)))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n2) (BitVec @n3)) Bool
  (
  (($eor_bv-xor-simplify-2 xs1 ys1 zs1 x1) ($eor_bv-xor-simplify-2.fev1 zs1 ys1 xs1 x1 ($singleton_elim (eo::list_concat bvxor xs1 (eo::list_concat bvxor ys1 zs1))) (eo::list_concat bvxor ys1 (_ (bvxor (bvnot x1)) zs1))))
  )
)
; program: $eovc_bv-xor-simplify-2
(program $eovc_bv-xor-simplify-2 ((@n3 Int) (@n2 Int) (@n1 Int) (@n0 Int) (xs1 (BitVec @n0)) (ys1 (BitVec @n1)) (zs1 (BitVec @n2)) (x1 (BitVec @n3)))
  :signature ((BitVec @n3) (BitVec @n2) (BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-xor-simplify-2 x1 zs1 ys1 xs1) ($eo_requires_eq ($eo_model_sat ($eor_bv-xor-simplify-2 xs1 ys1 zs1 x1) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-xor-simplify-2")
; program: $eor_bv-xor-simplify-3.fev2
(program $eor_bv-xor-simplify-3.fev2 ((@n1 Int) (@n3 Int) (@n0 Int) ($eo_2 (BitVec @n1)) (x1 (BitVec @n3)) (xs1 (BitVec @n0)) ($eo_3 (BitVec @n0)) ($eo_1 (BitVec @n0)))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n3) (BitVec @n0) (BitVec @n0)) Bool
  (
  (($eor_bv-xor-simplify-3.fev2 $eo_1 $eo_2 x1 xs1 $eo_3) (_ (= $eo_3) (bvnot $eo_1)))
  )
)
; program: $eor_bv-xor-simplify-3.fev1
(program $eor_bv-xor-simplify-3.fev1 ((@n2 Int) (@n3 Int) (@n0 Int) (@n1 Int) (zs1 (BitVec @n2)) (ys1 (BitVec @n1)) ($eo_1 (BitVec @n0)) (xs1 (BitVec @n0)) (x1 (BitVec @n3)) ($eo_2 (BitVec @n1)))
  :signature ((BitVec @n2) (BitVec @n1) (BitVec @n0) (BitVec @n3) (BitVec @n0) (BitVec @n1)) Bool
  (
  (($eor_bv-xor-simplify-3.fev1 zs1 ys1 xs1 x1 $eo_1 $eo_2) ($eor_bv-xor-simplify-3.fev2 $eo_1 $eo_2 x1 xs1 (eo::list_concat bvxor xs1 (_ (bvxor (bvnot x1)) $eo_2))))
  )
)
; program: $eor_bv-xor-simplify-3
(program $eor_bv-xor-simplify-3 ((@n0 Int) (@n1 Int) (@n2 Int) (@n3 Int) (xs1 (BitVec @n0)) (ys1 (BitVec @n1)) (x1 (BitVec @n3)) (zs1 (BitVec @n2)))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n2) (BitVec @n3)) Bool
  (
  (($eor_bv-xor-simplify-3 xs1 ys1 zs1 x1) ($eor_bv-xor-simplify-3.fev1 zs1 ys1 xs1 x1 ($singleton_elim (eo::list_concat bvxor xs1 (eo::list_concat bvxor ys1 zs1))) (eo::list_concat bvxor ys1 (_ (bvxor x1) zs1))))
  )
)
; program: $eovc_bv-xor-simplify-3
(program $eovc_bv-xor-simplify-3 ((@n3 Int) (@n2 Int) (@n1 Int) (@n0 Int) (xs1 (BitVec @n0)) (ys1 (BitVec @n1)) (zs1 (BitVec @n2)) (x1 (BitVec @n3)))
  :signature ((BitVec @n3) (BitVec @n2) (BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-xor-simplify-3 x1 zs1 ys1 xs1) ($eo_requires_eq ($eo_model_sat ($eor_bv-xor-simplify-3 xs1 ys1 zs1 x1) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-xor-simplify-3")
; program: $eor_bv-ult-add-one.fev1
(program $eor_bv-ult-add-one.fev1 ((@n0 Int) (@n2 Int) (@n3 Int) (@n1 Int) (zs1 (BitVec @n2)) (ys1 (BitVec @n1)) (c1 (BitVec @n3)) ($eo_2 (BitVec @n1)) (w1 Int) ($eo_1 (BitVec @n1)) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) (BitVec @n2) (BitVec @n1) Int (BitVec @n3) (BitVec @n1) (BitVec @n1)) Bool
  (
  (($eor_bv-ult-add-one.fev1 x1 zs1 ys1 w1 c1 $eo_1 $eo_2) (_ (= (_ (bvult x1) $eo_2)) (_ (and (not (_ (= $eo_1) (bvnot (_ (@bv 0) w1))))) (_ (and (not (_ (bvult $eo_1) x1))) true))))
  )
)
; program: $eor_bv-ult-add-one
(program $eor_bv-ult-add-one ((@n0 Int) (@n1 Int) (@n2 Int) (@n3 Int) (x1 (BitVec @n0)) (w1 Int) (ys1 (BitVec @n1)) (c1 (BitVec @n3)) (zs1 (BitVec @n2)))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n2) (BitVec @n3) Int Bool Bool) Bool
  (
  (($eor_bv-ult-add-one x1 ys1 zs1 c1 w1 (_ (= c1) (_ (@bv 1) w1)) (_ (= w1) (@bvsize x1))) ($eor_bv-ult-add-one.fev1 x1 zs1 ys1 w1 c1 ($singleton_elim (eo::list_concat bvadd ys1 zs1)) (eo::list_concat bvadd ys1 (_ (bvadd c1) zs1))))
  )
)
; program: $eovc_bv-ult-add-one
(program $eovc_bv-ult-add-one ((@n0 Int) (@n3 Int) (@n2 Int) (@n1 Int) (ys1 (BitVec @n1)) (zs1 (BitVec @n2)) (c1 (BitVec @n3)) (w1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int (BitVec @n3) (BitVec @n2) (BitVec @n1)) Bool
  (
  (($eovc_bv-ult-add-one x1 w1 c1 zs1 ys1) (eo::define ((_v0 (_ (= w1) (@bvsize x1)))) (eo::define ((_v1 (_ (= c1) (_ (@bv 1) w1)))) ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-ult-add-one x1 ys1 zs1 c1 w1 _v1 _v0) false false) true true))))))
  )
)
(echo "smt-meta $eovc_bv-ult-add-one")
; program: $eor_bv-mult-slt-mult-1.fev1
(program $eor_bv-mult-slt-mult-1.fev1 ((@n2 Int) (@n0 Int) (@n1 Int) ($eoT.fev1 Type) ($eoT.fev3 Type) ($eoT.fev5 Type) ($eo_4 $eoT.fev3) (n1 Int) (m1 Int) ($eo_2 $eoT.fev1) (tn1 Int) (y1 (BitVec @n1)) (x1 (BitVec @n0)) (a1 (BitVec @n2)) (an1 Int))
  :signature (Int (BitVec @n2) (BitVec @n0) (BitVec @n1) Int Int Int $eoT.fev1 $eoT.fev3) $eoT.fev5
  (
  (($eor_bv-mult-slt-mult-1.fev1 an1 a1 x1 y1 tn1 n1 m1 $eo_2 $eo_4) (eo::define ((_v0 (@bv 0))) (eo::define ((_v1 (_ _v0 an1))) (eo::define ((_v2 (bvmul (_ (sign_extend m1) a1)))) (eo::define ((_v3 (sign_extend n1))) (_ (= (_ (bvslt (_ (bvmul (_ _v3 y1)) (_ _v2 $eo_4))) (_ (bvmul (_ _v3 x1)) (_ _v2 $eo_2)))) (_ (and (not (_ (= (_ (bvsub y1) x1)) (_ _v0 tn1)))) (_ (and (not (_ (= a1) _v1))) (_ (and (_ (= (_ (bvslt y1) x1)) (_ (bvsgt a1) _v1))) true)))))))))
  )
)
; program: $eor_bv-mult-slt-mult-1
(program $eor_bv-mult-slt-mult-1 ((@n0 Int) (@n1 Int) (@n2 Int) (an1 Int) (a1 (BitVec @n2)) (tn1 Int) (m1 Int) (x1 (BitVec @n0)) (n1 Int) (y1 (BitVec @n1)))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n2) Int Int Int Int Bool Bool) Bool
  (
  (($eor_bv-mult-slt-mult-1 x1 y1 a1 n1 m1 tn1 an1 (_ (= tn1) (@bvsize x1)) (_ (= an1) (@bvsize a1))) (eo::define ((_v0 (sign_extend n1))) ($eor_bv-mult-slt-mult-1.fev1 an1 a1 x1 y1 tn1 n1 m1 (eo::nil bvmul (eo::typeof (_ _v0 x1))) (eo::nil bvmul (eo::typeof (_ _v0 y1))))))
  )
)
; program: $eovc_bv-mult-slt-mult-1
(program $eovc_bv-mult-slt-mult-1 ((@n2 Int) (@n0 Int) (@n1 Int) (y1 (BitVec @n1)) (n1 Int) (m1 Int) (tn1 Int) (x1 (BitVec @n0)) (an1 Int) (a1 (BitVec @n2)))
  :signature ((BitVec @n2) Int (BitVec @n0) Int Int Int (BitVec @n1)) Bool
  (
  (($eovc_bv-mult-slt-mult-1 a1 an1 x1 tn1 m1 n1 y1) (eo::define ((_v0 (_ (= an1) (@bvsize a1)))) (eo::define ((_v1 (_ (= tn1) (@bvsize x1)))) ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-mult-slt-mult-1 x1 y1 a1 n1 m1 tn1 an1 _v1 _v0) false false) true true))))))
  )
)
(echo "smt-meta $eovc_bv-mult-slt-mult-1")
; program: $eor_bv-mult-slt-mult-2.fev1
(program $eor_bv-mult-slt-mult-2.fev1 ((@n2 Int) (@n0 Int) (@n1 Int) ($eoT.fev1 Type) ($eoT.fev3 Type) ($eoT.fev5 Type) ($eo_4 $eoT.fev3) (n1 Int) (m1 Int) ($eo_2 $eoT.fev1) (tn1 Int) (y1 (BitVec @n1)) (x1 (BitVec @n0)) (a1 (BitVec @n2)) (an1 Int))
  :signature (Int (BitVec @n2) (BitVec @n0) (BitVec @n1) Int Int Int $eoT.fev1 $eoT.fev3) $eoT.fev5
  (
  (($eor_bv-mult-slt-mult-2.fev1 an1 a1 x1 y1 tn1 n1 m1 $eo_2 $eo_4) (eo::define ((_v0 (@bv 0))) (eo::define ((_v1 (_ _v0 an1))) (eo::define ((_v2 (bvmul (_ (sign_extend m1) a1)))) (eo::define ((_v3 (zero_extend n1))) (_ (= (_ (bvslt (_ (bvmul (_ _v3 y1)) (_ _v2 $eo_4))) (_ (bvmul (_ _v3 x1)) (_ _v2 $eo_2)))) (_ (and (not (_ (= (_ (bvsub y1) x1)) (_ _v0 tn1)))) (_ (and (not (_ (= a1) _v1))) (_ (and (_ (= (_ (bvult y1) x1)) (_ (bvsgt a1) _v1))) true)))))))))
  )
)
; program: $eor_bv-mult-slt-mult-2
(program $eor_bv-mult-slt-mult-2 ((@n0 Int) (@n1 Int) (@n2 Int) (an1 Int) (a1 (BitVec @n2)) (tn1 Int) (m1 Int) (x1 (BitVec @n0)) (n1 Int) (y1 (BitVec @n1)))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n2) Int Int Int Int Bool Bool) Bool
  (
  (($eor_bv-mult-slt-mult-2 x1 y1 a1 n1 m1 tn1 an1 (_ (= tn1) (@bvsize x1)) (_ (= an1) (@bvsize a1))) (eo::define ((_v0 (zero_extend n1))) ($eor_bv-mult-slt-mult-2.fev1 an1 a1 x1 y1 tn1 n1 m1 (eo::nil bvmul (eo::typeof (_ _v0 x1))) (eo::nil bvmul (eo::typeof (_ _v0 y1))))))
  )
)
; program: $eovc_bv-mult-slt-mult-2
(program $eovc_bv-mult-slt-mult-2 ((@n2 Int) (@n0 Int) (@n1 Int) (y1 (BitVec @n1)) (n1 Int) (m1 Int) (tn1 Int) (x1 (BitVec @n0)) (an1 Int) (a1 (BitVec @n2)))
  :signature ((BitVec @n2) Int (BitVec @n0) Int Int Int (BitVec @n1)) Bool
  (
  (($eovc_bv-mult-slt-mult-2 a1 an1 x1 tn1 m1 n1 y1) (eo::define ((_v0 (_ (= an1) (@bvsize a1)))) (eo::define ((_v1 (_ (= tn1) (@bvsize x1)))) ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-mult-slt-mult-2 x1 y1 a1 n1 m1 tn1 an1 _v1 _v0) false false) true true))))))
  )
)
(echo "smt-meta $eovc_bv-mult-slt-mult-2")
; program: $eor_bv-commutative-xor.fev1
(program $eor_bv-commutative-xor.fev1 ((@n1 Int) (@n0 Int) ($eoT.fev1 Type) ($eoT.fev3 Type) ($eoT.fev5 Type) ($eo_4 $eoT.fev3) (y1 (BitVec @n1)) (x1 (BitVec @n0)) ($eo_2 $eoT.fev1))
  :signature ((BitVec @n1) (BitVec @n0) $eoT.fev1 $eoT.fev3) $eoT.fev5
  (
  (($eor_bv-commutative-xor.fev1 y1 x1 $eo_2 $eo_4) (eo::define ((_v0 (bvxor x1))) (eo::define ((_v1 (bvxor y1))) (_ (= (_ _v0 (_ _v1 $eo_4))) (_ _v1 (_ _v0 $eo_2))))))
  )
)
; program: $eor_bv-commutative-xor
(program $eor_bv-commutative-xor ((@n0 Int) (@n1 Int) (y1 (BitVec @n1)) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) (BitVec @n1)) Bool
  (
  (($eor_bv-commutative-xor x1 y1) ($eor_bv-commutative-xor.fev1 y1 x1 (eo::nil bvxor (eo::typeof y1)) (eo::nil bvxor (eo::typeof x1))))
  )
)
; program: $eovc_bv-commutative-xor
(program $eovc_bv-commutative-xor ((@n1 Int) (@n0 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :signature ((BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-commutative-xor y1 x1) ($eo_requires_eq ($eo_model_sat ($eor_bv-commutative-xor x1 y1) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-commutative-xor")
; program: $eor_bv-commutative-comp
(program $eor_bv-commutative-comp ((@n0 Int) (@n1 Int) (y1 (BitVec @n1)) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) (BitVec @n1)) Bool
  (
  (($eor_bv-commutative-comp x1 y1) (_ (= (_ (bvcomp x1) y1)) (_ (bvcomp y1) x1)))
  )
)
; program: $eovc_bv-commutative-comp
(program $eovc_bv-commutative-comp ((@n1 Int) (@n0 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :signature ((BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-commutative-comp y1 x1) ($eo_requires_eq ($eo_model_sat ($eor_bv-commutative-comp x1 y1) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-commutative-comp")
; program: $eor_bv-zero-extend-eliminate-0
(program $eor_bv-zero-extend-eliminate-0 ((@n0 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0)) Bool
  (
  (($eor_bv-zero-extend-eliminate-0 x1) (_ (= (_ (zero_extend 0) x1)) x1))
  )
)
; program: $eovc_bv-zero-extend-eliminate-0
(program $eovc_bv-zero-extend-eliminate-0 ((@n0 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0)) Bool
  (
  (($eovc_bv-zero-extend-eliminate-0 x1) ($eo_requires_eq ($eo_model_sat ($eor_bv-zero-extend-eliminate-0 x1) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-zero-extend-eliminate-0")
; program: $eor_bv-sign-extend-eliminate-0
(program $eor_bv-sign-extend-eliminate-0 ((@n0 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0)) Bool
  (
  (($eor_bv-sign-extend-eliminate-0 x1) (_ (= (_ (sign_extend 0) x1)) x1))
  )
)
; program: $eovc_bv-sign-extend-eliminate-0
(program $eovc_bv-sign-extend-eliminate-0 ((@n0 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0)) Bool
  (
  (($eovc_bv-sign-extend-eliminate-0 x1) ($eo_requires_eq ($eo_model_sat ($eor_bv-sign-extend-eliminate-0 x1) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-sign-extend-eliminate-0")
; program: $eor_bv-not-neq
(program $eor_bv-not-neq ((@n0 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Bool) Bool
  (
  (($eor_bv-not-neq x1 (_ (= (_ (> (@bvsize x1)) 0)) true)) (_ (= (_ (= x1) (bvnot x1))) false))
  )
)
; program: $eovc_bv-not-neq
(program $eovc_bv-not-neq ((@n0 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0)) Bool
  (
  (($eovc_bv-not-neq x1) (eo::define ((_v0 (_ (= (_ (> (@bvsize x1)) 0)) true))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-not-neq x1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_bv-not-neq")
; program: $eor_bv-ult-ones
(program $eor_bv-ult-ones ((@n0 Int) (x1 (BitVec @n0)) (n1 Int) (w1 Int))
  :signature ((BitVec @n0) Int Int Bool) Bool
  (
  (($eor_bv-ult-ones x1 n1 w1 (_ (= n1) (_ (- (int.pow2 w1)) 1))) (eo::define ((_v0 (_ (@bv n1) w1))) (_ (= (_ (bvult x1) _v0)) (_ (distinct x1) _v0))))
  )
)
; program: $eovc_bv-ult-ones
(program $eovc_bv-ult-ones ((@n0 Int) (x1 (BitVec @n0)) (n1 Int) (w1 Int))
  :signature (Int Int (BitVec @n0)) Bool
  (
  (($eovc_bv-ult-ones w1 n1 x1) (eo::define ((_v0 (_ (= n1) (_ (- (int.pow2 w1)) 1)))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-ult-ones x1 n1 w1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_bv-ult-ones")
; program: $eor_bv-concat-merge-const.fev1
(program $eor_bv-concat-merge-const.fev1 ((@n1 Int) (@n0 Int) (zs1 (BitVec @n1)) (ww1 Int) (n2 Int) (w2 Int) (n1 Int) (xs1 (BitVec @n0)) (w1 Int) ($eo_2 (BitVec @n0)) ($eo_1 (BitVec @n0)))
  :signature ((BitVec @n1) Int Int Int Int (BitVec @n0) Int (BitVec @n0) (BitVec @n0)) Bool
  (
  (($eor_bv-concat-merge-const.fev1 zs1 ww1 n2 w2 n1 xs1 w1 $eo_1 $eo_2) (_ (= $eo_2) $eo_1))
  )
)
; program: $eor_bv-concat-merge-const
(program $eor_bv-concat-merge-const ((@n0 Int) (@n1 Int) (ww1 Int) (xs1 (BitVec @n0)) (n1 Int) (w1 Int) (n2 Int) (w2 Int) (zs1 (BitVec @n1)))
  :signature ((BitVec @n0) Int Int Int Int Int (BitVec @n1) Bool) Bool
  (
  (($eor_bv-concat-merge-const xs1 n1 w1 n2 w2 ww1 zs1 (_ (= ww1) (_ (+ w1) (_ (+ w2) 0)))) ($eor_bv-concat-merge-const.fev1 zs1 ww1 n2 w2 n1 xs1 w1 ($singleton_elim (eo::list_concat concat xs1 (_ (concat (_ (@bv (_ (+ (_ (* n1) (_ (* (int.pow2 w2)) 1))) (_ (+ n2) 0))) ww1)) zs1))) (eo::list_concat concat xs1 (_ (concat (_ (@bv n1) w1)) (_ (concat (_ (@bv n2) w2)) zs1)))))
  )
)
; program: $eovc_bv-concat-merge-const
(program $eovc_bv-concat-merge-const ((@n1 Int) (@n0 Int) (xs1 (BitVec @n0)) (n1 Int) (n2 Int) (zs1 (BitVec @n1)) (ww1 Int) (w1 Int) (w2 Int))
  :signature (Int Int Int (BitVec @n1) Int Int (BitVec @n0)) Bool
  (
  (($eovc_bv-concat-merge-const w2 w1 ww1 zs1 n2 n1 xs1) (eo::define ((_v0 (_ (= ww1) (_ (+ w1) (_ (+ w2) 0))))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-concat-merge-const xs1 n1 w1 n2 w2 ww1 zs1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_bv-concat-merge-const")
; program: $eor_bv-commutative-add.fev1
(program $eor_bv-commutative-add.fev1 ((@n1 Int) (@n0 Int) ($eoT.fev1 Type) ($eoT.fev3 Type) ($eoT.fev5 Type) ($eo_4 $eoT.fev3) (y1 (BitVec @n1)) (x1 (BitVec @n0)) ($eo_2 $eoT.fev1))
  :signature ((BitVec @n1) (BitVec @n0) $eoT.fev1 $eoT.fev3) $eoT.fev5
  (
  (($eor_bv-commutative-add.fev1 y1 x1 $eo_2 $eo_4) (eo::define ((_v0 (bvadd x1))) (eo::define ((_v1 (bvadd y1))) (_ (= (_ _v0 (_ _v1 $eo_4))) (_ _v1 (_ _v0 $eo_2))))))
  )
)
; program: $eor_bv-commutative-add
(program $eor_bv-commutative-add ((@n0 Int) (@n1 Int) (y1 (BitVec @n1)) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) (BitVec @n1)) Bool
  (
  (($eor_bv-commutative-add x1 y1) ($eor_bv-commutative-add.fev1 y1 x1 (eo::nil bvadd (eo::typeof y1)) (eo::nil bvadd (eo::typeof x1))))
  )
)
; program: $eovc_bv-commutative-add
(program $eovc_bv-commutative-add ((@n1 Int) (@n0 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :signature ((BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-commutative-add y1 x1) ($eo_requires_eq ($eo_model_sat ($eor_bv-commutative-add x1 y1) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-commutative-add")
; program: $eor_bv-sub-eliminate.fev1
(program $eor_bv-sub-eliminate.fev1 ((@n0 Int) (@n1 Int) ($eoT.fev1 Type) ($eoT.fev3 Type) (x1 (BitVec @n0)) (y1 (BitVec @n1)) ($eo_2 $eoT.fev1))
  :signature ((BitVec @n0) (BitVec @n1) $eoT.fev1) $eoT.fev3
  (
  (($eor_bv-sub-eliminate.fev1 x1 y1 $eo_2) (_ (= (_ (bvsub x1) y1)) (_ (bvadd x1) (_ (bvadd (bvneg y1)) $eo_2))))
  )
)
; program: $eor_bv-sub-eliminate
(program $eor_bv-sub-eliminate ((@n0 Int) (@n1 Int) (y1 (BitVec @n1)) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) (BitVec @n1)) Bool
  (
  (($eor_bv-sub-eliminate x1 y1) ($eor_bv-sub-eliminate.fev1 x1 y1 (eo::nil bvadd (eo::typeof x1))))
  )
)
; program: $eovc_bv-sub-eliminate
(program $eovc_bv-sub-eliminate ((@n1 Int) (@n0 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :signature ((BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-sub-eliminate y1 x1) ($eo_requires_eq ($eo_model_sat ($eor_bv-sub-eliminate x1 y1) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-sub-eliminate")
; program: $eor_bv-ite-width-one
(program $eor_bv-ite-width-one ((@n0 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0)) Bool
  (
  (($eor_bv-ite-width-one x1) (eo::define ((_v0 (_ (@bv 1) 1))) (_ (= (_ (_ (ite (_ (= x1) _v0)) _v0) (_ (@bv 0) 1))) x1)))
  )
)
; program: $eovc_bv-ite-width-one
(program $eovc_bv-ite-width-one ((@n0 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0)) Bool
  (
  (($eovc_bv-ite-width-one x1) ($eo_requires_eq ($eo_model_sat ($eor_bv-ite-width-one x1) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-ite-width-one")
; program: $eor_bv-ite-width-one-not
(program $eor_bv-ite-width-one-not ((@n0 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0)) Bool
  (
  (($eor_bv-ite-width-one-not x1) (eo::define ((_v0 (_ (@bv 0) 1))) (_ (= (_ (_ (ite (_ (= x1) _v0)) (_ (@bv 1) 1)) _v0)) (bvnot x1))))
  )
)
; program: $eovc_bv-ite-width-one-not
(program $eovc_bv-ite-width-one-not ((@n0 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0)) Bool
  (
  (($eovc_bv-ite-width-one-not x1) ($eo_requires_eq ($eo_model_sat ($eor_bv-ite-width-one-not x1) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-ite-width-one-not")
; program: $eor_bv-eq-xor-solve.fev1
(program $eor_bv-eq-xor-solve.fev1 ((@n2 Int) (@n1 Int) (@n0 Int) ($eoT.fev1 Type) ($eoT.fev3 Type) ($eoT.fev5 Type) ($eo_4 $eoT.fev3) (x1 (BitVec @n0)) (z1 (BitVec @n2)) (y1 (BitVec @n1)) ($eo_2 $eoT.fev1))
  :signature ((BitVec @n2) (BitVec @n1) (BitVec @n0) $eoT.fev1 $eoT.fev3) $eoT.fev5
  (
  (($eor_bv-eq-xor-solve.fev1 z1 y1 x1 $eo_2 $eo_4) (eo::define ((_v0 (bvxor y1))) (_ (= (_ (= (_ (= (_ (bvxor x1) (_ _v0 $eo_4))) z1)) (_ (= x1) (_ (bvxor z1) (_ _v0 $eo_2))))) true)))
  )
)
; program: $eor_bv-eq-xor-solve
(program $eor_bv-eq-xor-solve ((@n0 Int) (@n1 Int) (@n2 Int) (y1 (BitVec @n1)) (z1 (BitVec @n2)) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n2)) Bool
  (
  (($eor_bv-eq-xor-solve x1 y1 z1) ($eor_bv-eq-xor-solve.fev1 z1 y1 x1 (eo::nil bvxor (eo::typeof z1)) (eo::nil bvxor (eo::typeof x1))))
  )
)
; program: $eovc_bv-eq-xor-solve
(program $eovc_bv-eq-xor-solve ((@n2 Int) (@n1 Int) (@n0 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)) (z1 (BitVec @n2)))
  :signature ((BitVec @n2) (BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-eq-xor-solve z1 y1 x1) ($eo_requires_eq ($eo_model_sat ($eor_bv-eq-xor-solve x1 y1 z1) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-eq-xor-solve")
; program: $eor_bv-eq-not-solve
(program $eor_bv-eq-not-solve ((@n0 Int) (@n1 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :signature ((BitVec @n0) (BitVec @n1)) Bool
  (
  (($eor_bv-eq-not-solve x1 y1) (_ (= (_ (= (_ (= (bvnot x1)) y1)) (_ (= x1) (bvnot y1)))) true))
  )
)
; program: $eovc_bv-eq-not-solve
(program $eovc_bv-eq-not-solve ((@n1 Int) (@n0 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :signature ((BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-eq-not-solve y1 x1) ($eo_requires_eq ($eo_model_sat ($eor_bv-eq-not-solve x1 y1) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-eq-not-solve")
; program: $eor_bv-ugt-eliminate
(program $eor_bv-ugt-eliminate ((@n0 Int) (@n1 Int) (y1 (BitVec @n1)) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) (BitVec @n1)) Bool
  (
  (($eor_bv-ugt-eliminate x1 y1) (_ (= (_ (bvugt x1) y1)) (_ (bvult y1) x1)))
  )
)
; program: $eovc_bv-ugt-eliminate
(program $eovc_bv-ugt-eliminate ((@n1 Int) (@n0 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :signature ((BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-ugt-eliminate y1 x1) ($eo_requires_eq ($eo_model_sat ($eor_bv-ugt-eliminate x1 y1) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-ugt-eliminate")
; program: $eor_bv-uge-eliminate
(program $eor_bv-uge-eliminate ((@n0 Int) (@n1 Int) (y1 (BitVec @n1)) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) (BitVec @n1)) Bool
  (
  (($eor_bv-uge-eliminate x1 y1) (_ (= (_ (bvuge x1) y1)) (_ (bvule y1) x1)))
  )
)
; program: $eovc_bv-uge-eliminate
(program $eovc_bv-uge-eliminate ((@n1 Int) (@n0 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :signature ((BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-uge-eliminate y1 x1) ($eo_requires_eq ($eo_model_sat ($eor_bv-uge-eliminate x1 y1) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-uge-eliminate")
; program: $eor_bv-sgt-eliminate
(program $eor_bv-sgt-eliminate ((@n0 Int) (@n1 Int) (y1 (BitVec @n1)) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) (BitVec @n1)) Bool
  (
  (($eor_bv-sgt-eliminate x1 y1) (_ (= (_ (bvsgt x1) y1)) (_ (bvslt y1) x1)))
  )
)
; program: $eovc_bv-sgt-eliminate
(program $eovc_bv-sgt-eliminate ((@n1 Int) (@n0 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :signature ((BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-sgt-eliminate y1 x1) ($eo_requires_eq ($eo_model_sat ($eor_bv-sgt-eliminate x1 y1) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-sgt-eliminate")
; program: $eor_bv-sge-eliminate
(program $eor_bv-sge-eliminate ((@n0 Int) (@n1 Int) (y1 (BitVec @n1)) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) (BitVec @n1)) Bool
  (
  (($eor_bv-sge-eliminate x1 y1) (_ (= (_ (bvsge x1) y1)) (_ (bvsle y1) x1)))
  )
)
; program: $eovc_bv-sge-eliminate
(program $eovc_bv-sge-eliminate ((@n1 Int) (@n0 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :signature ((BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-sge-eliminate y1 x1) ($eo_requires_eq ($eo_model_sat ($eor_bv-sge-eliminate x1 y1) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-sge-eliminate")
; program: $eor_bv-sle-eliminate
(program $eor_bv-sle-eliminate ((@n0 Int) (@n1 Int) (y1 (BitVec @n1)) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) (BitVec @n1)) Bool
  (
  (($eor_bv-sle-eliminate x1 y1) (_ (= (_ (bvsle x1) y1)) (not (_ (bvslt y1) x1))))
  )
)
; program: $eovc_bv-sle-eliminate
(program $eovc_bv-sle-eliminate ((@n1 Int) (@n0 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :signature ((BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-sle-eliminate y1 x1) ($eo_requires_eq ($eo_model_sat ($eor_bv-sle-eliminate x1 y1) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-sle-eliminate")
; program: $eor_bv-redor-eliminate
(program $eor_bv-redor-eliminate ((@n0 Int) (x1 (BitVec @n0)) (w1 Int))
  :signature ((BitVec @n0) Int Bool) Bool
  (
  (($eor_bv-redor-eliminate x1 w1 (_ (= w1) (@bvsize x1))) (_ (= (bvredor x1)) (bvnot (_ (bvcomp x1) (_ (@bv 0) w1)))))
  )
)
; program: $eovc_bv-redor-eliminate
(program $eovc_bv-redor-eliminate ((@n0 Int) (w1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int) Bool
  (
  (($eovc_bv-redor-eliminate x1 w1) (eo::define ((_v0 (_ (= w1) (@bvsize x1)))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-redor-eliminate x1 w1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_bv-redor-eliminate")
; program: $eor_bv-redand-eliminate
(program $eor_bv-redand-eliminate ((@n0 Int) (x1 (BitVec @n0)) (w1 Int))
  :signature ((BitVec @n0) Int Bool) Bool
  (
  (($eor_bv-redand-eliminate x1 w1 (_ (= w1) (@bvsize x1))) (_ (= (bvredand x1)) (_ (bvcomp x1) (bvnot (_ (@bv 0) w1)))))
  )
)
; program: $eovc_bv-redand-eliminate
(program $eovc_bv-redand-eliminate ((@n0 Int) (w1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int) Bool
  (
  (($eovc_bv-redand-eliminate x1 w1) (eo::define ((_v0 (_ (= w1) (@bvsize x1)))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-redand-eliminate x1 w1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_bv-redand-eliminate")
; program: $eor_bv-ule-eliminate
(program $eor_bv-ule-eliminate ((@n0 Int) (@n1 Int) (y1 (BitVec @n1)) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) (BitVec @n1)) Bool
  (
  (($eor_bv-ule-eliminate x1 y1) (_ (= (_ (bvule x1) y1)) (not (_ (bvult y1) x1))))
  )
)
; program: $eovc_bv-ule-eliminate
(program $eovc_bv-ule-eliminate ((@n1 Int) (@n0 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :signature ((BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-ule-eliminate y1 x1) ($eo_requires_eq ($eo_model_sat ($eor_bv-ule-eliminate x1 y1) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-ule-eliminate")
; program: $eor_bv-comp-eliminate
(program $eor_bv-comp-eliminate ((@n0 Int) (@n1 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :signature ((BitVec @n0) (BitVec @n1)) Bool
  (
  (($eor_bv-comp-eliminate x1 y1) (_ (= (_ (bvcomp x1) y1)) (_ (_ (ite (_ (= x1) y1)) (_ (@bv 1) 1)) (_ (@bv 0) 1))))
  )
)
; program: $eovc_bv-comp-eliminate
(program $eovc_bv-comp-eliminate ((@n1 Int) (@n0 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :signature ((BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-comp-eliminate y1 x1) ($eo_requires_eq ($eo_model_sat ($eor_bv-comp-eliminate x1 y1) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-comp-eliminate")
; program: $eor_bv-rotate-left-eliminate-1
(program $eor_bv-rotate-left-eliminate-1 ((@n0 Int) (amount1 Int) (u1 Int) (u2 Int) (l1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int Int Bool Bool Bool Bool) Bool
  (
  ((eo::define ((_v0 (@bvsize x1))) (eo::define ((_v1 (_ (mod amount1) _v0))) (eo::define ((_v2 (- _v0))) ($eor_bv-rotate-left-eliminate-1 x1 amount1 u1 u2 l1 (_ (= (_ (= _v1) 0)) false) (_ (= u1) (_ _v2 (_ (+ 1) (_ (+ _v1) 0)))) (_ (= u2) (_ _v2 1)) (_ (= l1) (_ _v2 _v1)))))) (_ (= (_ (rotate_left amount1) x1)) (_ (concat (_ (_ (extract u1) 0) x1)) (_ (concat (_ (_ (extract u2) l1) x1)) (eo::to_bin 0 0)))))
  )
)
; program: $eovc_bv-rotate-left-eliminate-1
(program $eovc_bv-rotate-left-eliminate-1 ((@n0 Int) (u1 Int) (u2 Int) (l1 Int) (amount1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int Int) Bool
  (
  (($eovc_bv-rotate-left-eliminate-1 x1 amount1 l1 u2 u1) (eo::define ((_v0 (@bvsize x1))) (eo::define ((_v1 (_ (mod amount1) _v0))) (eo::define ((_v2 (- _v0))) (eo::define ((_v3 (_ (= l1) (_ _v2 _v1)))) (eo::define ((_v4 (_ (= u2) (_ _v2 1)))) (eo::define ((_v5 (_ (= u1) (_ _v2 (_ (+ 1) (_ (+ _v1) 0)))))) (eo::define ((_v6 (_ (= (_ (= _v1) 0)) false))) ($eo_requires_eq ($eo_model_sat _v6 true false) true ($eo_requires_eq ($eo_model_sat _v5 true false) true ($eo_requires_eq ($eo_model_sat _v4 true false) true ($eo_requires_eq ($eo_model_sat _v3 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-rotate-left-eliminate-1 x1 amount1 u1 u2 l1 _v6 _v5 _v4 _v3) false false) true true)))))))))))))
  )
)
(echo "smt-meta $eovc_bv-rotate-left-eliminate-1")
; program: $eor_bv-rotate-left-eliminate-2
(program $eor_bv-rotate-left-eliminate-2 ((@n0 Int) (amount1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Bool) Bool
  (
  (($eor_bv-rotate-left-eliminate-2 x1 amount1 (_ (= (_ (mod amount1) (@bvsize x1))) 0)) (_ (= (_ (rotate_left amount1) x1)) x1))
  )
)
; program: $eovc_bv-rotate-left-eliminate-2
(program $eovc_bv-rotate-left-eliminate-2 ((@n0 Int) (amount1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int) Bool
  (
  (($eovc_bv-rotate-left-eliminate-2 x1 amount1) (eo::define ((_v0 (_ (= (_ (mod amount1) (@bvsize x1))) 0))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-rotate-left-eliminate-2 x1 amount1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_bv-rotate-left-eliminate-2")
; program: $eor_bv-rotate-right-eliminate-1
(program $eor_bv-rotate-right-eliminate-1 ((@n0 Int) (amount1 Int) (u1 Int) (u2 Int) (l1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int Int Bool Bool Bool Bool) Bool
  (
  ((eo::define ((_v0 (@bvsize x1))) (eo::define ((_v1 (_ (mod amount1) _v0))) ($eor_bv-rotate-right-eliminate-1 x1 amount1 u1 u2 l1 (_ (= (_ (= _v1) 0)) false) (_ (= u1) (_ (- _v1) 1)) (_ (= u2) (_ (- _v0) 1)) (_ (= l1) _v1)))) (_ (= (_ (rotate_right amount1) x1)) (_ (concat (_ (_ (extract u1) 0) x1)) (_ (concat (_ (_ (extract u2) l1) x1)) (eo::to_bin 0 0)))))
  )
)
; program: $eovc_bv-rotate-right-eliminate-1
(program $eovc_bv-rotate-right-eliminate-1 ((@n0 Int) (u1 Int) (u2 Int) (l1 Int) (amount1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int Int) Bool
  (
  (($eovc_bv-rotate-right-eliminate-1 x1 amount1 l1 u2 u1) (eo::define ((_v0 (@bvsize x1))) (eo::define ((_v1 (_ (mod amount1) _v0))) (eo::define ((_v2 (_ (= l1) _v1))) (eo::define ((_v3 (_ (= u2) (_ (- _v0) 1)))) (eo::define ((_v4 (_ (= u1) (_ (- _v1) 1)))) (eo::define ((_v5 (_ (= (_ (= _v1) 0)) false))) ($eo_requires_eq ($eo_model_sat _v5 true false) true ($eo_requires_eq ($eo_model_sat _v4 true false) true ($eo_requires_eq ($eo_model_sat _v3 true false) true ($eo_requires_eq ($eo_model_sat _v2 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-rotate-right-eliminate-1 x1 amount1 u1 u2 l1 _v5 _v4 _v3 _v2) false false) true true))))))))))))
  )
)
(echo "smt-meta $eovc_bv-rotate-right-eliminate-1")
; program: $eor_bv-rotate-right-eliminate-2
(program $eor_bv-rotate-right-eliminate-2 ((@n0 Int) (amount1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Bool) Bool
  (
  (($eor_bv-rotate-right-eliminate-2 x1 amount1 (_ (= (_ (mod amount1) (@bvsize x1))) 0)) (_ (= (_ (rotate_right amount1) x1)) x1))
  )
)
; program: $eovc_bv-rotate-right-eliminate-2
(program $eovc_bv-rotate-right-eliminate-2 ((@n0 Int) (amount1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int) Bool
  (
  (($eovc_bv-rotate-right-eliminate-2 x1 amount1) (eo::define ((_v0 (_ (= (_ (mod amount1) (@bvsize x1))) 0))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-rotate-right-eliminate-2 x1 amount1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_bv-rotate-right-eliminate-2")
; program: $eor_bv-nand-eliminate.fev1
(program $eor_bv-nand-eliminate.fev1 ((@n0 Int) (@n1 Int) ($eoT.fev1 Type) ($eoT.fev3 Type) (x1 (BitVec @n0)) (y1 (BitVec @n1)) ($eo_2 $eoT.fev1))
  :signature ((BitVec @n0) (BitVec @n1) $eoT.fev1) $eoT.fev3
  (
  (($eor_bv-nand-eliminate.fev1 x1 y1 $eo_2) (_ (= (_ (bvnand x1) y1)) (bvnot (_ (bvand x1) (_ (bvand y1) $eo_2)))))
  )
)
; program: $eor_bv-nand-eliminate
(program $eor_bv-nand-eliminate ((@n0 Int) (@n1 Int) (y1 (BitVec @n1)) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) (BitVec @n1)) Bool
  (
  (($eor_bv-nand-eliminate x1 y1) ($eor_bv-nand-eliminate.fev1 x1 y1 (eo::nil bvand (eo::typeof x1))))
  )
)
; program: $eovc_bv-nand-eliminate
(program $eovc_bv-nand-eliminate ((@n1 Int) (@n0 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :signature ((BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-nand-eliminate y1 x1) ($eo_requires_eq ($eo_model_sat ($eor_bv-nand-eliminate x1 y1) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-nand-eliminate")
; program: $eor_bv-nor-eliminate.fev1
(program $eor_bv-nor-eliminate.fev1 ((@n0 Int) (@n1 Int) ($eoT.fev1 Type) ($eoT.fev3 Type) (x1 (BitVec @n0)) (y1 (BitVec @n1)) ($eo_2 $eoT.fev1))
  :signature ((BitVec @n0) (BitVec @n1) $eoT.fev1) $eoT.fev3
  (
  (($eor_bv-nor-eliminate.fev1 x1 y1 $eo_2) (_ (= (_ (bvnor x1) y1)) (bvnot (_ (bvor x1) (_ (bvor y1) $eo_2)))))
  )
)
; program: $eor_bv-nor-eliminate
(program $eor_bv-nor-eliminate ((@n0 Int) (@n1 Int) (y1 (BitVec @n1)) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) (BitVec @n1)) Bool
  (
  (($eor_bv-nor-eliminate x1 y1) ($eor_bv-nor-eliminate.fev1 x1 y1 (eo::nil bvor (eo::typeof x1))))
  )
)
; program: $eovc_bv-nor-eliminate
(program $eovc_bv-nor-eliminate ((@n1 Int) (@n0 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :signature ((BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-nor-eliminate y1 x1) ($eo_requires_eq ($eo_model_sat ($eor_bv-nor-eliminate x1 y1) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-nor-eliminate")
; program: $eor_bv-xnor-eliminate.fev1
(program $eor_bv-xnor-eliminate.fev1 ((@n0 Int) (@n1 Int) ($eoT.fev1 Type) ($eoT.fev3 Type) (x1 (BitVec @n0)) (y1 (BitVec @n1)) ($eo_2 $eoT.fev1))
  :signature ((BitVec @n0) (BitVec @n1) $eoT.fev1) $eoT.fev3
  (
  (($eor_bv-xnor-eliminate.fev1 x1 y1 $eo_2) (_ (= (_ (bvxnor x1) y1)) (bvnot (_ (bvxor x1) (_ (bvxor y1) $eo_2)))))
  )
)
; program: $eor_bv-xnor-eliminate
(program $eor_bv-xnor-eliminate ((@n0 Int) (@n1 Int) (y1 (BitVec @n1)) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) (BitVec @n1)) Bool
  (
  (($eor_bv-xnor-eliminate x1 y1) ($eor_bv-xnor-eliminate.fev1 x1 y1 (eo::nil bvxor (eo::typeof x1))))
  )
)
; program: $eovc_bv-xnor-eliminate
(program $eovc_bv-xnor-eliminate ((@n1 Int) (@n0 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :signature ((BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-xnor-eliminate y1 x1) ($eo_requires_eq ($eo_model_sat ($eor_bv-xnor-eliminate x1 y1) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-xnor-eliminate")
; program: $eor_bv-sdiv-eliminate
(program $eor_bv-sdiv-eliminate ((@n0 Int) (@n1 Int) (x1 (BitVec @n0)) (nm1 Int) (y1 (BitVec @n1)))
  :signature ((BitVec @n0) (BitVec @n1) Int Bool) Bool
  (
  (($eor_bv-sdiv-eliminate x1 y1 nm1 (_ (= nm1) (_ (- (@bvsize x1)) 1))) (eo::define ((_v0 (_ (@bv 1) 1))) (eo::define ((_v1 (_ (extract nm1) nm1))) (eo::define ((_v2 (_ (= (_ _v1 y1)) _v0))) (eo::define ((_v3 (_ (= (_ _v1 x1)) _v0))) (eo::define ((_v4 (_ (bvudiv (_ (_ (ite _v3) (bvneg x1)) x1)) (_ (_ (ite _v2) (bvneg y1)) y1)))) (_ (= (_ (bvsdiv x1) y1)) (_ (_ (ite (_ (xor _v3) _v2)) (bvneg _v4)) _v4))))))))
  )
)
; program: $eovc_bv-sdiv-eliminate
(program $eovc_bv-sdiv-eliminate ((@n0 Int) (@n1 Int) (y1 (BitVec @n1)) (nm1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int (BitVec @n1)) Bool
  (
  (($eovc_bv-sdiv-eliminate x1 nm1 y1) (eo::define ((_v0 (_ (= nm1) (_ (- (@bvsize x1)) 1)))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-sdiv-eliminate x1 y1 nm1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_bv-sdiv-eliminate")
; program: $eor_bv-zero-extend-eliminate
(program $eor_bv-zero-extend-eliminate ((@n0 Int) (n1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int) Bool
  (
  (($eor_bv-zero-extend-eliminate x1 n1) (_ (= (_ (zero_extend n1) x1)) (_ (concat (_ (@bv 0) n1)) (_ (concat x1) (eo::to_bin 0 0)))))
  )
)
; program: $eovc_bv-zero-extend-eliminate
(program $eovc_bv-zero-extend-eliminate ((@n0 Int) (x1 (BitVec @n0)) (n1 Int))
  :signature (Int (BitVec @n0)) Bool
  (
  (($eovc_bv-zero-extend-eliminate n1 x1) ($eo_requires_eq ($eo_model_sat ($eor_bv-zero-extend-eliminate x1 n1) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-zero-extend-eliminate")
; program: $eor_bv-uaddo-eliminate.fev1
(program $eor_bv-uaddo-eliminate.fev1 ((@n0 Int) (@n1 Int) ($eoT.fev1 Type) ($eoT.fev3 Type) (w1 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)) ($eo_2 $eoT.fev1))
  :signature ((BitVec @n0) (BitVec @n1) Int $eoT.fev1) $eoT.fev3
  (
  (($eor_bv-uaddo-eliminate.fev1 x1 y1 w1 $eo_2) (eo::define ((_v0 (concat (_ (@bv 0) 1)))) (_ (= (_ (bvuaddo x1) y1)) (_ (= (_ (_ (extract w1) w1) (_ (bvadd (_ _v0 (_ (concat x1) (eo::to_bin 0 0)))) (_ (bvadd (_ _v0 (_ (concat y1) (eo::to_bin 0 0)))) $eo_2)))) (_ (@bv 1) 1)))))
  )
)
; program: $eor_bv-uaddo-eliminate
(program $eor_bv-uaddo-eliminate ((@n0 Int) (@n1 Int) (y1 (BitVec @n1)) (w1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) (BitVec @n1) Int Bool) Bool
  (
  (($eor_bv-uaddo-eliminate x1 y1 w1 (_ (= w1) (@bvsize x1))) ($eor_bv-uaddo-eliminate.fev1 x1 y1 w1 (eo::nil bvadd (eo::typeof (_ (concat (_ (@bv 0) 1)) (_ (concat x1) (eo::to_bin 0 0)))))))
  )
)
; program: $eovc_bv-uaddo-eliminate
(program $eovc_bv-uaddo-eliminate ((@n0 Int) (@n1 Int) (y1 (BitVec @n1)) (w1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int (BitVec @n1)) Bool
  (
  (($eovc_bv-uaddo-eliminate x1 w1 y1) (eo::define ((_v0 (_ (= w1) (@bvsize x1)))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-uaddo-eliminate x1 y1 w1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_bv-uaddo-eliminate")
; program: $eor_bv-saddo-eliminate.fev1
(program $eor_bv-saddo-eliminate.fev1 ((@n0 Int) (@n1 Int) ($eoT.fev1 Type) ($eoT.fev3 Type) (wm1 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)) ($eo_2 $eoT.fev1))
  :signature ((BitVec @n0) (BitVec @n1) Int $eoT.fev1) $eoT.fev3
  (
  (($eor_bv-saddo-eliminate.fev1 x1 y1 wm1 $eo_2) (eo::define ((_v0 (_ (@bv 1) 1))) (eo::define ((_v1 (_ (extract wm1) wm1))) (eo::define ((_v2 (= (_ _v1 (_ (bvadd x1) (_ (bvadd y1) $eo_2)))))) (eo::define ((_v3 (_ (@bv 0) 1))) (eo::define ((_v4 (= (_ _v1 y1)))) (eo::define ((_v5 (= (_ _v1 x1)))) (_ (= (_ (bvsaddo x1) y1)) (_ (or (_ (and (_ (and (_ _v5 _v0)) (_ (and (_ _v4 _v0)) true))) (_ (and (_ _v2 _v3)) true))) (_ (or (_ (and (_ (and (_ _v5 _v3)) (_ (and (_ _v4 _v3)) true))) (_ (and (_ _v2 _v0)) true))) false))))))))))
  )
)
; program: $eor_bv-saddo-eliminate
(program $eor_bv-saddo-eliminate ((@n0 Int) (@n1 Int) (y1 (BitVec @n1)) (wm1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) (BitVec @n1) Int Bool) Bool
  (
  (($eor_bv-saddo-eliminate x1 y1 wm1 (_ (= wm1) (_ (- (@bvsize x1)) 1))) ($eor_bv-saddo-eliminate.fev1 x1 y1 wm1 (eo::nil bvadd (eo::typeof x1))))
  )
)
; program: $eovc_bv-saddo-eliminate
(program $eovc_bv-saddo-eliminate ((@n0 Int) (@n1 Int) (y1 (BitVec @n1)) (wm1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int (BitVec @n1)) Bool
  (
  (($eovc_bv-saddo-eliminate x1 wm1 y1) (eo::define ((_v0 (_ (= wm1) (_ (- (@bvsize x1)) 1)))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-saddo-eliminate x1 y1 wm1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_bv-saddo-eliminate")
; program: $eor_bv-sdivo-eliminate
(program $eor_bv-sdivo-eliminate ((@n0 Int) (@n1 Int) (x1 (BitVec @n0)) (wm1 Int) (y1 (BitVec @n1)) (w1 Int))
  :signature ((BitVec @n0) (BitVec @n1) Int Int Bool Bool) Bool
  (
  (($eor_bv-sdivo-eliminate x1 y1 w1 wm1 (_ (= wm1) (_ (- (@bvsize x1)) 1)) (_ (= w1) (@bvsize y1))) (eo::define ((_v0 (@bv 0))) (_ (= (_ (bvsdivo x1) y1)) (_ (and (_ (= x1) (_ (concat (_ (@bv 1) 1)) (_ (concat (_ _v0 wm1)) (eo::to_bin 0 0))))) (_ (and (_ (= y1) (bvnot (_ _v0 w1)))) true)))))
  )
)
; program: $eovc_bv-sdivo-eliminate
(program $eovc_bv-sdivo-eliminate ((@n1 Int) (@n0 Int) (wm1 Int) (x1 (BitVec @n0)) (w1 Int) (y1 (BitVec @n1)))
  :signature ((BitVec @n1) Int (BitVec @n0) Int) Bool
  (
  (($eovc_bv-sdivo-eliminate y1 w1 x1 wm1) (eo::define ((_v0 (_ (= w1) (@bvsize y1)))) (eo::define ((_v1 (_ (= wm1) (_ (- (@bvsize x1)) 1)))) ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-sdivo-eliminate x1 y1 w1 wm1 _v1 _v0) false false) true true))))))
  )
)
(echo "smt-meta $eovc_bv-sdivo-eliminate")
; program: $eor_bv-smod-eliminate.fev1
(program $eor_bv-smod-eliminate.fev1 ((@n1 Int) (@n0 Int) ($eoT.fev1 Type) ($eoT.fev3 Type) ($eoT.fev5 Type) (w1 Int) ($eo_4 $eoT.fev3) ($eo_2 $eoT.fev1) (x1 (BitVec @n0)) (wm1 Int) (y1 (BitVec @n1)))
  :signature ((BitVec @n1) Int (BitVec @n0) Int $eoT.fev1 $eoT.fev3) $eoT.fev5
  (
  (($eor_bv-smod-eliminate.fev1 y1 wm1 x1 w1 $eo_2 $eo_4) (eo::define ((_v0 (@bv 0))) (eo::define ((_v1 (_ _v0 1))) (eo::define ((_v2 (_ (extract wm1) wm1))) (eo::define ((_v3 (= (_ _v2 y1)))) (eo::define ((_v4 (_ _v3 _v1))) (eo::define ((_v5 (= (_ _v2 x1)))) (eo::define ((_v6 (_ _v5 _v1))) (eo::define ((_v7 (_ (bvurem (_ (_ (ite _v6) x1) (bvneg x1))) (_ (_ (ite _v4) y1) (bvneg y1))))) (eo::define ((_v8 (bvneg _v7))) (eo::define ((_v9 (bvadd y1))) (eo::define ((_v10 (_ (@bv 1) 1))) (eo::define ((_v11 (and _v6))) (eo::define ((_v12 (_ (and _v4) true))) (_ (= (_ (bvsmod x1) y1)) (_ (_ (ite (_ (= _v7) (_ _v0 w1))) _v7) (_ (_ (ite (_ _v11 _v12)) _v7) (_ (_ (ite (_ (and (_ _v5 _v10)) _v12)) (_ (bvadd _v8) (_ _v9 $eo_4))) (_ (_ (ite (_ _v11 (_ (and (_ _v3 _v10)) true))) (_ (bvadd _v7) (_ _v9 $eo_2))) _v8)))))))))))))))))))
  )
)
; program: $eor_bv-smod-eliminate
(program $eor_bv-smod-eliminate ((@n0 Int) (@n1 Int) (w1 Int) (x1 (BitVec @n0)) (wm1 Int) (y1 (BitVec @n1)))
  :signature ((BitVec @n0) (BitVec @n1) Int Int Bool Bool) Bool
  (
  ((eo::define ((_v0 (@bvsize x1))) ($eor_bv-smod-eliminate x1 y1 w1 wm1 (_ (= w1) _v0) (_ (= wm1) (_ (- _v0) 1)))) (eo::define ((_v0 (_ (@bv 0) 1))) (eo::define ((_v1 (_ (extract wm1) wm1))) (eo::define ((_v2 (_ (bvurem (_ (_ (ite (_ (= (_ _v1 x1)) _v0)) x1) (bvneg x1))) (_ (_ (ite (_ (= (_ _v1 y1)) _v0)) y1) (bvneg y1))))) ($eor_bv-smod-eliminate.fev1 y1 wm1 x1 w1 (eo::nil bvadd (eo::typeof _v2)) (eo::nil bvadd (eo::typeof (bvneg _v2))))))))
  )
)
; program: $eovc_bv-smod-eliminate
(program $eovc_bv-smod-eliminate ((@n0 Int) (@n1 Int) (y1 (BitVec @n1)) (w1 Int) (wm1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int (BitVec @n1)) Bool
  (
  (($eovc_bv-smod-eliminate x1 wm1 w1 y1) (eo::define ((_v0 (@bvsize x1))) (eo::define ((_v1 (_ (= wm1) (_ (- _v0) 1)))) (eo::define ((_v2 (_ (= w1) _v0))) ($eo_requires_eq ($eo_model_sat _v2 true false) true ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-smod-eliminate x1 y1 w1 wm1 _v2 _v1) false false) true true)))))))
  )
)
(echo "smt-meta $eovc_bv-smod-eliminate")
; program: $eor_bv-srem-eliminate
(program $eor_bv-srem-eliminate ((@n0 Int) (@n1 Int) (x1 (BitVec @n0)) (nm1 Int) (y1 (BitVec @n1)))
  :signature ((BitVec @n0) (BitVec @n1) Int Bool) Bool
  (
  (($eor_bv-srem-eliminate x1 y1 nm1 (_ (= nm1) (_ (- (@bvsize x1)) 1))) (eo::define ((_v0 (_ (@bv 1) 1))) (eo::define ((_v1 (_ (extract nm1) nm1))) (eo::define ((_v2 (ite (_ (= (_ _v1 x1)) _v0)))) (eo::define ((_v3 (_ (bvurem (_ (_ _v2 (bvneg x1)) x1)) (_ (_ (ite (_ (= (_ _v1 y1)) _v0)) (bvneg y1)) y1)))) (_ (= (_ (bvsrem x1) y1)) (_ (_ _v2 (bvneg _v3)) _v3)))))))
  )
)
; program: $eovc_bv-srem-eliminate
(program $eovc_bv-srem-eliminate ((@n0 Int) (@n1 Int) (y1 (BitVec @n1)) (nm1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int (BitVec @n1)) Bool
  (
  (($eovc_bv-srem-eliminate x1 nm1 y1) (eo::define ((_v0 (_ (= nm1) (_ (- (@bvsize x1)) 1)))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-srem-eliminate x1 y1 nm1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_bv-srem-eliminate")
; program: $eor_bv-usubo-eliminate
(program $eor_bv-usubo-eliminate ((@n0 Int) (@n1 Int) (n1 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :signature ((BitVec @n0) (BitVec @n1) Int Bool) Bool
  (
  (($eor_bv-usubo-eliminate x1 y1 n1 (_ (= n1) (@bvsize x1))) (eo::define ((_v0 (zero_extend 1))) (_ (= (_ (bvusubo x1) y1)) (_ (= (_ (_ (extract n1) n1) (_ (bvsub (_ _v0 x1)) (_ _v0 y1)))) (_ (@bv 1) 1)))))
  )
)
; program: $eovc_bv-usubo-eliminate
(program $eovc_bv-usubo-eliminate ((@n0 Int) (@n1 Int) (y1 (BitVec @n1)) (n1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int (BitVec @n1)) Bool
  (
  (($eovc_bv-usubo-eliminate x1 n1 y1) (eo::define ((_v0 (_ (= n1) (@bvsize x1)))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-usubo-eliminate x1 y1 n1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_bv-usubo-eliminate")
; program: $eor_bv-ssubo-eliminate
(program $eor_bv-ssubo-eliminate ((@n0 Int) (@n1 Int) (nm1 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :signature ((BitVec @n0) (BitVec @n1) Int Bool) Bool
  (
  (($eor_bv-ssubo-eliminate x1 y1 nm1 (_ (= nm1) (_ (- (@bvsize x1)) 1))) (eo::define ((_v0 (_ (@bv 1) 1))) (eo::define ((_v1 (_ (extract nm1) nm1))) (eo::define ((_v2 (= (_ _v1 (_ (bvsub x1) y1))))) (eo::define ((_v3 (= (_ _v1 y1)))) (eo::define ((_v4 (_ (@bv 0) 1))) (eo::define ((_v5 (= (_ _v1 x1)))) (_ (= (_ (bvssubo x1) y1)) (_ (or (_ (and (_ (and (_ _v5 _v0)) (_ (and (_ _v3 _v4)) true))) (_ (and (_ _v2 _v4)) true))) (_ (or (_ (and (_ (and (_ _v5 _v4)) (_ (and (_ _v3 _v0)) true))) (_ (and (_ _v2 _v0)) true))) false))))))))))
  )
)
; program: $eovc_bv-ssubo-eliminate
(program $eovc_bv-ssubo-eliminate ((@n0 Int) (@n1 Int) (y1 (BitVec @n1)) (nm1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int (BitVec @n1)) Bool
  (
  (($eovc_bv-ssubo-eliminate x1 nm1 y1) (eo::define ((_v0 (_ (= nm1) (_ (- (@bvsize x1)) 1)))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-ssubo-eliminate x1 y1 nm1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_bv-ssubo-eliminate")
; program: $eor_bv-nego-eliminate
(program $eor_bv-nego-eliminate ((@n0 Int) (x1 (BitVec @n0)) (n1 Int))
  :signature ((BitVec @n0) Int Bool) Bool
  (
  (($eor_bv-nego-eliminate x1 n1 (_ (= n1) (_ (- (@bvsize x1)) 1))) (_ (= (bvnego x1)) (_ (= x1) (_ (concat (_ (@bv 1) 1)) (_ (concat (_ (@bv 0) n1)) (eo::to_bin 0 0))))))
  )
)
; program: $eovc_bv-nego-eliminate
(program $eovc_bv-nego-eliminate ((@n0 Int) (n1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int) Bool
  (
  (($eovc_bv-nego-eliminate x1 n1) (eo::define ((_v0 (_ (= n1) (_ (- (@bvsize x1)) 1)))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-nego-eliminate x1 n1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_bv-nego-eliminate")
; program: $eor_bv-ite-equal-children
(program $eor_bv-ite-equal-children ((@n0 Int) (c1 (BitVec 1)) (x1 (BitVec @n0)))
  :signature ((BitVec 1) (BitVec @n0)) Bool
  (
  (($eor_bv-ite-equal-children c1 x1) (_ (= (_ (_ (bvite c1) x1) x1)) x1))
  )
)
; program: $eovc_bv-ite-equal-children
(program $eovc_bv-ite-equal-children ((@n0 Int) (c1 (BitVec 1)) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) (BitVec 1)) Bool
  (
  (($eovc_bv-ite-equal-children x1 c1) ($eo_requires_eq ($eo_model_sat ($eor_bv-ite-equal-children c1 x1) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-ite-equal-children")
; program: $eor_bv-ite-const-children-1
(program $eor_bv-ite-const-children-1 ((c1 (BitVec 1)))
  :signature ((BitVec 1)) Bool
  (
  (($eor_bv-ite-const-children-1 c1) (_ (= (_ (_ (bvite c1) (_ (@bv 0) 1)) (_ (@bv 1) 1))) (bvnot c1)))
  )
)
; program: $eovc_bv-ite-const-children-1
(program $eovc_bv-ite-const-children-1 ((c1 (BitVec 1)))
  :signature ((BitVec 1)) Bool
  (
  (($eovc_bv-ite-const-children-1 c1) ($eo_requires_eq ($eo_model_sat ($eor_bv-ite-const-children-1 c1) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-ite-const-children-1")
; program: $eor_bv-ite-const-children-2
(program $eor_bv-ite-const-children-2 ((c1 (BitVec 1)))
  :signature ((BitVec 1)) Bool
  (
  (($eor_bv-ite-const-children-2 c1) (_ (= (_ (_ (bvite c1) (_ (@bv 1) 1)) (_ (@bv 0) 1))) c1))
  )
)
; program: $eovc_bv-ite-const-children-2
(program $eovc_bv-ite-const-children-2 ((c1 (BitVec 1)))
  :signature ((BitVec 1)) Bool
  (
  (($eovc_bv-ite-const-children-2 c1) ($eo_requires_eq ($eo_model_sat ($eor_bv-ite-const-children-2 c1) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-ite-const-children-2")
; program: $eor_bv-ite-equal-cond-1
(program $eor_bv-ite-equal-cond-1 ((@n0 Int) (@n1 Int) (@n2 Int) (e1 (BitVec @n1)) (c1 (BitVec 1)) (t1 (BitVec @n0)) (e2 (BitVec @n2)))
  :signature ((BitVec 1) (BitVec @n0) (BitVec @n1) (BitVec @n2)) Bool
  (
  (($eor_bv-ite-equal-cond-1 c1 t1 e1 e2) (eo::define ((_v0 (bvite c1))) (eo::define ((_v1 (_ _v0 t1))) (_ (= (_ (_ _v0 (_ _v1 e1)) e2)) (_ _v1 e2)))))
  )
)
; program: $eovc_bv-ite-equal-cond-1
(program $eovc_bv-ite-equal-cond-1 ((@n2 Int) (@n1 Int) (@n0 Int) (c1 (BitVec 1)) (t1 (BitVec @n0)) (e1 (BitVec @n1)) (e2 (BitVec @n2)))
  :signature ((BitVec @n2) (BitVec @n1) (BitVec @n0) (BitVec 1)) Bool
  (
  (($eovc_bv-ite-equal-cond-1 e2 e1 t1 c1) ($eo_requires_eq ($eo_model_sat ($eor_bv-ite-equal-cond-1 c1 t1 e1 e2) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-ite-equal-cond-1")
; program: $eor_bv-ite-equal-cond-2
(program $eor_bv-ite-equal-cond-2 ((@n0 Int) (@n1 Int) (@n2 Int) (t2 (BitVec @n1)) (c1 (BitVec 1)) (t1 (BitVec @n0)) (e1 (BitVec @n2)))
  :signature ((BitVec 1) (BitVec @n0) (BitVec @n1) (BitVec @n2)) Bool
  (
  (($eor_bv-ite-equal-cond-2 c1 t1 t2 e1) (eo::define ((_v0 (bvite c1))) (eo::define ((_v1 (_ _v0 t1))) (_ (= (_ _v1 (_ (_ _v0 t2) e1))) (_ _v1 e1)))))
  )
)
; program: $eovc_bv-ite-equal-cond-2
(program $eovc_bv-ite-equal-cond-2 ((@n2 Int) (@n1 Int) (@n0 Int) (c1 (BitVec 1)) (t1 (BitVec @n0)) (t2 (BitVec @n1)) (e1 (BitVec @n2)))
  :signature ((BitVec @n2) (BitVec @n1) (BitVec @n0) (BitVec 1)) Bool
  (
  (($eovc_bv-ite-equal-cond-2 e1 t2 t1 c1) ($eo_requires_eq ($eo_model_sat ($eor_bv-ite-equal-cond-2 c1 t1 t2 e1) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-ite-equal-cond-2")
; program: $eor_bv-ite-equal-cond-3
(program $eor_bv-ite-equal-cond-3 ((@n0 Int) (@n1 Int) (@n2 Int) (@n3 Int) (e1 (BitVec @n1)) (t2 (BitVec @n2)) (c1 (BitVec 1)) (t1 (BitVec @n0)) (e2 (BitVec @n3)))
  :signature ((BitVec 1) (BitVec @n0) (BitVec @n1) (BitVec @n2) (BitVec @n3)) Bool
  (
  (($eor_bv-ite-equal-cond-3 c1 t1 e1 t2 e2) (eo::define ((_v0 (bvite c1))) (eo::define ((_v1 (_ _v0 t1))) (_ (= (_ (_ _v0 (_ _v1 e1)) (_ (_ _v0 t2) e2))) (_ _v1 e2)))))
  )
)
; program: $eovc_bv-ite-equal-cond-3
(program $eovc_bv-ite-equal-cond-3 ((@n3 Int) (@n2 Int) (@n1 Int) (@n0 Int) (c1 (BitVec 1)) (t1 (BitVec @n0)) (e1 (BitVec @n1)) (t2 (BitVec @n2)) (e2 (BitVec @n3)))
  :signature ((BitVec @n3) (BitVec @n2) (BitVec @n1) (BitVec @n0) (BitVec 1)) Bool
  (
  (($eovc_bv-ite-equal-cond-3 e2 t2 e1 t1 c1) ($eo_requires_eq ($eo_model_sat ($eor_bv-ite-equal-cond-3 c1 t1 e1 t2 e2) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-ite-equal-cond-3")
; program: $eor_bv-ite-merge-then-if
(program $eor_bv-ite-merge-then-if ((@n0 Int) (@n1 Int) (c1 (BitVec 1)) (c2 (BitVec 1)) (e1 (BitVec @n1)) (t1 (BitVec @n0)))
  :signature ((BitVec 1) (BitVec 1) (BitVec @n0) (BitVec @n1)) Bool
  (
  (($eor_bv-ite-merge-then-if c1 c2 t1 e1) (_ (= (_ (_ (bvite c1) (_ (_ (bvite c2) t1) e1)) t1)) (_ (_ (bvite (_ (bvand c1) (_ (bvand (bvnot c2)) #b1))) e1) t1)))
  )
)
; program: $eovc_bv-ite-merge-then-if
(program $eovc_bv-ite-merge-then-if ((@n1 Int) (@n0 Int) (c1 (BitVec 1)) (c2 (BitVec 1)) (t1 (BitVec @n0)) (e1 (BitVec @n1)))
  :signature ((BitVec @n1) (BitVec @n0) (BitVec 1) (BitVec 1)) Bool
  (
  (($eovc_bv-ite-merge-then-if e1 t1 c2 c1) ($eo_requires_eq ($eo_model_sat ($eor_bv-ite-merge-then-if c1 c2 t1 e1) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-ite-merge-then-if")
; program: $eor_bv-ite-merge-else-if
(program $eor_bv-ite-merge-else-if ((@n0 Int) (@n1 Int) (c1 (BitVec 1)) (c2 (BitVec 1)) (t1 (BitVec @n0)) (e1 (BitVec @n1)))
  :signature ((BitVec 1) (BitVec 1) (BitVec @n0) (BitVec @n1)) Bool
  (
  (($eor_bv-ite-merge-else-if c1 c2 t1 e1) (_ (= (_ (_ (bvite c1) (_ (_ (bvite c2) t1) e1)) e1)) (_ (_ (bvite (_ (bvand c1) (_ (bvand c2) #b1))) t1) e1)))
  )
)
; program: $eovc_bv-ite-merge-else-if
(program $eovc_bv-ite-merge-else-if ((@n1 Int) (@n0 Int) (c1 (BitVec 1)) (c2 (BitVec 1)) (t1 (BitVec @n0)) (e1 (BitVec @n1)))
  :signature ((BitVec @n1) (BitVec @n0) (BitVec 1) (BitVec 1)) Bool
  (
  (($eovc_bv-ite-merge-else-if e1 t1 c2 c1) ($eo_requires_eq ($eo_model_sat ($eor_bv-ite-merge-else-if c1 c2 t1 e1) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-ite-merge-else-if")
; program: $eor_bv-ite-merge-then-else
(program $eor_bv-ite-merge-then-else ((@n0 Int) (@n1 Int) (c1 (BitVec 1)) (c2 (BitVec 1)) (e1 (BitVec @n1)) (t1 (BitVec @n0)))
  :signature ((BitVec 1) (BitVec 1) (BitVec @n0) (BitVec @n1)) Bool
  (
  (($eor_bv-ite-merge-then-else c1 c2 t1 e1) (_ (= (_ (_ (bvite c1) t1) (_ (_ (bvite c2) t1) e1))) (_ (_ (bvite (_ (bvand (bvnot c1)) (_ (bvand (bvnot c2)) #b1))) e1) t1)))
  )
)
; program: $eovc_bv-ite-merge-then-else
(program $eovc_bv-ite-merge-then-else ((@n1 Int) (@n0 Int) (c1 (BitVec 1)) (c2 (BitVec 1)) (t1 (BitVec @n0)) (e1 (BitVec @n1)))
  :signature ((BitVec @n1) (BitVec @n0) (BitVec 1) (BitVec 1)) Bool
  (
  (($eovc_bv-ite-merge-then-else e1 t1 c2 c1) ($eo_requires_eq ($eo_model_sat ($eor_bv-ite-merge-then-else c1 c2 t1 e1) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-ite-merge-then-else")
; program: $eor_bv-ite-merge-else-else
(program $eor_bv-ite-merge-else-else ((@n0 Int) (@n1 Int) (c1 (BitVec 1)) (c2 (BitVec 1)) (t1 (BitVec @n0)) (t2 (BitVec @n1)))
  :signature ((BitVec 1) (BitVec 1) (BitVec @n0) (BitVec @n1)) Bool
  (
  (($eor_bv-ite-merge-else-else c1 c2 t1 t2) (_ (= (_ (_ (bvite c1) t2) (_ (_ (bvite c2) t1) t2))) (_ (_ (bvite (_ (bvand (bvnot c1)) (_ (bvand c2) #b1))) t1) t2)))
  )
)
; program: $eovc_bv-ite-merge-else-else
(program $eovc_bv-ite-merge-else-else ((@n1 Int) (@n0 Int) (c1 (BitVec 1)) (c2 (BitVec 1)) (t1 (BitVec @n0)) (t2 (BitVec @n1)))
  :signature ((BitVec @n1) (BitVec @n0) (BitVec 1) (BitVec 1)) Bool
  (
  (($eovc_bv-ite-merge-else-else t2 t1 c2 c1) ($eo_requires_eq ($eo_model_sat ($eor_bv-ite-merge-else-else c1 c2 t1 t2) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-ite-merge-else-else")
; program: $eor_bv-shl-by-const-0
(program $eor_bv-shl-by-const-0 ((@n0 Int) (sz1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int) Bool
  (
  (($eor_bv-shl-by-const-0 x1 sz1) (_ (= (_ (bvshl x1) (_ (@bv 0) sz1))) x1))
  )
)
; program: $eovc_bv-shl-by-const-0
(program $eovc_bv-shl-by-const-0 ((@n0 Int) (x1 (BitVec @n0)) (sz1 Int))
  :signature (Int (BitVec @n0)) Bool
  (
  (($eovc_bv-shl-by-const-0 sz1 x1) ($eo_requires_eq ($eo_model_sat ($eor_bv-shl-by-const-0 x1 sz1) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-shl-by-const-0")
; program: $eor_bv-shl-by-const-1
(program $eor_bv-shl-by-const-1 ((@n0 Int) (sz1 Int) (en1 Int) (x1 (BitVec @n0)) (amount1 Int))
  :signature ((BitVec @n0) Int Int Int Bool Bool) Bool
  (
  ((eo::define ((_v0 (@bvsize x1))) ($eor_bv-shl-by-const-1 x1 amount1 sz1 en1 (_ (= (_ (< amount1) _v0)) true) (_ (= en1) (_ (- _v0) (_ (+ 1) (_ (+ amount1) 0)))))) (_ (= (_ (bvshl x1) (_ (@bv amount1) sz1))) (_ (concat (_ (_ (extract en1) 0) x1)) (_ (concat (_ (@bv 0) amount1)) (eo::to_bin 0 0)))))
  )
)
; program: $eovc_bv-shl-by-const-1
(program $eovc_bv-shl-by-const-1 ((@n0 Int) (sz1 Int) (en1 Int) (x1 (BitVec @n0)) (amount1 Int))
  :signature (Int (BitVec @n0) Int Int) Bool
  (
  (($eovc_bv-shl-by-const-1 amount1 x1 en1 sz1) (eo::define ((_v0 (@bvsize x1))) (eo::define ((_v1 (_ (= en1) (_ (- _v0) (_ (+ 1) (_ (+ amount1) 0)))))) (eo::define ((_v2 (_ (= (_ (< amount1) _v0)) true))) ($eo_requires_eq ($eo_model_sat _v2 true false) true ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-shl-by-const-1 x1 amount1 sz1 en1 _v2 _v1) false false) true true)))))))
  )
)
(echo "smt-meta $eovc_bv-shl-by-const-1")
; program: $eor_bv-shl-by-const-2
(program $eor_bv-shl-by-const-2 ((@n0 Int) (x1 (BitVec @n0)) (amount1 Int) (sz1 Int) (w1 Int))
  :signature ((BitVec @n0) Int Int Int Bool Bool) Bool
  (
  ((eo::define ((_v0 (@bvsize x1))) ($eor_bv-shl-by-const-2 x1 amount1 sz1 w1 (_ (= (_ (>= amount1) _v0)) true) (_ (= w1) _v0))) (_ (= (_ (bvshl x1) (_ (@bv amount1) sz1))) (_ (@bv 0) w1)))
  )
)
; program: $eovc_bv-shl-by-const-2
(program $eovc_bv-shl-by-const-2 ((@n0 Int) (sz1 Int) (amount1 Int) (w1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int) Bool
  (
  (($eovc_bv-shl-by-const-2 x1 w1 amount1 sz1) (eo::define ((_v0 (@bvsize x1))) (eo::define ((_v1 (_ (= w1) _v0))) (eo::define ((_v2 (_ (= (_ (>= amount1) _v0)) true))) ($eo_requires_eq ($eo_model_sat _v2 true false) true ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-shl-by-const-2 x1 amount1 sz1 w1 _v2 _v1) false false) true true)))))))
  )
)
(echo "smt-meta $eovc_bv-shl-by-const-2")
; program: $eor_bv-lshr-by-const-0
(program $eor_bv-lshr-by-const-0 ((@n0 Int) (sz1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int) Bool
  (
  (($eor_bv-lshr-by-const-0 x1 sz1) (_ (= (_ (bvlshr x1) (_ (@bv 0) sz1))) x1))
  )
)
; program: $eovc_bv-lshr-by-const-0
(program $eovc_bv-lshr-by-const-0 ((@n0 Int) (x1 (BitVec @n0)) (sz1 Int))
  :signature (Int (BitVec @n0)) Bool
  (
  (($eovc_bv-lshr-by-const-0 sz1 x1) ($eo_requires_eq ($eo_model_sat ($eor_bv-lshr-by-const-0 x1 sz1) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-lshr-by-const-0")
; program: $eor_bv-lshr-by-const-1
(program $eor_bv-lshr-by-const-1 ((@n0 Int) (sz1 Int) (nm1 Int) (amount1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int Bool Bool) Bool
  (
  ((eo::define ((_v0 (@bvsize x1))) ($eor_bv-lshr-by-const-1 x1 amount1 sz1 nm1 (_ (= (_ (< amount1) _v0)) true) (_ (= nm1) (_ (- _v0) 1)))) (_ (= (_ (bvlshr x1) (_ (@bv amount1) sz1))) (_ (concat (_ (@bv 0) amount1)) (_ (concat (_ (_ (extract nm1) amount1) x1)) (eo::to_bin 0 0)))))
  )
)
; program: $eovc_bv-lshr-by-const-1
(program $eovc_bv-lshr-by-const-1 ((@n0 Int) (sz1 Int) (amount1 Int) (nm1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int) Bool
  (
  (($eovc_bv-lshr-by-const-1 x1 nm1 amount1 sz1) (eo::define ((_v0 (@bvsize x1))) (eo::define ((_v1 (_ (= nm1) (_ (- _v0) 1)))) (eo::define ((_v2 (_ (= (_ (< amount1) _v0)) true))) ($eo_requires_eq ($eo_model_sat _v2 true false) true ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-lshr-by-const-1 x1 amount1 sz1 nm1 _v2 _v1) false false) true true)))))))
  )
)
(echo "smt-meta $eovc_bv-lshr-by-const-1")
; program: $eor_bv-lshr-by-const-2
(program $eor_bv-lshr-by-const-2 ((@n0 Int) (x1 (BitVec @n0)) (amount1 Int) (sz1 Int))
  :signature ((BitVec @n0) Int Int Bool) Bool
  (
  (($eor_bv-lshr-by-const-2 x1 amount1 sz1 (_ (= (_ (>= amount1) (@bvsize x1))) true)) (_ (= (_ (bvlshr x1) (_ (@bv amount1) sz1))) (_ (@bv 0) sz1)))
  )
)
; program: $eovc_bv-lshr-by-const-2
(program $eovc_bv-lshr-by-const-2 ((@n0 Int) (sz1 Int) (amount1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int) Bool
  (
  (($eovc_bv-lshr-by-const-2 x1 amount1 sz1) (eo::define ((_v0 (_ (= (_ (>= amount1) (@bvsize x1))) true))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-lshr-by-const-2 x1 amount1 sz1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_bv-lshr-by-const-2")
; program: $eor_bv-ashr-by-const-0
(program $eor_bv-ashr-by-const-0 ((@n0 Int) (sz1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int) Bool
  (
  (($eor_bv-ashr-by-const-0 x1 sz1) (_ (= (_ (bvashr x1) (_ (@bv 0) sz1))) x1))
  )
)
; program: $eovc_bv-ashr-by-const-0
(program $eovc_bv-ashr-by-const-0 ((@n0 Int) (x1 (BitVec @n0)) (sz1 Int))
  :signature (Int (BitVec @n0)) Bool
  (
  (($eovc_bv-ashr-by-const-0 sz1 x1) ($eo_requires_eq ($eo_model_sat ($eor_bv-ashr-by-const-0 x1 sz1) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-ashr-by-const-0")
; program: $eor_bv-ashr-by-const-1
(program $eor_bv-ashr-by-const-1 ((@n0 Int) (sz1 Int) (nm1 Int) (amount1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int Bool Bool) Bool
  (
  ((eo::define ((_v0 (@bvsize x1))) ($eor_bv-ashr-by-const-1 x1 amount1 sz1 nm1 (_ (= (_ (< amount1) _v0)) true) (_ (= nm1) (_ (- _v0) 1)))) (eo::define ((_v0 (extract nm1))) (_ (= (_ (bvashr x1) (_ (@bv amount1) sz1))) (_ (concat (_ (repeat amount1) (_ (_ _v0 nm1) x1))) (_ (concat (_ (_ _v0 amount1) x1)) (eo::to_bin 0 0))))))
  )
)
; program: $eovc_bv-ashr-by-const-1
(program $eovc_bv-ashr-by-const-1 ((@n0 Int) (sz1 Int) (amount1 Int) (nm1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int) Bool
  (
  (($eovc_bv-ashr-by-const-1 x1 nm1 amount1 sz1) (eo::define ((_v0 (@bvsize x1))) (eo::define ((_v1 (_ (= nm1) (_ (- _v0) 1)))) (eo::define ((_v2 (_ (= (_ (< amount1) _v0)) true))) ($eo_requires_eq ($eo_model_sat _v2 true false) true ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-ashr-by-const-1 x1 amount1 sz1 nm1 _v2 _v1) false false) true true)))))))
  )
)
(echo "smt-meta $eovc_bv-ashr-by-const-1")
; program: $eor_bv-ashr-by-const-2
(program $eor_bv-ashr-by-const-2 ((@n0 Int) (amount1 Int) (sz1 Int) (rn1 Int) (nm1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int Int Bool Bool Bool) Bool
  (
  ((eo::define ((_v0 (@bvsize x1))) ($eor_bv-ashr-by-const-2 x1 amount1 sz1 nm1 rn1 (_ (= (_ (>= amount1) _v0)) true) (_ (= nm1) (_ (- _v0) 1)) (_ (= rn1) _v0))) (_ (= (_ (bvashr x1) (_ (@bv amount1) sz1))) (_ (repeat rn1) (_ (_ (extract nm1) nm1) x1))))
  )
)
; program: $eovc_bv-ashr-by-const-2
(program $eovc_bv-ashr-by-const-2 ((@n0 Int) (sz1 Int) (amount1 Int) (nm1 Int) (rn1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int Int) Bool
  (
  (($eovc_bv-ashr-by-const-2 x1 rn1 nm1 amount1 sz1) (eo::define ((_v0 (@bvsize x1))) (eo::define ((_v1 (_ (= rn1) _v0))) (eo::define ((_v2 (_ (= nm1) (_ (- _v0) 1)))) (eo::define ((_v3 (_ (= (_ (>= amount1) _v0)) true))) ($eo_requires_eq ($eo_model_sat _v3 true false) true ($eo_requires_eq ($eo_model_sat _v2 true false) true ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-ashr-by-const-2 x1 amount1 sz1 nm1 rn1 _v3 _v2 _v1) false false) true true)))))))))
  )
)
(echo "smt-meta $eovc_bv-ashr-by-const-2")
; program: $eor_bv-and-concat-pullup.fev3
(program $eor_bv-and-concat-pullup.fev3 ((@n2 Int) (@n1 Int) (@n4 Int) ($eoT.fev9 Type) (@n0 Int) ($eoT.fev12 Type) (ws1 (BitVec @n1)) ($eo_7 (BitVec @n4)) (xs1 (BitVec @n0)) ($eo_11 (BitVec @n0)) (nxm1 Int) (ny1 Int) ($eo_6 (BitVec @n4)) ($eo_10 $eoT.fev9) (nym1 Int) ($eo_5 (BitVec @n0)) (y1 (BitVec @n2)))
  :signature ((BitVec @n2) (BitVec @n0) Int Int Int (BitVec @n4) (BitVec @n1) (BitVec @n4) (BitVec @n0) $eoT.fev9 (BitVec @n0)) $eoT.fev12
  (
  (($eor_bv-and-concat-pullup.fev3 y1 $eo_5 nym1 ny1 nxm1 $eo_6 ws1 $eo_7 xs1 $eo_10 $eo_11) (_ (= $eo_11) (_ (concat (_ (bvand (_ (_ (extract nxm1) ny1) $eo_5)) (_ (bvand $eo_6) $eo_10))) (_ (concat (_ (bvand (_ (_ (extract nym1) 0) $eo_5)) (_ (bvand y1) #b1))) (eo::to_bin 0 0)))))
  )
)
; program: $eor_bv-and-concat-pullup.fev2
(program $eor_bv-and-concat-pullup.fev2 ((@n2 Int) (@n1 Int) (@n3 Int) (@n0 Int) (@n4 Int) ($eoT.fev8 Type) (z1 (BitVec @n3)) (ys1 (BitVec @n4)) (y1 (BitVec @n2)) (nym1 Int) ($eo_6 (BitVec @n4)) (nxm1 Int) (ny1 Int) ($eo_5 (BitVec @n0)) (xs1 (BitVec @n0)) ($eo_7 (BitVec @n4)) (ws1 (BitVec @n1)))
  :signature ((BitVec @n2) (BitVec @n1) (BitVec @n0) Int Int Int (BitVec @n3) (BitVec @n4) (BitVec @n0) (BitVec @n4) (BitVec @n4)) $eoT.fev8
  (
  (($eor_bv-and-concat-pullup.fev2 y1 ws1 xs1 nym1 ny1 nxm1 z1 ys1 $eo_5 $eo_6 $eo_7) ($eor_bv-and-concat-pullup.fev3 y1 $eo_5 nym1 ny1 nxm1 $eo_6 ws1 $eo_7 xs1 (eo::nil bvand (eo::typeof (_ (_ (extract nxm1) ny1) $eo_5))) (eo::list_concat bvand xs1 (_ (bvand $eo_7) ws1))))
  )
)
; program: $eor_bv-and-concat-pullup.fev1
(program $eor_bv-and-concat-pullup.fev1 ((@n2 Int) (@n1 Int) (@n3 Int) (@n4 Int) (@n0 Int) ($eoT.fev3 Type) ($ex_1 (BitVec @n0)) ($eo_4 $eoT.fev3) (nym1 Int) (ny1 Int) (nxm1 Int) (xs1 (BitVec @n0)) (ws1 (BitVec @n1)) (ys1 (BitVec @n4)) (z1 (BitVec @n3)) (y1 (BitVec @n2)))
  :signature ((BitVec @n2) (BitVec @n1) (BitVec @n0) Int Int Int (BitVec @n3) (BitVec @n4) (BitVec @n0) $eoT.fev3 $eoT.fev3) $eoT.fev3
  (
  (($eor_bv-and-concat-pullup.fev1 y1 ws1 xs1 nym1 ny1 nxm1 z1 ys1 $ex_1 $eo_4 $eo_4) (eo::define ((_v0 (concat z1))) ($eor_bv-and-concat-pullup.fev2 y1 ws1 xs1 nym1 ny1 nxm1 z1 ys1 ($singleton_elim (eo::list_concat bvand xs1 ws1)) ($singleton_elim (eo::list_concat concat ys1 (_ _v0 (eo::to_bin 0 0)))) (eo::list_concat concat ys1 (_ _v0 (_ (concat y1) (eo::to_bin 0 0)))))))
  )
)
; program: $eor_bv-and-concat-pullup
(program $eor_bv-and-concat-pullup ((@n0 Int) (@n1 Int) (@n2 Int) (@n3 Int) (@n4 Int) (y1 (BitVec @n2)) (nym1 Int) (ny1 Int) (nxm1 Int) (z1 (BitVec @n3)) (ys1 (BitVec @n4)) ($ex_1 (BitVec @n0)) (xs1 (BitVec @n0)) (ws1 (BitVec @n1)))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n2) (BitVec @n3) (BitVec @n4) Int Int Int Bool Bool Bool) Bool
  (
  ((eo::define ((_v0 (@bvsize y1))) ($eor_bv-and-concat-pullup xs1 ws1 y1 z1 ys1 nxm1 ny1 nym1 (_ (= ny1) _v0) (_ (= nxm1) (_ (- (@bvsize $ex_1)) 1)) (_ (= nym1) (_ (- _v0) 1)))) ($eor_bv-and-concat-pullup.fev1 y1 ws1 xs1 nym1 ny1 nxm1 z1 ys1 $ex_1 $ex_1 ($singleton_elim (eo::list_concat bvand xs1 ws1))))
  )
)
; program: $eovc_bv-and-concat-pullup.fev1
(program $eovc_bv-and-concat-pullup.fev1 ((@n2 Int) (@n1 Int) (@n4 Int) (@n3 Int) (@n0 Int) ($eo_3 Bool) ($eo_2 Bool) (xs1 (BitVec @n0)) (ws1 (BitVec @n1)) (z1 (BitVec @n3)) (ys1 (BitVec @n4)) (ny1 Int) (nxm1 Int) ($eo_1 (BitVec @n0)) (nym1 Int) (y1 (BitVec @n2)))
  :signature ((BitVec @n2) Int (BitVec @n1) (BitVec @n0) Int Int (BitVec @n4) (BitVec @n3) (BitVec @n0) Bool Bool) Bool
  (
  (($eovc_bv-and-concat-pullup.fev1 y1 nym1 ws1 xs1 nxm1 ny1 ys1 z1 $eo_1 $eo_2 $eo_3) (eo::define ((_v0 (@bvsize y1))) (eo::define ((_v1 (_ (= nxm1) (_ (- (@bvsize $eo_1)) 1)))) ($eo_requires_eq $eo_3 true ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq $eo_2 true ($eo_requires_eq ($eo_model_sat ($eor_bv-and-concat-pullup xs1 ws1 y1 z1 ys1 nxm1 ny1 nym1 (_ (= ny1) _v0) _v1 (_ (= nym1) (_ (- _v0) 1))) false false) true true)))))))
  )
)
; program: $eovc_bv-and-concat-pullup
(program $eovc_bv-and-concat-pullup ((@n2 Int) (@n1 Int) (@n0 Int) (@n4 Int) (@n3 Int) (nxm1 Int) (ys1 (BitVec @n4)) (z1 (BitVec @n3)) (xs1 (BitVec @n0)) (ws1 (BitVec @n1)) (nym1 Int) (ny1 Int) (y1 (BitVec @n2)))
  :signature ((BitVec @n2) Int (BitVec @n1) (BitVec @n0) Int Int (BitVec @n4) (BitVec @n3)) Bool
  (
  (($eovc_bv-and-concat-pullup y1 nym1 ws1 xs1 nxm1 ny1 ys1 z1) (eo::define ((_v0 (@bvsize y1))) ($eovc_bv-and-concat-pullup.fev1 y1 nym1 ws1 xs1 nxm1 ny1 ys1 z1 ($singleton_elim (eo::list_concat bvand xs1 ws1)) ($eo_model_sat (_ (= nym1) (_ (- _v0) 1)) true false) ($eo_model_sat (_ (= ny1) _v0) true false))))
  )
)
(echo "smt-meta $eovc_bv-and-concat-pullup")
; program: $eor_bv-or-concat-pullup.fev3
(program $eor_bv-or-concat-pullup.fev3 ((@n2 Int) (@n1 Int) (@n4 Int) ($eoT.fev9 Type) (@n0 Int) ($eoT.fev12 Type) (ws1 (BitVec @n1)) ($eo_7 (BitVec @n4)) (xs1 (BitVec @n0)) ($eo_11 (BitVec @n0)) (nxm1 Int) (ny1 Int) ($eo_6 (BitVec @n4)) ($eo_10 $eoT.fev9) (nym1 Int) ($eo_5 (BitVec @n0)) (y1 (BitVec @n2)))
  :signature ((BitVec @n2) (BitVec @n0) Int Int Int (BitVec @n4) (BitVec @n1) (BitVec @n4) (BitVec @n0) $eoT.fev9 (BitVec @n0)) $eoT.fev12
  (
  (($eor_bv-or-concat-pullup.fev3 y1 $eo_5 nym1 ny1 nxm1 $eo_6 ws1 $eo_7 xs1 $eo_10 $eo_11) (_ (= $eo_11) (_ (concat (_ (bvor (_ (_ (extract nxm1) ny1) $eo_5)) (_ (bvor $eo_6) $eo_10))) (_ (concat (_ (bvor (_ (_ (extract nym1) 0) $eo_5)) (_ (bvor y1) #b0))) (eo::to_bin 0 0)))))
  )
)
; program: $eor_bv-or-concat-pullup.fev2
(program $eor_bv-or-concat-pullup.fev2 ((@n2 Int) (@n1 Int) (@n3 Int) (@n0 Int) (@n4 Int) ($eoT.fev8 Type) (z1 (BitVec @n3)) (ys1 (BitVec @n4)) (y1 (BitVec @n2)) (nym1 Int) ($eo_6 (BitVec @n4)) (nxm1 Int) (ny1 Int) ($eo_5 (BitVec @n0)) (xs1 (BitVec @n0)) ($eo_7 (BitVec @n4)) (ws1 (BitVec @n1)))
  :signature ((BitVec @n2) (BitVec @n1) (BitVec @n0) Int Int Int (BitVec @n3) (BitVec @n4) (BitVec @n0) (BitVec @n4) (BitVec @n4)) $eoT.fev8
  (
  (($eor_bv-or-concat-pullup.fev2 y1 ws1 xs1 nym1 ny1 nxm1 z1 ys1 $eo_5 $eo_6 $eo_7) ($eor_bv-or-concat-pullup.fev3 y1 $eo_5 nym1 ny1 nxm1 $eo_6 ws1 $eo_7 xs1 (eo::nil bvor (eo::typeof (_ (_ (extract nxm1) ny1) $eo_5))) (eo::list_concat bvor xs1 (_ (bvor $eo_7) ws1))))
  )
)
; program: $eor_bv-or-concat-pullup.fev1
(program $eor_bv-or-concat-pullup.fev1 ((@n2 Int) (@n1 Int) (@n3 Int) (@n4 Int) (@n0 Int) ($eoT.fev3 Type) ($ex_1 (BitVec @n0)) ($eo_4 $eoT.fev3) (nym1 Int) (ny1 Int) (nxm1 Int) (xs1 (BitVec @n0)) (ws1 (BitVec @n1)) (ys1 (BitVec @n4)) (z1 (BitVec @n3)) (y1 (BitVec @n2)))
  :signature ((BitVec @n2) (BitVec @n1) (BitVec @n0) Int Int Int (BitVec @n3) (BitVec @n4) (BitVec @n0) $eoT.fev3 $eoT.fev3) $eoT.fev3
  (
  (($eor_bv-or-concat-pullup.fev1 y1 ws1 xs1 nym1 ny1 nxm1 z1 ys1 $ex_1 $eo_4 $eo_4) (eo::define ((_v0 (concat z1))) ($eor_bv-or-concat-pullup.fev2 y1 ws1 xs1 nym1 ny1 nxm1 z1 ys1 ($singleton_elim (eo::list_concat bvor xs1 ws1)) ($singleton_elim (eo::list_concat concat ys1 (_ _v0 (eo::to_bin 0 0)))) (eo::list_concat concat ys1 (_ _v0 (_ (concat y1) (eo::to_bin 0 0)))))))
  )
)
; program: $eor_bv-or-concat-pullup
(program $eor_bv-or-concat-pullup ((@n0 Int) (@n1 Int) (@n2 Int) (@n3 Int) (@n4 Int) (y1 (BitVec @n2)) (nym1 Int) (ny1 Int) (nxm1 Int) (z1 (BitVec @n3)) (ys1 (BitVec @n4)) ($ex_1 (BitVec @n0)) (xs1 (BitVec @n0)) (ws1 (BitVec @n1)))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n2) (BitVec @n3) (BitVec @n4) Int Int Int Bool Bool Bool) Bool
  (
  ((eo::define ((_v0 (@bvsize y1))) ($eor_bv-or-concat-pullup xs1 ws1 y1 z1 ys1 nxm1 ny1 nym1 (_ (= ny1) _v0) (_ (= nxm1) (_ (- (@bvsize $ex_1)) 1)) (_ (= nym1) (_ (- _v0) 1)))) ($eor_bv-or-concat-pullup.fev1 y1 ws1 xs1 nym1 ny1 nxm1 z1 ys1 $ex_1 $ex_1 ($singleton_elim (eo::list_concat bvor xs1 ws1))))
  )
)
; program: $eovc_bv-or-concat-pullup.fev1
(program $eovc_bv-or-concat-pullup.fev1 ((@n2 Int) (@n1 Int) (@n4 Int) (@n3 Int) (@n0 Int) ($eo_3 Bool) ($eo_2 Bool) (xs1 (BitVec @n0)) (ws1 (BitVec @n1)) (z1 (BitVec @n3)) (ys1 (BitVec @n4)) (ny1 Int) (nxm1 Int) ($eo_1 (BitVec @n0)) (nym1 Int) (y1 (BitVec @n2)))
  :signature ((BitVec @n2) Int (BitVec @n1) (BitVec @n0) Int Int (BitVec @n4) (BitVec @n3) (BitVec @n0) Bool Bool) Bool
  (
  (($eovc_bv-or-concat-pullup.fev1 y1 nym1 ws1 xs1 nxm1 ny1 ys1 z1 $eo_1 $eo_2 $eo_3) (eo::define ((_v0 (@bvsize y1))) (eo::define ((_v1 (_ (= nxm1) (_ (- (@bvsize $eo_1)) 1)))) ($eo_requires_eq $eo_3 true ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq $eo_2 true ($eo_requires_eq ($eo_model_sat ($eor_bv-or-concat-pullup xs1 ws1 y1 z1 ys1 nxm1 ny1 nym1 (_ (= ny1) _v0) _v1 (_ (= nym1) (_ (- _v0) 1))) false false) true true)))))))
  )
)
; program: $eovc_bv-or-concat-pullup
(program $eovc_bv-or-concat-pullup ((@n2 Int) (@n1 Int) (@n0 Int) (@n4 Int) (@n3 Int) (nxm1 Int) (ys1 (BitVec @n4)) (z1 (BitVec @n3)) (xs1 (BitVec @n0)) (ws1 (BitVec @n1)) (nym1 Int) (ny1 Int) (y1 (BitVec @n2)))
  :signature ((BitVec @n2) Int (BitVec @n1) (BitVec @n0) Int Int (BitVec @n4) (BitVec @n3)) Bool
  (
  (($eovc_bv-or-concat-pullup y1 nym1 ws1 xs1 nxm1 ny1 ys1 z1) (eo::define ((_v0 (@bvsize y1))) ($eovc_bv-or-concat-pullup.fev1 y1 nym1 ws1 xs1 nxm1 ny1 ys1 z1 ($singleton_elim (eo::list_concat bvor xs1 ws1)) ($eo_model_sat (_ (= nym1) (_ (- _v0) 1)) true false) ($eo_model_sat (_ (= ny1) _v0) true false))))
  )
)
(echo "smt-meta $eovc_bv-or-concat-pullup")
; program: $eor_bv-xor-concat-pullup.fev3
(program $eor_bv-xor-concat-pullup.fev3 ((@n2 Int) (@n1 Int) (@n4 Int) ($eoT.fev9 Type) (@n0 Int) ($eoT.fev12 Type) (ws1 (BitVec @n1)) ($eo_7 (BitVec @n4)) (xs1 (BitVec @n0)) ($eo_11 (BitVec @n0)) (nxm1 Int) (ny1 Int) ($eo_6 (BitVec @n4)) ($eo_10 $eoT.fev9) (nym1 Int) ($eo_5 (BitVec @n0)) (y1 (BitVec @n2)))
  :signature ((BitVec @n2) (BitVec @n0) Int Int Int (BitVec @n4) (BitVec @n1) (BitVec @n4) (BitVec @n0) $eoT.fev9 (BitVec @n0)) $eoT.fev12
  (
  (($eor_bv-xor-concat-pullup.fev3 y1 $eo_5 nym1 ny1 nxm1 $eo_6 ws1 $eo_7 xs1 $eo_10 $eo_11) (_ (= $eo_11) (_ (concat (_ (bvxor (_ (_ (extract nxm1) ny1) $eo_5)) (_ (bvxor $eo_6) $eo_10))) (_ (concat (_ (bvxor (_ (_ (extract nym1) 0) $eo_5)) (_ (bvxor y1) #b0))) (eo::to_bin 0 0)))))
  )
)
; program: $eor_bv-xor-concat-pullup.fev2
(program $eor_bv-xor-concat-pullup.fev2 ((@n2 Int) (@n1 Int) (@n3 Int) (@n0 Int) (@n4 Int) ($eoT.fev8 Type) (z1 (BitVec @n3)) (ys1 (BitVec @n4)) (y1 (BitVec @n2)) (nym1 Int) ($eo_6 (BitVec @n4)) (nxm1 Int) (ny1 Int) ($eo_5 (BitVec @n0)) (xs1 (BitVec @n0)) ($eo_7 (BitVec @n4)) (ws1 (BitVec @n1)))
  :signature ((BitVec @n2) (BitVec @n1) (BitVec @n0) Int Int Int (BitVec @n3) (BitVec @n4) (BitVec @n0) (BitVec @n4) (BitVec @n4)) $eoT.fev8
  (
  (($eor_bv-xor-concat-pullup.fev2 y1 ws1 xs1 nym1 ny1 nxm1 z1 ys1 $eo_5 $eo_6 $eo_7) ($eor_bv-xor-concat-pullup.fev3 y1 $eo_5 nym1 ny1 nxm1 $eo_6 ws1 $eo_7 xs1 (eo::nil bvxor (eo::typeof (_ (_ (extract nxm1) ny1) $eo_5))) (eo::list_concat bvxor xs1 (_ (bvxor $eo_7) ws1))))
  )
)
; program: $eor_bv-xor-concat-pullup.fev1
(program $eor_bv-xor-concat-pullup.fev1 ((@n2 Int) (@n1 Int) (@n3 Int) (@n4 Int) (@n0 Int) ($eoT.fev3 Type) ($ex_1 (BitVec @n0)) ($eo_4 $eoT.fev3) (nym1 Int) (ny1 Int) (nxm1 Int) (xs1 (BitVec @n0)) (ws1 (BitVec @n1)) (ys1 (BitVec @n4)) (z1 (BitVec @n3)) (y1 (BitVec @n2)))
  :signature ((BitVec @n2) (BitVec @n1) (BitVec @n0) Int Int Int (BitVec @n3) (BitVec @n4) (BitVec @n0) $eoT.fev3 $eoT.fev3) $eoT.fev3
  (
  (($eor_bv-xor-concat-pullup.fev1 y1 ws1 xs1 nym1 ny1 nxm1 z1 ys1 $ex_1 $eo_4 $eo_4) (eo::define ((_v0 (concat z1))) ($eor_bv-xor-concat-pullup.fev2 y1 ws1 xs1 nym1 ny1 nxm1 z1 ys1 ($singleton_elim (eo::list_concat bvxor xs1 ws1)) ($singleton_elim (eo::list_concat concat ys1 (_ _v0 (eo::to_bin 0 0)))) (eo::list_concat concat ys1 (_ _v0 (_ (concat y1) (eo::to_bin 0 0)))))))
  )
)
; program: $eor_bv-xor-concat-pullup
(program $eor_bv-xor-concat-pullup ((@n0 Int) (@n1 Int) (@n2 Int) (@n3 Int) (@n4 Int) (y1 (BitVec @n2)) (nym1 Int) (ny1 Int) (nxm1 Int) (z1 (BitVec @n3)) (ys1 (BitVec @n4)) ($ex_1 (BitVec @n0)) (xs1 (BitVec @n0)) (ws1 (BitVec @n1)))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n2) (BitVec @n3) (BitVec @n4) Int Int Int Bool Bool Bool) Bool
  (
  ((eo::define ((_v0 (@bvsize y1))) ($eor_bv-xor-concat-pullup xs1 ws1 y1 z1 ys1 nxm1 ny1 nym1 (_ (= ny1) _v0) (_ (= nxm1) (_ (- (@bvsize $ex_1)) 1)) (_ (= nym1) (_ (- _v0) 1)))) ($eor_bv-xor-concat-pullup.fev1 y1 ws1 xs1 nym1 ny1 nxm1 z1 ys1 $ex_1 $ex_1 ($singleton_elim (eo::list_concat bvxor xs1 ws1))))
  )
)
; program: $eovc_bv-xor-concat-pullup.fev1
(program $eovc_bv-xor-concat-pullup.fev1 ((@n2 Int) (@n1 Int) (@n4 Int) (@n3 Int) (@n0 Int) ($eo_3 Bool) ($eo_2 Bool) (xs1 (BitVec @n0)) (ws1 (BitVec @n1)) (z1 (BitVec @n3)) (ys1 (BitVec @n4)) (ny1 Int) (nxm1 Int) ($eo_1 (BitVec @n0)) (nym1 Int) (y1 (BitVec @n2)))
  :signature ((BitVec @n2) Int (BitVec @n1) (BitVec @n0) Int Int (BitVec @n4) (BitVec @n3) (BitVec @n0) Bool Bool) Bool
  (
  (($eovc_bv-xor-concat-pullup.fev1 y1 nym1 ws1 xs1 nxm1 ny1 ys1 z1 $eo_1 $eo_2 $eo_3) (eo::define ((_v0 (@bvsize y1))) (eo::define ((_v1 (_ (= nxm1) (_ (- (@bvsize $eo_1)) 1)))) ($eo_requires_eq $eo_3 true ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq $eo_2 true ($eo_requires_eq ($eo_model_sat ($eor_bv-xor-concat-pullup xs1 ws1 y1 z1 ys1 nxm1 ny1 nym1 (_ (= ny1) _v0) _v1 (_ (= nym1) (_ (- _v0) 1))) false false) true true)))))))
  )
)
; program: $eovc_bv-xor-concat-pullup
(program $eovc_bv-xor-concat-pullup ((@n2 Int) (@n1 Int) (@n0 Int) (@n4 Int) (@n3 Int) (nxm1 Int) (ys1 (BitVec @n4)) (z1 (BitVec @n3)) (xs1 (BitVec @n0)) (ws1 (BitVec @n1)) (nym1 Int) (ny1 Int) (y1 (BitVec @n2)))
  :signature ((BitVec @n2) Int (BitVec @n1) (BitVec @n0) Int Int (BitVec @n4) (BitVec @n3)) Bool
  (
  (($eovc_bv-xor-concat-pullup y1 nym1 ws1 xs1 nxm1 ny1 ys1 z1) (eo::define ((_v0 (@bvsize y1))) ($eovc_bv-xor-concat-pullup.fev1 y1 nym1 ws1 xs1 nxm1 ny1 ys1 z1 ($singleton_elim (eo::list_concat bvxor xs1 ws1)) ($eo_model_sat (_ (= nym1) (_ (- _v0) 1)) true false) ($eo_model_sat (_ (= ny1) _v0) true false))))
  )
)
(echo "smt-meta $eovc_bv-xor-concat-pullup")
; program: $eor_bv-and-concat-pullup2.fev4
(program $eor_bv-and-concat-pullup2.fev4 (($eoT.fev9 Type) (@n0 Int) (@n3 Int) ($eoT.fev12 Type) ($eoT.fev15 Type) ($eoT.fev17 Type) ($eo_13 $eoT.fev12) (nxm1 Int) (ny1 Int) (z1 (BitVec @n3)) ($eo_16 $eoT.fev15) (nym1 Int) ($eo_11 (BitVec @n0)) ($eo_10 $eoT.fev9))
  :signature ($eoT.fev9 (BitVec @n0) Int Int Int (BitVec @n3) $eoT.fev12 $eoT.fev15) $eoT.fev17
  (
  (($eor_bv-and-concat-pullup2.fev4 $eo_10 $eo_11 nym1 ny1 nxm1 z1 $eo_13 $eo_16) (_ (= $eo_13) (_ (concat (_ (bvand (_ (_ (extract nxm1) ny1) $eo_11)) (_ (bvand z1) $eo_16))) (_ (concat (_ (bvand (_ (_ (extract nym1) 0) $eo_11)) (_ (bvand $eo_10) #b1))) (eo::to_bin 0 0)))))
  )
)
; program: $eor_bv-and-concat-pullup2.fev3
(program $eor_bv-and-concat-pullup2.fev3 ((@n4 Int) (@n2 Int) (@n1 Int) (@n3 Int) ($eoT.fev9 Type) (@n0 Int) ($eoT.fev12 Type) ($eoT.fev14 Type) (ys1 (BitVec @n4)) (y1 (BitVec @n2)) (ws1 (BitVec @n1)) (xs1 (BitVec @n0)) ($eo_10 $eoT.fev9) (nym1 Int) (z1 (BitVec @n3)) ($eo_13 $eoT.fev12) (nxm1 Int) (ny1 Int) ($eo_11 (BitVec @n0)))
  :signature ((BitVec @n4) (BitVec @n2) (BitVec @n1) (BitVec @n0) Int Int Int (BitVec @n3) $eoT.fev9 (BitVec @n0) $eoT.fev12) $eoT.fev14
  (
  (($eor_bv-and-concat-pullup2.fev3 ys1 y1 ws1 xs1 nym1 ny1 nxm1 z1 $eo_10 $eo_11 $eo_13) ($eor_bv-and-concat-pullup2.fev4 $eo_10 $eo_11 nym1 ny1 nxm1 z1 $eo_13 (eo::nil bvand (eo::typeof (_ (_ (extract nxm1) ny1) $eo_11)))))
  )
)
; program: $eor_bv-and-concat-pullup2.fev2
(program $eor_bv-and-concat-pullup2.fev2 ((@n4 Int) (@n2 Int) (@n1 Int) (@n3 Int) (@n0 Int) ($eoT.fev7 Type) ($ex_2 (BitVec @n0)) ($eo_8 $eoT.fev7) (nym1 Int) (ny1 Int) (nxm1 Int) (xs1 (BitVec @n0)) (z1 (BitVec @n3)) (y1 (BitVec @n2)) (ys1 (BitVec @n4)) (ws1 (BitVec @n1)))
  :signature ((BitVec @n4) (BitVec @n2) (BitVec @n1) (BitVec @n0) Int Int Int (BitVec @n3) (BitVec @n0) $eoT.fev7 $eoT.fev7) $eoT.fev7
  (
  (($eor_bv-and-concat-pullup2.fev2 ys1 y1 ws1 xs1 nym1 ny1 nxm1 z1 $ex_2 $eo_8 $eo_8) (eo::define ((_v0 (_ (concat y1) ys1))) ($eor_bv-and-concat-pullup2.fev3 ys1 y1 ws1 xs1 nym1 ny1 nxm1 z1 ($singleton_elim _v0) ($singleton_elim (eo::list_concat bvand xs1 ws1)) (eo::list_concat bvand xs1 (_ (bvand (_ (concat z1) _v0)) ws1)))))
  )
)
; program: $eor_bv-and-concat-pullup2.fev1
(program $eor_bv-and-concat-pullup2.fev1 ((@n4 Int) (@n2 Int) (@n1 Int) (@n3 Int) (@n0 Int) ($eoT_15 Type) ($eoT.fev3 Type) ($ex_1 $eoT_15) ($eo_4 $eoT.fev3) (ys1 (BitVec @n4)) (y1 (BitVec @n2)) (nym1 Int) (ny1 Int) (nxm1 Int) (z1 (BitVec @n3)) ($ex_2 (BitVec @n0)) (xs1 (BitVec @n0)) (ws1 (BitVec @n1)))
  :signature ((BitVec @n4) (BitVec @n2) (BitVec @n1) (BitVec @n0) Int Int Int (BitVec @n3) (BitVec @n0) $eoT_15 $eoT.fev3 $eoT.fev3) $eoT.fev3
  (
  (($eor_bv-and-concat-pullup2.fev1 ys1 y1 ws1 xs1 nym1 ny1 nxm1 z1 $ex_2 $ex_1 $eo_4 $eo_4) ($eor_bv-and-concat-pullup2.fev2 ys1 y1 ws1 xs1 nym1 ny1 nxm1 z1 $ex_2 $ex_2 ($singleton_elim (eo::list_concat bvand xs1 ws1))))
  )
)
; program: $eor_bv-and-concat-pullup2
(program $eor_bv-and-concat-pullup2 ((@n0 Int) (@n1 Int) (@n2 Int) (@n3 Int) (@n4 Int) ($eoT_16 Type) ($eoT_17 Type) (ws1 (BitVec @n1)) (xs1 (BitVec @n0)) (nym1 Int) (ny1 Int) (nxm1 Int) (z1 (BitVec @n3)) ($ex_2 (BitVec @n0)) ($eoT_15 Type) ($ex_1 $eoT_15) (y1 (BitVec @n2)) (ys1 (BitVec @n4)))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n2) (BitVec @n3) (BitVec @n4) Int Int Int $eoT_16 Bool $eoT_17) Bool
  (
  ((eo::define ((_v0 (@bvsize $ex_1))) ($eor_bv-and-concat-pullup2 xs1 ws1 y1 z1 ys1 nxm1 ny1 nym1 (_ (= ny1) _v0) (_ (= nxm1) (_ (- (@bvsize $ex_2)) 1)) (_ (= nym1) (_ (- _v0) 1)))) ($eor_bv-and-concat-pullup2.fev1 ys1 y1 ws1 xs1 nym1 ny1 nxm1 z1 $ex_2 $ex_1 $ex_1 ($singleton_elim (_ (concat y1) ys1))))
  )
)
; program: $eovc_bv-and-concat-pullup2.fev1
(program $eovc_bv-and-concat-pullup2.fev1 ((@n4 Int) (@n2 Int) (@n1 Int) (@n3 Int) ($eoT.fev1 Type) (@n0 Int) ($eoT.fev4 Type) (xs1 (BitVec @n0)) (ws1 (BitVec @n1)) (y1 (BitVec @n2)) (z1 (BitVec @n3)) (ys1 (BitVec @n4)) (ny1 Int) (nxm1 Int) ($eo_3 (BitVec @n0)) (nym1 Int) ($eo_2 $eoT.fev1))
  :signature ((BitVec @n4) (BitVec @n2) Int (BitVec @n1) (BitVec @n0) Int Int (BitVec @n3) $eoT.fev1 (BitVec @n0)) $eoT.fev4
  (
  (($eovc_bv-and-concat-pullup2.fev1 ys1 y1 nym1 ws1 xs1 nxm1 ny1 z1 $eo_2 $eo_3) (eo::define ((_v0 (@bvsize $eo_2))) (eo::define ((_v1 (_ (= nym1) (_ (- _v0) 1)))) (eo::define ((_v2 (_ (= nxm1) (_ (- (@bvsize $eo_3)) 1)))) (eo::define ((_v3 (_ (= ny1) _v0))) ($eo_requires_eq ($eo_model_sat _v3 true false) true ($eo_requires_eq ($eo_model_sat _v2 true false) true ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-and-concat-pullup2 xs1 ws1 y1 z1 ys1 nxm1 ny1 nym1 _v3 _v2 _v1) false false) true true)))))))))
  )
)
; program: $eovc_bv-and-concat-pullup2
(program $eovc_bv-and-concat-pullup2 ((@n4 Int) (@n2 Int) (@n1 Int) (@n0 Int) (@n3 Int) (nym1 Int) (nxm1 Int) (ny1 Int) (z1 (BitVec @n3)) (y1 (BitVec @n2)) (ys1 (BitVec @n4)) (xs1 (BitVec @n0)) (ws1 (BitVec @n1)))
  :signature ((BitVec @n4) (BitVec @n2) Int (BitVec @n1) (BitVec @n0) Int Int (BitVec @n3)) Bool
  (
  (($eovc_bv-and-concat-pullup2 ys1 y1 nym1 ws1 xs1 nxm1 ny1 z1) ($eovc_bv-and-concat-pullup2.fev1 ys1 y1 nym1 ws1 xs1 nxm1 ny1 z1 ($singleton_elim (_ (concat y1) ys1)) ($singleton_elim (eo::list_concat bvand xs1 ws1))))
  )
)
(echo "smt-meta $eovc_bv-and-concat-pullup2")
; program: $eor_bv-or-concat-pullup2.fev4
(program $eor_bv-or-concat-pullup2.fev4 (($eoT.fev9 Type) (@n0 Int) (@n3 Int) ($eoT.fev12 Type) ($eoT.fev15 Type) ($eoT.fev17 Type) ($eo_13 $eoT.fev12) (nxm1 Int) (ny1 Int) (z1 (BitVec @n3)) ($eo_16 $eoT.fev15) (nym1 Int) ($eo_11 (BitVec @n0)) ($eo_10 $eoT.fev9))
  :signature ($eoT.fev9 (BitVec @n0) Int Int Int (BitVec @n3) $eoT.fev12 $eoT.fev15) $eoT.fev17
  (
  (($eor_bv-or-concat-pullup2.fev4 $eo_10 $eo_11 nym1 ny1 nxm1 z1 $eo_13 $eo_16) (_ (= $eo_13) (_ (concat (_ (bvor (_ (_ (extract nxm1) ny1) $eo_11)) (_ (bvor z1) $eo_16))) (_ (concat (_ (bvor (_ (_ (extract nym1) 0) $eo_11)) (_ (bvor $eo_10) #b0))) (eo::to_bin 0 0)))))
  )
)
; program: $eor_bv-or-concat-pullup2.fev3
(program $eor_bv-or-concat-pullup2.fev3 ((@n4 Int) (@n2 Int) (@n1 Int) (@n3 Int) ($eoT.fev9 Type) (@n0 Int) ($eoT.fev12 Type) ($eoT.fev14 Type) (ys1 (BitVec @n4)) (y1 (BitVec @n2)) (ws1 (BitVec @n1)) (xs1 (BitVec @n0)) ($eo_10 $eoT.fev9) (nym1 Int) (z1 (BitVec @n3)) ($eo_13 $eoT.fev12) (nxm1 Int) (ny1 Int) ($eo_11 (BitVec @n0)))
  :signature ((BitVec @n4) (BitVec @n2) (BitVec @n1) (BitVec @n0) Int Int Int (BitVec @n3) $eoT.fev9 (BitVec @n0) $eoT.fev12) $eoT.fev14
  (
  (($eor_bv-or-concat-pullup2.fev3 ys1 y1 ws1 xs1 nym1 ny1 nxm1 z1 $eo_10 $eo_11 $eo_13) ($eor_bv-or-concat-pullup2.fev4 $eo_10 $eo_11 nym1 ny1 nxm1 z1 $eo_13 (eo::nil bvor (eo::typeof (_ (_ (extract nxm1) ny1) $eo_11)))))
  )
)
; program: $eor_bv-or-concat-pullup2.fev2
(program $eor_bv-or-concat-pullup2.fev2 ((@n4 Int) (@n2 Int) (@n1 Int) (@n3 Int) (@n0 Int) ($eoT.fev7 Type) ($ex_2 (BitVec @n0)) ($eo_8 $eoT.fev7) (nym1 Int) (ny1 Int) (nxm1 Int) (xs1 (BitVec @n0)) (z1 (BitVec @n3)) (y1 (BitVec @n2)) (ys1 (BitVec @n4)) (ws1 (BitVec @n1)))
  :signature ((BitVec @n4) (BitVec @n2) (BitVec @n1) (BitVec @n0) Int Int Int (BitVec @n3) (BitVec @n0) $eoT.fev7 $eoT.fev7) $eoT.fev7
  (
  (($eor_bv-or-concat-pullup2.fev2 ys1 y1 ws1 xs1 nym1 ny1 nxm1 z1 $ex_2 $eo_8 $eo_8) (eo::define ((_v0 (_ (concat y1) ys1))) ($eor_bv-or-concat-pullup2.fev3 ys1 y1 ws1 xs1 nym1 ny1 nxm1 z1 ($singleton_elim _v0) ($singleton_elim (eo::list_concat bvor xs1 ws1)) (eo::list_concat bvor xs1 (_ (bvor (_ (concat z1) _v0)) ws1)))))
  )
)
; program: $eor_bv-or-concat-pullup2.fev1
(program $eor_bv-or-concat-pullup2.fev1 ((@n4 Int) (@n2 Int) (@n1 Int) (@n3 Int) (@n0 Int) ($eoT_18 Type) ($eoT.fev3 Type) ($ex_1 $eoT_18) ($eo_4 $eoT.fev3) (ys1 (BitVec @n4)) (y1 (BitVec @n2)) (nym1 Int) (ny1 Int) (nxm1 Int) (z1 (BitVec @n3)) ($ex_2 (BitVec @n0)) (xs1 (BitVec @n0)) (ws1 (BitVec @n1)))
  :signature ((BitVec @n4) (BitVec @n2) (BitVec @n1) (BitVec @n0) Int Int Int (BitVec @n3) (BitVec @n0) $eoT_18 $eoT.fev3 $eoT.fev3) $eoT.fev3
  (
  (($eor_bv-or-concat-pullup2.fev1 ys1 y1 ws1 xs1 nym1 ny1 nxm1 z1 $ex_2 $ex_1 $eo_4 $eo_4) ($eor_bv-or-concat-pullup2.fev2 ys1 y1 ws1 xs1 nym1 ny1 nxm1 z1 $ex_2 $ex_2 ($singleton_elim (eo::list_concat bvor xs1 ws1))))
  )
)
; program: $eor_bv-or-concat-pullup2
(program $eor_bv-or-concat-pullup2 ((@n0 Int) (@n1 Int) (@n2 Int) (@n3 Int) (@n4 Int) ($eoT_19 Type) ($eoT_20 Type) (ws1 (BitVec @n1)) (xs1 (BitVec @n0)) (nym1 Int) (ny1 Int) (nxm1 Int) (z1 (BitVec @n3)) ($ex_2 (BitVec @n0)) ($eoT_18 Type) ($ex_1 $eoT_18) (y1 (BitVec @n2)) (ys1 (BitVec @n4)))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n2) (BitVec @n3) (BitVec @n4) Int Int Int $eoT_19 Bool $eoT_20) Bool
  (
  ((eo::define ((_v0 (@bvsize $ex_1))) ($eor_bv-or-concat-pullup2 xs1 ws1 y1 z1 ys1 nxm1 ny1 nym1 (_ (= ny1) _v0) (_ (= nxm1) (_ (- (@bvsize $ex_2)) 1)) (_ (= nym1) (_ (- _v0) 1)))) ($eor_bv-or-concat-pullup2.fev1 ys1 y1 ws1 xs1 nym1 ny1 nxm1 z1 $ex_2 $ex_1 $ex_1 ($singleton_elim (_ (concat y1) ys1))))
  )
)
; program: $eovc_bv-or-concat-pullup2.fev1
(program $eovc_bv-or-concat-pullup2.fev1 ((@n4 Int) (@n2 Int) (@n1 Int) (@n3 Int) ($eoT.fev1 Type) (@n0 Int) ($eoT.fev4 Type) (xs1 (BitVec @n0)) (ws1 (BitVec @n1)) (y1 (BitVec @n2)) (z1 (BitVec @n3)) (ys1 (BitVec @n4)) (ny1 Int) (nxm1 Int) ($eo_3 (BitVec @n0)) (nym1 Int) ($eo_2 $eoT.fev1))
  :signature ((BitVec @n4) (BitVec @n2) Int (BitVec @n1) (BitVec @n0) Int Int (BitVec @n3) $eoT.fev1 (BitVec @n0)) $eoT.fev4
  (
  (($eovc_bv-or-concat-pullup2.fev1 ys1 y1 nym1 ws1 xs1 nxm1 ny1 z1 $eo_2 $eo_3) (eo::define ((_v0 (@bvsize $eo_2))) (eo::define ((_v1 (_ (= nym1) (_ (- _v0) 1)))) (eo::define ((_v2 (_ (= nxm1) (_ (- (@bvsize $eo_3)) 1)))) (eo::define ((_v3 (_ (= ny1) _v0))) ($eo_requires_eq ($eo_model_sat _v3 true false) true ($eo_requires_eq ($eo_model_sat _v2 true false) true ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-or-concat-pullup2 xs1 ws1 y1 z1 ys1 nxm1 ny1 nym1 _v3 _v2 _v1) false false) true true)))))))))
  )
)
; program: $eovc_bv-or-concat-pullup2
(program $eovc_bv-or-concat-pullup2 ((@n4 Int) (@n2 Int) (@n1 Int) (@n0 Int) (@n3 Int) (nym1 Int) (nxm1 Int) (ny1 Int) (z1 (BitVec @n3)) (y1 (BitVec @n2)) (ys1 (BitVec @n4)) (xs1 (BitVec @n0)) (ws1 (BitVec @n1)))
  :signature ((BitVec @n4) (BitVec @n2) Int (BitVec @n1) (BitVec @n0) Int Int (BitVec @n3)) Bool
  (
  (($eovc_bv-or-concat-pullup2 ys1 y1 nym1 ws1 xs1 nxm1 ny1 z1) ($eovc_bv-or-concat-pullup2.fev1 ys1 y1 nym1 ws1 xs1 nxm1 ny1 z1 ($singleton_elim (_ (concat y1) ys1)) ($singleton_elim (eo::list_concat bvor xs1 ws1))))
  )
)
(echo "smt-meta $eovc_bv-or-concat-pullup2")
; program: $eor_bv-xor-concat-pullup2.fev4
(program $eor_bv-xor-concat-pullup2.fev4 (($eoT.fev9 Type) (@n0 Int) (@n3 Int) ($eoT.fev12 Type) ($eoT.fev15 Type) ($eoT.fev17 Type) ($eo_13 $eoT.fev12) (nxm1 Int) (ny1 Int) (z1 (BitVec @n3)) ($eo_16 $eoT.fev15) (nym1 Int) ($eo_11 (BitVec @n0)) ($eo_10 $eoT.fev9))
  :signature ($eoT.fev9 (BitVec @n0) Int Int Int (BitVec @n3) $eoT.fev12 $eoT.fev15) $eoT.fev17
  (
  (($eor_bv-xor-concat-pullup2.fev4 $eo_10 $eo_11 nym1 ny1 nxm1 z1 $eo_13 $eo_16) (_ (= $eo_13) (_ (concat (_ (bvxor (_ (_ (extract nxm1) ny1) $eo_11)) (_ (bvxor z1) $eo_16))) (_ (concat (_ (bvxor (_ (_ (extract nym1) 0) $eo_11)) (_ (bvxor $eo_10) #b0))) (eo::to_bin 0 0)))))
  )
)
; program: $eor_bv-xor-concat-pullup2.fev3
(program $eor_bv-xor-concat-pullup2.fev3 ((@n4 Int) (@n2 Int) (@n1 Int) (@n3 Int) ($eoT.fev9 Type) (@n0 Int) ($eoT.fev12 Type) ($eoT.fev14 Type) (ys1 (BitVec @n4)) (y1 (BitVec @n2)) (ws1 (BitVec @n1)) (xs1 (BitVec @n0)) ($eo_10 $eoT.fev9) (nym1 Int) (z1 (BitVec @n3)) ($eo_13 $eoT.fev12) (nxm1 Int) (ny1 Int) ($eo_11 (BitVec @n0)))
  :signature ((BitVec @n4) (BitVec @n2) (BitVec @n1) (BitVec @n0) Int Int Int (BitVec @n3) $eoT.fev9 (BitVec @n0) $eoT.fev12) $eoT.fev14
  (
  (($eor_bv-xor-concat-pullup2.fev3 ys1 y1 ws1 xs1 nym1 ny1 nxm1 z1 $eo_10 $eo_11 $eo_13) ($eor_bv-xor-concat-pullup2.fev4 $eo_10 $eo_11 nym1 ny1 nxm1 z1 $eo_13 (eo::nil bvxor (eo::typeof (_ (_ (extract nxm1) ny1) $eo_11)))))
  )
)
; program: $eor_bv-xor-concat-pullup2.fev2
(program $eor_bv-xor-concat-pullup2.fev2 ((@n4 Int) (@n2 Int) (@n1 Int) (@n3 Int) (@n0 Int) ($eoT.fev7 Type) ($ex_2 (BitVec @n0)) ($eo_8 $eoT.fev7) (nym1 Int) (ny1 Int) (nxm1 Int) (xs1 (BitVec @n0)) (z1 (BitVec @n3)) (y1 (BitVec @n2)) (ys1 (BitVec @n4)) (ws1 (BitVec @n1)))
  :signature ((BitVec @n4) (BitVec @n2) (BitVec @n1) (BitVec @n0) Int Int Int (BitVec @n3) (BitVec @n0) $eoT.fev7 $eoT.fev7) $eoT.fev7
  (
  (($eor_bv-xor-concat-pullup2.fev2 ys1 y1 ws1 xs1 nym1 ny1 nxm1 z1 $ex_2 $eo_8 $eo_8) (eo::define ((_v0 (_ (concat y1) ys1))) ($eor_bv-xor-concat-pullup2.fev3 ys1 y1 ws1 xs1 nym1 ny1 nxm1 z1 ($singleton_elim _v0) ($singleton_elim (eo::list_concat bvxor xs1 ws1)) (eo::list_concat bvxor xs1 (_ (bvxor (_ (concat z1) _v0)) ws1)))))
  )
)
; program: $eor_bv-xor-concat-pullup2.fev1
(program $eor_bv-xor-concat-pullup2.fev1 ((@n4 Int) (@n2 Int) (@n1 Int) (@n3 Int) (@n0 Int) ($eoT_21 Type) ($eoT.fev3 Type) ($ex_1 $eoT_21) ($eo_4 $eoT.fev3) (ys1 (BitVec @n4)) (y1 (BitVec @n2)) (nym1 Int) (ny1 Int) (nxm1 Int) (z1 (BitVec @n3)) ($ex_2 (BitVec @n0)) (xs1 (BitVec @n0)) (ws1 (BitVec @n1)))
  :signature ((BitVec @n4) (BitVec @n2) (BitVec @n1) (BitVec @n0) Int Int Int (BitVec @n3) (BitVec @n0) $eoT_21 $eoT.fev3 $eoT.fev3) $eoT.fev3
  (
  (($eor_bv-xor-concat-pullup2.fev1 ys1 y1 ws1 xs1 nym1 ny1 nxm1 z1 $ex_2 $ex_1 $eo_4 $eo_4) ($eor_bv-xor-concat-pullup2.fev2 ys1 y1 ws1 xs1 nym1 ny1 nxm1 z1 $ex_2 $ex_2 ($singleton_elim (eo::list_concat bvxor xs1 ws1))))
  )
)
; program: $eor_bv-xor-concat-pullup2
(program $eor_bv-xor-concat-pullup2 ((@n0 Int) (@n1 Int) (@n2 Int) (@n3 Int) (@n4 Int) ($eoT_22 Type) ($eoT_23 Type) (ws1 (BitVec @n1)) (xs1 (BitVec @n0)) (nym1 Int) (ny1 Int) (nxm1 Int) (z1 (BitVec @n3)) ($ex_2 (BitVec @n0)) ($eoT_21 Type) ($ex_1 $eoT_21) (y1 (BitVec @n2)) (ys1 (BitVec @n4)))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n2) (BitVec @n3) (BitVec @n4) Int Int Int $eoT_22 Bool $eoT_23) Bool
  (
  ((eo::define ((_v0 (@bvsize $ex_1))) ($eor_bv-xor-concat-pullup2 xs1 ws1 y1 z1 ys1 nxm1 ny1 nym1 (_ (= ny1) _v0) (_ (= nxm1) (_ (- (@bvsize $ex_2)) 1)) (_ (= nym1) (_ (- _v0) 1)))) ($eor_bv-xor-concat-pullup2.fev1 ys1 y1 ws1 xs1 nym1 ny1 nxm1 z1 $ex_2 $ex_1 $ex_1 ($singleton_elim (_ (concat y1) ys1))))
  )
)
; program: $eovc_bv-xor-concat-pullup2.fev1
(program $eovc_bv-xor-concat-pullup2.fev1 ((@n4 Int) (@n2 Int) (@n1 Int) (@n3 Int) ($eoT.fev1 Type) (@n0 Int) ($eoT.fev4 Type) (xs1 (BitVec @n0)) (ws1 (BitVec @n1)) (y1 (BitVec @n2)) (z1 (BitVec @n3)) (ys1 (BitVec @n4)) (ny1 Int) (nxm1 Int) ($eo_3 (BitVec @n0)) (nym1 Int) ($eo_2 $eoT.fev1))
  :signature ((BitVec @n4) (BitVec @n2) Int (BitVec @n1) (BitVec @n0) Int Int (BitVec @n3) $eoT.fev1 (BitVec @n0)) $eoT.fev4
  (
  (($eovc_bv-xor-concat-pullup2.fev1 ys1 y1 nym1 ws1 xs1 nxm1 ny1 z1 $eo_2 $eo_3) (eo::define ((_v0 (@bvsize $eo_2))) (eo::define ((_v1 (_ (= nym1) (_ (- _v0) 1)))) (eo::define ((_v2 (_ (= nxm1) (_ (- (@bvsize $eo_3)) 1)))) (eo::define ((_v3 (_ (= ny1) _v0))) ($eo_requires_eq ($eo_model_sat _v3 true false) true ($eo_requires_eq ($eo_model_sat _v2 true false) true ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-xor-concat-pullup2 xs1 ws1 y1 z1 ys1 nxm1 ny1 nym1 _v3 _v2 _v1) false false) true true)))))))))
  )
)
; program: $eovc_bv-xor-concat-pullup2
(program $eovc_bv-xor-concat-pullup2 ((@n4 Int) (@n2 Int) (@n1 Int) (@n0 Int) (@n3 Int) (nym1 Int) (nxm1 Int) (ny1 Int) (z1 (BitVec @n3)) (y1 (BitVec @n2)) (ys1 (BitVec @n4)) (xs1 (BitVec @n0)) (ws1 (BitVec @n1)))
  :signature ((BitVec @n4) (BitVec @n2) Int (BitVec @n1) (BitVec @n0) Int Int (BitVec @n3)) Bool
  (
  (($eovc_bv-xor-concat-pullup2 ys1 y1 nym1 ws1 xs1 nxm1 ny1 z1) ($eovc_bv-xor-concat-pullup2.fev1 ys1 y1 nym1 ws1 xs1 nxm1 ny1 z1 ($singleton_elim (_ (concat y1) ys1)) ($singleton_elim (eo::list_concat bvxor xs1 ws1))))
  )
)
(echo "smt-meta $eovc_bv-xor-concat-pullup2")
; program: $eor_bv-and-concat-pullup3.fev3
(program $eor_bv-and-concat-pullup3.fev3 ((@n4 Int) (@n0 Int) (@n2 Int) (@n3 Int) ($eoT.fev6 Type) ($eoT.fev9 Type) ($eoT.fev11 Type) ($eoT.fev13 Type) ($eo_7 $eoT.fev6) (nxm1 Int) (nyu1 Int) (z1 (BitVec @n3)) ($eo_12 $eoT.fev11) (nyum1 Int) (nu1 Int) (y1 (BitVec @n2)) ($eo_10 $eoT.fev9) (num1 Int) ($eo_5 (BitVec @n0)) (u1 (BitVec @n4)))
  :signature ((BitVec @n4) (BitVec @n0) Int Int Int (BitVec @n2) Int Int (BitVec @n3) $eoT.fev6 $eoT.fev9 $eoT.fev11) $eoT.fev13
  (
  (($eor_bv-and-concat-pullup3.fev3 u1 $eo_5 num1 nu1 nyum1 y1 nyu1 nxm1 z1 $eo_7 $eo_10 $eo_12) (_ (= $eo_7) (_ (concat (_ (bvand (_ (_ (extract nxm1) nyu1) $eo_5)) (_ (bvand z1) $eo_12))) (_ (concat (_ (bvand (_ (_ (extract nyum1) nu1) $eo_5)) (_ (bvand y1) $eo_10))) (_ (concat (_ (bvand (_ (_ (extract num1) 0) $eo_5)) (_ (bvand u1) #b1))) (eo::to_bin 0 0))))))
  )
)
; program: $eor_bv-and-concat-pullup3.fev2
(program $eor_bv-and-concat-pullup3.fev2 ((@n4 Int) (@n1 Int) (@n2 Int) (@n3 Int) (@n0 Int) ($eoT.fev6 Type) ($eoT.fev8 Type) (ws1 (BitVec @n1)) (xs1 (BitVec @n0)) (u1 (BitVec @n4)) (num1 Int) (y1 (BitVec @n2)) (z1 (BitVec @n3)) ($eo_7 $eoT.fev6) (nyum1 Int) (nu1 Int) (nxm1 Int) (nyu1 Int) ($eo_5 (BitVec @n0)))
  :signature ((BitVec @n4) (BitVec @n1) (BitVec @n0) Int Int Int (BitVec @n2) Int Int (BitVec @n3) (BitVec @n0) $eoT.fev6) $eoT.fev8
  (
  (($eor_bv-and-concat-pullup3.fev2 u1 ws1 xs1 num1 nu1 nyum1 y1 nyu1 nxm1 z1 $eo_5 $eo_7) ($eor_bv-and-concat-pullup3.fev3 u1 $eo_5 num1 nu1 nyum1 y1 nyu1 nxm1 z1 $eo_7 (eo::nil bvand (eo::typeof (_ (_ (extract nyum1) nu1) $eo_5))) (eo::nil bvand (eo::typeof (_ (_ (extract nxm1) nyu1) $eo_5)))))
  )
)
; program: $eor_bv-and-concat-pullup3.fev1
(program $eor_bv-and-concat-pullup3.fev1 ((@n4 Int) (@n1 Int) (@n2 Int) (@n3 Int) (@n0 Int) ($eoT.fev3 Type) ($ex_1 (BitVec @n0)) ($eo_4 $eoT.fev3) (num1 Int) (nu1 Int) (nyum1 Int) (nyu1 Int) (nxm1 Int) (xs1 (BitVec @n0)) (z1 (BitVec @n3)) (y1 (BitVec @n2)) (u1 (BitVec @n4)) (ws1 (BitVec @n1)))
  :signature ((BitVec @n4) (BitVec @n1) (BitVec @n0) Int Int Int (BitVec @n2) Int Int (BitVec @n3) (BitVec @n0) $eoT.fev3 $eoT.fev3) $eoT.fev3
  (
  (($eor_bv-and-concat-pullup3.fev1 u1 ws1 xs1 num1 nu1 nyum1 y1 nyu1 nxm1 z1 $ex_1 $eo_4 $eo_4) ($eor_bv-and-concat-pullup3.fev2 u1 ws1 xs1 num1 nu1 nyum1 y1 nyu1 nxm1 z1 ($singleton_elim (eo::list_concat bvand xs1 ws1)) (eo::list_concat bvand xs1 (_ (bvand (_ (concat z1) (_ (concat y1) (_ (concat u1) (eo::to_bin 0 0))))) ws1))))
  )
)
; program: $eor_bv-and-concat-pullup3
(program $eor_bv-and-concat-pullup3 ((@n0 Int) (@n1 Int) (@n2 Int) (@n3 Int) (@n4 Int) (u1 (BitVec @n4)) (num1 Int) (nu1 Int) (nyum1 Int) (y1 (BitVec @n2)) (nyu1 Int) (nxm1 Int) (z1 (BitVec @n3)) ($ex_1 (BitVec @n0)) (xs1 (BitVec @n0)) (ws1 (BitVec @n1)))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n2) (BitVec @n3) (BitVec @n4) Int Int Int Int Int Bool Bool Bool Bool Bool) Bool
  (
  ((eo::define ((_v0 (@bvsize u1))) (eo::define ((_v1 (_ (+ (@bvsize y1)) (_ (+ _v0) 0)))) ($eor_bv-and-concat-pullup3 xs1 ws1 y1 z1 u1 nxm1 nyu1 nyum1 nu1 num1 (_ (= nxm1) (_ (- (@bvsize $ex_1)) 1)) (_ (= nyu1) _v1) (_ (= nyum1) (_ (- _v1) 1)) (_ (= nu1) _v0) (_ (= num1) (_ (- _v0) 1))))) ($eor_bv-and-concat-pullup3.fev1 u1 ws1 xs1 num1 nu1 nyum1 y1 nyu1 nxm1 z1 $ex_1 $ex_1 ($singleton_elim (eo::list_concat bvand xs1 ws1))))
  )
)
; program: $eovc_bv-and-concat-pullup3.fev1
(program $eovc_bv-and-concat-pullup3.fev1 ((@n4 Int) (@n2 Int) (@n1 Int) (@n3 Int) (@n0 Int) ($eo_5 Bool) ($eo_4 Bool) ($eo_3 Bool) ($eo_2 Bool) (xs1 (BitVec @n0)) (ws1 (BitVec @n1)) (z1 (BitVec @n3)) (nxm1 Int) ($eo_1 (BitVec @n0)) (nyu1 Int) (nyum1 Int) (y1 (BitVec @n2)) (nu1 Int) (num1 Int) (u1 (BitVec @n4)))
  :signature ((BitVec @n4) Int Int (BitVec @n2) Int Int (BitVec @n1) (BitVec @n0) Int (BitVec @n3) (BitVec @n0) Bool Bool Bool Bool) Bool
  (
  (($eovc_bv-and-concat-pullup3.fev1 u1 num1 nu1 y1 nyum1 nyu1 ws1 xs1 nxm1 z1 $eo_1 $eo_2 $eo_3 $eo_4 $eo_5) (eo::define ((_v0 (@bvsize u1))) (eo::define ((_v1 (_ (+ (@bvsize y1)) (_ (+ _v0) 0)))) (eo::define ((_v2 (_ (= nxm1) (_ (- (@bvsize $eo_1)) 1)))) ($eo_requires_eq ($eo_model_sat _v2 true false) true ($eo_requires_eq $eo_5 true ($eo_requires_eq $eo_4 true ($eo_requires_eq $eo_3 true ($eo_requires_eq $eo_2 true ($eo_requires_eq ($eo_model_sat ($eor_bv-and-concat-pullup3 xs1 ws1 y1 z1 u1 nxm1 nyu1 nyum1 nu1 num1 _v2 (_ (= nyu1) _v1) (_ (= nyum1) (_ (- _v1) 1)) (_ (= nu1) _v0) (_ (= num1) (_ (- _v0) 1))) false false) true true))))))))))
  )
)
; program: $eovc_bv-and-concat-pullup3
(program $eovc_bv-and-concat-pullup3 ((@n4 Int) (@n2 Int) (@n1 Int) (@n0 Int) (@n3 Int) (nxm1 Int) (z1 (BitVec @n3)) (xs1 (BitVec @n0)) (ws1 (BitVec @n1)) (num1 Int) (nu1 Int) (nyum1 Int) (nyu1 Int) (y1 (BitVec @n2)) (u1 (BitVec @n4)))
  :signature ((BitVec @n4) Int Int (BitVec @n2) Int Int (BitVec @n1) (BitVec @n0) Int (BitVec @n3)) Bool
  (
  (($eovc_bv-and-concat-pullup3 u1 num1 nu1 y1 nyum1 nyu1 ws1 xs1 nxm1 z1) (eo::define ((_v0 (@bvsize u1))) (eo::define ((_v1 (_ (+ (@bvsize y1)) (_ (+ _v0) 0)))) ($eovc_bv-and-concat-pullup3.fev1 u1 num1 nu1 y1 nyum1 nyu1 ws1 xs1 nxm1 z1 ($singleton_elim (eo::list_concat bvand xs1 ws1)) ($eo_model_sat (_ (= num1) (_ (- _v0) 1)) true false) ($eo_model_sat (_ (= nu1) _v0) true false) ($eo_model_sat (_ (= nyum1) (_ (- _v1) 1)) true false) ($eo_model_sat (_ (= nyu1) _v1) true false)))))
  )
)
(echo "smt-meta $eovc_bv-and-concat-pullup3")
; program: $eor_bv-or-concat-pullup3.fev3
(program $eor_bv-or-concat-pullup3.fev3 ((@n4 Int) (@n0 Int) (@n2 Int) (@n3 Int) ($eoT.fev6 Type) ($eoT.fev9 Type) ($eoT.fev11 Type) ($eoT.fev13 Type) ($eo_7 $eoT.fev6) (nxm1 Int) (nyu1 Int) (z1 (BitVec @n3)) ($eo_12 $eoT.fev11) (nyum1 Int) (nu1 Int) (y1 (BitVec @n2)) ($eo_10 $eoT.fev9) (num1 Int) ($eo_5 (BitVec @n0)) (u1 (BitVec @n4)))
  :signature ((BitVec @n4) (BitVec @n0) Int Int Int (BitVec @n2) Int Int (BitVec @n3) $eoT.fev6 $eoT.fev9 $eoT.fev11) $eoT.fev13
  (
  (($eor_bv-or-concat-pullup3.fev3 u1 $eo_5 num1 nu1 nyum1 y1 nyu1 nxm1 z1 $eo_7 $eo_10 $eo_12) (_ (= $eo_7) (_ (concat (_ (bvor (_ (_ (extract nxm1) nyu1) $eo_5)) (_ (bvor z1) $eo_12))) (_ (concat (_ (bvor (_ (_ (extract nyum1) nu1) $eo_5)) (_ (bvor y1) $eo_10))) (_ (concat (_ (bvor (_ (_ (extract num1) 0) $eo_5)) (_ (bvor u1) #b0))) (eo::to_bin 0 0))))))
  )
)
; program: $eor_bv-or-concat-pullup3.fev2
(program $eor_bv-or-concat-pullup3.fev2 ((@n4 Int) (@n1 Int) (@n2 Int) (@n3 Int) (@n0 Int) ($eoT.fev6 Type) ($eoT.fev8 Type) (ws1 (BitVec @n1)) (xs1 (BitVec @n0)) (u1 (BitVec @n4)) (num1 Int) (y1 (BitVec @n2)) (z1 (BitVec @n3)) ($eo_7 $eoT.fev6) (nyum1 Int) (nu1 Int) (nxm1 Int) (nyu1 Int) ($eo_5 (BitVec @n0)))
  :signature ((BitVec @n4) (BitVec @n1) (BitVec @n0) Int Int Int (BitVec @n2) Int Int (BitVec @n3) (BitVec @n0) $eoT.fev6) $eoT.fev8
  (
  (($eor_bv-or-concat-pullup3.fev2 u1 ws1 xs1 num1 nu1 nyum1 y1 nyu1 nxm1 z1 $eo_5 $eo_7) ($eor_bv-or-concat-pullup3.fev3 u1 $eo_5 num1 nu1 nyum1 y1 nyu1 nxm1 z1 $eo_7 (eo::nil bvor (eo::typeof (_ (_ (extract nyum1) nu1) $eo_5))) (eo::nil bvor (eo::typeof (_ (_ (extract nxm1) nyu1) $eo_5)))))
  )
)
; program: $eor_bv-or-concat-pullup3.fev1
(program $eor_bv-or-concat-pullup3.fev1 ((@n4 Int) (@n1 Int) (@n2 Int) (@n3 Int) (@n0 Int) ($eoT.fev3 Type) ($ex_1 (BitVec @n0)) ($eo_4 $eoT.fev3) (num1 Int) (nu1 Int) (nyum1 Int) (nyu1 Int) (nxm1 Int) (xs1 (BitVec @n0)) (z1 (BitVec @n3)) (y1 (BitVec @n2)) (u1 (BitVec @n4)) (ws1 (BitVec @n1)))
  :signature ((BitVec @n4) (BitVec @n1) (BitVec @n0) Int Int Int (BitVec @n2) Int Int (BitVec @n3) (BitVec @n0) $eoT.fev3 $eoT.fev3) $eoT.fev3
  (
  (($eor_bv-or-concat-pullup3.fev1 u1 ws1 xs1 num1 nu1 nyum1 y1 nyu1 nxm1 z1 $ex_1 $eo_4 $eo_4) ($eor_bv-or-concat-pullup3.fev2 u1 ws1 xs1 num1 nu1 nyum1 y1 nyu1 nxm1 z1 ($singleton_elim (eo::list_concat bvor xs1 ws1)) (eo::list_concat bvor xs1 (_ (bvor (_ (concat z1) (_ (concat y1) (_ (concat u1) (eo::to_bin 0 0))))) ws1))))
  )
)
; program: $eor_bv-or-concat-pullup3
(program $eor_bv-or-concat-pullup3 ((@n0 Int) (@n1 Int) (@n2 Int) (@n3 Int) (@n4 Int) (u1 (BitVec @n4)) (num1 Int) (nu1 Int) (nyum1 Int) (y1 (BitVec @n2)) (nyu1 Int) (nxm1 Int) (z1 (BitVec @n3)) ($ex_1 (BitVec @n0)) (xs1 (BitVec @n0)) (ws1 (BitVec @n1)))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n2) (BitVec @n3) (BitVec @n4) Int Int Int Int Int Bool Bool Bool Bool Bool) Bool
  (
  ((eo::define ((_v0 (@bvsize u1))) (eo::define ((_v1 (_ (+ (@bvsize y1)) (_ (+ _v0) 0)))) ($eor_bv-or-concat-pullup3 xs1 ws1 y1 z1 u1 nxm1 nyu1 nyum1 nu1 num1 (_ (= nxm1) (_ (- (@bvsize $ex_1)) 1)) (_ (= nyu1) _v1) (_ (= nyum1) (_ (- _v1) 1)) (_ (= nu1) _v0) (_ (= num1) (_ (- _v0) 1))))) ($eor_bv-or-concat-pullup3.fev1 u1 ws1 xs1 num1 nu1 nyum1 y1 nyu1 nxm1 z1 $ex_1 $ex_1 ($singleton_elim (eo::list_concat bvor xs1 ws1))))
  )
)
; program: $eovc_bv-or-concat-pullup3.fev1
(program $eovc_bv-or-concat-pullup3.fev1 ((@n4 Int) (@n2 Int) (@n1 Int) (@n3 Int) (@n0 Int) ($eo_5 Bool) ($eo_4 Bool) ($eo_3 Bool) ($eo_2 Bool) (xs1 (BitVec @n0)) (ws1 (BitVec @n1)) (z1 (BitVec @n3)) (nxm1 Int) ($eo_1 (BitVec @n0)) (nyu1 Int) (nyum1 Int) (y1 (BitVec @n2)) (nu1 Int) (num1 Int) (u1 (BitVec @n4)))
  :signature ((BitVec @n4) Int Int (BitVec @n2) Int Int (BitVec @n1) (BitVec @n0) Int (BitVec @n3) (BitVec @n0) Bool Bool Bool Bool) Bool
  (
  (($eovc_bv-or-concat-pullup3.fev1 u1 num1 nu1 y1 nyum1 nyu1 ws1 xs1 nxm1 z1 $eo_1 $eo_2 $eo_3 $eo_4 $eo_5) (eo::define ((_v0 (@bvsize u1))) (eo::define ((_v1 (_ (+ (@bvsize y1)) (_ (+ _v0) 0)))) (eo::define ((_v2 (_ (= nxm1) (_ (- (@bvsize $eo_1)) 1)))) ($eo_requires_eq ($eo_model_sat _v2 true false) true ($eo_requires_eq $eo_5 true ($eo_requires_eq $eo_4 true ($eo_requires_eq $eo_3 true ($eo_requires_eq $eo_2 true ($eo_requires_eq ($eo_model_sat ($eor_bv-or-concat-pullup3 xs1 ws1 y1 z1 u1 nxm1 nyu1 nyum1 nu1 num1 _v2 (_ (= nyu1) _v1) (_ (= nyum1) (_ (- _v1) 1)) (_ (= nu1) _v0) (_ (= num1) (_ (- _v0) 1))) false false) true true))))))))))
  )
)
; program: $eovc_bv-or-concat-pullup3
(program $eovc_bv-or-concat-pullup3 ((@n4 Int) (@n2 Int) (@n1 Int) (@n0 Int) (@n3 Int) (nxm1 Int) (z1 (BitVec @n3)) (xs1 (BitVec @n0)) (ws1 (BitVec @n1)) (num1 Int) (nu1 Int) (nyum1 Int) (nyu1 Int) (y1 (BitVec @n2)) (u1 (BitVec @n4)))
  :signature ((BitVec @n4) Int Int (BitVec @n2) Int Int (BitVec @n1) (BitVec @n0) Int (BitVec @n3)) Bool
  (
  (($eovc_bv-or-concat-pullup3 u1 num1 nu1 y1 nyum1 nyu1 ws1 xs1 nxm1 z1) (eo::define ((_v0 (@bvsize u1))) (eo::define ((_v1 (_ (+ (@bvsize y1)) (_ (+ _v0) 0)))) ($eovc_bv-or-concat-pullup3.fev1 u1 num1 nu1 y1 nyum1 nyu1 ws1 xs1 nxm1 z1 ($singleton_elim (eo::list_concat bvor xs1 ws1)) ($eo_model_sat (_ (= num1) (_ (- _v0) 1)) true false) ($eo_model_sat (_ (= nu1) _v0) true false) ($eo_model_sat (_ (= nyum1) (_ (- _v1) 1)) true false) ($eo_model_sat (_ (= nyu1) _v1) true false)))))
  )
)
(echo "smt-meta $eovc_bv-or-concat-pullup3")
; program: $eor_bv-xor-concat-pullup3.fev3
(program $eor_bv-xor-concat-pullup3.fev3 ((@n4 Int) (@n0 Int) (@n2 Int) (@n3 Int) ($eoT.fev6 Type) ($eoT.fev9 Type) ($eoT.fev11 Type) ($eoT.fev13 Type) ($eo_7 $eoT.fev6) (nxm1 Int) (nyu1 Int) (z1 (BitVec @n3)) ($eo_12 $eoT.fev11) (nyum1 Int) (nu1 Int) (y1 (BitVec @n2)) ($eo_10 $eoT.fev9) (num1 Int) ($eo_5 (BitVec @n0)) (u1 (BitVec @n4)))
  :signature ((BitVec @n4) (BitVec @n0) Int Int Int (BitVec @n2) Int Int (BitVec @n3) $eoT.fev6 $eoT.fev9 $eoT.fev11) $eoT.fev13
  (
  (($eor_bv-xor-concat-pullup3.fev3 u1 $eo_5 num1 nu1 nyum1 y1 nyu1 nxm1 z1 $eo_7 $eo_10 $eo_12) (_ (= $eo_7) (_ (concat (_ (bvxor (_ (_ (extract nxm1) nyu1) $eo_5)) (_ (bvxor z1) $eo_12))) (_ (concat (_ (bvxor (_ (_ (extract nyum1) nu1) $eo_5)) (_ (bvxor y1) $eo_10))) (_ (concat (_ (bvxor (_ (_ (extract num1) 0) $eo_5)) (_ (bvxor u1) #b0))) (eo::to_bin 0 0))))))
  )
)
; program: $eor_bv-xor-concat-pullup3.fev2
(program $eor_bv-xor-concat-pullup3.fev2 ((@n4 Int) (@n1 Int) (@n2 Int) (@n3 Int) (@n0 Int) ($eoT.fev6 Type) ($eoT.fev8 Type) (ws1 (BitVec @n1)) (xs1 (BitVec @n0)) (u1 (BitVec @n4)) (num1 Int) (y1 (BitVec @n2)) (z1 (BitVec @n3)) ($eo_7 $eoT.fev6) (nyum1 Int) (nu1 Int) (nxm1 Int) (nyu1 Int) ($eo_5 (BitVec @n0)))
  :signature ((BitVec @n4) (BitVec @n1) (BitVec @n0) Int Int Int (BitVec @n2) Int Int (BitVec @n3) (BitVec @n0) $eoT.fev6) $eoT.fev8
  (
  (($eor_bv-xor-concat-pullup3.fev2 u1 ws1 xs1 num1 nu1 nyum1 y1 nyu1 nxm1 z1 $eo_5 $eo_7) ($eor_bv-xor-concat-pullup3.fev3 u1 $eo_5 num1 nu1 nyum1 y1 nyu1 nxm1 z1 $eo_7 (eo::nil bvxor (eo::typeof (_ (_ (extract nyum1) nu1) $eo_5))) (eo::nil bvxor (eo::typeof (_ (_ (extract nxm1) nyu1) $eo_5)))))
  )
)
; program: $eor_bv-xor-concat-pullup3.fev1
(program $eor_bv-xor-concat-pullup3.fev1 ((@n4 Int) (@n1 Int) (@n2 Int) (@n3 Int) (@n0 Int) ($eoT.fev3 Type) ($ex_1 (BitVec @n0)) ($eo_4 $eoT.fev3) (num1 Int) (nu1 Int) (nyum1 Int) (nyu1 Int) (nxm1 Int) (xs1 (BitVec @n0)) (z1 (BitVec @n3)) (y1 (BitVec @n2)) (u1 (BitVec @n4)) (ws1 (BitVec @n1)))
  :signature ((BitVec @n4) (BitVec @n1) (BitVec @n0) Int Int Int (BitVec @n2) Int Int (BitVec @n3) (BitVec @n0) $eoT.fev3 $eoT.fev3) $eoT.fev3
  (
  (($eor_bv-xor-concat-pullup3.fev1 u1 ws1 xs1 num1 nu1 nyum1 y1 nyu1 nxm1 z1 $ex_1 $eo_4 $eo_4) ($eor_bv-xor-concat-pullup3.fev2 u1 ws1 xs1 num1 nu1 nyum1 y1 nyu1 nxm1 z1 ($singleton_elim (eo::list_concat bvxor xs1 ws1)) (eo::list_concat bvxor xs1 (_ (bvxor (_ (concat z1) (_ (concat y1) (_ (concat u1) (eo::to_bin 0 0))))) ws1))))
  )
)
; program: $eor_bv-xor-concat-pullup3
(program $eor_bv-xor-concat-pullup3 ((@n0 Int) (@n1 Int) (@n2 Int) (@n3 Int) (@n4 Int) (u1 (BitVec @n4)) (num1 Int) (nu1 Int) (nyum1 Int) (y1 (BitVec @n2)) (nyu1 Int) (nxm1 Int) (z1 (BitVec @n3)) ($ex_1 (BitVec @n0)) (xs1 (BitVec @n0)) (ws1 (BitVec @n1)))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n2) (BitVec @n3) (BitVec @n4) Int Int Int Int Int Bool Bool Bool Bool Bool) Bool
  (
  ((eo::define ((_v0 (@bvsize u1))) (eo::define ((_v1 (_ (+ (@bvsize y1)) (_ (+ _v0) 0)))) ($eor_bv-xor-concat-pullup3 xs1 ws1 y1 z1 u1 nxm1 nyu1 nyum1 nu1 num1 (_ (= nxm1) (_ (- (@bvsize $ex_1)) 1)) (_ (= nyu1) _v1) (_ (= nyum1) (_ (- _v1) 1)) (_ (= nu1) _v0) (_ (= num1) (_ (- _v0) 1))))) ($eor_bv-xor-concat-pullup3.fev1 u1 ws1 xs1 num1 nu1 nyum1 y1 nyu1 nxm1 z1 $ex_1 $ex_1 ($singleton_elim (eo::list_concat bvxor xs1 ws1))))
  )
)
; program: $eovc_bv-xor-concat-pullup3.fev1
(program $eovc_bv-xor-concat-pullup3.fev1 ((@n4 Int) (@n2 Int) (@n1 Int) (@n3 Int) (@n0 Int) ($eo_5 Bool) ($eo_4 Bool) ($eo_3 Bool) ($eo_2 Bool) (xs1 (BitVec @n0)) (ws1 (BitVec @n1)) (z1 (BitVec @n3)) (nxm1 Int) ($eo_1 (BitVec @n0)) (nyu1 Int) (nyum1 Int) (y1 (BitVec @n2)) (nu1 Int) (num1 Int) (u1 (BitVec @n4)))
  :signature ((BitVec @n4) Int Int (BitVec @n2) Int Int (BitVec @n1) (BitVec @n0) Int (BitVec @n3) (BitVec @n0) Bool Bool Bool Bool) Bool
  (
  (($eovc_bv-xor-concat-pullup3.fev1 u1 num1 nu1 y1 nyum1 nyu1 ws1 xs1 nxm1 z1 $eo_1 $eo_2 $eo_3 $eo_4 $eo_5) (eo::define ((_v0 (@bvsize u1))) (eo::define ((_v1 (_ (+ (@bvsize y1)) (_ (+ _v0) 0)))) (eo::define ((_v2 (_ (= nxm1) (_ (- (@bvsize $eo_1)) 1)))) ($eo_requires_eq ($eo_model_sat _v2 true false) true ($eo_requires_eq $eo_5 true ($eo_requires_eq $eo_4 true ($eo_requires_eq $eo_3 true ($eo_requires_eq $eo_2 true ($eo_requires_eq ($eo_model_sat ($eor_bv-xor-concat-pullup3 xs1 ws1 y1 z1 u1 nxm1 nyu1 nyum1 nu1 num1 _v2 (_ (= nyu1) _v1) (_ (= nyum1) (_ (- _v1) 1)) (_ (= nu1) _v0) (_ (= num1) (_ (- _v0) 1))) false false) true true))))))))))
  )
)
; program: $eovc_bv-xor-concat-pullup3
(program $eovc_bv-xor-concat-pullup3 ((@n4 Int) (@n2 Int) (@n1 Int) (@n0 Int) (@n3 Int) (nxm1 Int) (z1 (BitVec @n3)) (xs1 (BitVec @n0)) (ws1 (BitVec @n1)) (num1 Int) (nu1 Int) (nyum1 Int) (nyu1 Int) (y1 (BitVec @n2)) (u1 (BitVec @n4)))
  :signature ((BitVec @n4) Int Int (BitVec @n2) Int Int (BitVec @n1) (BitVec @n0) Int (BitVec @n3)) Bool
  (
  (($eovc_bv-xor-concat-pullup3 u1 num1 nu1 y1 nyum1 nyu1 ws1 xs1 nxm1 z1) (eo::define ((_v0 (@bvsize u1))) (eo::define ((_v1 (_ (+ (@bvsize y1)) (_ (+ _v0) 0)))) ($eovc_bv-xor-concat-pullup3.fev1 u1 num1 nu1 y1 nyum1 nyu1 ws1 xs1 nxm1 z1 ($singleton_elim (eo::list_concat bvxor xs1 ws1)) ($eo_model_sat (_ (= num1) (_ (- _v0) 1)) true false) ($eo_model_sat (_ (= nu1) _v0) true false) ($eo_model_sat (_ (= nyum1) (_ (- _v1) 1)) true false) ($eo_model_sat (_ (= nyu1) _v1) true false)))))
  )
)
(echo "smt-meta $eovc_bv-xor-concat-pullup3")
; program: $eor_bv-xor-duplicate.fev1
(program $eor_bv-xor-duplicate.fev1 ((@n0 Int) ($eoT.fev1 Type) ($eoT.fev3 Type) (x1 (BitVec @n0)) ($eo_2 $eoT.fev1) (w1 Int))
  :signature (Int (BitVec @n0) $eoT.fev1) $eoT.fev3
  (
  (($eor_bv-xor-duplicate.fev1 w1 x1 $eo_2) (eo::define ((_v0 (bvxor x1))) (_ (= (_ _v0 (_ _v0 $eo_2))) (_ (@bv 0) w1))))
  )
)
; program: $eor_bv-xor-duplicate
(program $eor_bv-xor-duplicate ((@n0 Int) (w1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Bool) Bool
  (
  (($eor_bv-xor-duplicate x1 w1 (_ (= w1) (@bvsize x1))) ($eor_bv-xor-duplicate.fev1 w1 x1 (eo::nil bvxor (eo::typeof x1))))
  )
)
; program: $eovc_bv-xor-duplicate
(program $eovc_bv-xor-duplicate ((@n0 Int) (w1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int) Bool
  (
  (($eovc_bv-xor-duplicate x1 w1) (eo::define ((_v0 (_ (= w1) (@bvsize x1)))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-xor-duplicate x1 w1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_bv-xor-duplicate")
; program: $eor_bv-xor-ones.fev1
(program $eor_bv-xor-ones.fev1 ((@n1 Int) (@n0 Int) (zs1 (BitVec @n1)) (xs1 (BitVec @n0)) (w1 Int) (n1 Int) ($eo_2 (BitVec @n0)) ($eo_1 (BitVec @n0)))
  :signature ((BitVec @n1) (BitVec @n0) Int Int (BitVec @n0) (BitVec @n0)) Bool
  (
  (($eor_bv-xor-ones.fev1 zs1 xs1 w1 n1 $eo_1 $eo_2) (_ (= $eo_2) (bvnot $eo_1)))
  )
)
; program: $eor_bv-xor-ones
(program $eor_bv-xor-ones ((@n0 Int) (@n1 Int) (xs1 (BitVec @n0)) (n1 Int) (w1 Int) (zs1 (BitVec @n1)))
  :signature ((BitVec @n0) (BitVec @n1) Int Int Bool) Bool
  (
  (($eor_bv-xor-ones xs1 zs1 n1 w1 (_ (= n1) (_ (- (int.pow2 w1)) 1))) ($eor_bv-xor-ones.fev1 zs1 xs1 w1 n1 ($singleton_elim (eo::list_concat bvxor xs1 zs1)) (eo::list_concat bvxor xs1 (_ (bvxor (_ (@bv n1) w1)) zs1))))
  )
)
; program: $eovc_bv-xor-ones
(program $eovc_bv-xor-ones ((@n1 Int) (@n0 Int) (xs1 (BitVec @n0)) (zs1 (BitVec @n1)) (n1 Int) (w1 Int))
  :signature (Int Int (BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-xor-ones w1 n1 zs1 xs1) (eo::define ((_v0 (_ (= n1) (_ (- (int.pow2 w1)) 1)))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-xor-ones xs1 zs1 n1 w1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_bv-xor-ones")
; program: $eor_bv-xor-not.fev1
(program $eor_bv-xor-not.fev1 ((@n0 Int) (@n1 Int) ($eoT.fev1 Type) ($eoT.fev3 Type) ($eoT.fev5 Type) ($eo_4 $eoT.fev3) (x1 (BitVec @n0)) (y1 (BitVec @n1)) ($eo_2 $eoT.fev1))
  :signature ((BitVec @n0) (BitVec @n1) $eoT.fev1 $eoT.fev3) $eoT.fev5
  (
  (($eor_bv-xor-not.fev1 x1 y1 $eo_2 $eo_4) (_ (= (_ (bvxor (bvnot x1)) (_ (bvxor (bvnot y1)) $eo_4))) (_ (bvxor x1) (_ (bvxor y1) $eo_2))))
  )
)
; program: $eor_bv-xor-not
(program $eor_bv-xor-not ((@n0 Int) (@n1 Int) (y1 (BitVec @n1)) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) (BitVec @n1)) Bool
  (
  (($eor_bv-xor-not x1 y1) ($eor_bv-xor-not.fev1 x1 y1 (eo::nil bvxor (eo::typeof x1)) (eo::nil bvxor (eo::typeof (bvnot x1)))))
  )
)
; program: $eovc_bv-xor-not
(program $eovc_bv-xor-not ((@n1 Int) (@n0 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :signature ((BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-xor-not y1 x1) ($eo_requires_eq ($eo_model_sat ($eor_bv-xor-not x1 y1) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-xor-not")
; program: $eor_bv-not-idemp
(program $eor_bv-not-idemp ((@n0 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0)) Bool
  (
  (($eor_bv-not-idemp x1) (_ (= (bvnot (bvnot x1))) x1))
  )
)
; program: $eovc_bv-not-idemp
(program $eovc_bv-not-idemp ((@n0 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0)) Bool
  (
  (($eovc_bv-not-idemp x1) ($eo_requires_eq ($eo_model_sat ($eor_bv-not-idemp x1) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-not-idemp")
; program: $eor_bv-ult-zero-1
(program $eor_bv-ult-zero-1 ((@n0 Int) (x1 (BitVec @n0)) (n1 Int))
  :signature ((BitVec @n0) Int) Bool
  (
  (($eor_bv-ult-zero-1 x1 n1) (eo::define ((_v0 (_ (@bv 0) n1))) (_ (= (_ (bvult _v0) x1)) (not (_ (= x1) _v0)))))
  )
)
; program: $eovc_bv-ult-zero-1
(program $eovc_bv-ult-zero-1 ((@n0 Int) (x1 (BitVec @n0)) (n1 Int))
  :signature (Int (BitVec @n0)) Bool
  (
  (($eovc_bv-ult-zero-1 n1 x1) ($eo_requires_eq ($eo_model_sat ($eor_bv-ult-zero-1 x1 n1) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-ult-zero-1")
; program: $eor_bv-ult-zero-2
(program $eor_bv-ult-zero-2 ((@n0 Int) (x1 (BitVec @n0)) (n1 Int))
  :signature ((BitVec @n0) Int) Bool
  (
  (($eor_bv-ult-zero-2 x1 n1) (_ (= (_ (bvult x1) (_ (@bv 0) n1))) false))
  )
)
; program: $eovc_bv-ult-zero-2
(program $eovc_bv-ult-zero-2 ((@n0 Int) (x1 (BitVec @n0)) (n1 Int))
  :signature (Int (BitVec @n0)) Bool
  (
  (($eovc_bv-ult-zero-2 n1 x1) ($eo_requires_eq ($eo_model_sat ($eor_bv-ult-zero-2 x1 n1) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-ult-zero-2")
; program: $eor_bv-ult-self
(program $eor_bv-ult-self ((@n0 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0)) Bool
  (
  (($eor_bv-ult-self x1) (_ (= (_ (bvult x1) x1)) false))
  )
)
; program: $eovc_bv-ult-self
(program $eovc_bv-ult-self ((@n0 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0)) Bool
  (
  (($eovc_bv-ult-self x1) ($eo_requires_eq ($eo_model_sat ($eor_bv-ult-self x1) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-ult-self")
; program: $eor_bv-lt-self
(program $eor_bv-lt-self ((@n0 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0)) Bool
  (
  (($eor_bv-lt-self x1) (_ (= (_ (bvslt x1) x1)) false))
  )
)
; program: $eovc_bv-lt-self
(program $eovc_bv-lt-self ((@n0 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0)) Bool
  (
  (($eovc_bv-lt-self x1) ($eo_requires_eq ($eo_model_sat ($eor_bv-lt-self x1) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-lt-self")
; program: $eor_bv-ule-self
(program $eor_bv-ule-self ((@n0 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0)) Bool
  (
  (($eor_bv-ule-self x1) (_ (= (_ (bvule x1) x1)) true))
  )
)
; program: $eovc_bv-ule-self
(program $eovc_bv-ule-self ((@n0 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0)) Bool
  (
  (($eovc_bv-ule-self x1) ($eo_requires_eq ($eo_model_sat ($eor_bv-ule-self x1) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-ule-self")
; program: $eor_bv-ule-zero
(program $eor_bv-ule-zero ((@n0 Int) (x1 (BitVec @n0)) (n1 Int))
  :signature ((BitVec @n0) Int) Bool
  (
  (($eor_bv-ule-zero x1 n1) (eo::define ((_v0 (_ (@bv 0) n1))) (_ (= (_ (bvule x1) _v0)) (_ (= x1) _v0))))
  )
)
; program: $eovc_bv-ule-zero
(program $eovc_bv-ule-zero ((@n0 Int) (x1 (BitVec @n0)) (n1 Int))
  :signature (Int (BitVec @n0)) Bool
  (
  (($eovc_bv-ule-zero n1 x1) ($eo_requires_eq ($eo_model_sat ($eor_bv-ule-zero x1 n1) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-ule-zero")
; program: $eor_bv-zero-ule
(program $eor_bv-zero-ule ((@n0 Int) (n1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int) Bool
  (
  (($eor_bv-zero-ule x1 n1) (_ (= (_ (bvule (_ (@bv 0) n1)) x1)) true))
  )
)
; program: $eovc_bv-zero-ule
(program $eovc_bv-zero-ule ((@n0 Int) (x1 (BitVec @n0)) (n1 Int))
  :signature (Int (BitVec @n0)) Bool
  (
  (($eovc_bv-zero-ule n1 x1) ($eo_requires_eq ($eo_model_sat ($eor_bv-zero-ule x1 n1) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-zero-ule")
; program: $eor_bv-sle-self
(program $eor_bv-sle-self ((@n0 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0)) Bool
  (
  (($eor_bv-sle-self x1) (_ (= (_ (bvsle x1) x1)) true))
  )
)
; program: $eovc_bv-sle-self
(program $eovc_bv-sle-self ((@n0 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0)) Bool
  (
  (($eovc_bv-sle-self x1) ($eo_requires_eq ($eo_model_sat ($eor_bv-sle-self x1) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-sle-self")
; program: $eor_bv-ule-max
(program $eor_bv-ule-max ((@n0 Int) (x1 (BitVec @n0)) (n1 Int) (w1 Int))
  :signature ((BitVec @n0) Int Int Bool Bool) Bool
  (
  ((eo::define ((_v0 (@bvsize x1))) ($eor_bv-ule-max x1 n1 w1 (_ (= w1) _v0) (_ (= n1) (_ (- (int.pow2 _v0)) 1)))) (_ (= (_ (bvule x1) (_ (@bv n1) w1))) true))
  )
)
; program: $eovc_bv-ule-max
(program $eovc_bv-ule-max ((@n0 Int) (w1 Int) (n1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int) Bool
  (
  (($eovc_bv-ule-max x1 n1 w1) (eo::define ((_v0 (@bvsize x1))) (eo::define ((_v1 (_ (= n1) (_ (- (int.pow2 _v0)) 1)))) (eo::define ((_v2 (_ (= w1) _v0))) ($eo_requires_eq ($eo_model_sat _v2 true false) true ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-ule-max x1 n1 w1 _v2 _v1) false false) true true)))))))
  )
)
(echo "smt-meta $eovc_bv-ule-max")
; program: $eor_bv-not-ult
(program $eor_bv-not-ult ((@n0 Int) (@n1 Int) (y1 (BitVec @n1)) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) (BitVec @n1)) Bool
  (
  (($eor_bv-not-ult x1 y1) (_ (= (not (_ (bvult x1) y1))) (_ (bvule y1) x1)))
  )
)
; program: $eovc_bv-not-ult
(program $eovc_bv-not-ult ((@n1 Int) (@n0 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :signature ((BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-not-ult y1 x1) ($eo_requires_eq ($eo_model_sat ($eor_bv-not-ult x1 y1) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-not-ult")
; program: $eor_bv-mult-pow2-1.fev1
(program $eor_bv-mult-pow2-1.fev1 ((@n1 Int) (@n2 Int) (@n0 Int) (ys1 (BitVec @n1)) (z1 (BitVec @n2)) (xs1 (BitVec @n0)) (size1 Int) (n1 Int) ($eo_2 (BitVec @n0)) (u1 Int) ($eo_1 (BitVec @n0)) (exponent1 Int))
  :signature (Int (BitVec @n1) (BitVec @n2) (BitVec @n0) Int Int Int (BitVec @n0) (BitVec @n0)) Bool
  (
  (($eor_bv-mult-pow2-1.fev1 exponent1 ys1 z1 xs1 u1 size1 n1 $eo_1 $eo_2) (_ (= $eo_2) (_ (concat (_ (_ (extract u1) 0) $eo_1)) (_ (concat (_ (@bv 0) exponent1)) (eo::to_bin 0 0)))))
  )
)
; program: $eor_bv-mult-pow2-1
(program $eor_bv-mult-pow2-1 ((@n0 Int) (@n1 Int) (@n2 Int) (exponent1 Int) (u1 Int) (xs1 (BitVec @n0)) (z1 (BitVec @n2)) (n1 Int) (size1 Int) (ys1 (BitVec @n1)))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n2) Int Int Int Int Bool Bool Bool) Bool
  (
  ((eo::define ((_v0 (int.log2 n1))) ($eor_bv-mult-pow2-1 xs1 ys1 z1 size1 n1 exponent1 u1 (_ (= (int.ispow2 n1)) true) (_ (= exponent1) _v0) (_ (= u1) (_ (- (_ (- size1) _v0)) 1)))) (eo::define ((_v0 (bvmul z1))) ($eor_bv-mult-pow2-1.fev1 exponent1 ys1 z1 xs1 u1 size1 n1 ($singleton_elim (eo::list_concat bvmul xs1 (_ _v0 ys1))) (eo::list_concat bvmul xs1 (_ _v0 (_ (bvmul (_ (@bv n1) size1)) ys1))))))
  )
)
; program: $eovc_bv-mult-pow2-1
(program $eovc_bv-mult-pow2-1 ((@n2 Int) (@n1 Int) (@n0 Int) (xs1 (BitVec @n0)) (ys1 (BitVec @n1)) (z1 (BitVec @n2)) (exponent1 Int) (u1 Int) (size1 Int) (n1 Int))
  :signature (Int Int Int Int (BitVec @n2) (BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-mult-pow2-1 n1 size1 u1 exponent1 z1 ys1 xs1) (eo::define ((_v0 (int.log2 n1))) (eo::define ((_v1 (_ (= u1) (_ (- (_ (- size1) _v0)) 1)))) (eo::define ((_v2 (_ (= exponent1) _v0))) (eo::define ((_v3 (_ (= (int.ispow2 n1)) true))) ($eo_requires_eq ($eo_model_sat _v3 true false) true ($eo_requires_eq ($eo_model_sat _v2 true false) true ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-mult-pow2-1 xs1 ys1 z1 size1 n1 exponent1 u1 _v3 _v2 _v1) false false) true true)))))))))
  )
)
(echo "smt-meta $eovc_bv-mult-pow2-1")
; program: $eor_bv-mult-pow2-2.fev1
(program $eor_bv-mult-pow2-2.fev1 ((@n1 Int) (@n2 Int) (@n0 Int) (ys1 (BitVec @n1)) (z1 (BitVec @n2)) (xs1 (BitVec @n0)) (size1 Int) (n1 Int) ($eo_2 (BitVec @n0)) (u1 Int) ($eo_1 (BitVec @n0)) (exponent1 Int))
  :signature (Int (BitVec @n1) (BitVec @n2) (BitVec @n0) Int Int Int (BitVec @n0) (BitVec @n0)) Bool
  (
  (($eor_bv-mult-pow2-2.fev1 exponent1 ys1 z1 xs1 u1 size1 n1 $eo_1 $eo_2) (_ (= $eo_2) (_ (concat (_ (_ (extract u1) 0) (bvneg $eo_1))) (_ (concat (_ (@bv 0) exponent1)) (eo::to_bin 0 0)))))
  )
)
; program: $eor_bv-mult-pow2-2
(program $eor_bv-mult-pow2-2 ((@n0 Int) (@n1 Int) (@n2 Int) (exponent1 Int) (u1 Int) (xs1 (BitVec @n0)) (z1 (BitVec @n2)) (n1 Int) (size1 Int) (ys1 (BitVec @n1)))
  :signature ((BitVec @n0) (BitVec @n1) (BitVec @n2) Int Int Int Int Bool Bool Bool) Bool
  (
  ((eo::define ((_v0 (_ (- (int.pow2 size1)) n1))) (eo::define ((_v1 (int.log2 _v0))) ($eor_bv-mult-pow2-2 xs1 ys1 z1 size1 n1 exponent1 u1 (_ (= (int.ispow2 _v0)) true) (_ (= exponent1) _v1) (_ (= u1) (_ (- (_ (- size1) _v1)) 1))))) (eo::define ((_v0 (bvmul z1))) ($eor_bv-mult-pow2-2.fev1 exponent1 ys1 z1 xs1 u1 size1 n1 ($singleton_elim (eo::list_concat bvmul xs1 (_ _v0 ys1))) (eo::list_concat bvmul xs1 (_ _v0 (_ (bvmul (_ (@bv n1) size1)) ys1))))))
  )
)
; program: $eovc_bv-mult-pow2-2
(program $eovc_bv-mult-pow2-2 ((@n2 Int) (@n1 Int) (@n0 Int) (xs1 (BitVec @n0)) (ys1 (BitVec @n1)) (z1 (BitVec @n2)) (exponent1 Int) (u1 Int) (size1 Int) (n1 Int))
  :signature (Int Int Int Int (BitVec @n2) (BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_bv-mult-pow2-2 n1 size1 u1 exponent1 z1 ys1 xs1) (eo::define ((_v0 (_ (- (int.pow2 size1)) n1))) (eo::define ((_v1 (int.log2 _v0))) (eo::define ((_v2 (_ (= u1) (_ (- (_ (- size1) _v1)) 1)))) (eo::define ((_v3 (_ (= exponent1) _v1))) (eo::define ((_v4 (_ (= (int.ispow2 _v0)) true))) ($eo_requires_eq ($eo_model_sat _v4 true false) true ($eo_requires_eq ($eo_model_sat _v3 true false) true ($eo_requires_eq ($eo_model_sat _v2 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-mult-pow2-2 xs1 ys1 z1 size1 n1 exponent1 u1 _v4 _v3 _v2) false false) true true))))))))))
  )
)
(echo "smt-meta $eovc_bv-mult-pow2-2")
; program: $eor_bv-mult-pow2-2b.fev1
(program $eor_bv-mult-pow2-2b.fev1 ((@n0 Int) ($eoT.fev1 Type) ($eoT.fev3 Type) (n1 Int) (size1 Int) ($eo_2 $eoT.fev1) (u1 Int) (z1 (BitVec @n0)) (exponent1 Int))
  :signature (Int (BitVec @n0) Int Int Int $eoT.fev1) $eoT.fev3
  (
  (($eor_bv-mult-pow2-2b.fev1 exponent1 z1 u1 size1 n1 $eo_2) (_ (= (_ (bvmul z1) (_ (bvmul (_ (@bv n1) size1)) $eo_2))) (_ (concat (_ (_ (extract u1) 0) (bvneg z1))) (_ (concat (_ (@bv 0) exponent1)) (eo::to_bin 0 0)))))
  )
)
; program: $eor_bv-mult-pow2-2b
(program $eor_bv-mult-pow2-2b ((@n0 Int) (exponent1 Int) (u1 Int) (size1 Int) (n1 Int) (z1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int Int Bool Bool Bool) Bool
  (
  ((eo::define ((_v0 (_ (- (int.pow2 size1)) n1))) (eo::define ((_v1 (int.log2 _v0))) ($eor_bv-mult-pow2-2b z1 size1 n1 exponent1 u1 (_ (= (int.ispow2 _v0)) true) (_ (= exponent1) _v1) (_ (= u1) (_ (- (_ (- size1) _v1)) 1))))) ($eor_bv-mult-pow2-2b.fev1 exponent1 z1 u1 size1 n1 (eo::nil bvmul (eo::typeof z1))))
  )
)
; program: $eovc_bv-mult-pow2-2b
(program $eovc_bv-mult-pow2-2b ((@n0 Int) (z1 (BitVec @n0)) (exponent1 Int) (u1 Int) (size1 Int) (n1 Int))
  :signature (Int Int Int Int (BitVec @n0)) Bool
  (
  (($eovc_bv-mult-pow2-2b n1 size1 u1 exponent1 z1) (eo::define ((_v0 (_ (- (int.pow2 size1)) n1))) (eo::define ((_v1 (int.log2 _v0))) (eo::define ((_v2 (_ (= u1) (_ (- (_ (- size1) _v1)) 1)))) (eo::define ((_v3 (_ (= exponent1) _v1))) (eo::define ((_v4 (_ (= (int.ispow2 _v0)) true))) ($eo_requires_eq ($eo_model_sat _v4 true false) true ($eo_requires_eq ($eo_model_sat _v3 true false) true ($eo_requires_eq ($eo_model_sat _v2 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-mult-pow2-2b z1 size1 n1 exponent1 u1 _v4 _v3 _v2) false false) true true))))))))))
  )
)
(echo "smt-meta $eovc_bv-mult-pow2-2b")
; program: $eor_bv-extract-mult-leading-bit.fev1
(program $eor_bv-extract-mult-leading-bit.fev1 ((@n0 Int) (@n1 Int) ($eoT.fev1 Type) ($eoT.fev3 Type) (high1 Int) (low1 Int) (x1i1 Int) (x1in1 Int) (x1 (BitVec @n0)) (y1i1 Int) (y1in1 Int) (y1 (BitVec @n1)) ($eo_2 $eoT.fev1) (w1 Int))
  :signature (Int (BitVec @n0) Int Int (BitVec @n1) Int Int Int Int $eoT.fev1) $eoT.fev3
  (
  (($eor_bv-extract-mult-leading-bit.fev1 w1 x1 x1in1 x1i1 y1 y1in1 y1i1 low1 high1 $eo_2) (_ (= (_ (_ (extract high1) low1) (_ (bvmul (_ (concat (_ (@bv x1i1) x1in1)) (_ (concat x1) (eo::to_bin 0 0)))) (_ (bvmul (_ (concat (_ (@bv y1i1) y1in1)) (_ (concat y1) (eo::to_bin 0 0)))) $eo_2)))) (_ (@bv 0) w1)))
  )
)
; program: $eor_bv-extract-mult-leading-bit
(program $eor_bv-extract-mult-leading-bit ((@n0 Int) (@n1 Int) (w1 Int) (y1 (BitVec @n1)) (y1in1 Int) (y1i1 Int) (low1 Int) (high1 Int) (x1i1 Int) (x1in1 Int) (x1 (BitVec @n0)))
  :signature (Int Int Int Int (BitVec @n0) Int Int (BitVec @n1) Int Bool Bool Bool) Bool
  (
  ((eo::define ((_v0 (+ 1))) (eo::define ((_v1 (_ (+ x1in1) (_ (+ (@bvsize x1)) 0)))) ($eor_bv-extract-mult-leading-bit high1 low1 x1i1 x1in1 x1 y1i1 y1in1 y1 w1 (_ (= (_ (> _v1) 64)) true) (_ (= (_ (<= (_ (- (_ (* 2) (_ (* _v1) 1))) (_ (+ (_ (_ (ite (_ (= x1i1) 0)) x1in1) (_ (- x1in1) (_ _v0 (_ (+ (int.log2 x1i1)) 0))))) (_ (+ (_ (_ (ite (_ (= y1i1) 0)) y1in1) (_ (- y1in1) (_ _v0 (_ (+ (int.log2 y1i1)) 0))))) 0)))) low1)) true) (_ (= w1) (_ _v0 (_ (+ (_ (- high1) low1)) 0)))))) ($eor_bv-extract-mult-leading-bit.fev1 w1 x1 x1in1 x1i1 y1 y1in1 y1i1 low1 high1 (eo::nil bvmul (eo::typeof (_ (concat (_ (@bv x1i1) x1in1)) (_ (concat x1) (eo::to_bin 0 0)))))))
  )
)
; program: $eovc_bv-extract-mult-leading-bit
(program $eovc_bv-extract-mult-leading-bit ((@n0 Int) (@n1 Int) (y1 (BitVec @n1)) (x1 (BitVec @n0)) (x1in1 Int) (x1i1 Int) (y1in1 Int) (y1i1 Int) (w1 Int) (high1 Int) (low1 Int))
  :signature (Int Int Int Int Int Int Int (BitVec @n0) (BitVec @n1)) Bool
  (
  (($eovc_bv-extract-mult-leading-bit low1 high1 w1 y1i1 y1in1 x1i1 x1in1 x1 y1) (eo::define ((_v0 (+ 1))) (eo::define ((_v1 (_ (= w1) (_ _v0 (_ (+ (_ (- high1) low1)) 0))))) (eo::define ((_v2 (_ (+ x1in1) (_ (+ (@bvsize x1)) 0)))) (eo::define ((_v3 (_ (= (_ (<= (_ (- (_ (* 2) (_ (* _v2) 1))) (_ (+ (_ (_ (ite (_ (= x1i1) 0)) x1in1) (_ (- x1in1) (_ _v0 (_ (+ (int.log2 x1i1)) 0))))) (_ (+ (_ (_ (ite (_ (= y1i1) 0)) y1in1) (_ (- y1in1) (_ _v0 (_ (+ (int.log2 y1i1)) 0))))) 0)))) low1)) true))) (eo::define ((_v4 (_ (= (_ (> _v2) 64)) true))) ($eo_requires_eq ($eo_model_sat _v4 true false) true ($eo_requires_eq ($eo_model_sat _v3 true false) true ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-extract-mult-leading-bit high1 low1 x1i1 x1in1 x1 y1i1 y1in1 y1 w1 _v4 _v3 _v1) false false) true true))))))))))
  )
)
(echo "smt-meta $eovc_bv-extract-mult-leading-bit")
; program: $eor_bv-udiv-pow2-not-one
(program $eor_bv-udiv-pow2-not-one ((@n0 Int) (v1 Int) (n1 Int) (nm1 Int) (power1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int Int Bool Bool Bool Bool) Bool
  (
  (($eor_bv-udiv-pow2-not-one x1 v1 n1 power1 nm1 (_ (= (int.ispow2 v1)) true) (_ (= (_ (> v1) 1)) true) (_ (= power1) (int.log2 v1)) (_ (= nm1) (_ (- n1) 1))) (_ (= (_ (bvudiv x1) (_ (@bv v1) n1))) (_ (concat (_ (@bv 0) power1)) (_ (concat (_ (_ (extract nm1) power1) x1)) (eo::to_bin 0 0)))))
  )
)
; program: $eovc_bv-udiv-pow2-not-one
(program $eovc_bv-udiv-pow2-not-one ((@n0 Int) (x1 (BitVec @n0)) (power1 Int) (v1 Int) (nm1 Int) (n1 Int))
  :signature (Int Int Int Int (BitVec @n0)) Bool
  (
  (($eovc_bv-udiv-pow2-not-one n1 nm1 v1 power1 x1) (eo::define ((_v0 (_ (= nm1) (_ (- n1) 1)))) (eo::define ((_v1 (_ (= power1) (int.log2 v1)))) (eo::define ((_v2 (_ (= (_ (> v1) 1)) true))) (eo::define ((_v3 (_ (= (int.ispow2 v1)) true))) ($eo_requires_eq ($eo_model_sat _v3 true false) true ($eo_requires_eq ($eo_model_sat _v2 true false) true ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-udiv-pow2-not-one x1 v1 n1 power1 nm1 _v3 _v2 _v1 _v0) false false) true true))))))))))
  )
)
(echo "smt-meta $eovc_bv-udiv-pow2-not-one")
; program: $eor_bv-udiv-zero
(program $eor_bv-udiv-zero ((@n0 Int) (x1 (BitVec @n0)) (n1 Int))
  :signature ((BitVec @n0) Int) Bool
  (
  (($eor_bv-udiv-zero x1 n1) (eo::define ((_v0 (_ (@bv 0) n1))) (_ (= (_ (bvudiv x1) _v0)) (bvnot _v0))))
  )
)
; program: $eovc_bv-udiv-zero
(program $eovc_bv-udiv-zero ((@n0 Int) (x1 (BitVec @n0)) (n1 Int))
  :signature (Int (BitVec @n0)) Bool
  (
  (($eovc_bv-udiv-zero n1 x1) ($eo_requires_eq ($eo_model_sat ($eor_bv-udiv-zero x1 n1) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-udiv-zero")
; program: $eor_bv-udiv-one
(program $eor_bv-udiv-one ((@n0 Int) (n1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int) Bool
  (
  (($eor_bv-udiv-one x1 n1) (_ (= (_ (bvudiv x1) (_ (@bv 1) n1))) x1))
  )
)
; program: $eovc_bv-udiv-one
(program $eovc_bv-udiv-one ((@n0 Int) (x1 (BitVec @n0)) (n1 Int))
  :signature (Int (BitVec @n0)) Bool
  (
  (($eovc_bv-udiv-one n1 x1) ($eo_requires_eq ($eo_model_sat ($eor_bv-udiv-one x1 n1) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-udiv-one")
; program: $eor_bv-urem-pow2-not-one
(program $eor_bv-urem-pow2-not-one ((@n0 Int) (v1 Int) (n1 Int) (nmp1 Int) (pm1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int Int Bool Bool Bool Bool) Bool
  (
  ((eo::define ((_v0 (int.log2 v1))) ($eor_bv-urem-pow2-not-one x1 v1 n1 nmp1 pm1 (_ (= (int.ispow2 v1)) true) (_ (= (_ (> v1) 1)) true) (_ (= nmp1) (_ (- n1) _v0)) (_ (= pm1) (_ (- _v0) 1)))) (_ (= (_ (bvurem x1) (_ (@bv v1) n1))) (_ (concat (_ (@bv 0) nmp1)) (_ (concat (_ (_ (extract pm1) 0) x1)) (eo::to_bin 0 0)))))
  )
)
; program: $eovc_bv-urem-pow2-not-one
(program $eovc_bv-urem-pow2-not-one ((@n0 Int) (x1 (BitVec @n0)) (nmp1 Int) (n1 Int) (pm1 Int) (v1 Int))
  :signature (Int Int Int Int (BitVec @n0)) Bool
  (
  (($eovc_bv-urem-pow2-not-one v1 pm1 n1 nmp1 x1) (eo::define ((_v0 (int.log2 v1))) (eo::define ((_v1 (_ (= pm1) (_ (- _v0) 1)))) (eo::define ((_v2 (_ (= nmp1) (_ (- n1) _v0)))) (eo::define ((_v3 (_ (= (_ (> v1) 1)) true))) (eo::define ((_v4 (_ (= (int.ispow2 v1)) true))) ($eo_requires_eq ($eo_model_sat _v4 true false) true ($eo_requires_eq ($eo_model_sat _v3 true false) true ($eo_requires_eq ($eo_model_sat _v2 true false) true ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-urem-pow2-not-one x1 v1 n1 nmp1 pm1 _v4 _v3 _v2 _v1) false false) true true)))))))))))
  )
)
(echo "smt-meta $eovc_bv-urem-pow2-not-one")
; program: $eor_bv-urem-one
(program $eor_bv-urem-one ((@n0 Int) (x1 (BitVec @n0)) (n1 Int))
  :signature ((BitVec @n0) Int) Bool
  (
  (($eor_bv-urem-one x1 n1) (_ (= (_ (bvurem x1) (_ (@bv 1) n1))) (_ (@bv 0) n1)))
  )
)
; program: $eovc_bv-urem-one
(program $eovc_bv-urem-one ((@n0 Int) (x1 (BitVec @n0)) (n1 Int))
  :signature (Int (BitVec @n0)) Bool
  (
  (($eovc_bv-urem-one n1 x1) ($eo_requires_eq ($eo_model_sat ($eor_bv-urem-one x1 n1) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-urem-one")
; program: $eor_bv-urem-self
(program $eor_bv-urem-self ((@n0 Int) (x1 (BitVec @n0)) (w1 Int))
  :signature ((BitVec @n0) Int Bool) Bool
  (
  (($eor_bv-urem-self x1 w1 (_ (= w1) (@bvsize x1))) (_ (= (_ (bvurem x1) x1)) (_ (@bv 0) w1)))
  )
)
; program: $eovc_bv-urem-self
(program $eovc_bv-urem-self ((@n0 Int) (w1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int) Bool
  (
  (($eovc_bv-urem-self x1 w1) (eo::define ((_v0 (_ (= w1) (@bvsize x1)))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-urem-self x1 w1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_bv-urem-self")
; program: $eor_bv-shl-zero
(program $eor_bv-shl-zero ((@n0 Int) (a1 (BitVec @n0)) (n1 Int))
  :signature ((BitVec @n0) Int) Bool
  (
  (($eor_bv-shl-zero a1 n1) (eo::define ((_v0 (_ (@bv 0) n1))) (_ (= (_ (bvshl _v0) a1)) _v0)))
  )
)
; program: $eovc_bv-shl-zero
(program $eovc_bv-shl-zero ((@n0 Int) (a1 (BitVec @n0)) (n1 Int))
  :signature (Int (BitVec @n0)) Bool
  (
  (($eovc_bv-shl-zero n1 a1) ($eo_requires_eq ($eo_model_sat ($eor_bv-shl-zero a1 n1) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-shl-zero")
; program: $eor_bv-lshr-zero
(program $eor_bv-lshr-zero ((@n0 Int) (a1 (BitVec @n0)) (n1 Int))
  :signature ((BitVec @n0) Int) Bool
  (
  (($eor_bv-lshr-zero a1 n1) (eo::define ((_v0 (_ (@bv 0) n1))) (_ (= (_ (bvlshr _v0) a1)) _v0)))
  )
)
; program: $eovc_bv-lshr-zero
(program $eovc_bv-lshr-zero ((@n0 Int) (a1 (BitVec @n0)) (n1 Int))
  :signature (Int (BitVec @n0)) Bool
  (
  (($eovc_bv-lshr-zero n1 a1) ($eo_requires_eq ($eo_model_sat ($eor_bv-lshr-zero a1 n1) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-lshr-zero")
; program: $eor_bv-ashr-zero
(program $eor_bv-ashr-zero ((@n0 Int) (a1 (BitVec @n0)) (n1 Int))
  :signature ((BitVec @n0) Int) Bool
  (
  (($eor_bv-ashr-zero a1 n1) (eo::define ((_v0 (_ (@bv 0) n1))) (_ (= (_ (bvashr _v0) a1)) _v0)))
  )
)
; program: $eovc_bv-ashr-zero
(program $eovc_bv-ashr-zero ((@n0 Int) (a1 (BitVec @n0)) (n1 Int))
  :signature (Int (BitVec @n0)) Bool
  (
  (($eovc_bv-ashr-zero n1 a1) ($eo_requires_eq ($eo_model_sat ($eor_bv-ashr-zero a1 n1) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-ashr-zero")
; program: $eor_bv-ugt-urem
(program $eor_bv-ugt-urem ((@n0 Int) (@n1 Int) (x1 (BitVec @n1)) (y1 (BitVec @n0)) (w1 Int))
  :signature ((BitVec @n0) (BitVec @n1) Int Bool) Bool
  (
  (($eor_bv-ugt-urem y1 x1 w1 (_ (= w1) (@bvsize y1))) (eo::define ((_v0 (_ (@bv 0) w1))) (_ (= (_ (bvugt (_ (bvurem y1) x1)) x1)) (_ (and (_ (= x1) _v0)) (_ (and (_ (bvugt y1) _v0)) true)))))
  )
)
; program: $eovc_bv-ugt-urem
(program $eovc_bv-ugt-urem ((@n0 Int) (@n1 Int) (x1 (BitVec @n1)) (w1 Int) (y1 (BitVec @n0)))
  :signature ((BitVec @n0) Int (BitVec @n1)) Bool
  (
  (($eovc_bv-ugt-urem y1 w1 x1) (eo::define ((_v0 (_ (= w1) (@bvsize y1)))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-ugt-urem y1 x1 w1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_bv-ugt-urem")
; program: $eor_bv-ult-one
(program $eor_bv-ult-one ((@n0 Int) (x1 (BitVec @n0)) (n1 Int))
  :signature ((BitVec @n0) Int) Bool
  (
  (($eor_bv-ult-one x1 n1) (_ (= (_ (bvult x1) (_ (@bv 1) n1))) (_ (= x1) (_ (@bv 0) n1))))
  )
)
; program: $eovc_bv-ult-one
(program $eovc_bv-ult-one ((@n0 Int) (x1 (BitVec @n0)) (n1 Int))
  :signature (Int (BitVec @n0)) Bool
  (
  (($eovc_bv-ult-one n1 x1) ($eo_requires_eq ($eo_model_sat ($eor_bv-ult-one x1 n1) false false) true true))
  )
)
(echo "smt-meta $eovc_bv-ult-one")
; program: $eor_bv-merge-sign-extend-1
(program $eor_bv-merge-sign-extend-1 ((@n0 Int) (i1 Int) (j1 Int) (k1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int Bool) Bool
  (
  (($eor_bv-merge-sign-extend-1 x1 i1 j1 k1 (_ (= k1) (_ (+ i1) (_ (+ j1) 0)))) (_ (= (_ (sign_extend i1) (_ (sign_extend j1) x1))) (_ (sign_extend k1) x1)))
  )
)
; program: $eovc_bv-merge-sign-extend-1
(program $eovc_bv-merge-sign-extend-1 ((@n0 Int) (x1 (BitVec @n0)) (k1 Int) (i1 Int) (j1 Int))
  :signature (Int Int Int (BitVec @n0)) Bool
  (
  (($eovc_bv-merge-sign-extend-1 j1 i1 k1 x1) (eo::define ((_v0 (_ (= k1) (_ (+ i1) (_ (+ j1) 0))))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-merge-sign-extend-1 x1 i1 j1 k1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_bv-merge-sign-extend-1")
; program: $eor_bv-merge-sign-extend-2
(program $eor_bv-merge-sign-extend-2 ((@n0 Int) (i1 Int) (j1 Int) (k1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int Bool Bool) Bool
  (
  (($eor_bv-merge-sign-extend-2 x1 i1 j1 k1 (_ (= (_ (> j1) 0)) true) (_ (= k1) (_ (+ i1) (_ (+ j1) 0)))) (_ (= (_ (sign_extend i1) (_ (zero_extend j1) x1))) (_ (zero_extend k1) x1)))
  )
)
; program: $eovc_bv-merge-sign-extend-2
(program $eovc_bv-merge-sign-extend-2 ((@n0 Int) (x1 (BitVec @n0)) (k1 Int) (i1 Int) (j1 Int))
  :signature (Int Int Int (BitVec @n0)) Bool
  (
  (($eovc_bv-merge-sign-extend-2 j1 i1 k1 x1) (eo::define ((_v0 (_ (= k1) (_ (+ i1) (_ (+ j1) 0))))) (eo::define ((_v1 (_ (= (_ (> j1) 0)) true))) ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-merge-sign-extend-2 x1 i1 j1 k1 _v1 _v0) false false) true true))))))
  )
)
(echo "smt-meta $eovc_bv-merge-sign-extend-2")
; program: $eor_bv-sign-extend-eq-const-1
(program $eor_bv-sign-extend-eq-const-1 ((@n0 Int) (m1 Int) (nmm1 Int) (mp1 Int) (x1 (BitVec @n0)) (nm2 Int) (c1 Int) (nm1 Int))
  :signature ((BitVec @n0) Int Int Int Int Int Int Bool Bool Bool) Bool
  (
  (($eor_bv-sign-extend-eq-const-1 x1 m1 c1 nm1 mp1 nm2 nmm1 (_ (= mp1) (_ (+ m1) (_ (+ 1) 0))) (_ (= nm2) (_ (- (@bvsize x1)) 1)) (_ (= nmm1) (_ (- nm1) 1))) (eo::define ((_v0 (_ (@bv c1) nm1))) (eo::define ((_v1 (_ (@bv 0) mp1))) (eo::define ((_v2 (= (_ (_ (extract nmm1) nm2) _v0)))) (_ (= (_ (= (_ (sign_extend m1) x1)) _v0)) (_ (and (_ (or (_ _v2 _v1)) (_ (or (_ _v2 (bvnot _v1))) false))) (_ (and (_ (= x1) (_ (_ (extract nm2) 0) _v0))) true)))))))
  )
)
; program: $eovc_bv-sign-extend-eq-const-1
(program $eovc_bv-sign-extend-eq-const-1 ((@n0 Int) (c1 Int) (mp1 Int) (m1 Int) (nm2 Int) (x1 (BitVec @n0)) (nmm1 Int) (nm1 Int))
  :signature (Int Int (BitVec @n0) Int Int Int Int) Bool
  (
  (($eovc_bv-sign-extend-eq-const-1 nm1 nmm1 x1 nm2 m1 mp1 c1) (eo::define ((_v0 (_ (= nmm1) (_ (- nm1) 1)))) (eo::define ((_v1 (_ (= nm2) (_ (- (@bvsize x1)) 1)))) (eo::define ((_v2 (_ (= mp1) (_ (+ m1) (_ (+ 1) 0))))) ($eo_requires_eq ($eo_model_sat _v2 true false) true ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-sign-extend-eq-const-1 x1 m1 c1 nm1 mp1 nm2 nmm1 _v2 _v1 _v0) false false) true true))))))))
  )
)
(echo "smt-meta $eovc_bv-sign-extend-eq-const-1")
; program: $eor_bv-sign-extend-eq-const-2
(program $eor_bv-sign-extend-eq-const-2 ((@n0 Int) (m1 Int) (nmm1 Int) (mp1 Int) (x1 (BitVec @n0)) (nm2 Int) (c1 Int) (nm1 Int))
  :signature ((BitVec @n0) Int Int Int Int Int Int Bool Bool Bool) Bool
  (
  (($eor_bv-sign-extend-eq-const-2 x1 m1 c1 nm1 mp1 nm2 nmm1 (_ (= mp1) (_ (+ m1) (_ (+ 1) 0))) (_ (= nm2) (_ (- (@bvsize x1)) 1)) (_ (= nmm1) (_ (- nm1) 1))) (eo::define ((_v0 (_ (@bv c1) nm1))) (eo::define ((_v1 (_ (@bv 0) mp1))) (eo::define ((_v2 (= (_ (_ (extract nmm1) nm2) _v0)))) (_ (= (_ (= _v0) (_ (sign_extend m1) x1))) (_ (and (_ (or (_ _v2 _v1)) (_ (or (_ _v2 (bvnot _v1))) false))) (_ (and (_ (= x1) (_ (_ (extract nm2) 0) _v0))) true)))))))
  )
)
; program: $eovc_bv-sign-extend-eq-const-2
(program $eovc_bv-sign-extend-eq-const-2 ((@n0 Int) (c1 Int) (mp1 Int) (m1 Int) (nm2 Int) (x1 (BitVec @n0)) (nmm1 Int) (nm1 Int))
  :signature (Int Int (BitVec @n0) Int Int Int Int) Bool
  (
  (($eovc_bv-sign-extend-eq-const-2 nm1 nmm1 x1 nm2 m1 mp1 c1) (eo::define ((_v0 (_ (= nmm1) (_ (- nm1) 1)))) (eo::define ((_v1 (_ (= nm2) (_ (- (@bvsize x1)) 1)))) (eo::define ((_v2 (_ (= mp1) (_ (+ m1) (_ (+ 1) 0))))) ($eo_requires_eq ($eo_model_sat _v2 true false) true ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-sign-extend-eq-const-2 x1 m1 c1 nm1 mp1 nm2 nmm1 _v2 _v1 _v0) false false) true true))))))))
  )
)
(echo "smt-meta $eovc_bv-sign-extend-eq-const-2")
; program: $eor_bv-zero-extend-eq-const-1
(program $eor_bv-zero-extend-eq-const-1 ((@n0 Int) (nmm1 Int) (m1 Int) (x1 (BitVec @n0)) (nm2 Int) (c1 Int) (nm1 Int))
  :signature ((BitVec @n0) Int Int Int Int Int Bool Bool) Bool
  (
  (($eor_bv-zero-extend-eq-const-1 x1 m1 c1 nm1 nm2 nmm1 (_ (= nm2) (_ (- (@bvsize x1)) 1)) (_ (= nmm1) (_ (- nm1) 1))) (eo::define ((_v0 (_ (@bv c1) nm1))) (_ (= (_ (= (_ (zero_extend m1) x1)) _v0)) (_ (and (_ (= (_ (_ (extract nmm1) nm2) _v0)) (_ (@bv 0) m1))) (_ (and (_ (= x1) (_ (_ (extract nm2) 0) _v0))) true)))))
  )
)
; program: $eovc_bv-zero-extend-eq-const-1
(program $eovc_bv-zero-extend-eq-const-1 ((@n0 Int) (m1 Int) (c1 Int) (nm2 Int) (x1 (BitVec @n0)) (nmm1 Int) (nm1 Int))
  :signature (Int Int (BitVec @n0) Int Int Int) Bool
  (
  (($eovc_bv-zero-extend-eq-const-1 nm1 nmm1 x1 nm2 c1 m1) (eo::define ((_v0 (_ (= nmm1) (_ (- nm1) 1)))) (eo::define ((_v1 (_ (= nm2) (_ (- (@bvsize x1)) 1)))) ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-zero-extend-eq-const-1 x1 m1 c1 nm1 nm2 nmm1 _v1 _v0) false false) true true))))))
  )
)
(echo "smt-meta $eovc_bv-zero-extend-eq-const-1")
; program: $eor_bv-zero-extend-eq-const-2
(program $eor_bv-zero-extend-eq-const-2 ((@n0 Int) (nmm1 Int) (m1 Int) (x1 (BitVec @n0)) (nm2 Int) (c1 Int) (nm1 Int))
  :signature ((BitVec @n0) Int Int Int Int Int Bool Bool) Bool
  (
  (($eor_bv-zero-extend-eq-const-2 x1 m1 c1 nm1 nm2 nmm1 (_ (= nm2) (_ (- (@bvsize x1)) 1)) (_ (= nmm1) (_ (- nm1) 1))) (eo::define ((_v0 (_ (@bv c1) nm1))) (_ (= (_ (= _v0) (_ (zero_extend m1) x1))) (_ (and (_ (= (_ (_ (extract nmm1) nm2) _v0)) (_ (@bv 0) m1))) (_ (and (_ (= x1) (_ (_ (extract nm2) 0) _v0))) true)))))
  )
)
; program: $eovc_bv-zero-extend-eq-const-2
(program $eovc_bv-zero-extend-eq-const-2 ((@n0 Int) (m1 Int) (c1 Int) (nm2 Int) (x1 (BitVec @n0)) (nmm1 Int) (nm1 Int))
  :signature (Int Int (BitVec @n0) Int Int Int) Bool
  (
  (($eovc_bv-zero-extend-eq-const-2 nm1 nmm1 x1 nm2 c1 m1) (eo::define ((_v0 (_ (= nmm1) (_ (- nm1) 1)))) (eo::define ((_v1 (_ (= nm2) (_ (- (@bvsize x1)) 1)))) ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-zero-extend-eq-const-2 x1 m1 c1 nm1 nm2 nmm1 _v1 _v0) false false) true true))))))
  )
)
(echo "smt-meta $eovc_bv-zero-extend-eq-const-2")
; program: $eor_bv-zero-extend-ult-const-1
(program $eor_bv-zero-extend-ult-const-1 ((@n0 Int) (m1 Int) (x1 (BitVec @n0)) (nm2 Int) (c1 Int) (nm1 Int))
  :signature ((BitVec @n0) Int Int Int Int Bool Bool) Bool
  (
  ((eo::define ((_v0 (_ (@bv c1) nm1))) ($eor_bv-zero-extend-ult-const-1 x1 m1 c1 nm1 nm2 (_ (= nm2) (_ (- (@bvsize x1)) 1)) (_ (= _v0) (_ (zero_extend m1) (_ (_ (extract nm2) 0) _v0))))) (eo::define ((_v0 (_ (@bv c1) nm1))) (_ (= (_ (bvult (_ (zero_extend m1) x1)) _v0)) (_ (bvult x1) (_ (_ (extract nm2) 0) _v0)))))
  )
)
; program: $eovc_bv-zero-extend-ult-const-1
(program $eovc_bv-zero-extend-ult-const-1 ((@n0 Int) (x1 (BitVec @n0)) (m1 Int) (nm2 Int) (c1 Int) (nm1 Int))
  :signature (Int Int Int Int (BitVec @n0)) Bool
  (
  (($eovc_bv-zero-extend-ult-const-1 nm1 c1 nm2 m1 x1) (eo::define ((_v0 (_ (@bv c1) nm1))) (eo::define ((_v1 (_ (= _v0) (_ (zero_extend m1) (_ (_ (extract nm2) 0) _v0))))) (eo::define ((_v2 (_ (= nm2) (_ (- (@bvsize x1)) 1)))) ($eo_requires_eq ($eo_model_sat _v2 true false) true ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-zero-extend-ult-const-1 x1 m1 c1 nm1 nm2 _v2 _v1) false false) true true)))))))
  )
)
(echo "smt-meta $eovc_bv-zero-extend-ult-const-1")
; program: $eor_bv-zero-extend-ult-const-2
(program $eor_bv-zero-extend-ult-const-2 ((@n0 Int) (m1 Int) (nm2 Int) (c1 Int) (nm1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int Int Bool Bool) Bool
  (
  ((eo::define ((_v0 (_ (@bv c1) nm1))) ($eor_bv-zero-extend-ult-const-2 x1 m1 c1 nm1 nm2 (_ (= nm2) (_ (- (@bvsize x1)) 1)) (_ (= _v0) (_ (zero_extend m1) (_ (_ (extract nm2) 0) _v0))))) (eo::define ((_v0 (_ (@bv c1) nm1))) (_ (= (_ (bvult _v0) (_ (zero_extend m1) x1))) (_ (bvult (_ (_ (extract nm2) 0) _v0)) x1))))
  )
)
; program: $eovc_bv-zero-extend-ult-const-2
(program $eovc_bv-zero-extend-ult-const-2 ((@n0 Int) (x1 (BitVec @n0)) (m1 Int) (nm2 Int) (c1 Int) (nm1 Int))
  :signature (Int Int Int Int (BitVec @n0)) Bool
  (
  (($eovc_bv-zero-extend-ult-const-2 nm1 c1 nm2 m1 x1) (eo::define ((_v0 (_ (@bv c1) nm1))) (eo::define ((_v1 (_ (= _v0) (_ (zero_extend m1) (_ (_ (extract nm2) 0) _v0))))) (eo::define ((_v2 (_ (= nm2) (_ (- (@bvsize x1)) 1)))) ($eo_requires_eq ($eo_model_sat _v2 true false) true ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-zero-extend-ult-const-2 x1 m1 c1 nm1 nm2 _v2 _v1) false false) true true)))))))
  )
)
(echo "smt-meta $eovc_bv-zero-extend-ult-const-2")
; program: $eor_bv-sign-extend-ult-const-1
(program $eor_bv-sign-extend-ult-const-1 ((@n0 Int) (m1 Int) (x1 (BitVec @n0)) (nm2 Int) (c1 Int) (nm1 Int))
  :signature ((BitVec @n0) Int Int Int Int Bool Bool) Bool
  (
  ((eo::define ((_v0 (_ (- (@bvsize x1)) 1))) (eo::define ((_v1 (_ (@bv _v0) nm1))) (eo::define ((_v2 (_ (@bv c1) nm1))) ($eor_bv-sign-extend-ult-const-1 x1 m1 c1 nm1 nm2 (_ (= (_ (or (_ (bvule _v2) (_ (bvshl (_ (@bv 1) nm1)) _v1))) (_ (or (_ (bvuge _v2) (_ (bvshl (bvnot (_ (@bv 0) nm1))) _v1))) false))) true) (_ (= nm2) _v0))))) (eo::define ((_v0 (_ (@bv c1) nm1))) (_ (= (_ (bvult (_ (sign_extend m1) x1)) _v0)) (_ (bvult x1) (_ (_ (extract nm2) 0) _v0)))))
  )
)
; program: $eovc_bv-sign-extend-ult-const-1
(program $eovc_bv-sign-extend-ult-const-1 ((@n0 Int) (m1 Int) (c1 Int) (nm1 Int) (nm2 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int Int) Bool
  (
  (($eovc_bv-sign-extend-ult-const-1 x1 nm2 nm1 c1 m1) (eo::define ((_v0 (_ (- (@bvsize x1)) 1))) (eo::define ((_v1 (_ (= nm2) _v0))) (eo::define ((_v2 (_ (@bv _v0) nm1))) (eo::define ((_v3 (_ (@bv c1) nm1))) (eo::define ((_v4 (_ (= (_ (or (_ (bvule _v3) (_ (bvshl (_ (@bv 1) nm1)) _v2))) (_ (or (_ (bvuge _v3) (_ (bvshl (bvnot (_ (@bv 0) nm1))) _v2))) false))) true))) ($eo_requires_eq ($eo_model_sat _v4 true false) true ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-sign-extend-ult-const-1 x1 m1 c1 nm1 nm2 _v4 _v1) false false) true true)))))))))
  )
)
(echo "smt-meta $eovc_bv-sign-extend-ult-const-1")
; program: $eor_bv-sign-extend-ult-const-2
(program $eor_bv-sign-extend-ult-const-2 ((@n0 Int) (m1 Int) (c1 Int) (nm1 Int) (nm2 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int Int Bool Bool Bool) Bool
  (
  ((eo::define ((_v0 (_ (- (@bvsize x1)) 1))) (eo::define ((_v1 (_ (@bv _v0) nm1))) (eo::define ((_v2 (_ (@bv c1) nm1))) ($eor_bv-sign-extend-ult-const-2 x1 m1 c1 nm1 nm2 (_ (= (_ (bvult (_ (bvshl (_ (@bv 1) nm1)) _v1)) _v2)) true) (_ (= (_ (bvule _v2) (_ (bvshl (bvnot (_ (@bv 0) nm1))) _v1))) true) (_ (= nm2) _v0))))) (_ (= (_ (bvult (_ (sign_extend m1) x1)) (_ (@bv c1) nm1))) (_ (= (_ (_ (extract nm2) nm2) x1)) (_ (@bv 0) 1))))
  )
)
; program: $eovc_bv-sign-extend-ult-const-2
(program $eovc_bv-sign-extend-ult-const-2 ((@n0 Int) (m1 Int) (c1 Int) (nm1 Int) (nm2 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int Int) Bool
  (
  (($eovc_bv-sign-extend-ult-const-2 x1 nm2 nm1 c1 m1) (eo::define ((_v0 (_ (- (@bvsize x1)) 1))) (eo::define ((_v1 (_ (= nm2) _v0))) (eo::define ((_v2 (_ (@bv _v0) nm1))) (eo::define ((_v3 (_ (@bv c1) nm1))) (eo::define ((_v4 (_ (= (_ (bvule _v3) (_ (bvshl (bvnot (_ (@bv 0) nm1))) _v2))) true))) (eo::define ((_v5 (_ (= (_ (bvult (_ (bvshl (_ (@bv 1) nm1)) _v2)) _v3)) true))) ($eo_requires_eq ($eo_model_sat _v5 true false) true ($eo_requires_eq ($eo_model_sat _v4 true false) true ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-sign-extend-ult-const-2 x1 m1 c1 nm1 nm2 _v5 _v4 _v1) false false) true true)))))))))))
  )
)
(echo "smt-meta $eovc_bv-sign-extend-ult-const-2")
; program: $eor_bv-sign-extend-ult-const-3
(program $eor_bv-sign-extend-ult-const-3 ((@n0 Int) (m1 Int) (nm2 Int) (c1 Int) (nm1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int Int Bool Bool) Bool
  (
  ((eo::define ((_v0 (_ (- (@bvsize x1)) 1))) (eo::define ((_v1 (_ (bvshl (_ (@bv 1) nm1)) (_ (@bv _v0) nm1)))) (eo::define ((_v2 (_ (@bv c1) nm1))) ($eor_bv-sign-extend-ult-const-3 x1 m1 c1 nm1 nm2 (_ (= (_ (or (_ (bvult _v2) _v1)) (_ (or (_ (bvuge _v2) (bvnot _v1))) false))) true) (_ (= nm2) _v0))))) (eo::define ((_v0 (_ (@bv c1) nm1))) (_ (= (_ (bvult _v0) (_ (sign_extend m1) x1))) (_ (bvult (_ (_ (extract nm2) 0) _v0)) x1))))
  )
)
; program: $eovc_bv-sign-extend-ult-const-3
(program $eovc_bv-sign-extend-ult-const-3 ((@n0 Int) (m1 Int) (c1 Int) (nm1 Int) (nm2 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int Int) Bool
  (
  (($eovc_bv-sign-extend-ult-const-3 x1 nm2 nm1 c1 m1) (eo::define ((_v0 (_ (- (@bvsize x1)) 1))) (eo::define ((_v1 (_ (= nm2) _v0))) (eo::define ((_v2 (_ (bvshl (_ (@bv 1) nm1)) (_ (@bv _v0) nm1)))) (eo::define ((_v3 (_ (@bv c1) nm1))) (eo::define ((_v4 (_ (= (_ (or (_ (bvult _v3) _v2)) (_ (or (_ (bvuge _v3) (bvnot _v2))) false))) true))) ($eo_requires_eq ($eo_model_sat _v4 true false) true ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-sign-extend-ult-const-3 x1 m1 c1 nm1 nm2 _v4 _v1) false false) true true)))))))))
  )
)
(echo "smt-meta $eovc_bv-sign-extend-ult-const-3")
; program: $eor_bv-sign-extend-ult-const-4
(program $eor_bv-sign-extend-ult-const-4 ((@n0 Int) (c1 Int) (nm1 Int) (m1 Int) (nm2 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int Int Bool Bool Bool) Bool
  (
  ((eo::define ((_v0 (_ (- (@bvsize x1)) 1))) (eo::define ((_v1 (_ (@bv _v0) nm1))) (eo::define ((_v2 (_ (@bv c1) nm1))) ($eor_bv-sign-extend-ult-const-4 x1 m1 c1 nm1 nm2 (_ (= (_ (bvule (bvnot (_ (bvshl (bvnot (_ (@bv 0) nm1))) _v1))) _v2)) true) (_ (= (_ (bvule _v2) (bvnot (_ (bvshl (_ (@bv 1) nm1)) _v1)))) true) (_ (= nm2) _v0))))) (_ (= (_ (bvult (_ (@bv c1) nm1)) (_ (sign_extend m1) x1))) (_ (= (_ (_ (extract nm2) nm2) x1)) (_ (@bv 1) 1))))
  )
)
; program: $eovc_bv-sign-extend-ult-const-4
(program $eovc_bv-sign-extend-ult-const-4 ((@n0 Int) (m1 Int) (c1 Int) (nm1 Int) (nm2 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int Int Int) Bool
  (
  (($eovc_bv-sign-extend-ult-const-4 x1 nm2 nm1 c1 m1) (eo::define ((_v0 (_ (- (@bvsize x1)) 1))) (eo::define ((_v1 (_ (= nm2) _v0))) (eo::define ((_v2 (_ (@bv _v0) nm1))) (eo::define ((_v3 (_ (@bv c1) nm1))) (eo::define ((_v4 (_ (= (_ (bvule _v3) (bvnot (_ (bvshl (_ (@bv 1) nm1)) _v2)))) true))) (eo::define ((_v5 (_ (= (_ (bvule (bvnot (_ (bvshl (bvnot (_ (@bv 0) nm1))) _v2))) _v3)) true))) ($eo_requires_eq ($eo_model_sat _v5 true false) true ($eo_requires_eq ($eo_model_sat _v4 true false) true ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat ($eor_bv-sign-extend-ult-const-4 x1 m1 c1 nm1 nm2 _v5 _v4 _v1) false false) true true)))))))))))
  )
)
(echo "smt-meta $eovc_bv-sign-extend-ult-const-4")
; program: $eor_sets-eq-singleton-emp
(program $eor_sets-eq-singleton-emp ((@T1 Type) (@T0 Type) (x1 (Set @T0)) (y1 @T1))
  :signature ((Set @T0) @T1 Type Bool) Bool
  (
  ((eo::define ((_v0 (Set @T0))) ($eor_sets-eq-singleton-emp x1 y1 _v0 (_ (= x1) (as set.empty _v0)))) (_ (= (_ (= x1) (set.singleton y1))) false))
  )
)
; program: $eovc_sets-eq-singleton-emp
(program $eovc_sets-eq-singleton-emp ((@T1 Type) (y1 @T1) (@T0 Type) (x1 (Set @T0)))
  :signature (Type (Set @T0) @T1) Bool
  (
  (($eovc_sets-eq-singleton-emp @T0 x1 y1) (eo::define ((_v0 (Set @T0))) (eo::define ((_v1 (_ (= x1) (as set.empty _v0)))) ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat ($eor_sets-eq-singleton-emp x1 y1 _v0 _v1) false false) true true)))))
  )
)
(echo "smt-meta $eovc_sets-eq-singleton-emp")
; program: $eor_sets-member-singleton
(program $eor_sets-member-singleton ((@T0 Type) (@T1 Type) (x1 @T0) (y1 @T1))
  :signature (@T0 @T1) Bool
  (
  (($eor_sets-member-singleton x1 y1) (_ (= (_ (set.member x1) (set.singleton y1))) (_ (= x1) y1)))
  )
)
; program: $eovc_sets-member-singleton
(program $eovc_sets-member-singleton ((@T1 Type) (@T0 Type) (x1 @T0) (y1 @T1))
  :signature (@T1 @T0) Bool
  (
  (($eovc_sets-member-singleton y1 x1) ($eo_requires_eq ($eo_model_sat ($eor_sets-member-singleton x1 y1) false false) true true))
  )
)
(echo "smt-meta $eovc_sets-member-singleton")
; program: $eor_sets-member-emp
(program $eor_sets-member-emp ((@T0 Type) (@T1 Type) (x1 @T0) (y1 (Set @T1)))
  :signature (@T0 (Set @T1) Type Bool) Bool
  (
  ((eo::define ((_v0 (Set @T1))) ($eor_sets-member-emp x1 y1 _v0 (_ (= y1) (as set.empty _v0)))) (_ (= (_ (set.member x1) y1)) false))
  )
)
; program: $eovc_sets-member-emp
(program $eovc_sets-member-emp ((@T0 Type) (x1 @T0) (@T1 Type) (y1 (Set @T1)))
  :signature (Type (Set @T1) @T0) Bool
  (
  (($eovc_sets-member-emp @T1 y1 x1) (eo::define ((_v0 (Set @T1))) (eo::define ((_v1 (_ (= y1) (as set.empty _v0)))) ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat ($eor_sets-member-emp x1 y1 _v0 _v1) false false) true true)))))
  )
)
(echo "smt-meta $eovc_sets-member-emp")
; program: $eor_sets-subset-elim
(program $eor_sets-subset-elim ((@T0 Type) (@T1 Type) (x1 (Set @T0)) (y1 (Set @T1)))
  :signature ((Set @T0) (Set @T1)) Bool
  (
  (($eor_sets-subset-elim x1 y1) (_ (= (_ (set.subset x1) y1)) (_ (= (_ (set.union x1) y1)) y1)))
  )
)
; program: $eovc_sets-subset-elim
(program $eovc_sets-subset-elim ((@T1 Type) (@T0 Type) (x1 (Set @T0)) (y1 (Set @T1)))
  :signature ((Set @T1) (Set @T0)) Bool
  (
  (($eovc_sets-subset-elim y1 x1) ($eo_requires_eq ($eo_model_sat ($eor_sets-subset-elim x1 y1) false false) true true))
  )
)
(echo "smt-meta $eovc_sets-subset-elim")
; program: $eor_sets-union-comm
(program $eor_sets-union-comm ((@T0 Type) (@T1 Type) (y1 (Set @T1)) (x1 (Set @T0)))
  :signature ((Set @T0) (Set @T1)) Bool
  (
  (($eor_sets-union-comm x1 y1) (_ (= (_ (set.union x1) y1)) (_ (set.union y1) x1)))
  )
)
; program: $eovc_sets-union-comm
(program $eovc_sets-union-comm ((@T1 Type) (@T0 Type) (x1 (Set @T0)) (y1 (Set @T1)))
  :signature ((Set @T1) (Set @T0)) Bool
  (
  (($eovc_sets-union-comm y1 x1) ($eo_requires_eq ($eo_model_sat ($eor_sets-union-comm x1 y1) false false) true true))
  )
)
(echo "smt-meta $eovc_sets-union-comm")
; program: $eor_sets-inter-comm
(program $eor_sets-inter-comm ((@T0 Type) (@T1 Type) (y1 (Set @T1)) (x1 (Set @T0)))
  :signature ((Set @T0) (Set @T1)) Bool
  (
  (($eor_sets-inter-comm x1 y1) (_ (= (_ (set.inter x1) y1)) (_ (set.inter y1) x1)))
  )
)
; program: $eovc_sets-inter-comm
(program $eovc_sets-inter-comm ((@T1 Type) (@T0 Type) (x1 (Set @T0)) (y1 (Set @T1)))
  :signature ((Set @T1) (Set @T0)) Bool
  (
  (($eovc_sets-inter-comm y1 x1) ($eo_requires_eq ($eo_model_sat ($eor_sets-inter-comm x1 y1) false false) true true))
  )
)
(echo "smt-meta $eovc_sets-inter-comm")
; program: $eor_sets-inter-emp1
(program $eor_sets-inter-emp1 ((@T1 Type) (@T0 Type) (y1 (Set @T1)) (x1 (Set @T0)))
  :signature ((Set @T0) (Set @T1) Type Bool) Bool
  (
  ((eo::define ((_v0 (Set @T0))) ($eor_sets-inter-emp1 x1 y1 _v0 (_ (= x1) (as set.empty _v0)))) (_ (= (_ (set.inter x1) y1)) x1))
  )
)
; program: $eovc_sets-inter-emp1
(program $eovc_sets-inter-emp1 ((@T1 Type) (y1 (Set @T1)) (@T0 Type) (x1 (Set @T0)))
  :signature (Type (Set @T0) (Set @T1)) Bool
  (
  (($eovc_sets-inter-emp1 @T0 x1 y1) (eo::define ((_v0 (Set @T0))) (eo::define ((_v1 (_ (= x1) (as set.empty _v0)))) ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat ($eor_sets-inter-emp1 x1 y1 _v0 _v1) false false) true true)))))
  )
)
(echo "smt-meta $eovc_sets-inter-emp1")
; program: $eor_sets-inter-emp2
(program $eor_sets-inter-emp2 ((@T0 Type) (@T1 Type) (x1 (Set @T0)) (y1 (Set @T1)))
  :signature ((Set @T0) (Set @T1) Type Bool) Bool
  (
  ((eo::define ((_v0 (Set @T1))) ($eor_sets-inter-emp2 x1 y1 _v0 (_ (= y1) (as set.empty _v0)))) (_ (= (_ (set.inter x1) y1)) y1))
  )
)
; program: $eovc_sets-inter-emp2
(program $eovc_sets-inter-emp2 ((@T0 Type) (x1 (Set @T0)) (@T1 Type) (y1 (Set @T1)))
  :signature (Type (Set @T1) (Set @T0)) Bool
  (
  (($eovc_sets-inter-emp2 @T1 y1 x1) (eo::define ((_v0 (Set @T1))) (eo::define ((_v1 (_ (= y1) (as set.empty _v0)))) ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat ($eor_sets-inter-emp2 x1 y1 _v0 _v1) false false) true true)))))
  )
)
(echo "smt-meta $eovc_sets-inter-emp2")
; program: $eor_sets-minus-emp1
(program $eor_sets-minus-emp1 ((@T1 Type) (@T0 Type) (y1 (Set @T1)) (x1 (Set @T0)))
  :signature ((Set @T0) (Set @T1) Type Bool) Bool
  (
  ((eo::define ((_v0 (Set @T0))) ($eor_sets-minus-emp1 x1 y1 _v0 (_ (= x1) (as set.empty _v0)))) (_ (= (_ (set.minus x1) y1)) x1))
  )
)
; program: $eovc_sets-minus-emp1
(program $eovc_sets-minus-emp1 ((@T1 Type) (y1 (Set @T1)) (@T0 Type) (x1 (Set @T0)))
  :signature (Type (Set @T0) (Set @T1)) Bool
  (
  (($eovc_sets-minus-emp1 @T0 x1 y1) (eo::define ((_v0 (Set @T0))) (eo::define ((_v1 (_ (= x1) (as set.empty _v0)))) ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat ($eor_sets-minus-emp1 x1 y1 _v0 _v1) false false) true true)))))
  )
)
(echo "smt-meta $eovc_sets-minus-emp1")
; program: $eor_sets-minus-emp2
(program $eor_sets-minus-emp2 ((@T0 Type) (@T1 Type) (y1 (Set @T1)) (x1 (Set @T0)))
  :signature ((Set @T0) (Set @T1) Type Bool) Bool
  (
  ((eo::define ((_v0 (Set @T1))) ($eor_sets-minus-emp2 x1 y1 _v0 (_ (= y1) (as set.empty _v0)))) (_ (= (_ (set.minus x1) y1)) x1))
  )
)
; program: $eovc_sets-minus-emp2
(program $eovc_sets-minus-emp2 ((@T0 Type) (x1 (Set @T0)) (@T1 Type) (y1 (Set @T1)))
  :signature (Type (Set @T1) (Set @T0)) Bool
  (
  (($eovc_sets-minus-emp2 @T1 y1 x1) (eo::define ((_v0 (Set @T1))) (eo::define ((_v1 (_ (= y1) (as set.empty _v0)))) ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat ($eor_sets-minus-emp2 x1 y1 _v0 _v1) false false) true true)))))
  )
)
(echo "smt-meta $eovc_sets-minus-emp2")
; program: $eor_sets-union-emp1
(program $eor_sets-union-emp1 ((@T1 Type) (@T0 Type) (x1 (Set @T0)) (y1 (Set @T1)))
  :signature ((Set @T0) (Set @T1) Type Bool) Bool
  (
  ((eo::define ((_v0 (Set @T0))) ($eor_sets-union-emp1 x1 y1 _v0 (_ (= x1) (as set.empty _v0)))) (_ (= (_ (set.union x1) y1)) y1))
  )
)
; program: $eovc_sets-union-emp1
(program $eovc_sets-union-emp1 ((@T1 Type) (y1 (Set @T1)) (@T0 Type) (x1 (Set @T0)))
  :signature (Type (Set @T0) (Set @T1)) Bool
  (
  (($eovc_sets-union-emp1 @T0 x1 y1) (eo::define ((_v0 (Set @T0))) (eo::define ((_v1 (_ (= x1) (as set.empty _v0)))) ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat ($eor_sets-union-emp1 x1 y1 _v0 _v1) false false) true true)))))
  )
)
(echo "smt-meta $eovc_sets-union-emp1")
; program: $eor_sets-union-emp2
(program $eor_sets-union-emp2 ((@T0 Type) (@T1 Type) (y1 (Set @T1)) (x1 (Set @T0)))
  :signature ((Set @T0) (Set @T1) Type Bool) Bool
  (
  ((eo::define ((_v0 (Set @T1))) ($eor_sets-union-emp2 x1 y1 _v0 (_ (= y1) (as set.empty _v0)))) (_ (= (_ (set.union x1) y1)) x1))
  )
)
; program: $eovc_sets-union-emp2
(program $eovc_sets-union-emp2 ((@T0 Type) (x1 (Set @T0)) (@T1 Type) (y1 (Set @T1)))
  :signature (Type (Set @T1) (Set @T0)) Bool
  (
  (($eovc_sets-union-emp2 @T1 y1 x1) (eo::define ((_v0 (Set @T1))) (eo::define ((_v1 (_ (= y1) (as set.empty _v0)))) ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat ($eor_sets-union-emp2 x1 y1 _v0 _v1) false false) true true)))))
  )
)
(echo "smt-meta $eovc_sets-union-emp2")
; program: $eor_sets-inter-member
(program $eor_sets-inter-member ((@T0 Type) (@T1 Type) (@T2 Type) (y1 (Set @T1)) (x1 @T0) (z1 (Set @T2)))
  :signature (@T0 (Set @T1) (Set @T2)) Bool
  (
  (($eor_sets-inter-member x1 y1 z1) (eo::define ((_v0 (set.member x1))) (_ (= (_ _v0 (_ (set.inter y1) z1))) (_ (and (_ _v0 y1)) (_ (and (_ _v0 z1)) true)))))
  )
)
; program: $eovc_sets-inter-member
(program $eovc_sets-inter-member ((@T2 Type) (@T1 Type) (@T0 Type) (x1 @T0) (y1 (Set @T1)) (z1 (Set @T2)))
  :signature ((Set @T2) (Set @T1) @T0) Bool
  (
  (($eovc_sets-inter-member z1 y1 x1) ($eo_requires_eq ($eo_model_sat ($eor_sets-inter-member x1 y1 z1) false false) true true))
  )
)
(echo "smt-meta $eovc_sets-inter-member")
; program: $eor_sets-minus-member
(program $eor_sets-minus-member ((@T0 Type) (@T1 Type) (@T2 Type) (y1 (Set @T1)) (x1 @T0) (z1 (Set @T2)))
  :signature (@T0 (Set @T1) (Set @T2)) Bool
  (
  (($eor_sets-minus-member x1 y1 z1) (eo::define ((_v0 (set.member x1))) (_ (= (_ _v0 (_ (set.minus y1) z1))) (_ (and (_ _v0 y1)) (_ (and (not (_ _v0 z1))) true)))))
  )
)
; program: $eovc_sets-minus-member
(program $eovc_sets-minus-member ((@T2 Type) (@T1 Type) (@T0 Type) (x1 @T0) (y1 (Set @T1)) (z1 (Set @T2)))
  :signature ((Set @T2) (Set @T1) @T0) Bool
  (
  (($eovc_sets-minus-member z1 y1 x1) ($eo_requires_eq ($eo_model_sat ($eor_sets-minus-member x1 y1 z1) false false) true true))
  )
)
(echo "smt-meta $eovc_sets-minus-member")
; program: $eor_sets-union-member
(program $eor_sets-union-member ((@T0 Type) (@T1 Type) (@T2 Type) (y1 (Set @T1)) (x1 @T0) (z1 (Set @T2)))
  :signature (@T0 (Set @T1) (Set @T2)) Bool
  (
  (($eor_sets-union-member x1 y1 z1) (eo::define ((_v0 (set.member x1))) (_ (= (_ _v0 (_ (set.union y1) z1))) (_ (or (_ _v0 y1)) (_ (or (_ _v0 z1)) false)))))
  )
)
; program: $eovc_sets-union-member
(program $eovc_sets-union-member ((@T2 Type) (@T1 Type) (@T0 Type) (x1 @T0) (y1 (Set @T1)) (z1 (Set @T2)))
  :signature ((Set @T2) (Set @T1) @T0) Bool
  (
  (($eovc_sets-union-member z1 y1 x1) ($eo_requires_eq ($eo_model_sat ($eor_sets-union-member x1 y1 z1) false false) true true))
  )
)
(echo "smt-meta $eovc_sets-union-member")
; program: $eor_sets-choose-singleton
(program $eor_sets-choose-singleton ((@T0 Type) (x1 @T0))
  :signature (@T0) Bool
  (
  (($eor_sets-choose-singleton x1) (_ (= (set.choose (set.singleton x1))) x1))
  )
)
; program: $eovc_sets-choose-singleton
(program $eovc_sets-choose-singleton ((@T0 Type) (x1 @T0))
  :signature (@T0) Bool
  (
  (($eovc_sets-choose-singleton x1) ($eo_requires_eq ($eo_model_sat ($eor_sets-choose-singleton x1) false false) true true))
  )
)
(echo "smt-meta $eovc_sets-choose-singleton")
; program: $eor_sets-minus-self
(program $eor_sets-minus-self ((@T0 Type) (x1 (Set @T0)))
  :signature ((Set @T0) Type) Bool
  (
  (($eor_sets-minus-self x1 (Set @T0)) (_ (= (_ (set.minus x1) x1)) (as set.empty (Set @T0))))
  )
)
; program: $eovc_sets-minus-self
(program $eovc_sets-minus-self ((@T0 Type) (x1 (Set @T0)))
  :signature (Type (Set @T0)) Bool
  (
  (($eovc_sets-minus-self @T0 x1) ($eo_requires_eq ($eo_model_sat ($eor_sets-minus-self x1 (Set @T0)) false false) true true))
  )
)
(echo "smt-meta $eovc_sets-minus-self")
; program: $eor_sets-is-empty-elim
(program $eor_sets-is-empty-elim ((@T0 Type) (x1 (Set @T0)))
  :signature ((Set @T0) Type) Bool
  (
  (($eor_sets-is-empty-elim x1 (Set @T0)) (_ (= (set.is_empty x1)) (_ (= x1) (as set.empty (Set @T0)))))
  )
)
; program: $eovc_sets-is-empty-elim
(program $eovc_sets-is-empty-elim ((@T0 Type) (x1 (Set @T0)))
  :signature (Type (Set @T0)) Bool
  (
  (($eovc_sets-is-empty-elim @T0 x1) ($eo_requires_eq ($eo_model_sat ($eor_sets-is-empty-elim x1 (Set @T0)) false false) true true))
  )
)
(echo "smt-meta $eovc_sets-is-empty-elim")
; program: $eor_sets-is-singleton-elim
(program $eor_sets-is-singleton-elim ((@T0 Type) (x1 (Set @T0)))
  :signature ((Set @T0)) Bool
  (
  (($eor_sets-is-singleton-elim x1) (_ (= (set.is_singleton x1)) (_ (= x1) (set.singleton (set.choose x1)))))
  )
)
; program: $eovc_sets-is-singleton-elim
(program $eovc_sets-is-singleton-elim ((@T0 Type) (x1 (Set @T0)))
  :signature ((Set @T0)) Bool
  (
  (($eovc_sets-is-singleton-elim x1) ($eo_requires_eq ($eo_model_sat ($eor_sets-is-singleton-elim x1) false false) true true))
  )
)
(echo "smt-meta $eovc_sets-is-singleton-elim")
; program: $eor_str-eq-ctn-false.fev1
(program $eor_str-eq-ctn-false.fev1 ((@T3 Type) (@T2 Type) (@T1 Type) (@T0 Type) (x3 (Seq @T2)) (x2 (Seq @T1)) (x1 (Seq @T0)) ($eo_1 (Seq @T0)) (y1 (Seq @T3)))
  :signature ((Seq @T3) (Seq @T2) (Seq @T1) (Seq @T0) (Seq @T0)) Bool
  (
  (($eor_str-eq-ctn-false.fev1 y1 x3 x2 x1 $eo_1) (_ (= (_ (= $eo_1) y1)) false))
  )
)
; program: $eor_str-eq-ctn-false
(program $eor_str-eq-ctn-false ((@T0 Type) (@T1 Type) (@T2 Type) (@T3 Type) (y1 (Seq @T3)) (x1 (Seq @T0)) (x2 (Seq @T1)) (x3 (Seq @T2)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) (Seq @T3) Bool) Bool
  (
  (($eor_str-eq-ctn-false x1 x2 x3 y1 (_ (= (_ (str.contains y1) x2)) false)) ($eor_str-eq-ctn-false.fev1 y1 x3 x2 x1 (eo::list_concat str.++ x1 (_ (str.++ x2) x3))))
  )
)
; program: $eovc_str-eq-ctn-false
(program $eovc_str-eq-ctn-false ((@T1 Type) (@T3 Type) (@T2 Type) (@T0 Type) (x1 (Seq @T0)) (x3 (Seq @T2)) (y1 (Seq @T3)) (x2 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T3) (Seq @T2) (Seq @T0)) Bool
  (
  (($eovc_str-eq-ctn-false x2 y1 x3 x1) (eo::define ((_v0 (_ (= (_ (str.contains y1) x2)) false))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-eq-ctn-false x1 x2 x3 y1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_str-eq-ctn-false")
; program: $eor_str-eq-ctn-full-false1
(program $eor_str-eq-ctn-full-false1 ((@T0 Type) (@T1 Type) (x1 (Seq @T0)) (y1 (Seq @T1)))
  :signature ((Seq @T0) (Seq @T1) Bool) Bool
  (
  (($eor_str-eq-ctn-full-false1 x1 y1 (_ (= (_ (str.contains y1) x1)) false)) (_ (= (_ (= x1) y1)) false))
  )
)
; program: $eovc_str-eq-ctn-full-false1
(program $eovc_str-eq-ctn-full-false1 ((@T0 Type) (@T1 Type) (y1 (Seq @T1)) (x1 (Seq @T0)))
  :signature ((Seq @T0) (Seq @T1)) Bool
  (
  (($eovc_str-eq-ctn-full-false1 x1 y1) (eo::define ((_v0 (_ (= (_ (str.contains y1) x1)) false))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-eq-ctn-full-false1 x1 y1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_str-eq-ctn-full-false1")
; program: $eor_str-eq-ctn-full-false2
(program $eor_str-eq-ctn-full-false2 ((@T0 Type) (@T1 Type) (x1 (Seq @T0)) (y1 (Seq @T1)))
  :signature ((Seq @T0) (Seq @T1) Bool) Bool
  (
  (($eor_str-eq-ctn-full-false2 x1 y1 (_ (= (_ (str.contains x1) y1)) false)) (_ (= (_ (= x1) y1)) false))
  )
)
; program: $eovc_str-eq-ctn-full-false2
(program $eovc_str-eq-ctn-full-false2 ((@T1 Type) (@T0 Type) (x1 (Seq @T0)) (y1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-eq-ctn-full-false2 y1 x1) (eo::define ((_v0 (_ (= (_ (str.contains x1) y1)) false))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-eq-ctn-full-false2 x1 y1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_str-eq-ctn-full-false2")
; program: $eor_str-eq-len-false
(program $eor_str-eq-len-false ((x1 (Seq Char)) (y1 (Seq Char)))
  :signature ((Seq Char) (Seq Char) Bool) Bool
  (
  (($eor_str-eq-len-false x1 y1 (_ (= (_ (= (str.len x1)) (str.len y1))) false)) (_ (= (_ (= x1) y1)) false))
  )
)
; program: $eovc_str-eq-len-false
(program $eovc_str-eq-len-false ((x1 (Seq Char)) (y1 (Seq Char)))
  :signature ((Seq Char) (Seq Char)) Bool
  (
  (($eovc_str-eq-len-false y1 x1) (eo::define ((_v0 (_ (= (_ (= (str.len x1)) (str.len y1))) false))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-eq-len-false x1 y1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_str-eq-len-false")
; program: $eor_str-substr-empty-str.fev1
(program $eor_str-substr-empty-str.fev1 ((@T0 Type) ($ex_1 (Seq @T0)) ($eo_2 Bool) (n1 Int) (m1 Int) (x1 (Seq @T0)))
  :signature ((Seq @T0) Int Int Type (Seq @T0) Bool Bool) Bool
  (
  (($eor_str-substr-empty-str.fev1 x1 m1 n1 @T0 $ex_1 $eo_2 $eo_2) (_ (= (_ (_ (str.substr x1) n1) m1)) x1))
  )
)
; program: $eor_str-substr-empty-str
(program $eor_str-substr-empty-str ((@T0 Type) (x1 (Seq @T0)) (m1 Int) (n1 Int) ($ex_1 (Seq @T0)))
  :signature ((Seq @T0) Int Int Type Bool) Bool
  (
  (($eor_str-substr-empty-str x1 n1 m1 (Seq @T0) (_ (= x1) $ex_1)) ($eor_str-substr-empty-str.fev1 x1 m1 n1 @T0 $ex_1 $ex_1 ($seq_empty (Seq @T0))))
  )
)
; program: $eovc_str-substr-empty-str.fev1
(program $eovc_str-substr-empty-str.fev1 ((n1 Int) (m1 Int) (@T0 Type) (x1 (Seq @T0)) ($eo_1 (Seq @T0)))
  :signature (Type (Seq @T0) Int Int (Seq @T0)) Bool
  (
  (($eovc_str-substr-empty-str.fev1 @T0 x1 m1 n1 $eo_1) (eo::define ((_v0 (_ (= x1) $eo_1))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-substr-empty-str x1 n1 m1 (Seq @T0) _v0) false false) true true))))
  )
)
; program: $eovc_str-substr-empty-str
(program $eovc_str-substr-empty-str ((@T0 Type) (x1 (Seq @T0)) (m1 Int) (n1 Int))
  :signature (Type (Seq @T0) Int Int) Bool
  (
  (($eovc_str-substr-empty-str @T0 x1 m1 n1) ($eovc_str-substr-empty-str.fev1 @T0 x1 m1 n1 ($seq_empty (Seq @T0))))
  )
)
(echo "smt-meta $eovc_str-substr-empty-str")
; program: $eor_str-substr-empty-range.fev1
(program $eor_str-substr-empty-range.fev1 ((@T0 Type) (x1 (Seq @T0)) (n1 Int) (m1 Int) ($eo_1 (Seq @T0)))
  :signature (Type Int Int (Seq @T0) (Seq @T0)) Bool
  (
  (($eor_str-substr-empty-range.fev1 @T0 m1 n1 x1 $eo_1) (_ (= (_ (_ (str.substr x1) n1) m1)) $eo_1))
  )
)
; program: $eor_str-substr-empty-range
(program $eor_str-substr-empty-range ((m1 Int) (n1 Int) (@T0 Type) (x1 (Seq @T0)))
  :signature ((Seq @T0) Int Int Type Bool) Bool
  (
  (($eor_str-substr-empty-range x1 n1 m1 (Seq @T0) (_ (= (_ (>= 0) m1)) true)) ($eor_str-substr-empty-range.fev1 @T0 m1 n1 x1 ($seq_empty (Seq @T0))))
  )
)
; program: $eovc_str-substr-empty-range
(program $eovc_str-substr-empty-range ((@T0 Type) (x1 (Seq @T0)) (n1 Int) (m1 Int))
  :signature (Int Type Int (Seq @T0)) Bool
  (
  (($eovc_str-substr-empty-range m1 @T0 n1 x1) (eo::define ((_v0 (_ (= (_ (>= 0) m1)) true))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-substr-empty-range x1 n1 m1 (Seq @T0) _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_str-substr-empty-range")
; program: $eor_str-substr-empty-start.fev1
(program $eor_str-substr-empty-start.fev1 ((@T0 Type) (x1 (Seq @T0)) (n1 Int) (m1 Int) ($eo_1 (Seq @T0)))
  :signature (Type Int Int (Seq @T0) (Seq @T0)) Bool
  (
  (($eor_str-substr-empty-start.fev1 @T0 m1 n1 x1 $eo_1) (_ (= (_ (_ (str.substr x1) n1) m1)) $eo_1))
  )
)
; program: $eor_str-substr-empty-start
(program $eor_str-substr-empty-start ((m1 Int) (n1 Int) (@T0 Type) (x1 (Seq @T0)))
  :signature ((Seq @T0) Int Int Type Bool) Bool
  (
  (($eor_str-substr-empty-start x1 n1 m1 (Seq @T0) (_ (= (_ (>= n1) (str.len x1))) true)) ($eor_str-substr-empty-start.fev1 @T0 m1 n1 x1 ($seq_empty (Seq @T0))))
  )
)
; program: $eovc_str-substr-empty-start
(program $eovc_str-substr-empty-start ((m1 Int) (@T0 Type) (n1 Int) (x1 (Seq @T0)))
  :signature ((Seq @T0) Int Type Int) Bool
  (
  (($eovc_str-substr-empty-start x1 n1 @T0 m1) (eo::define ((_v0 (_ (= (_ (>= n1) (str.len x1))) true))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-substr-empty-start x1 n1 m1 (Seq @T0) _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_str-substr-empty-start")
; program: $eor_str-substr-empty-start-neg.fev1
(program $eor_str-substr-empty-start-neg.fev1 ((@T0 Type) (x1 (Seq @T0)) (n1 Int) (m1 Int) ($eo_1 (Seq @T0)))
  :signature (Type Int Int (Seq @T0) (Seq @T0)) Bool
  (
  (($eor_str-substr-empty-start-neg.fev1 @T0 m1 n1 x1 $eo_1) (_ (= (_ (_ (str.substr x1) n1) m1)) $eo_1))
  )
)
; program: $eor_str-substr-empty-start-neg
(program $eor_str-substr-empty-start-neg ((m1 Int) (n1 Int) (@T0 Type) (x1 (Seq @T0)))
  :signature ((Seq @T0) Int Int Type Bool) Bool
  (
  (($eor_str-substr-empty-start-neg x1 n1 m1 (Seq @T0) (_ (= (_ (< n1) 0)) true)) ($eor_str-substr-empty-start-neg.fev1 @T0 m1 n1 x1 ($seq_empty (Seq @T0))))
  )
)
; program: $eovc_str-substr-empty-start-neg
(program $eovc_str-substr-empty-start-neg ((@T0 Type) (x1 (Seq @T0)) (m1 Int) (n1 Int))
  :signature (Int Type Int (Seq @T0)) Bool
  (
  (($eovc_str-substr-empty-start-neg n1 @T0 m1 x1) (eo::define ((_v0 (_ (= (_ (< n1) 0)) true))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-substr-empty-start-neg x1 n1 m1 (Seq @T0) _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_str-substr-empty-start-neg")
; program: $eor_str-substr-substr-start-geq-len.fev1
(program $eor_str-substr-substr-start-geq-len.fev1 ((@T0 Type) (x1 (Seq @T0)) (n1 Int) (m1 Int) (n2 Int) (m2 Int) ($eo_1 (Seq @T0)))
  :signature (Type Int Int Int Int (Seq @T0) (Seq @T0)) Bool
  (
  (($eor_str-substr-substr-start-geq-len.fev1 @T0 m2 n2 m1 n1 x1 $eo_1) (_ (= (_ (_ (str.substr (_ (_ (str.substr x1) n1) m1)) n2) m2)) $eo_1))
  )
)
; program: $eor_str-substr-substr-start-geq-len
(program $eor_str-substr-substr-start-geq-len ((m2 Int) (n2 Int) (m1 Int) (n1 Int) (@T0 Type) (x1 (Seq @T0)))
  :signature ((Seq @T0) Int Int Int Int Type Bool) Bool
  (
  (($eor_str-substr-substr-start-geq-len x1 n1 m1 n2 m2 (Seq @T0) (_ (= (_ (>= n2) m1)) true)) ($eor_str-substr-substr-start-geq-len.fev1 @T0 m2 n2 m1 n1 x1 ($seq_empty (Seq @T0))))
  )
)
; program: $eovc_str-substr-substr-start-geq-len
(program $eovc_str-substr-substr-start-geq-len ((@T0 Type) (x1 (Seq @T0)) (n1 Int) (m2 Int) (n2 Int) (m1 Int))
  :signature (Int Int Type Int Int (Seq @T0)) Bool
  (
  (($eovc_str-substr-substr-start-geq-len m1 n2 @T0 m2 n1 x1) (eo::define ((_v0 (_ (= (_ (>= n2) m1)) true))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-substr-substr-start-geq-len x1 n1 m1 n2 m2 (Seq @T0) _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_str-substr-substr-start-geq-len")
; program: $eor_str-substr-eq-empty.fev1
(program $eor_str-substr-eq-empty.fev1 ((@T0 Type) (@T1 Type) ($ex_1 (Seq @T1)) ($eo_2 Bool) (n1 Int) (m1 Int) (s1 (Seq @T0)) (r1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T0) Int Int Type (Seq @T1) Bool Bool) Bool
  (
  (($eor_str-substr-eq-empty.fev1 r1 s1 m1 n1 @T1 $ex_1 $eo_2 $eo_2) (_ (= (_ (= (_ (_ (str.substr s1) n1) m1)) r1)) (_ (= s1) r1)))
  )
)
; program: $eor_str-substr-eq-empty
(program $eor_str-substr-eq-empty ((@T0 Type) (@T1 Type) (r1 (Seq @T1)) (s1 (Seq @T0)) (m1 Int) (n1 Int) ($ex_1 (Seq @T1)))
  :signature ((Seq @T0) (Seq @T1) Int Int Type Bool Bool Bool) Bool
  (
  (($eor_str-substr-eq-empty s1 r1 n1 m1 (Seq @T1) (_ (= n1) 0) (_ (= (_ (> m1) n1)) true) (_ (= r1) $ex_1)) ($eor_str-substr-eq-empty.fev1 r1 s1 m1 n1 @T1 $ex_1 $ex_1 ($seq_empty (Seq @T1))))
  )
)
; program: $eovc_str-substr-eq-empty.fev1
(program $eovc_str-substr-eq-empty.fev1 ((@T0 Type) ($eo_3 Bool) ($eo_2 Bool) (s1 (Seq @T0)) (@T1 Type) (m1 Int) (n1 Int) (r1 (Seq @T1)) ($eo_1 (Seq @T1)))
  :signature (Type (Seq @T1) Int Int (Seq @T0) (Seq @T1) Bool Bool) Bool
  (
  (($eovc_str-substr-eq-empty.fev1 @T1 r1 n1 m1 s1 $eo_1 $eo_2 $eo_3) (eo::define ((_v0 (_ (= r1) $eo_1))) ($eo_requires_eq $eo_3 true ($eo_requires_eq $eo_2 true ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-substr-eq-empty s1 r1 n1 m1 (Seq @T1) (_ (= n1) 0) (_ (= (_ (> m1) n1)) true) _v0) false false) true true))))))
  )
)
; program: $eovc_str-substr-eq-empty
(program $eovc_str-substr-eq-empty ((@T0 Type) (@T1 Type) (r1 (Seq @T1)) (s1 (Seq @T0)) (m1 Int) (n1 Int))
  :signature (Type (Seq @T1) Int Int (Seq @T0)) Bool
  (
  (($eovc_str-substr-eq-empty @T1 r1 n1 m1 s1) ($eovc_str-substr-eq-empty.fev1 @T1 r1 n1 m1 s1 ($seq_empty (Seq @T1)) ($eo_model_sat (_ (= (_ (> m1) n1)) true) true false) ($eo_model_sat (_ (= n1) 0) true false)))
  )
)
(echo "smt-meta $eovc_str-substr-eq-empty")
; program: $eor_str-substr-z-eq-empty-leq.fev1
(program $eor_str-substr-z-eq-empty-leq.fev1 ((@T1 Type) (@T0 Type) ($ex_1 (Seq @T0)) ($eo_2 Bool) (s1 (Seq @T0)) (r1 (Seq @T1)) (m1 Int))
  :signature (Int (Seq @T1) (Seq @T0) Type (Seq @T0) Bool Bool) Bool
  (
  (($eor_str-substr-z-eq-empty-leq.fev1 m1 r1 s1 @T0 $ex_1 $eo_2 $eo_2) (_ (= (_ (= (_ (_ (str.substr s1) 0) m1)) r1)) (_ (<= m1) 0)))
  )
)
; program: $eor_str-substr-z-eq-empty-leq
(program $eor_str-substr-z-eq-empty-leq ((@T1 Type) (m1 Int) (r1 (Seq @T1)) (@T0 Type) (s1 (Seq @T0)) ($ex_1 (Seq @T0)))
  :signature ((Seq @T0) (Seq @T1) Int Type Bool Bool) Bool
  (
  (($eor_str-substr-z-eq-empty-leq s1 r1 m1 (Seq @T0) (_ (= (_ (= s1) $ex_1)) false) (_ (= r1) $ex_1)) ($eor_str-substr-z-eq-empty-leq.fev1 m1 r1 s1 @T0 $ex_1 $ex_1 ($seq_empty (Seq @T0))))
  )
)
; program: $eovc_str-substr-z-eq-empty-leq.fev1
(program $eovc_str-substr-z-eq-empty-leq.fev1 ((@T1 Type) (m1 Int) (@T0 Type) (s1 (Seq @T0)) (r1 (Seq @T1)) ($eo_1 (Seq @T0)))
  :signature (Type (Seq @T1) (Seq @T0) Int (Seq @T0)) Bool
  (
  (($eovc_str-substr-z-eq-empty-leq.fev1 @T0 r1 s1 m1 $eo_1) (eo::define ((_v0 (_ (= r1) $eo_1))) (eo::define ((_v1 (_ (= (_ (= s1) $eo_1)) false))) ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-substr-z-eq-empty-leq s1 r1 m1 (Seq @T0) _v1 _v0) false false) true true))))))
  )
)
; program: $eovc_str-substr-z-eq-empty-leq
(program $eovc_str-substr-z-eq-empty-leq ((@T1 Type) (r1 (Seq @T1)) (@T0 Type) (s1 (Seq @T0)) (m1 Int))
  :signature (Type (Seq @T1) (Seq @T0) Int) Bool
  (
  (($eovc_str-substr-z-eq-empty-leq @T0 r1 s1 m1) ($eovc_str-substr-z-eq-empty-leq.fev1 @T0 r1 s1 m1 ($seq_empty (Seq @T0))))
  )
)
(echo "smt-meta $eovc_str-substr-z-eq-empty-leq")
; program: $eor_str-substr-eq-empty-leq-len.fev1
(program $eor_str-substr-eq-empty-leq-len.fev1 ((@T0 Type) (@T1 Type) ($ex_1 (Seq @T1)) ($eo_2 Bool) (m1 Int) (emp1 (Seq @T1)) (s1 (Seq @T0)) (n1 Int))
  :signature (Int (Seq @T0) (Seq @T1) Int Type (Seq @T1) Bool Bool) Bool
  (
  (($eor_str-substr-eq-empty-leq-len.fev1 n1 s1 emp1 m1 @T1 $ex_1 $eo_2 $eo_2) (_ (= (_ (= (_ (_ (str.substr s1) n1) m1)) emp1)) (_ (<= (str.len s1)) n1)))
  )
)
; program: $eor_str-substr-eq-empty-leq-len
(program $eor_str-substr-eq-empty-leq-len ((@T0 Type) (n1 Int) (s1 (Seq @T0)) (@T1 Type) (emp1 (Seq @T1)) (m1 Int) ($ex_1 (Seq @T1)))
  :signature ((Seq @T0) (Seq @T1) Int Int Type Bool Bool Bool) Bool
  (
  (($eor_str-substr-eq-empty-leq-len s1 emp1 n1 m1 (Seq @T1) (_ (= (_ (>= n1) 0)) true) (_ (= (_ (> m1) 0)) true) (_ (= emp1) $ex_1)) ($eor_str-substr-eq-empty-leq-len.fev1 n1 s1 emp1 m1 @T1 $ex_1 $ex_1 ($seq_empty (Seq @T1))))
  )
)
; program: $eovc_str-substr-eq-empty-leq-len.fev1
(program $eovc_str-substr-eq-empty-leq-len.fev1 ((@T0 Type) ($eo_3 Bool) ($eo_2 Bool) (s1 (Seq @T0)) (@T1 Type) (n1 Int) (m1 Int) (emp1 (Seq @T1)) ($eo_1 (Seq @T1)))
  :signature (Type (Seq @T1) Int Int (Seq @T0) (Seq @T1) Bool Bool) Bool
  (
  (($eovc_str-substr-eq-empty-leq-len.fev1 @T1 emp1 m1 n1 s1 $eo_1 $eo_2 $eo_3) (eo::define ((_v0 (_ (= emp1) $eo_1))) ($eo_requires_eq $eo_3 true ($eo_requires_eq $eo_2 true ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-substr-eq-empty-leq-len s1 emp1 n1 m1 (Seq @T1) (_ (= (_ (>= n1) 0)) true) (_ (= (_ (> m1) 0)) true) _v0) false false) true true))))))
  )
)
; program: $eovc_str-substr-eq-empty-leq-len
(program $eovc_str-substr-eq-empty-leq-len ((@T0 Type) (@T1 Type) (emp1 (Seq @T1)) (s1 (Seq @T0)) (m1 Int) (n1 Int))
  :signature (Type (Seq @T1) Int Int (Seq @T0)) Bool
  (
  (($eovc_str-substr-eq-empty-leq-len @T1 emp1 m1 n1 s1) ($eovc_str-substr-eq-empty-leq-len.fev1 @T1 emp1 m1 n1 s1 ($seq_empty (Seq @T1)) ($eo_model_sat (_ (= (_ (> m1) 0)) true) true false) ($eo_model_sat (_ (= (_ (>= n1) 0)) true) true false)))
  )
)
(echo "smt-meta $eovc_str-substr-eq-empty-leq-len")
; program: $eor_str-len-replace-inv
(program $eor_str-len-replace-inv ((@T0 Type) (@T1 Type) (@T2 Type) (s1 (Seq @T1)) (r1 (Seq @T2)) (t1 (Seq @T0)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) Bool) Bool
  (
  (($eor_str-len-replace-inv t1 s1 r1 (_ (= (str.len s1)) (str.len r1))) (_ (= (str.len (_ (_ (str.replace t1) s1) r1))) (str.len t1)))
  )
)
; program: $eovc_str-len-replace-inv
(program $eovc_str-len-replace-inv ((@T2 Type) (@T1 Type) (@T0 Type) (t1 (Seq @T0)) (s1 (Seq @T1)) (r1 (Seq @T2)))
  :signature ((Seq @T2) (Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-len-replace-inv r1 s1 t1) (eo::define ((_v0 (_ (= (str.len s1)) (str.len r1)))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-len-replace-inv t1 s1 r1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_str-len-replace-inv")
; program: $eor_str-len-replace-all-inv
(program $eor_str-len-replace-all-inv ((@T0 Type) (@T1 Type) (@T2 Type) (s1 (Seq @T1)) (r1 (Seq @T2)) (t1 (Seq @T0)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) Bool) Bool
  (
  (($eor_str-len-replace-all-inv t1 s1 r1 (_ (= (str.len s1)) (str.len r1))) (_ (= (str.len (_ (_ (str.replace_all t1) s1) r1))) (str.len t1)))
  )
)
; program: $eovc_str-len-replace-all-inv
(program $eovc_str-len-replace-all-inv ((@T2 Type) (@T1 Type) (@T0 Type) (t1 (Seq @T0)) (s1 (Seq @T1)) (r1 (Seq @T2)))
  :signature ((Seq @T2) (Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-len-replace-all-inv r1 s1 t1) (eo::define ((_v0 (_ (= (str.len s1)) (str.len r1)))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-len-replace-all-inv t1 s1 r1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_str-len-replace-all-inv")
; program: $eor_str-len-update-inv
(program $eor_str-len-update-inv ((@T0 Type) (@T1 Type) (n1 Int) (r1 (Seq @T1)) (t1 (Seq @T0)))
  :signature ((Seq @T0) Int (Seq @T1)) Bool
  (
  (($eor_str-len-update-inv t1 n1 r1) (_ (= (str.len (_ (_ (str.update t1) n1) r1))) (str.len t1)))
  )
)
; program: $eovc_str-len-update-inv
(program $eovc_str-len-update-inv ((@T1 Type) (@T0 Type) (t1 (Seq @T0)) (n1 Int) (r1 (Seq @T1)))
  :signature ((Seq @T1) Int (Seq @T0)) Bool
  (
  (($eovc_str-len-update-inv r1 n1 t1) ($eo_requires_eq ($eo_model_sat ($eor_str-len-update-inv t1 n1 r1) false false) true true))
  )
)
(echo "smt-meta $eovc_str-len-update-inv")
; program: $eor_str-update-in-first-concat
(program $eor_str-update-in-first-concat ((@T0 Type) (@T1 Type) (@T2 Type) (@T3 Type) (@T4 Type) (t1 (Seq @T0)) (n1 Int) (tpre1 (Seq @T3)) (s1 (Seq @T2)) (tpost1 (Seq @T4)) (ts1 (Seq @T1)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) Int (Seq @T3) (Seq @T4) Bool Bool Bool Bool) Bool
  (
  ((eo::define ((_v0 (str.len t1))) (eo::define ((_v1 (_ (+ n1) (_ (+ (str.len s1)) 0)))) (eo::define ((_v2 (str.substr t1))) ($eor_str-update-in-first-concat t1 ts1 s1 n1 tpre1 tpost1 (_ (= (_ (>= n1) 0)) true) (_ (= (_ (< _v1) _v0)) true) (_ (= tpre1) (_ (_ _v2 0) n1)) (_ (= tpost1) (_ (_ _v2 _v1) _v0)))))) (_ (= (_ (_ (str.update (_ (str.++ t1) ts1)) n1) s1)) (_ (str.++ tpre1) (_ (str.++ s1) (_ (str.++ tpost1) ts1)))))
  )
)
; program: $eovc_str-update-in-first-concat
(program $eovc_str-update-in-first-concat ((@T0 Type) (@T2 Type) (@T4 Type) (@T3 Type) (@T1 Type) (ts1 (Seq @T1)) (tpre1 (Seq @T3)) (tpost1 (Seq @T4)) (n1 Int) (s1 (Seq @T2)) (t1 (Seq @T0)))
  :signature ((Seq @T0) (Seq @T2) Int (Seq @T4) (Seq @T3) (Seq @T1)) Bool
  (
  (($eovc_str-update-in-first-concat t1 s1 n1 tpost1 tpre1 ts1) (eo::define ((_v0 (str.len t1))) (eo::define ((_v1 (_ (+ n1) (_ (+ (str.len s1)) 0)))) (eo::define ((_v2 (str.substr t1))) (eo::define ((_v3 (_ (= tpost1) (_ (_ _v2 _v1) _v0)))) (eo::define ((_v4 (_ (= tpre1) (_ (_ _v2 0) n1)))) (eo::define ((_v5 (_ (= (_ (< _v1) _v0)) true))) (eo::define ((_v6 (_ (= (_ (>= n1) 0)) true))) ($eo_requires_eq ($eo_model_sat _v6 true false) true ($eo_requires_eq ($eo_model_sat _v5 true false) true ($eo_requires_eq ($eo_model_sat _v4 true false) true ($eo_requires_eq ($eo_model_sat _v3 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-update-in-first-concat t1 ts1 s1 n1 tpre1 tpost1 _v6 _v5 _v4 _v3) false false) true true)))))))))))))
  )
)
(echo "smt-meta $eovc_str-update-in-first-concat")
; program: $eor_str-len-substr-in-range
(program $eor_str-len-substr-in-range ((@T0 Type) (s1 (Seq @T0)) (n1 Int) (m1 Int))
  :signature ((Seq @T0) Int Int Bool Bool Bool) Bool
  (
  (($eor_str-len-substr-in-range s1 n1 m1 (_ (= (_ (>= n1) 0)) true) (_ (= (_ (>= m1) 0)) true) (_ (= (_ (>= (str.len s1)) (_ (+ n1) (_ (+ m1) 0)))) true)) (_ (= (str.len (_ (_ (str.substr s1) n1) m1))) m1))
  )
)
; program: $eovc_str-len-substr-in-range
(program $eovc_str-len-substr-in-range ((@T0 Type) (s1 (Seq @T0)) (n1 Int) (m1 Int))
  :signature (Int Int (Seq @T0)) Bool
  (
  (($eovc_str-len-substr-in-range m1 n1 s1) (eo::define ((_v0 (_ (= (_ (>= (str.len s1)) (_ (+ n1) (_ (+ m1) 0)))) true))) (eo::define ((_v1 (_ (= (_ (>= m1) 0)) true))) (eo::define ((_v2 (_ (= (_ (>= n1) 0)) true))) ($eo_requires_eq ($eo_model_sat _v2 true false) true ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-len-substr-in-range s1 n1 m1 _v2 _v1 _v0) false false) true true))))))))
  )
)
(echo "smt-meta $eovc_str-len-substr-in-range")
; program: $eor_str-concat-clash
(program $eor_str-concat-clash ((@T0 Type) (@T1 Type) (@T2 Type) (@T3 Type) (s1 (Seq @T0)) (s2 (Seq @T1)) (t1 (Seq @T2)) (t2 (Seq @T3)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) (Seq @T3) Bool Bool) Bool
  (
  (($eor_str-concat-clash s1 s2 t1 t2 (_ (= (_ (= s1) t1)) false) (_ (= (str.len s1)) (str.len t1))) (_ (= (_ (= (_ (str.++ s1) s2)) (_ (str.++ t1) t2))) false))
  )
)
; program: $eovc_str-concat-clash
(program $eovc_str-concat-clash ((@T2 Type) (@T0 Type) (@T3 Type) (@T1 Type) (s2 (Seq @T1)) (t2 (Seq @T3)) (s1 (Seq @T0)) (t1 (Seq @T2)))
  :signature ((Seq @T2) (Seq @T0) (Seq @T3) (Seq @T1)) Bool
  (
  (($eovc_str-concat-clash t1 s1 t2 s2) (eo::define ((_v0 (_ (= (str.len s1)) (str.len t1)))) (eo::define ((_v1 (_ (= (_ (= s1) t1)) false))) ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-concat-clash s1 s2 t1 t2 _v1 _v0) false false) true true))))))
  )
)
(echo "smt-meta $eovc_str-concat-clash")
; program: $eor_str-concat-clash-rev.fev2
(program $eor_str-concat-clash-rev.fev2 (($eoT.fev1 Type) (@T2 Type) (@T3 Type) ($eoT.fev3 Type) (@T0 Type) (@T1 Type) ($eoT.fev6 Type) ($eoT.fev8 Type) ($eo_2 $eoT.fev1) (t1 (Seq @T2)) (t2 (Seq @T3)) ($eo_4 $eoT.fev3) (s1 (Seq @T0)) (s2 (Seq @T1)) ($eo_9 $eoT.fev8) ($eo_7 $eoT.fev6))
  :signature ($eoT.fev1 (Seq @T2) (Seq @T3) $eoT.fev3 (Seq @T0) (Seq @T1) $eoT.fev6 $eoT.fev8) Bool
  (
  (($eor_str-concat-clash-rev.fev2 $eo_2 t1 t2 $eo_4 s1 s2 $eo_7 $eo_9) (_ (= (_ (= $eo_9) $eo_7)) false))
  )
)
; program: $eor_str-concat-clash-rev.fev1
(program $eor_str-concat-clash-rev.fev1 ((@T3 Type) (@T2 Type) (@T1 Type) (@T0 Type) ($eoT.fev1 Type) ($eoT.fev3 Type) ($eoT.fev5 Type) (t2 (Seq @T3)) (t1 (Seq @T2)) ($eo_2 $eoT.fev1) (s2 (Seq @T1)) (s1 (Seq @T0)) ($eo_4 $eoT.fev3))
  :signature ((Seq @T3) (Seq @T2) (Seq @T1) (Seq @T0) $eoT.fev1 $eoT.fev3) $eoT.fev5
  (
  (($eor_str-concat-clash-rev.fev1 t2 t1 s2 s1 $eo_2 $eo_4) ($eor_str-concat-clash-rev.fev2 $eo_2 t1 t2 $eo_4 s1 s2 (eo::list_concat str.++ t2 (_ (str.++ t1) $eo_2)) (eo::list_concat str.++ s2 (_ (str.++ s1) $eo_4))))
  )
)
; program: $eor_str-concat-clash-rev
(program $eor_str-concat-clash-rev ((@T0 Type) (@T1 Type) (@T2 Type) (@T3 Type) (t1 (Seq @T2)) (s1 (Seq @T0)) (t2 (Seq @T3)) (s2 (Seq @T1)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) (Seq @T3) Bool Bool) Bool
  (
  (($eor_str-concat-clash-rev s1 s2 t1 t2 (_ (= (_ (= s1) t1)) false) (_ (= (str.len s1)) (str.len t1))) ($eor_str-concat-clash-rev.fev1 t2 t1 s2 s1 (eo::nil str.++ (eo::typeof t2)) (eo::nil str.++ (eo::typeof s2))))
  )
)
; program: $eovc_str-concat-clash-rev
(program $eovc_str-concat-clash-rev ((@T2 Type) (@T0 Type) (@T3 Type) (@T1 Type) (s2 (Seq @T1)) (t2 (Seq @T3)) (s1 (Seq @T0)) (t1 (Seq @T2)))
  :signature ((Seq @T2) (Seq @T0) (Seq @T3) (Seq @T1)) Bool
  (
  (($eovc_str-concat-clash-rev t1 s1 t2 s2) (eo::define ((_v0 (_ (= (str.len s1)) (str.len t1)))) (eo::define ((_v1 (_ (= (_ (= s1) t1)) false))) ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-concat-clash-rev s1 s2 t1 t2 _v1 _v0) false false) true true))))))
  )
)
(echo "smt-meta $eovc_str-concat-clash-rev")
; program: $eor_str-concat-clash2
(program $eor_str-concat-clash2 ((@T0 Type) (@T1 Type) (@T2 Type) (s1 (Seq @T0)) (t1 (Seq @T1)) (t2 (Seq @T2)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) Bool Bool) Bool
  (
  (($eor_str-concat-clash2 s1 t1 t2 (_ (= (_ (= s1) t1)) false) (_ (= (str.len s1)) (str.len t1))) (_ (= (_ (= s1) (_ (str.++ t1) t2))) false))
  )
)
; program: $eovc_str-concat-clash2
(program $eovc_str-concat-clash2 ((@T1 Type) (@T0 Type) (@T2 Type) (t2 (Seq @T2)) (s1 (Seq @T0)) (t1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T0) (Seq @T2)) Bool
  (
  (($eovc_str-concat-clash2 t1 s1 t2) (eo::define ((_v0 (_ (= (str.len s1)) (str.len t1)))) (eo::define ((_v1 (_ (= (_ (= s1) t1)) false))) ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-concat-clash2 s1 t1 t2 _v1 _v0) false false) true true))))))
  )
)
(echo "smt-meta $eovc_str-concat-clash2")
; program: $eor_str-concat-clash2-rev.fev2
(program $eor_str-concat-clash2-rev.fev2 (($eoT.fev1 Type) (@T1 Type) (@T2 Type) (@T0 Type) ($eoT.fev4 Type) ($eoT.fev6 Type) ($eo_2 $eoT.fev1) (t1 (Seq @T1)) (t2 (Seq @T2)) (s1 (Seq @T0)) ($eo_5 $eoT.fev4))
  :signature ($eoT.fev1 (Seq @T1) (Seq @T2) (Seq @T0) $eoT.fev4) $eoT.fev6
  (
  (($eor_str-concat-clash2-rev.fev2 $eo_2 t1 t2 s1 $eo_5) (_ (= (_ (= s1) $eo_5)) false))
  )
)
; program: $eor_str-concat-clash2-rev.fev1
(program $eor_str-concat-clash2-rev.fev1 ((@T2 Type) (@T1 Type) (@T0 Type) ($eoT.fev1 Type) ($eoT.fev3 Type) (s1 (Seq @T0)) (t2 (Seq @T2)) (t1 (Seq @T1)) ($eo_2 $eoT.fev1))
  :signature ((Seq @T2) (Seq @T1) (Seq @T0) $eoT.fev1) $eoT.fev3
  (
  (($eor_str-concat-clash2-rev.fev1 t2 t1 s1 $eo_2) ($eor_str-concat-clash2-rev.fev2 $eo_2 t1 t2 s1 (eo::list_concat str.++ t2 (_ (str.++ t1) $eo_2))))
  )
)
; program: $eor_str-concat-clash2-rev
(program $eor_str-concat-clash2-rev ((@T0 Type) (@T1 Type) (@T2 Type) (t1 (Seq @T1)) (s1 (Seq @T0)) (t2 (Seq @T2)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) Bool Bool) Bool
  (
  (($eor_str-concat-clash2-rev s1 t1 t2 (_ (= (_ (= s1) t1)) false) (_ (= (str.len s1)) (str.len t1))) ($eor_str-concat-clash2-rev.fev1 t2 t1 s1 (eo::nil str.++ (eo::typeof t2))))
  )
)
; program: $eovc_str-concat-clash2-rev
(program $eovc_str-concat-clash2-rev ((@T1 Type) (@T0 Type) (@T2 Type) (t2 (Seq @T2)) (s1 (Seq @T0)) (t1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T0) (Seq @T2)) Bool
  (
  (($eovc_str-concat-clash2-rev t1 s1 t2) (eo::define ((_v0 (_ (= (str.len s1)) (str.len t1)))) (eo::define ((_v1 (_ (= (_ (= s1) t1)) false))) ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-concat-clash2-rev s1 t1 t2 _v1 _v0) false false) true true))))))
  )
)
(echo "smt-meta $eovc_str-concat-clash2-rev")
; program: $eor_str-concat-unify.fev1
(program $eor_str-concat-unify.fev1 ((@T3 Type) (@T1 Type) (@T0 Type) (@T4 Type) (@T2 Type) (s2 (Seq @T1)) (s3 (Seq @T2)) (s1 (Seq @T0)) (t1 (Seq @T3)) (t2 (Seq @T4)) ($eo_2 (Seq @T2)) ($eo_1 (Seq @T4)))
  :signature ((Seq @T4) (Seq @T3) (Seq @T2) (Seq @T1) (Seq @T0) (Seq @T4) (Seq @T2)) Bool
  (
  (($eor_str-concat-unify.fev1 t2 t1 s3 s2 s1 $eo_1 $eo_2) (eo::define ((_v0 (str.++ s1))) (_ (= (_ (= (_ _v0 (_ (str.++ s2) s3))) (_ _v0 (_ (str.++ t1) t2)))) (_ (= $eo_2) $eo_1))))
  )
)
; program: $eor_str-concat-unify
(program $eor_str-concat-unify ((@T0 Type) (@T1 Type) (@T2 Type) (@T3 Type) (@T4 Type) (s1 (Seq @T0)) (t1 (Seq @T3)) (t2 (Seq @T4)) (s2 (Seq @T1)) (s3 (Seq @T2)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) (Seq @T3) (Seq @T4)) Bool
  (
  (($eor_str-concat-unify s1 s2 s3 t1 t2) ($eor_str-concat-unify.fev1 t2 t1 s3 s2 s1 ($singleton_elim (_ (str.++ t1) t2)) ($singleton_elim (_ (str.++ s2) s3))))
  )
)
; program: $eovc_str-concat-unify
(program $eovc_str-concat-unify ((@T4 Type) (@T3 Type) (@T2 Type) (@T1 Type) (@T0 Type) (s1 (Seq @T0)) (s2 (Seq @T1)) (s3 (Seq @T2)) (t1 (Seq @T3)) (t2 (Seq @T4)))
  :signature ((Seq @T4) (Seq @T3) (Seq @T2) (Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-concat-unify t2 t1 s3 s2 s1) ($eo_requires_eq ($eo_model_sat ($eor_str-concat-unify s1 s2 s3 t1 t2) false false) true true))
  )
)
(echo "smt-meta $eovc_str-concat-unify")
; program: $eor_str-concat-unify-rev.fev2
(program $eor_str-concat-unify-rev.fev2 (($eoT.fev3 Type) (@T0 Type) (@T4 Type) (@T3 Type) ($eoT.fev5 Type) (@T2 Type) (@T1 Type) ($eoT.fev8 Type) ($eoT.fev10 Type) ($eoT.fev12 Type) ($eo_4 $eoT.fev3) (s1 (Seq @T0)) (t2 (Seq @T4)) ($eo_6 $eoT.fev5) (s3 (Seq @T2)) (s2 (Seq @T1)) ($eo_11 $eoT.fev10) (t1 (Seq @T3)) ($eo_9 $eoT.fev8) ($eo_2 (Seq @T2)) ($eo_1 (Seq @T4)))
  :signature ((Seq @T4) (Seq @T2) $eoT.fev3 (Seq @T0) (Seq @T4) (Seq @T3) $eoT.fev5 (Seq @T2) (Seq @T1) $eoT.fev8 $eoT.fev10) $eoT.fev12
  (
  (($eor_str-concat-unify-rev.fev2 $eo_1 $eo_2 $eo_4 s1 t2 t1 $eo_6 s3 s2 $eo_9 $eo_11) (_ (= (_ (= (_ (str.++ s2) $eo_11)) (_ (str.++ t1) $eo_9))) (_ (= $eo_2) $eo_1)))
  )
)
; program: $eor_str-concat-unify-rev.fev1
(program $eor_str-concat-unify-rev.fev1 ((@T3 Type) (@T1 Type) (@T0 Type) (@T4 Type) (@T2 Type) ($eoT.fev3 Type) ($eoT.fev5 Type) ($eoT.fev7 Type) ($eo_1 (Seq @T4)) ($eo_2 (Seq @T2)) (t1 (Seq @T3)) (s2 (Seq @T1)) (t2 (Seq @T4)) ($eo_4 $eoT.fev3) (s3 (Seq @T2)) (s1 (Seq @T0)) ($eo_6 $eoT.fev5))
  :signature ((Seq @T4) (Seq @T3) (Seq @T2) (Seq @T1) (Seq @T0) (Seq @T4) (Seq @T2) $eoT.fev3 $eoT.fev5) $eoT.fev7
  (
  (($eor_str-concat-unify-rev.fev1 t2 t1 s3 s2 s1 $eo_1 $eo_2 $eo_4 $eo_6) (eo::define ((_v0 (str.++ s1))) ($eor_str-concat-unify-rev.fev2 $eo_1 $eo_2 $eo_4 s1 t2 t1 $eo_6 s3 s2 (eo::list_concat str.++ t2 (_ _v0 $eo_4)) (eo::list_concat str.++ s3 (_ _v0 $eo_6)))))
  )
)
; program: $eor_str-concat-unify-rev
(program $eor_str-concat-unify-rev ((@T0 Type) (@T1 Type) (@T2 Type) (@T3 Type) (@T4 Type) (s1 (Seq @T0)) (t2 (Seq @T4)) (s3 (Seq @T2)) (t1 (Seq @T3)) (s2 (Seq @T1)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) (Seq @T3) (Seq @T4)) Bool
  (
  (($eor_str-concat-unify-rev s1 s2 s3 t1 t2) ($eor_str-concat-unify-rev.fev1 t2 t1 s3 s2 s1 ($singleton_elim (_ (str.++ t1) t2)) ($singleton_elim (_ (str.++ s2) s3)) (eo::nil str.++ (eo::typeof t1)) (eo::nil str.++ (eo::typeof s2))))
  )
)
; program: $eovc_str-concat-unify-rev
(program $eovc_str-concat-unify-rev ((@T4 Type) (@T3 Type) (@T2 Type) (@T1 Type) (@T0 Type) (s1 (Seq @T0)) (s2 (Seq @T1)) (s3 (Seq @T2)) (t1 (Seq @T3)) (t2 (Seq @T4)))
  :signature ((Seq @T4) (Seq @T3) (Seq @T2) (Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-concat-unify-rev t2 t1 s3 s2 s1) ($eo_requires_eq ($eo_model_sat ($eor_str-concat-unify-rev s1 s2 s3 t1 t2) false false) true true))
  )
)
(echo "smt-meta $eovc_str-concat-unify-rev")
; program: $eor_str-concat-unify-base.fev1
(program $eor_str-concat-unify-base.fev1 ((@T1 Type) (@T2 Type) (@T0 Type) (s1 (Seq @T0)) (t1 (Seq @T1)) (t2 (Seq @T2)) ($eo_2 (Seq @T0)) ($eo_1 (Seq @T2)))
  :signature ((Seq @T2) (Seq @T1) Type (Seq @T0) (Seq @T2) (Seq @T0)) Bool
  (
  (($eor_str-concat-unify-base.fev1 t2 t1 @T0 s1 $eo_1 $eo_2) (_ (= (_ (= s1) (_ (str.++ s1) (_ (str.++ t1) t2)))) (_ (= $eo_2) $eo_1)))
  )
)
; program: $eor_str-concat-unify-base
(program $eor_str-concat-unify-base ((@T1 Type) (@T2 Type) (@T0 Type) (s1 (Seq @T0)) (t1 (Seq @T1)) (t2 (Seq @T2)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) Type) Bool
  (
  (($eor_str-concat-unify-base s1 t1 t2 (Seq @T0)) ($eor_str-concat-unify-base.fev1 t2 t1 @T0 s1 ($singleton_elim (_ (str.++ t1) t2)) ($seq_empty (Seq @T0))))
  )
)
; program: $eovc_str-concat-unify-base
(program $eovc_str-concat-unify-base ((@T2 Type) (@T1 Type) (@T0 Type) (s1 (Seq @T0)) (t1 (Seq @T1)) (t2 (Seq @T2)))
  :signature (Type (Seq @T2) (Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-concat-unify-base @T0 t2 t1 s1) ($eo_requires_eq ($eo_model_sat ($eor_str-concat-unify-base s1 t1 t2 (Seq @T0)) false false) true true))
  )
)
(echo "smt-meta $eovc_str-concat-unify-base")
; program: $eor_str-concat-unify-base-rev.fev2
(program $eor_str-concat-unify-base-rev.fev2 (($eoT.fev3 Type) (@T0 Type) (@T2 Type) (@T1 Type) ($eoT.fev6 Type) ($eoT.fev8 Type) ($eo_4 $eoT.fev3) (t2 (Seq @T2)) (s1 (Seq @T0)) (t1 (Seq @T1)) ($eo_7 $eoT.fev6) ($eo_2 (Seq @T0)) ($eo_1 (Seq @T2)))
  :signature ((Seq @T2) (Seq @T0) $eoT.fev3 (Seq @T0) (Seq @T2) (Seq @T1) $eoT.fev6) $eoT.fev8
  (
  (($eor_str-concat-unify-base-rev.fev2 $eo_1 $eo_2 $eo_4 s1 t2 t1 $eo_7) (_ (= (_ (= s1) (_ (str.++ t1) $eo_7))) (_ (= $eo_2) $eo_1)))
  )
)
; program: $eor_str-concat-unify-base-rev.fev1
(program $eor_str-concat-unify-base-rev.fev1 ((@T1 Type) (@T2 Type) ($eoT.fev3 Type) ($eoT.fev5 Type) (@T0 Type) ($eo_1 (Seq @T2)) ($eo_2 (Seq @T0)) (t1 (Seq @T1)) (t2 (Seq @T2)) (s1 (Seq @T0)) ($eo_4 $eoT.fev3))
  :signature ((Seq @T2) (Seq @T1) Type (Seq @T0) (Seq @T2) (Seq @T0) $eoT.fev3) $eoT.fev5
  (
  (($eor_str-concat-unify-base-rev.fev1 t2 t1 @T0 s1 $eo_1 $eo_2 $eo_4) ($eor_str-concat-unify-base-rev.fev2 $eo_1 $eo_2 $eo_4 s1 t2 t1 (eo::list_concat str.++ t2 (_ (str.++ s1) $eo_4))))
  )
)
; program: $eor_str-concat-unify-base-rev
(program $eor_str-concat-unify-base-rev ((@T1 Type) (@T2 Type) (@T0 Type) (s1 (Seq @T0)) (t2 (Seq @T2)) (t1 (Seq @T1)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) Type) Bool
  (
  (($eor_str-concat-unify-base-rev s1 t1 t2 (Seq @T0)) ($eor_str-concat-unify-base-rev.fev1 t2 t1 @T0 s1 ($singleton_elim (_ (str.++ t1) t2)) ($seq_empty (Seq @T0)) (eo::nil str.++ (eo::typeof t1))))
  )
)
; program: $eovc_str-concat-unify-base-rev
(program $eovc_str-concat-unify-base-rev ((@T2 Type) (@T1 Type) (@T0 Type) (s1 (Seq @T0)) (t1 (Seq @T1)) (t2 (Seq @T2)))
  :signature (Type (Seq @T2) (Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-concat-unify-base-rev @T0 t2 t1 s1) ($eo_requires_eq ($eo_model_sat ($eor_str-concat-unify-base-rev s1 t1 t2 (Seq @T0)) false false) true true))
  )
)
(echo "smt-meta $eovc_str-concat-unify-base-rev")
; program: $eor_str-prefixof-elim
(program $eor_str-prefixof-elim ((@T0 Type) (@T1 Type) (t1 (Seq @T1)) (s1 (Seq @T0)))
  :signature ((Seq @T0) (Seq @T1)) Bool
  (
  (($eor_str-prefixof-elim s1 t1) (_ (= (_ (str.prefixof s1) t1)) (_ (= s1) (_ (_ (str.substr t1) 0) (str.len s1)))))
  )
)
; program: $eovc_str-prefixof-elim
(program $eovc_str-prefixof-elim ((@T1 Type) (@T0 Type) (s1 (Seq @T0)) (t1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-prefixof-elim t1 s1) ($eo_requires_eq ($eo_model_sat ($eor_str-prefixof-elim s1 t1) false false) true true))
  )
)
(echo "smt-meta $eovc_str-prefixof-elim")
; program: $eor_str-suffixof-elim
(program $eor_str-suffixof-elim ((@T0 Type) (@T1 Type) (t1 (Seq @T1)) (s1 (Seq @T0)))
  :signature ((Seq @T0) (Seq @T1)) Bool
  (
  (($eor_str-suffixof-elim s1 t1) (eo::define ((_v0 (str.len s1))) (_ (= (_ (str.suffixof s1) t1)) (_ (= s1) (_ (_ (str.substr t1) (_ (- (str.len t1)) _v0)) _v0)))))
  )
)
; program: $eovc_str-suffixof-elim
(program $eovc_str-suffixof-elim ((@T1 Type) (@T0 Type) (s1 (Seq @T0)) (t1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-suffixof-elim t1 s1) ($eo_requires_eq ($eo_model_sat ($eor_str-suffixof-elim s1 t1) false false) true true))
  )
)
(echo "smt-meta $eovc_str-suffixof-elim")
; program: $eor_str-prefixof-eq
(program $eor_str-prefixof-eq ((@T0 Type) (@T1 Type) (s1 (Seq @T0)) (t1 (Seq @T1)))
  :signature ((Seq @T0) (Seq @T1) Bool) Bool
  (
  (($eor_str-prefixof-eq s1 t1 (_ (= (_ (>= (str.len s1)) (str.len t1))) true)) (_ (= (_ (str.prefixof s1) t1)) (_ (= s1) t1)))
  )
)
; program: $eovc_str-prefixof-eq
(program $eovc_str-prefixof-eq ((@T1 Type) (@T0 Type) (s1 (Seq @T0)) (t1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-prefixof-eq t1 s1) (eo::define ((_v0 (_ (= (_ (>= (str.len s1)) (str.len t1))) true))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-prefixof-eq s1 t1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_str-prefixof-eq")
; program: $eor_str-suffixof-eq
(program $eor_str-suffixof-eq ((@T0 Type) (@T1 Type) (s1 (Seq @T0)) (t1 (Seq @T1)))
  :signature ((Seq @T0) (Seq @T1) Bool) Bool
  (
  (($eor_str-suffixof-eq s1 t1 (_ (= (_ (>= (str.len s1)) (str.len t1))) true)) (_ (= (_ (str.suffixof s1) t1)) (_ (= s1) t1)))
  )
)
; program: $eovc_str-suffixof-eq
(program $eovc_str-suffixof-eq ((@T1 Type) (@T0 Type) (s1 (Seq @T0)) (t1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-suffixof-eq t1 s1) (eo::define ((_v0 (_ (= (_ (>= (str.len s1)) (str.len t1))) true))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-suffixof-eq s1 t1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_str-suffixof-eq")
; program: $eor_str-prefixof-one
(program $eor_str-prefixof-one ((@T0 Type) (@T1 Type) (t1 (Seq @T1)) (s1 (Seq @T0)))
  :signature ((Seq @T0) (Seq @T1) Bool) Bool
  (
  (($eor_str-prefixof-one s1 t1 (_ (= (str.len t1)) 1)) (_ (= (_ (str.prefixof s1) t1)) (_ (str.contains t1) s1)))
  )
)
; program: $eovc_str-prefixof-one
(program $eovc_str-prefixof-one ((@T1 Type) (@T0 Type) (s1 (Seq @T0)) (t1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-prefixof-one t1 s1) (eo::define ((_v0 (_ (= (str.len t1)) 1))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-prefixof-one s1 t1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_str-prefixof-one")
; program: $eor_str-suffixof-one
(program $eor_str-suffixof-one ((@T0 Type) (@T1 Type) (t1 (Seq @T1)) (s1 (Seq @T0)))
  :signature ((Seq @T0) (Seq @T1) Bool) Bool
  (
  (($eor_str-suffixof-one s1 t1 (_ (= (str.len t1)) 1)) (_ (= (_ (str.suffixof s1) t1)) (_ (str.contains t1) s1)))
  )
)
; program: $eovc_str-suffixof-one
(program $eovc_str-suffixof-one ((@T1 Type) (@T0 Type) (s1 (Seq @T0)) (t1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-suffixof-one t1 s1) (eo::define ((_v0 (_ (= (str.len t1)) 1))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-suffixof-one s1 t1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_str-suffixof-one")
; program: $eor_str-substr-combine1
(program $eor_str-substr-combine1 ((@T0 Type) (m2 Int) (s1 (Seq @T0)) (n1 Int) (m1 Int) (n2 Int))
  :signature ((Seq @T0) Int Int Int Int Bool Bool Bool) Bool
  (
  (($eor_str-substr-combine1 s1 n1 m1 n2 m2 (_ (= (_ (>= n1) 0)) true) (_ (= (_ (>= n2) 0)) true) (_ (= (_ (>= (_ (- m2) (_ (- m1) n2))) 0)) true)) (eo::define ((_v0 (str.substr s1))) (_ (= (_ (_ (str.substr (_ (_ _v0 n1) m1)) n2) m2)) (_ (_ _v0 (_ (+ n1) (_ (+ n2) 0))) (_ (- m1) n2)))))
  )
)
; program: $eovc_str-substr-combine1
(program $eovc_str-substr-combine1 ((@T0 Type) (s1 (Seq @T0)) (n1 Int) (m2 Int) (m1 Int) (n2 Int))
  :signature (Int Int Int Int (Seq @T0)) Bool
  (
  (($eovc_str-substr-combine1 n2 m1 m2 n1 s1) (eo::define ((_v0 (_ (= (_ (>= (_ (- m2) (_ (- m1) n2))) 0)) true))) (eo::define ((_v1 (_ (= (_ (>= n2) 0)) true))) (eo::define ((_v2 (_ (= (_ (>= n1) 0)) true))) ($eo_requires_eq ($eo_model_sat _v2 true false) true ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-substr-combine1 s1 n1 m1 n2 m2 _v2 _v1 _v0) false false) true true))))))))
  )
)
(echo "smt-meta $eovc_str-substr-combine1")
; program: $eor_str-substr-combine2
(program $eor_str-substr-combine2 ((@T0 Type) (m1 Int) (s1 (Seq @T0)) (n1 Int) (n2 Int) (m2 Int))
  :signature ((Seq @T0) Int Int Int Int Bool Bool Bool) Bool
  (
  (($eor_str-substr-combine2 s1 n1 m1 n2 m2 (_ (= (_ (>= n1) 0)) true) (_ (= (_ (>= n2) 0)) true) (_ (= (_ (>= (_ (- (_ (- m1) n2)) m2)) 0)) true)) (eo::define ((_v0 (str.substr s1))) (_ (= (_ (_ (str.substr (_ (_ _v0 n1) m1)) n2) m2)) (_ (_ _v0 (_ (+ n1) (_ (+ n2) 0))) m2))))
  )
)
; program: $eovc_str-substr-combine2
(program $eovc_str-substr-combine2 ((@T0 Type) (s1 (Seq @T0)) (n1 Int) (m1 Int) (n2 Int) (m2 Int))
  :signature (Int Int Int Int (Seq @T0)) Bool
  (
  (($eovc_str-substr-combine2 m2 n2 m1 n1 s1) (eo::define ((_v0 (_ (= (_ (>= (_ (- (_ (- m1) n2)) m2)) 0)) true))) (eo::define ((_v1 (_ (= (_ (>= n2) 0)) true))) (eo::define ((_v2 (_ (= (_ (>= n1) 0)) true))) ($eo_requires_eq ($eo_model_sat _v2 true false) true ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-substr-combine2 s1 n1 m1 n2 m2 _v2 _v1 _v0) false false) true true))))))))
  )
)
(echo "smt-meta $eovc_str-substr-combine2")
; program: $eor_str-substr-combine3
(program $eor_str-substr-combine3 ((@T0 Type) (m1 Int) (s1 (Seq @T0)) (n1 Int) (n2 Int) (m2 Int))
  :signature ((Seq @T0) Int Int Int Int Bool Bool Bool) Bool
  (
  (($eor_str-substr-combine3 s1 n1 m1 n2 m2 (_ (= (_ (>= n1) 0)) true) (_ (= (_ (>= n2) 0)) true) (_ (= (_ (>= (str.len (_ (_ (str.substr s1) n1) m1))) (_ (+ n2) (_ (+ m2) 0)))) true)) (eo::define ((_v0 (str.substr s1))) (_ (= (_ (_ (str.substr (_ (_ _v0 n1) m1)) n2) m2)) (_ (_ _v0 (_ (+ n1) (_ (+ n2) 0))) m2))))
  )
)
; program: $eovc_str-substr-combine3
(program $eovc_str-substr-combine3 ((@T0 Type) (s1 (Seq @T0)) (n1 Int) (m1 Int) (n2 Int) (m2 Int))
  :signature (Int Int Int Int (Seq @T0)) Bool
  (
  (($eovc_str-substr-combine3 m2 n2 m1 n1 s1) (eo::define ((_v0 (_ (= (_ (>= (str.len (_ (_ (str.substr s1) n1) m1))) (_ (+ n2) (_ (+ m2) 0)))) true))) (eo::define ((_v1 (_ (= (_ (>= n2) 0)) true))) (eo::define ((_v2 (_ (= (_ (>= n1) 0)) true))) ($eo_requires_eq ($eo_model_sat _v2 true false) true ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-substr-combine3 s1 n1 m1 n2 m2 _v2 _v1 _v0) false false) true true))))))))
  )
)
(echo "smt-meta $eovc_str-substr-combine3")
; program: $eor_str-substr-combine4
(program $eor_str-substr-combine4 ((@T0 Type) (m2 Int) (s1 (Seq @T0)) (n1 Int) (m1 Int) (n2 Int))
  :signature ((Seq @T0) Int Int Int Int Bool Bool Bool) Bool
  (
  (($eor_str-substr-combine4 s1 n1 m1 n2 m2 (_ (= (_ (>= n1) 0)) true) (_ (= (_ (>= n2) 0)) true) (_ (= (_ (>= (_ (+ n2) (_ (+ m2) 0))) (str.len (_ (_ (str.substr s1) n1) m1)))) true)) (eo::define ((_v0 (str.substr s1))) (_ (= (_ (_ (str.substr (_ (_ _v0 n1) m1)) n2) m2)) (_ (_ _v0 (_ (+ n1) (_ (+ n2) 0))) (_ (- m1) n2)))))
  )
)
; program: $eovc_str-substr-combine4
(program $eovc_str-substr-combine4 ((@T0 Type) (n2 Int) (m2 Int) (s1 (Seq @T0)) (n1 Int) (m1 Int))
  :signature (Int Int (Seq @T0) Int Int) Bool
  (
  (($eovc_str-substr-combine4 m1 n1 s1 m2 n2) (eo::define ((_v0 (_ (= (_ (>= (_ (+ n2) (_ (+ m2) 0))) (str.len (_ (_ (str.substr s1) n1) m1)))) true))) (eo::define ((_v1 (_ (= (_ (>= n2) 0)) true))) (eo::define ((_v2 (_ (= (_ (>= n1) 0)) true))) ($eo_requires_eq ($eo_model_sat _v2 true false) true ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-substr-combine4 s1 n1 m1 n2 m2 _v2 _v1 _v0) false false) true true))))))))
  )
)
(echo "smt-meta $eovc_str-substr-combine4")
; program: $eor_str-substr-concat1
(program $eor_str-substr-concat1 ((@T0 Type) (@T1 Type) (s2 (Seq @T1)) (s1 (Seq @T0)) (n1 Int) (m1 Int))
  :signature ((Seq @T0) (Seq @T1) Int Int Bool Bool) Bool
  (
  (($eor_str-substr-concat1 s1 s2 n1 m1 (_ (= (_ (>= n1) 0)) true) (_ (= (_ (>= (str.len s1)) (_ (+ n1) (_ (+ m1) 0)))) true)) (_ (= (_ (_ (str.substr (_ (str.++ s1) s2)) n1) m1)) (_ (_ (str.substr s1) n1) m1)))
  )
)
; program: $eovc_str-substr-concat1
(program $eovc_str-substr-concat1 ((@T0 Type) (@T1 Type) (s2 (Seq @T1)) (s1 (Seq @T0)) (n1 Int) (m1 Int))
  :signature (Int Int (Seq @T0) (Seq @T1)) Bool
  (
  (($eovc_str-substr-concat1 m1 n1 s1 s2) (eo::define ((_v0 (_ (= (_ (>= (str.len s1)) (_ (+ n1) (_ (+ m1) 0)))) true))) (eo::define ((_v1 (_ (= (_ (>= n1) 0)) true))) ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-substr-concat1 s1 s2 n1 m1 _v1 _v0) false false) true true))))))
  )
)
(echo "smt-meta $eovc_str-substr-concat1")
; program: $eor_str-substr-concat2.fev1
(program $eor_str-substr-concat2.fev1 ((@T0 Type) (@T1 Type) (@T2 Type) (s2 (Seq @T1)) (s3 (Seq @T2)) ($eo_1 (Seq @T2)) (n1 Int) (s1 (Seq @T0)) (m1 Int))
  :signature (Int (Seq @T0) Int (Seq @T2) (Seq @T1) (Seq @T2)) Bool
  (
  (($eor_str-substr-concat2.fev1 m1 s1 n1 s3 s2 $eo_1) (_ (= (_ (_ (str.substr (_ (str.++ s1) (_ (str.++ s2) s3))) n1) m1)) (_ (_ (str.substr $eo_1) (_ (- n1) (str.len s1))) m1)))
  )
)
; program: $eor_str-substr-concat2
(program $eor_str-substr-concat2 ((@T0 Type) (@T1 Type) (@T2 Type) (m1 Int) (s1 (Seq @T0)) (n1 Int) (s2 (Seq @T1)) (s3 (Seq @T2)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) Int Int Bool) Bool
  (
  (($eor_str-substr-concat2 s1 s2 s3 n1 m1 (_ (= (_ (>= n1) (str.len s1))) true)) ($eor_str-substr-concat2.fev1 m1 s1 n1 s3 s2 ($singleton_elim (_ (str.++ s2) s3))))
  )
)
; program: $eovc_str-substr-concat2
(program $eovc_str-substr-concat2 ((@T0 Type) (@T2 Type) (@T1 Type) (s2 (Seq @T1)) (s3 (Seq @T2)) (m1 Int) (n1 Int) (s1 (Seq @T0)))
  :signature ((Seq @T0) Int Int (Seq @T2) (Seq @T1)) Bool
  (
  (($eovc_str-substr-concat2 s1 n1 m1 s3 s2) (eo::define ((_v0 (_ (= (_ (>= n1) (str.len s1))) true))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-substr-concat2 s1 s2 s3 n1 m1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_str-substr-concat2")
; program: $eor_str-substr-replace
(program $eor_str-substr-replace ((@T0 Type) (@T1 Type) (@T2 Type) (s1 (Seq @T0)) (n1 Int) (t1 (Seq @T1)) (r1 (Seq @T2)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) Int Bool Bool) Bool
  (
  ((eo::define ((_v0 (= (str.len t1)))) ($eor_str-substr-replace s1 t1 r1 n1 (_ _v0 (str.len r1)) (_ _v0 1))) (_ (= (_ (_ (str.substr (_ (_ (str.replace s1) t1) r1)) 0) n1)) (_ (_ (str.replace (_ (_ (str.substr s1) 0) n1)) t1) r1)))
  )
)
; program: $eovc_str-substr-replace
(program $eovc_str-substr-replace ((@T1 Type) (@T2 Type) (@T0 Type) (s1 (Seq @T0)) (n1 Int) (r1 (Seq @T2)) (t1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T2) Int (Seq @T0)) Bool
  (
  (($eovc_str-substr-replace t1 r1 n1 s1) (eo::define ((_v0 (= (str.len t1)))) (eo::define ((_v1 (_ _v0 1))) (eo::define ((_v2 (_ _v0 (str.len r1)))) ($eo_requires_eq ($eo_model_sat _v2 true false) true ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-substr-replace s1 t1 r1 n1 _v2 _v1) false false) true true)))))))
  )
)
(echo "smt-meta $eovc_str-substr-replace")
; program: $eor_str-substr-full
(program $eor_str-substr-full ((@T0 Type) (n1 Int) (s1 (Seq @T0)))
  :signature ((Seq @T0) Int Bool) Bool
  (
  (($eor_str-substr-full s1 n1 (_ (= (_ (>= n1) (str.len s1))) true)) (_ (= (_ (_ (str.substr s1) 0) n1)) s1))
  )
)
; program: $eovc_str-substr-full
(program $eovc_str-substr-full ((@T0 Type) (n1 Int) (s1 (Seq @T0)))
  :signature ((Seq @T0) Int) Bool
  (
  (($eovc_str-substr-full s1 n1) (eo::define ((_v0 (_ (= (_ (>= n1) (str.len s1))) true))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-substr-full s1 n1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_str-substr-full")
; program: $eor_str-substr-full-eq
(program $eor_str-substr-full-eq ((@T0 Type) (n1 Int) (s1 (Seq @T0)))
  :signature ((Seq @T0) Int Bool) Bool
  (
  (($eor_str-substr-full-eq s1 n1 (_ (= (str.len s1)) n1)) (_ (= (_ (_ (str.substr s1) 0) n1)) s1))
  )
)
; program: $eovc_str-substr-full-eq
(program $eovc_str-substr-full-eq ((@T0 Type) (s1 (Seq @T0)) (n1 Int))
  :signature (Int (Seq @T0)) Bool
  (
  (($eovc_str-substr-full-eq n1 s1) (eo::define ((_v0 (_ (= (str.len s1)) n1))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-substr-full-eq s1 n1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_str-substr-full-eq")
; program: $eor_str-contains-refl
(program $eor_str-contains-refl ((@T0 Type) (x1 (Seq @T0)))
  :signature ((Seq @T0)) Bool
  (
  (($eor_str-contains-refl x1) (_ (= (_ (str.contains x1) x1)) true))
  )
)
; program: $eovc_str-contains-refl
(program $eovc_str-contains-refl ((@T0 Type) (x1 (Seq @T0)))
  :signature ((Seq @T0)) Bool
  (
  (($eovc_str-contains-refl x1) ($eo_requires_eq ($eo_model_sat ($eor_str-contains-refl x1) false false) true true))
  )
)
(echo "smt-meta $eovc_str-contains-refl")
; program: $eor_str-contains-concat-find.fev1
(program $eor_str-contains-concat-find.fev1 ((@T2 Type) (@T3 Type) (@T1 Type) (@T0 Type) (zs1 (Seq @T3)) (z1 (Seq @T1)) (xs1 (Seq @T0)) ($eo_1 (Seq @T0)) (y1 (Seq @T2)))
  :signature ((Seq @T2) (Seq @T3) (Seq @T1) (Seq @T0) (Seq @T0)) Bool
  (
  (($eor_str-contains-concat-find.fev1 y1 zs1 z1 xs1 $eo_1) (_ (= (_ (str.contains $eo_1) y1)) true))
  )
)
; program: $eor_str-contains-concat-find
(program $eor_str-contains-concat-find ((@T0 Type) (@T1 Type) (@T2 Type) (@T3 Type) (y1 (Seq @T2)) (xs1 (Seq @T0)) (z1 (Seq @T1)) (zs1 (Seq @T3)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) (Seq @T3) Bool) Bool
  (
  (($eor_str-contains-concat-find xs1 z1 y1 zs1 (_ (= (_ (str.contains z1) y1)) true)) ($eor_str-contains-concat-find.fev1 y1 zs1 z1 xs1 (eo::list_concat str.++ xs1 (_ (str.++ z1) zs1))))
  )
)
; program: $eovc_str-contains-concat-find
(program $eovc_str-contains-concat-find ((@T2 Type) (@T1 Type) (@T3 Type) (@T0 Type) (xs1 (Seq @T0)) (zs1 (Seq @T3)) (z1 (Seq @T1)) (y1 (Seq @T2)))
  :signature ((Seq @T2) (Seq @T1) (Seq @T3) (Seq @T0)) Bool
  (
  (($eovc_str-contains-concat-find y1 z1 zs1 xs1) (eo::define ((_v0 (_ (= (_ (str.contains z1) y1)) true))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-contains-concat-find xs1 z1 y1 zs1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_str-contains-concat-find")
; program: $eor_str-contains-concat-find-contra.fev1
(program $eor_str-contains-concat-find-contra.fev1 ((@T3 Type) (@T1 Type) (@T2 Type) (@T0 Type) (zs1 (Seq @T3)) (z1 (Seq @T1)) (xs1 (Seq @T0)) (y1 (Seq @T2)) ($eo_1 (Seq @T0)))
  :signature ((Seq @T3) (Seq @T1) (Seq @T0) (Seq @T2) (Seq @T0)) Bool
  (
  (($eor_str-contains-concat-find-contra.fev1 zs1 z1 xs1 y1 $eo_1) (_ (= (_ (str.contains y1) $eo_1)) false))
  )
)
; program: $eor_str-contains-concat-find-contra
(program $eor_str-contains-concat-find-contra ((@T0 Type) (@T1 Type) (@T2 Type) (@T3 Type) (y1 (Seq @T2)) (xs1 (Seq @T0)) (z1 (Seq @T1)) (zs1 (Seq @T3)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) (Seq @T3) Bool) Bool
  (
  (($eor_str-contains-concat-find-contra xs1 z1 y1 zs1 (_ (= (_ (str.contains y1) z1)) false)) ($eor_str-contains-concat-find-contra.fev1 zs1 z1 xs1 y1 (eo::list_concat str.++ xs1 (_ (str.++ z1) zs1))))
  )
)
; program: $eovc_str-contains-concat-find-contra
(program $eovc_str-contains-concat-find-contra ((@T1 Type) (@T2 Type) (@T3 Type) (@T0 Type) (xs1 (Seq @T0)) (zs1 (Seq @T3)) (y1 (Seq @T2)) (z1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T2) (Seq @T3) (Seq @T0)) Bool
  (
  (($eovc_str-contains-concat-find-contra z1 y1 zs1 xs1) (eo::define ((_v0 (_ (= (_ (str.contains y1) z1)) false))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-contains-concat-find-contra xs1 z1 y1 zs1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_str-contains-concat-find-contra")
; program: $eor_str-contains-split-char.fev1
(program $eor_str-contains-split-char.fev1 ((@T3 Type) (@T1 Type) (@T0 Type) (@T2 Type) (y1 (Seq @T1)) (z1 (Seq @T2)) (x1 (Seq @T0)) ($eo_1 (Seq @T2)) (w1 (Seq @T3)))
  :signature ((Seq @T3) (Seq @T2) (Seq @T1) (Seq @T0) (Seq @T2)) Bool
  (
  (($eor_str-contains-split-char.fev1 w1 z1 y1 x1 $eo_1) (_ (= (_ (str.contains (_ (str.++ x1) (_ (str.++ y1) z1))) w1)) (_ (or (_ (str.contains x1) w1)) (_ (or (_ (str.contains $eo_1) w1)) false))))
  )
)
; program: $eor_str-contains-split-char
(program $eor_str-contains-split-char ((@T0 Type) (@T1 Type) (@T2 Type) (@T3 Type) (w1 (Seq @T3)) (x1 (Seq @T0)) (y1 (Seq @T1)) (z1 (Seq @T2)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) (Seq @T3) Bool) Bool
  (
  (($eor_str-contains-split-char x1 y1 z1 w1 (_ (= (str.len w1)) 1)) ($eor_str-contains-split-char.fev1 w1 z1 y1 x1 ($singleton_elim (_ (str.++ y1) z1))))
  )
)
; program: $eovc_str-contains-split-char
(program $eovc_str-contains-split-char ((@T3 Type) (@T2 Type) (@T1 Type) (@T0 Type) (x1 (Seq @T0)) (y1 (Seq @T1)) (z1 (Seq @T2)) (w1 (Seq @T3)))
  :signature ((Seq @T3) (Seq @T2) (Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-contains-split-char w1 z1 y1 x1) (eo::define ((_v0 (_ (= (str.len w1)) 1))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-contains-split-char x1 y1 z1 w1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_str-contains-split-char")
; program: $eor_str-contains-leq-len-eq
(program $eor_str-contains-leq-len-eq ((@T0 Type) (@T1 Type) (x1 (Seq @T0)) (y1 (Seq @T1)))
  :signature ((Seq @T0) (Seq @T1) Bool) Bool
  (
  (($eor_str-contains-leq-len-eq x1 y1 (_ (= (_ (>= (str.len y1)) (str.len x1))) true)) (_ (= (_ (str.contains x1) y1)) (_ (= x1) y1)))
  )
)
; program: $eovc_str-contains-leq-len-eq
(program $eovc_str-contains-leq-len-eq ((@T0 Type) (@T1 Type) (y1 (Seq @T1)) (x1 (Seq @T0)))
  :signature ((Seq @T0) (Seq @T1)) Bool
  (
  (($eovc_str-contains-leq-len-eq x1 y1) (eo::define ((_v0 (_ (= (_ (>= (str.len y1)) (str.len x1))) true))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-contains-leq-len-eq x1 y1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_str-contains-leq-len-eq")
; program: $eor_str-contains-emp
(program $eor_str-contains-emp ((@T0 Type) (@T1 Type) (x1 (Seq @T0)) (y1 (Seq @T1)))
  :signature ((Seq @T0) (Seq @T1) Bool) Bool
  (
  (($eor_str-contains-emp x1 y1 (_ (= (str.len y1)) 0)) (_ (= (_ (str.contains x1) y1)) true))
  )
)
; program: $eovc_str-contains-emp
(program $eovc_str-contains-emp ((@T1 Type) (@T0 Type) (x1 (Seq @T0)) (y1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-contains-emp y1 x1) (eo::define ((_v0 (_ (= (str.len y1)) 0))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-contains-emp x1 y1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_str-contains-emp")
; program: $eor_str-contains-char.fev1
(program $eor_str-contains-char.fev1 ((@T1 Type) (@T0 Type) ($eo_1 (Seq @T0)) (x1 (Seq @T0)) (y1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T0) Type (Seq @T0)) Bool
  (
  (($eor_str-contains-char.fev1 y1 x1 @T0 $eo_1) (_ (= (_ (str.contains x1) y1)) (_ (or (_ (= $eo_1) y1)) (_ (or (_ (= x1) y1)) false))))
  )
)
; program: $eor_str-contains-char
(program $eor_str-contains-char ((@T1 Type) (y1 (Seq @T1)) (@T0 Type) (x1 (Seq @T0)))
  :signature ((Seq @T0) (Seq @T1) Type Bool) Bool
  (
  (($eor_str-contains-char x1 y1 (Seq @T0) (_ (= (str.len x1)) 1)) ($eor_str-contains-char.fev1 y1 x1 @T0 ($seq_empty (Seq @T0))))
  )
)
; program: $eovc_str-contains-char
(program $eovc_str-contains-char ((@T1 Type) (y1 (Seq @T1)) (@T0 Type) (x1 (Seq @T0)))
  :signature ((Seq @T0) Type (Seq @T1)) Bool
  (
  (($eovc_str-contains-char x1 @T0 y1) (eo::define ((_v0 (_ (= (str.len x1)) 1))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-contains-char x1 y1 (Seq @T0) _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_str-contains-char")
; program: $eor_str-at-elim
(program $eor_str-at-elim ((@T0 Type) (x1 (Seq @T0)) (n1 Int))
  :signature ((Seq @T0) Int) Bool
  (
  (($eor_str-at-elim x1 n1) (_ (= (_ (str.at x1) n1)) (_ (_ (str.substr x1) n1) 1)))
  )
)
; program: $eovc_str-at-elim
(program $eovc_str-at-elim ((@T0 Type) (x1 (Seq @T0)) (n1 Int))
  :signature (Int (Seq @T0)) Bool
  (
  (($eovc_str-at-elim n1 x1) ($eo_requires_eq ($eo_model_sat ($eor_str-at-elim x1 n1) false false) true true))
  )
)
(echo "smt-meta $eovc_str-at-elim")
; program: $eor_str-replace-self
(program $eor_str-replace-self ((@T0 Type) (@T1 Type) (t1 (Seq @T0)) (s1 (Seq @T1)))
  :signature ((Seq @T0) (Seq @T1)) Bool
  (
  (($eor_str-replace-self t1 s1) (_ (= (_ (_ (str.replace t1) t1) s1)) s1))
  )
)
; program: $eovc_str-replace-self
(program $eovc_str-replace-self ((@T1 Type) (@T0 Type) (t1 (Seq @T0)) (s1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-replace-self s1 t1) ($eo_requires_eq ($eo_model_sat ($eor_str-replace-self t1 s1) false false) true true))
  )
)
(echo "smt-meta $eovc_str-replace-self")
; program: $eor_str-replace-id
(program $eor_str-replace-id ((@T0 Type) (@T1 Type) (s1 (Seq @T1)) (t1 (Seq @T0)))
  :signature ((Seq @T0) (Seq @T1)) Bool
  (
  (($eor_str-replace-id t1 s1) (_ (= (_ (_ (str.replace t1) s1) s1)) t1))
  )
)
; program: $eovc_str-replace-id
(program $eovc_str-replace-id ((@T1 Type) (@T0 Type) (t1 (Seq @T0)) (s1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-replace-id s1 t1) ($eo_requires_eq ($eo_model_sat ($eor_str-replace-id t1 s1) false false) true true))
  )
)
(echo "smt-meta $eovc_str-replace-id")
; program: $eor_str-replace-prefix
(program $eor_str-replace-prefix ((@T0 Type) (@T1 Type) (@T2 Type) (@T3 Type) (t1 (Seq @T0)) (s1 (Seq @T3)) (t2 (Seq @T1)) (r1 (Seq @T2)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) (Seq @T3)) Bool
  (
  (($eor_str-replace-prefix t1 t2 r1 s1) (eo::define ((_v0 (_ (str.++ t2) r1))) (_ (= (_ (_ (str.replace (_ (str.++ t1) _v0)) t1) s1)) (_ (str.++ s1) _v0))))
  )
)
; program: $eovc_str-replace-prefix
(program $eovc_str-replace-prefix ((@T3 Type) (@T2 Type) (@T1 Type) (@T0 Type) (t1 (Seq @T0)) (t2 (Seq @T1)) (r1 (Seq @T2)) (s1 (Seq @T3)))
  :signature ((Seq @T3) (Seq @T2) (Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-replace-prefix s1 r1 t2 t1) ($eo_requires_eq ($eo_model_sat ($eor_str-replace-prefix t1 t2 r1 s1) false false) true true))
  )
)
(echo "smt-meta $eovc_str-replace-prefix")
; program: $eor_str-replace-no-contains
(program $eor_str-replace-no-contains ((@T0 Type) (@T1 Type) (@T2 Type) (s1 (Seq @T1)) (r1 (Seq @T2)) (t1 (Seq @T0)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) Bool) Bool
  (
  (($eor_str-replace-no-contains t1 s1 r1 (_ (= (_ (str.contains t1) s1)) false)) (_ (= (_ (_ (str.replace t1) s1) r1)) t1))
  )
)
; program: $eovc_str-replace-no-contains
(program $eovc_str-replace-no-contains ((@T1 Type) (@T0 Type) (@T2 Type) (r1 (Seq @T2)) (t1 (Seq @T0)) (s1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T0) (Seq @T2)) Bool
  (
  (($eovc_str-replace-no-contains s1 t1 r1) (eo::define ((_v0 (_ (= (_ (str.contains t1) s1)) false))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-replace-no-contains t1 s1 r1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_str-replace-no-contains")
; program: $eor_str-replace-find-base.fev1
(program $eor_str-replace-find-base.fev1 ((@T3 Type) (@T4 Type) (@T2 Type) (@T1 Type) (@T0 Type) ($eoT.fev1 Type) ($eoT.fev3 Type) (t1 (Seq @T0)) (s1 (Seq @T1)) (tpre1 (Seq @T3)) (r1 (Seq @T2)) (tpost1 (Seq @T4)) ($eo_2 $eoT.fev1))
  :signature ((Seq @T3) (Seq @T4) (Seq @T2) (Seq @T1) (Seq @T0) $eoT.fev1) $eoT.fev3
  (
  (($eor_str-replace-find-base.fev1 tpre1 tpost1 r1 s1 t1 $eo_2) (_ (= (_ (_ (str.replace t1) s1) r1)) (_ (str.++ tpre1) (_ (str.++ r1) (_ (str.++ tpost1) $eo_2)))))
  )
)
; program: $eor_str-replace-find-base
(program $eor_str-replace-find-base ((@T0 Type) (@T1 Type) (@T2 Type) (@T3 Type) (@T4 Type) (tpost1 (Seq @T4)) (r1 (Seq @T2)) (s1 (Seq @T1)) (t1 (Seq @T0)) (tpre1 (Seq @T3)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) (Seq @T3) (Seq @T4) Bool Bool Bool) Bool
  (
  ((eo::define ((_v0 (_ (_ (str.indexof t1) s1) 0))) (eo::define ((_v1 (str.substr t1))) ($eor_str-replace-find-base t1 s1 r1 tpre1 tpost1 (_ (= (_ (>= _v0) 0)) true) (_ (= tpre1) (_ (_ _v1 0) _v0)) (_ (= tpost1) (_ (_ _v1 (_ (+ _v0) (_ (+ (str.len s1)) 0))) (str.len t1)))))) ($eor_str-replace-find-base.fev1 tpre1 tpost1 r1 s1 t1 (eo::nil str.++ (eo::typeof tpre1))))
  )
)
; program: $eovc_str-replace-find-base
(program $eovc_str-replace-find-base ((@T0 Type) (@T1 Type) (@T4 Type) (@T3 Type) (@T2 Type) (r1 (Seq @T2)) (tpre1 (Seq @T3)) (tpost1 (Seq @T4)) (s1 (Seq @T1)) (t1 (Seq @T0)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T4) (Seq @T3) (Seq @T2)) Bool
  (
  (($eovc_str-replace-find-base t1 s1 tpost1 tpre1 r1) (eo::define ((_v0 (_ (_ (str.indexof t1) s1) 0))) (eo::define ((_v1 (str.substr t1))) (eo::define ((_v2 (_ (= tpost1) (_ (_ _v1 (_ (+ _v0) (_ (+ (str.len s1)) 0))) (str.len t1))))) (eo::define ((_v3 (_ (= tpre1) (_ (_ _v1 0) _v0)))) (eo::define ((_v4 (_ (= (_ (>= _v0) 0)) true))) ($eo_requires_eq ($eo_model_sat _v4 true false) true ($eo_requires_eq ($eo_model_sat _v3 true false) true ($eo_requires_eq ($eo_model_sat _v2 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-replace-find-base t1 s1 r1 tpre1 tpost1 _v4 _v3 _v2) false false) true true))))))))))
  )
)
(echo "smt-meta $eovc_str-replace-find-base")
; program: $eor_str-replace-find-first-concat
(program $eor_str-replace-find-first-concat ((@T0 Type) (@T1 Type) (@T2 Type) (@T3 Type) (@T4 Type) (@T5 Type) (t1 (Seq @T0)) (s1 (Seq @T2)) (tpre1 (Seq @T4)) (r1 (Seq @T3)) (tpost1 (Seq @T5)) (ts1 (Seq @T1)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) (Seq @T3) (Seq @T4) (Seq @T5) Bool Bool Bool) Bool
  (
  ((eo::define ((_v0 (_ (_ (str.indexof t1) s1) 0))) (eo::define ((_v1 (str.substr t1))) ($eor_str-replace-find-first-concat t1 ts1 s1 r1 tpre1 tpost1 (_ (= (_ (>= _v0) 0)) true) (_ (= tpre1) (_ (_ _v1 0) _v0)) (_ (= tpost1) (_ (_ _v1 (_ (+ _v0) (_ (+ (str.len s1)) 0))) (str.len t1)))))) (_ (= (_ (_ (str.replace (_ (str.++ t1) ts1)) s1) r1)) (_ (str.++ tpre1) (_ (str.++ r1) (_ (str.++ tpost1) ts1)))))
  )
)
; program: $eovc_str-replace-find-first-concat
(program $eovc_str-replace-find-first-concat ((@T0 Type) (@T2 Type) (@T5 Type) (@T4 Type) (@T3 Type) (@T1 Type) (ts1 (Seq @T1)) (r1 (Seq @T3)) (tpre1 (Seq @T4)) (tpost1 (Seq @T5)) (s1 (Seq @T2)) (t1 (Seq @T0)))
  :signature ((Seq @T0) (Seq @T2) (Seq @T5) (Seq @T4) (Seq @T3) (Seq @T1)) Bool
  (
  (($eovc_str-replace-find-first-concat t1 s1 tpost1 tpre1 r1 ts1) (eo::define ((_v0 (_ (_ (str.indexof t1) s1) 0))) (eo::define ((_v1 (str.substr t1))) (eo::define ((_v2 (_ (= tpost1) (_ (_ _v1 (_ (+ _v0) (_ (+ (str.len s1)) 0))) (str.len t1))))) (eo::define ((_v3 (_ (= tpre1) (_ (_ _v1 0) _v0)))) (eo::define ((_v4 (_ (= (_ (>= _v0) 0)) true))) ($eo_requires_eq ($eo_model_sat _v4 true false) true ($eo_requires_eq ($eo_model_sat _v3 true false) true ($eo_requires_eq ($eo_model_sat _v2 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-replace-find-first-concat t1 ts1 s1 r1 tpre1 tpost1 _v4 _v3 _v2) false false) true true))))))))))
  )
)
(echo "smt-meta $eovc_str-replace-find-first-concat")
; program: $eor_str-replace-empty.fev2
(program $eor_str-replace-empty.fev2 ((@T1 Type) (@T0 Type) (@T2 Type) ($eoT.fev5 Type) ($eoT.fev7 Type) (r1 (Seq @T2)) (s1 (Seq @T1)) (t1 (Seq @T0)) ($eo_6 $eoT.fev5))
  :signature ((Seq @T1) (Seq @T0) (Seq @T2) $eoT.fev5) $eoT.fev7
  (
  (($eor_str-replace-empty.fev2 s1 t1 r1 $eo_6) (_ (= (_ (_ (str.replace t1) r1) s1)) (_ (str.++ s1) (_ (str.++ t1) $eo_6))))
  )
)
; program: $eor_str-replace-empty.fev1
(program $eor_str-replace-empty.fev1 ((@T1 Type) (@T0 Type) ($eoT.fev3 Type) (@T2 Type) ($ex_1 (Seq @T2)) ($eo_4 $eoT.fev3) (t1 (Seq @T0)) (r1 (Seq @T2)) (s1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T0) (Seq @T2) Type (Seq @T2) $eoT.fev3 $eoT.fev3) $eoT.fev3
  (
  (($eor_str-replace-empty.fev1 s1 t1 r1 @T2 $ex_1 $eo_4 $eo_4) ($eor_str-replace-empty.fev2 s1 t1 r1 (eo::nil str.++ (eo::typeof s1))))
  )
)
; program: $eor_str-replace-empty
(program $eor_str-replace-empty ((@T0 Type) (@T1 Type) (s1 (Seq @T1)) (t1 (Seq @T0)) (@T2 Type) (r1 (Seq @T2)) ($ex_1 (Seq @T2)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) Type Bool) Bool
  (
  (($eor_str-replace-empty t1 s1 r1 (Seq @T2) (_ (= r1) $ex_1)) ($eor_str-replace-empty.fev1 s1 t1 r1 @T2 $ex_1 $ex_1 ($seq_empty (Seq @T2))))
  )
)
; program: $eovc_str-replace-empty.fev1
(program $eovc_str-replace-empty.fev1 ((@T1 Type) (@T0 Type) (t1 (Seq @T0)) (s1 (Seq @T1)) (@T2 Type) (r1 (Seq @T2)) ($eo_1 (Seq @T2)))
  :signature (Type (Seq @T2) (Seq @T1) (Seq @T0) (Seq @T2)) Bool
  (
  (($eovc_str-replace-empty.fev1 @T2 r1 s1 t1 $eo_1) (eo::define ((_v0 (_ (= r1) $eo_1))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-replace-empty t1 s1 r1 (Seq @T2) _v0) false false) true true))))
  )
)
; program: $eovc_str-replace-empty
(program $eovc_str-replace-empty ((@T1 Type) (@T0 Type) (@T2 Type) (r1 (Seq @T2)) (s1 (Seq @T1)) (t1 (Seq @T0)))
  :signature (Type (Seq @T2) (Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-replace-empty @T2 r1 s1 t1) ($eovc_str-replace-empty.fev1 @T2 r1 s1 t1 ($seq_empty (Seq @T2))))
  )
)
(echo "smt-meta $eovc_str-replace-empty")
; program: $eor_str-replace-one-pre.fev3
(program $eor_str-replace-one-pre.fev3 (($eoT.fev5 Type) (@T0 Type) (@T2 Type) (@T1 Type) ($eoT.fev7 Type) (@T3 Type) ($eoT.fev10 Type) ($eoT.fev12 Type) ($eo_8 $eoT.fev7) (ts1 (Seq @T3)) ($eo_11 $eoT.fev10) ($eo_1 (Seq @T3)) (s1 (Seq @T1)) (r1 (Seq @T2)) (t1 (Seq @T0)) ($eo_6 $eoT.fev5))
  :signature ($eoT.fev5 (Seq @T0) (Seq @T2) (Seq @T1) (Seq @T3) $eoT.fev7 (Seq @T3) $eoT.fev10) $eoT.fev12
  (
  (($eor_str-replace-one-pre.fev3 $eo_6 t1 r1 s1 $eo_1 $eo_8 ts1 $eo_11) (_ (= (_ (_ (str.replace $eo_11) s1) r1)) (_ (str.++ (_ (_ (str.replace $eo_1) s1) r1)) (_ (str.++ t1) $eo_6))))
  )
)
; program: $eor_str-replace-one-pre.fev2
(program $eor_str-replace-one-pre.fev2 ((@T2 Type) (@T1 Type) (@T0 Type) ($eoT.fev2 Type) (@T4 Type) (@T3 Type) ($eoT.fev5 Type) ($eoT.fev7 Type) ($eoT.fev9 Type) ($eo_3 $eoT.fev2) (ss1 (Seq @T4)) ($eo_6 $eoT.fev5) (r1 (Seq @T2)) (s1 (Seq @T1)) ($eo_1 (Seq @T3)) (ts1 (Seq @T3)) (t1 (Seq @T0)) ($eo_8 $eoT.fev7))
  :signature ((Seq @T2) (Seq @T1) (Seq @T3) (Seq @T0) $eoT.fev2 (Seq @T4) (Seq @T3) $eoT.fev5 $eoT.fev7) $eoT.fev9
  (
  (($eor_str-replace-one-pre.fev2 r1 s1 $eo_1 t1 $eo_3 ss1 ts1 $eo_6 $eo_8) ($eor_str-replace-one-pre.fev3 $eo_6 t1 r1 s1 $eo_1 $eo_8 ts1 (eo::list_concat str.++ ts1 (_ (str.++ t1) $eo_8))))
  )
)
; program: $eor_str-replace-one-pre.fev1
(program $eor_str-replace-one-pre.fev1 ((@T2 Type) (@T1 Type) (@T4 Type) (@T0 Type) (@T3 Type) ($eoT.fev2 Type) ($eoT.fev4 Type) (ts1 (Seq @T3)) ($eo_1 (Seq @T3)) (s1 (Seq @T1)) (r1 (Seq @T2)) (ss1 (Seq @T4)) (t1 (Seq @T0)) ($eo_3 $eoT.fev2))
  :signature ((Seq @T2) (Seq @T1) (Seq @T4) (Seq @T0) (Seq @T3) (Seq @T3) $eoT.fev2) $eoT.fev4
  (
  (($eor_str-replace-one-pre.fev1 r1 s1 ss1 t1 ts1 $eo_1 $eo_3) ($eor_str-replace-one-pre.fev2 r1 s1 $eo_1 t1 $eo_3 ss1 ts1 (eo::nil str.++ (eo::typeof (_ (_ (str.replace $eo_1) s1) r1))) (eo::list_concat str.++ ss1 (_ (str.++ t1) $eo_3))))
  )
)
; program: $eor_str-replace-one-pre
(program $eor_str-replace-one-pre ((@T0 Type) (@T1 Type) (@T2 Type) (@T3 Type) (@T4 Type) (r1 (Seq @T2)) (s1 (Seq @T1)) (t1 (Seq @T0)) (ss1 (Seq @T4)) (ts1 (Seq @T3)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) (Seq @T3) (Seq @T4) Bool) Bool
  (
  (($eor_str-replace-one-pre t1 s1 r1 ts1 ss1 (_ (= (str.len s1)) 1)) ($eor_str-replace-one-pre.fev1 r1 s1 ss1 t1 ts1 ($singleton_elim (eo::list_concat str.++ ts1 (_ (str.++ t1) ss1))) (eo::nil str.++ (eo::typeof ts1))))
  )
)
; program: $eovc_str-replace-one-pre
(program $eovc_str-replace-one-pre ((@T1 Type) (@T4 Type) (@T3 Type) (@T2 Type) (@T0 Type) (t1 (Seq @T0)) (r1 (Seq @T2)) (ts1 (Seq @T3)) (ss1 (Seq @T4)) (s1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T4) (Seq @T3) (Seq @T2) (Seq @T0)) Bool
  (
  (($eovc_str-replace-one-pre s1 ss1 ts1 r1 t1) (eo::define ((_v0 (_ (= (str.len s1)) 1))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-replace-one-pre t1 s1 r1 ts1 ss1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_str-replace-one-pre")
; program: $eor_str-replace-find-pre.fev3
(program $eor_str-replace-find-pre.fev3 ((@T3 Type) (@T1 Type) (@T0 Type) ($eoT.fev5 Type) (@T2 Type) ($eoT.fev8 Type) ($eoT.fev10 Type) (ss1 (Seq @T3)) ($eo_6 $eoT.fev5) ($eo_3 (Seq @T2)) (t1 (Seq @T0)) (r1 (Seq @T1)) ($eo_9 $eoT.fev8))
  :signature ((Seq @T3) (Seq @T1) (Seq @T0) $eoT.fev5 (Seq @T2) $eoT.fev8) $eoT.fev10
  (
  (($eor_str-replace-find-pre.fev3 ss1 r1 t1 $eo_6 $eo_3 $eo_9) (_ (= (_ (_ (str.replace $eo_3) t1) r1)) $eo_9))
  )
)
; program: $eor_str-replace-find-pre.fev2
(program $eor_str-replace-find-pre.fev2 ((@T3 Type) (@T1 Type) (@T0 Type) ($eoT.fev1 Type) (@T2 Type) ($eoT.fev5 Type) ($eoT.fev7 Type) ($eo_2 $eoT.fev1) (ts1 (Seq @T2)) ($eo_3 (Seq @T2)) ($eo_6 $eoT.fev5) (t1 (Seq @T0)) (r1 (Seq @T1)) (ss1 (Seq @T3)))
  :signature ((Seq @T3) (Seq @T1) (Seq @T0) $eoT.fev1 (Seq @T2) (Seq @T2) $eoT.fev5) $eoT.fev7
  (
  (($eor_str-replace-find-pre.fev2 ss1 r1 t1 $eo_2 ts1 $eo_3 $eo_6) ($eor_str-replace-find-pre.fev3 ss1 r1 t1 $eo_6 $eo_3 ($singleton_elim (_ (str.++ (_ (_ (str.replace $eo_6) t1) r1)) ss1))))
  )
)
; program: $eor_str-replace-find-pre.fev1
(program $eor_str-replace-find-pre.fev1 ((@T3 Type) (@T1 Type) (@T0 Type) ($eoT.fev1 Type) (@T2 Type) ($eoT.fev4 Type) (ss1 (Seq @T3)) (r1 (Seq @T1)) ($eo_3 (Seq @T2)) (ts1 (Seq @T2)) (t1 (Seq @T0)) ($eo_2 $eoT.fev1))
  :signature ((Seq @T3) (Seq @T1) (Seq @T0) (Seq @T2) $eoT.fev1 (Seq @T2)) $eoT.fev4
  (
  (($eor_str-replace-find-pre.fev1 ss1 r1 t1 ts1 $eo_2 $eo_3) ($eor_str-replace-find-pre.fev2 ss1 r1 t1 $eo_2 ts1 $eo_3 ($singleton_elim (eo::list_concat str.++ ts1 (_ (str.++ t1) $eo_2)))))
  )
)
; program: $eor_str-replace-find-pre
(program $eor_str-replace-find-pre ((@T0 Type) (@T1 Type) (@T2 Type) (@T3 Type) (r1 (Seq @T1)) (ts1 (Seq @T2)) (t1 (Seq @T0)) (ss1 (Seq @T3)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) (Seq @T3)) Bool
  (
  (($eor_str-replace-find-pre t1 r1 ts1 ss1) ($eor_str-replace-find-pre.fev1 ss1 r1 t1 ts1 (eo::nil str.++ (eo::typeof ts1)) (eo::list_concat str.++ ts1 (_ (str.++ t1) ss1))))
  )
)
; program: $eovc_str-replace-find-pre
(program $eovc_str-replace-find-pre ((@T3 Type) (@T2 Type) (@T1 Type) (@T0 Type) (t1 (Seq @T0)) (r1 (Seq @T1)) (ts1 (Seq @T2)) (ss1 (Seq @T3)))
  :signature ((Seq @T3) (Seq @T2) (Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-replace-find-pre ss1 ts1 r1 t1) ($eo_requires_eq ($eo_model_sat ($eor_str-replace-find-pre t1 r1 ts1 ss1) false false) true true))
  )
)
(echo "smt-meta $eovc_str-replace-find-pre")
; program: $eor_str-replace-all-no-contains
(program $eor_str-replace-all-no-contains ((@T0 Type) (@T1 Type) (@T2 Type) (s1 (Seq @T1)) (r1 (Seq @T2)) (t1 (Seq @T0)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) Bool) Bool
  (
  (($eor_str-replace-all-no-contains t1 s1 r1 (_ (= (_ (str.contains t1) s1)) false)) (_ (= (_ (_ (str.replace_all t1) s1) r1)) t1))
  )
)
; program: $eovc_str-replace-all-no-contains
(program $eovc_str-replace-all-no-contains ((@T1 Type) (@T0 Type) (@T2 Type) (r1 (Seq @T2)) (t1 (Seq @T0)) (s1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T0) (Seq @T2)) Bool
  (
  (($eovc_str-replace-all-no-contains s1 t1 r1) (eo::define ((_v0 (_ (= (_ (str.contains t1) s1)) false))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-replace-all-no-contains t1 s1 r1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_str-replace-all-no-contains")
; program: $eor_str-replace-re-none
(program $eor_str-replace-re-none ((@T0 Type) (@T1 Type) (r1 (Seq @T1)) (t1 (Seq @T0)))
  :signature ((Seq @T0) (Seq @T1)) Bool
  (
  (($eor_str-replace-re-none t1 r1) (_ (= (_ (_ (str.replace_re t1) re.none) r1)) t1))
  )
)
; program: $eovc_str-replace-re-none
(program $eovc_str-replace-re-none ((@T1 Type) (@T0 Type) (t1 (Seq @T0)) (r1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-replace-re-none r1 t1) ($eo_requires_eq ($eo_model_sat ($eor_str-replace-re-none t1 r1) false false) true true))
  )
)
(echo "smt-meta $eovc_str-replace-re-none")
; program: $eor_str-replace-re-all-none
(program $eor_str-replace-re-all-none ((@T0 Type) (@T1 Type) (r1 (Seq @T1)) (t1 (Seq @T0)))
  :signature ((Seq @T0) (Seq @T1)) Bool
  (
  (($eor_str-replace-re-all-none t1 r1) (_ (= (_ (_ (str.replace_re_all t1) re.none) r1)) t1))
  )
)
; program: $eovc_str-replace-re-all-none
(program $eovc_str-replace-re-all-none ((@T1 Type) (@T0 Type) (t1 (Seq @T0)) (r1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-replace-re-all-none r1 t1) ($eo_requires_eq ($eo_model_sat ($eor_str-replace-re-all-none t1 r1) false false) true true))
  )
)
(echo "smt-meta $eovc_str-replace-re-all-none")
; program: $eor_str-len-concat-rec.fev1
(program $eor_str-len-concat-rec.fev1 ((@T1 Type) (@T0 Type) (@T2 Type) (s2 (Seq @T1)) (s3 (Seq @T2)) (s1 (Seq @T0)) ($eo_1 (Seq @T2)))
  :signature ((Seq @T2) (Seq @T1) (Seq @T0) (Seq @T2)) Bool
  (
  (($eor_str-len-concat-rec.fev1 s3 s2 s1 $eo_1) (_ (= (str.len (_ (str.++ s1) (_ (str.++ s2) s3)))) (_ (+ (str.len s1)) (_ (+ (str.len $eo_1)) 0))))
  )
)
; program: $eor_str-len-concat-rec
(program $eor_str-len-concat-rec ((@T0 Type) (@T1 Type) (@T2 Type) (s1 (Seq @T0)) (s2 (Seq @T1)) (s3 (Seq @T2)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2)) Bool
  (
  (($eor_str-len-concat-rec s1 s2 s3) ($eor_str-len-concat-rec.fev1 s3 s2 s1 ($singleton_elim (_ (str.++ s2) s3))))
  )
)
; program: $eovc_str-len-concat-rec
(program $eovc_str-len-concat-rec ((@T2 Type) (@T1 Type) (@T0 Type) (s1 (Seq @T0)) (s2 (Seq @T1)) (s3 (Seq @T2)))
  :signature ((Seq @T2) (Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-len-concat-rec s3 s2 s1) ($eo_requires_eq ($eo_model_sat ($eor_str-len-concat-rec s1 s2 s3) false false) true true))
  )
)
(echo "smt-meta $eovc_str-len-concat-rec")
; program: $eor_str-len-eq-zero-concat-rec.fev1
(program $eor_str-len-eq-zero-concat-rec.fev1 ((@T1 Type) (@T2 Type) (@T0 Type) (s2 (Seq @T1)) (s3 (Seq @T2)) (s1 (Seq @T0)) ($eo_2 (Seq @T0)) ($eo_1 (Seq @T2)))
  :signature ((Seq @T2) (Seq @T1) Type (Seq @T0) (Seq @T2) (Seq @T0)) Bool
  (
  (($eor_str-len-eq-zero-concat-rec.fev1 s3 s2 @T0 s1 $eo_1 $eo_2) (_ (= (_ (= (str.len (_ (str.++ s1) (_ (str.++ s2) s3)))) 0)) (_ (and (_ (= s1) $eo_2)) (_ (and (_ (= (str.len $eo_1)) 0)) true))))
  )
)
; program: $eor_str-len-eq-zero-concat-rec
(program $eor_str-len-eq-zero-concat-rec ((@T1 Type) (@T2 Type) (@T0 Type) (s1 (Seq @T0)) (s2 (Seq @T1)) (s3 (Seq @T2)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) Type) Bool
  (
  (($eor_str-len-eq-zero-concat-rec s1 s2 s3 (Seq @T0)) ($eor_str-len-eq-zero-concat-rec.fev1 s3 s2 @T0 s1 ($singleton_elim (_ (str.++ s2) s3)) ($seq_empty (Seq @T0))))
  )
)
; program: $eovc_str-len-eq-zero-concat-rec
(program $eovc_str-len-eq-zero-concat-rec ((@T2 Type) (@T1 Type) (@T0 Type) (s1 (Seq @T0)) (s2 (Seq @T1)) (s3 (Seq @T2)))
  :signature (Type (Seq @T2) (Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-len-eq-zero-concat-rec @T0 s3 s2 s1) ($eo_requires_eq ($eo_model_sat ($eor_str-len-eq-zero-concat-rec s1 s2 s3 (Seq @T0)) false false) true true))
  )
)
(echo "smt-meta $eovc_str-len-eq-zero-concat-rec")
; program: $eor_str-len-eq-zero-base.fev1
(program $eor_str-len-eq-zero-base.fev1 ((@T0 Type) (s1 (Seq @T0)) ($eo_1 (Seq @T0)))
  :signature (Type (Seq @T0) (Seq @T0)) Bool
  (
  (($eor_str-len-eq-zero-base.fev1 @T0 s1 $eo_1) (_ (= (_ (= (str.len s1)) 0)) (_ (= s1) $eo_1)))
  )
)
; program: $eor_str-len-eq-zero-base
(program $eor_str-len-eq-zero-base ((@T0 Type) (s1 (Seq @T0)))
  :signature ((Seq @T0) Type) Bool
  (
  (($eor_str-len-eq-zero-base s1 (Seq @T0)) ($eor_str-len-eq-zero-base.fev1 @T0 s1 ($seq_empty (Seq @T0))))
  )
)
; program: $eovc_str-len-eq-zero-base
(program $eovc_str-len-eq-zero-base ((@T0 Type) (s1 (Seq @T0)))
  :signature (Type (Seq @T0)) Bool
  (
  (($eovc_str-len-eq-zero-base @T0 s1) ($eo_requires_eq ($eo_model_sat ($eor_str-len-eq-zero-base s1 (Seq @T0)) false false) true true))
  )
)
(echo "smt-meta $eovc_str-len-eq-zero-base")
; program: $eor_str-indexof-self.fev1
(program $eor_str-indexof-self.fev1 ((@T0 Type) (t1 (Seq @T0)) ($eo_1 (Seq @T0)) (n1 Int))
  :signature (Int Type (Seq @T0) (Seq @T0)) Bool
  (
  (($eor_str-indexof-self.fev1 n1 @T0 t1 $eo_1) (_ (= (_ (_ (str.indexof t1) t1) n1)) (_ (_ (str.indexof $eo_1) $eo_1) n1)))
  )
)
; program: $eor_str-indexof-self
(program $eor_str-indexof-self ((n1 Int) (@T0 Type) (t1 (Seq @T0)))
  :signature ((Seq @T0) Int Type) Bool
  (
  (($eor_str-indexof-self t1 n1 (Seq @T0)) ($eor_str-indexof-self.fev1 n1 @T0 t1 ($seq_empty (Seq @T0))))
  )
)
; program: $eovc_str-indexof-self
(program $eovc_str-indexof-self ((@T0 Type) (t1 (Seq @T0)) (n1 Int))
  :signature (Type Int (Seq @T0)) Bool
  (
  (($eovc_str-indexof-self @T0 n1 t1) ($eo_requires_eq ($eo_model_sat ($eor_str-indexof-self t1 n1 (Seq @T0)) false false) true true))
  )
)
(echo "smt-meta $eovc_str-indexof-self")
; program: $eor_str-indexof-no-contains
(program $eor_str-indexof-no-contains ((@T0 Type) (@T1 Type) (t1 (Seq @T0)) (s1 (Seq @T1)) (n1 Int))
  :signature ((Seq @T0) (Seq @T1) Int Bool) Bool
  (
  (($eor_str-indexof-no-contains t1 s1 n1 (_ (= (_ (str.contains (_ (_ (str.substr t1) n1) (str.len t1))) s1)) false)) (_ (= (_ (_ (str.indexof t1) s1) n1)) -1))
  )
)
; program: $eovc_str-indexof-no-contains
(program $eovc_str-indexof-no-contains ((@T1 Type) (@T0 Type) (n1 Int) (t1 (Seq @T0)) (s1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T0) Int) Bool
  (
  (($eovc_str-indexof-no-contains s1 t1 n1) (eo::define ((_v0 (_ (= (_ (str.contains (_ (_ (str.substr t1) n1) (str.len t1))) s1)) false))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-indexof-no-contains t1 s1 n1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_str-indexof-no-contains")
; program: $eor_str-indexof-oob
(program $eor_str-indexof-oob ((@T0 Type) (@T1 Type) (t1 (Seq @T0)) (s1 (Seq @T1)) (n1 Int))
  :signature ((Seq @T0) (Seq @T1) Int Bool) Bool
  (
  (($eor_str-indexof-oob t1 s1 n1 (_ (= (_ (> n1) (str.len t1))) true)) (_ (= (_ (_ (str.indexof t1) s1) n1)) -1))
  )
)
; program: $eovc_str-indexof-oob
(program $eovc_str-indexof-oob ((@T0 Type) (@T1 Type) (s1 (Seq @T1)) (n1 Int) (t1 (Seq @T0)))
  :signature ((Seq @T0) Int (Seq @T1)) Bool
  (
  (($eovc_str-indexof-oob t1 n1 s1) (eo::define ((_v0 (_ (= (_ (> n1) (str.len t1))) true))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-indexof-oob t1 s1 n1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_str-indexof-oob")
; program: $eor_str-indexof-oob2
(program $eor_str-indexof-oob2 ((@T0 Type) (@T1 Type) (t1 (Seq @T0)) (s1 (Seq @T1)) (n1 Int))
  :signature ((Seq @T0) (Seq @T1) Int Bool) Bool
  (
  (($eor_str-indexof-oob2 t1 s1 n1 (_ (= (_ (> 0) n1)) true)) (_ (= (_ (_ (str.indexof t1) s1) n1)) -1))
  )
)
; program: $eovc_str-indexof-oob2
(program $eovc_str-indexof-oob2 ((@T1 Type) (@T0 Type) (t1 (Seq @T0)) (s1 (Seq @T1)) (n1 Int))
  :signature (Int (Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-indexof-oob2 n1 s1 t1) (eo::define ((_v0 (_ (= (_ (> 0) n1)) true))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-indexof-oob2 t1 s1 n1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_str-indexof-oob2")
; program: $eor_str-indexof-contains-pre
(program $eor_str-indexof-contains-pre ((@T0 Type) (@T1 Type) (@T2 Type) (t2 (Seq @T1)) (t1 (Seq @T0)) (s1 (Seq @T2)) (n1 Int))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) Int Bool) Bool
  (
  (($eor_str-indexof-contains-pre t1 t2 s1 n1 (_ (= (_ (str.contains (_ (_ (str.substr t1) n1) (str.len t1))) s1)) true)) (_ (= (_ (_ (str.indexof (_ (str.++ t1) t2)) s1) n1)) (_ (_ (str.indexof t1) s1) n1)))
  )
)
; program: $eovc_str-indexof-contains-pre
(program $eovc_str-indexof-contains-pre ((@T2 Type) (@T0 Type) (@T1 Type) (t2 (Seq @T1)) (n1 Int) (t1 (Seq @T0)) (s1 (Seq @T2)))
  :signature ((Seq @T2) (Seq @T0) Int (Seq @T1)) Bool
  (
  (($eovc_str-indexof-contains-pre s1 t1 n1 t2) (eo::define ((_v0 (_ (= (_ (str.contains (_ (_ (str.substr t1) n1) (str.len t1))) s1)) true))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-indexof-contains-pre t1 t2 s1 n1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_str-indexof-contains-pre")
; program: $eor_str-indexof-find-emp.fev1
(program $eor_str-indexof-find-emp.fev1 ((@T1 Type) (@T0 Type) ($ex_1 (Seq @T0)) ($eo_2 Bool) (t1 (Seq @T0)) (emp1 (Seq @T1)) (n1 Int))
  :signature (Int (Seq @T1) (Seq @T0) Type (Seq @T0) Bool Bool) Bool
  (
  (($eor_str-indexof-find-emp.fev1 n1 emp1 t1 @T0 $ex_1 $eo_2 $eo_2) (_ (= (_ (_ (str.indexof t1) emp1) n1)) n1))
  )
)
; program: $eor_str-indexof-find-emp
(program $eor_str-indexof-find-emp ((@T1 Type) (n1 Int) (emp1 (Seq @T1)) (@T0 Type) (t1 (Seq @T0)) ($ex_1 (Seq @T0)))
  :signature ((Seq @T0) (Seq @T1) Int Type Bool Bool) Bool
  (
  (($eor_str-indexof-find-emp t1 emp1 n1 (Seq @T0) (_ (= emp1) $ex_1) (_ (= (_ (>= (str.len t1)) n1)) true)) ($eor_str-indexof-find-emp.fev1 n1 emp1 t1 @T0 $ex_1 $ex_1 ($seq_empty (Seq @T0))))
  )
)
; program: $eovc_str-indexof-find-emp.fev1
(program $eovc_str-indexof-find-emp.fev1 ((@T1 Type) ($eo_2 Bool) (@T0 Type) (emp1 (Seq @T1)) ($eo_1 (Seq @T0)) (t1 (Seq @T0)) (n1 Int))
  :signature (Int (Seq @T0) Type (Seq @T1) (Seq @T0) Bool) Bool
  (
  (($eovc_str-indexof-find-emp.fev1 n1 t1 @T0 emp1 $eo_1 $eo_2) (eo::define ((_v0 (_ (= emp1) $eo_1))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq $eo_2 true ($eo_requires_eq ($eo_model_sat ($eor_str-indexof-find-emp t1 emp1 n1 (Seq @T0) _v0 (_ (= (_ (>= (str.len t1)) n1)) true)) false false) true true)))))
  )
)
; program: $eovc_str-indexof-find-emp
(program $eovc_str-indexof-find-emp ((@T1 Type) (emp1 (Seq @T1)) (@T0 Type) (t1 (Seq @T0)) (n1 Int))
  :signature (Int (Seq @T0) Type (Seq @T1)) Bool
  (
  (($eovc_str-indexof-find-emp n1 t1 @T0 emp1) ($eovc_str-indexof-find-emp.fev1 n1 t1 @T0 emp1 ($seq_empty (Seq @T0)) ($eo_model_sat (_ (= (_ (>= (str.len t1)) n1)) true) true false)))
  )
)
(echo "smt-meta $eovc_str-indexof-find-emp")
; program: $eor_str-indexof-eq-irr
(program $eor_str-indexof-eq-irr ((@T0 Type) (@T1 Type) (@T2 Type) (t1 (Seq @T0)) (r1 (Seq @T2)) (s1 (Seq @T1)) (n1 Int))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) Int Bool) Bool
  (
  (($eor_str-indexof-eq-irr t1 s1 r1 n1 (_ (= (_ (_ (str.substr t1) n1) (str.len t1))) (_ (_ (str.substr r1) n1) (str.len r1)))) (_ (= (_ (= (_ (_ (str.indexof t1) s1) n1)) (_ (_ (str.indexof r1) s1) n1))) true))
  )
)
; program: $eovc_str-indexof-eq-irr
(program $eovc_str-indexof-eq-irr ((@T2 Type) (@T0 Type) (@T1 Type) (s1 (Seq @T1)) (t1 (Seq @T0)) (n1 Int) (r1 (Seq @T2)))
  :signature ((Seq @T2) Int (Seq @T0) (Seq @T1)) Bool
  (
  (($eovc_str-indexof-eq-irr r1 n1 t1 s1) (eo::define ((_v0 (_ (= (_ (_ (str.substr t1) n1) (str.len t1))) (_ (_ (str.substr r1) n1) (str.len r1))))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-indexof-eq-irr t1 s1 r1 n1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_str-indexof-eq-irr")
; program: $eor_str-indexof-re-none
(program $eor_str-indexof-re-none ((t1 (Seq Char)) (n1 Int))
  :signature ((Seq Char) Int) Bool
  (
  (($eor_str-indexof-re-none t1 n1) (_ (= (_ (_ (str.indexof_re t1) re.none) n1)) -1))
  )
)
; program: $eovc_str-indexof-re-none
(program $eovc_str-indexof-re-none ((t1 (Seq Char)) (n1 Int))
  :signature (Int (Seq Char)) Bool
  (
  (($eovc_str-indexof-re-none n1 t1) ($eo_requires_eq ($eo_model_sat ($eor_str-indexof-re-none t1 n1) false false) true true))
  )
)
(echo "smt-meta $eovc_str-indexof-re-none")
; program: $eor_str-indexof-re-emp-re
(program $eor_str-indexof-re-emp-re ((t1 (Seq Char)) (r1 RegLan) (n1 Int))
  :signature ((Seq Char) RegLan Int Bool Bool) Bool
  (
  (($eor_str-indexof-re-emp-re t1 r1 n1 (_ (= (_ (str.in_re "") r1)) true) (_ (= (_ (>= (str.len t1)) n1)) true)) (_ (= (_ (_ (str.indexof_re t1) r1) n1)) n1))
  )
)
; program: $eovc_str-indexof-re-emp-re
(program $eovc_str-indexof-re-emp-re ((r1 RegLan) (t1 (Seq Char)) (n1 Int))
  :signature (Int (Seq Char) RegLan) Bool
  (
  (($eovc_str-indexof-re-emp-re n1 t1 r1) (eo::define ((_v0 (_ (= (_ (>= (str.len t1)) n1)) true))) (eo::define ((_v1 (_ (= (_ (str.in_re "") r1)) true))) ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-indexof-re-emp-re t1 r1 n1 _v1 _v0) false false) true true))))))
  )
)
(echo "smt-meta $eovc_str-indexof-re-emp-re")
; program: $eor_str-to-lower-concat.fev1
(program $eor_str-to-lower-concat.fev1 ((s2 (Seq Char)) (s3 (Seq Char)) (s1 (Seq Char)) ($eo_1 (Seq Char)))
  :signature ((Seq Char) (Seq Char) (Seq Char) (Seq Char)) Bool
  (
  (($eor_str-to-lower-concat.fev1 s3 s2 s1 $eo_1) (_ (= (str.to_lower (_ (str.++ s1) (_ (str.++ s2) s3)))) (_ (str.++ (str.to_lower s1)) (_ (str.++ (str.to_lower $eo_1)) ""))))
  )
)
; program: $eor_str-to-lower-concat
(program $eor_str-to-lower-concat ((s1 (Seq Char)) (s2 (Seq Char)) (s3 (Seq Char)))
  :signature ((Seq Char) (Seq Char) (Seq Char)) Bool
  (
  (($eor_str-to-lower-concat s1 s2 s3) ($eor_str-to-lower-concat.fev1 s3 s2 s1 ($singleton_elim (_ (str.++ s2) s3))))
  )
)
; program: $eovc_str-to-lower-concat
(program $eovc_str-to-lower-concat ((s1 (Seq Char)) (s2 (Seq Char)) (s3 (Seq Char)))
  :signature ((Seq Char) (Seq Char) (Seq Char)) Bool
  (
  (($eovc_str-to-lower-concat s3 s2 s1) ($eo_requires_eq ($eo_model_sat ($eor_str-to-lower-concat s1 s2 s3) false false) true true))
  )
)
(echo "smt-meta $eovc_str-to-lower-concat")
; program: $eor_str-to-upper-concat.fev1
(program $eor_str-to-upper-concat.fev1 ((s2 (Seq Char)) (s3 (Seq Char)) (s1 (Seq Char)) ($eo_1 (Seq Char)))
  :signature ((Seq Char) (Seq Char) (Seq Char) (Seq Char)) Bool
  (
  (($eor_str-to-upper-concat.fev1 s3 s2 s1 $eo_1) (_ (= (str.to_upper (_ (str.++ s1) (_ (str.++ s2) s3)))) (_ (str.++ (str.to_upper s1)) (_ (str.++ (str.to_upper $eo_1)) ""))))
  )
)
; program: $eor_str-to-upper-concat
(program $eor_str-to-upper-concat ((s1 (Seq Char)) (s2 (Seq Char)) (s3 (Seq Char)))
  :signature ((Seq Char) (Seq Char) (Seq Char)) Bool
  (
  (($eor_str-to-upper-concat s1 s2 s3) ($eor_str-to-upper-concat.fev1 s3 s2 s1 ($singleton_elim (_ (str.++ s2) s3))))
  )
)
; program: $eovc_str-to-upper-concat
(program $eovc_str-to-upper-concat ((s1 (Seq Char)) (s2 (Seq Char)) (s3 (Seq Char)))
  :signature ((Seq Char) (Seq Char) (Seq Char)) Bool
  (
  (($eovc_str-to-upper-concat s3 s2 s1) ($eo_requires_eq ($eo_model_sat ($eor_str-to-upper-concat s1 s2 s3) false false) true true))
  )
)
(echo "smt-meta $eovc_str-to-upper-concat")
; program: $eor_str-to-lower-upper
(program $eor_str-to-lower-upper ((s1 (Seq Char)))
  :signature ((Seq Char)) Bool
  (
  (($eor_str-to-lower-upper s1) (_ (= (str.to_lower (str.to_upper s1))) (str.to_lower s1)))
  )
)
; program: $eovc_str-to-lower-upper
(program $eovc_str-to-lower-upper ((s1 (Seq Char)))
  :signature ((Seq Char)) Bool
  (
  (($eovc_str-to-lower-upper s1) ($eo_requires_eq ($eo_model_sat ($eor_str-to-lower-upper s1) false false) true true))
  )
)
(echo "smt-meta $eovc_str-to-lower-upper")
; program: $eor_str-to-upper-lower
(program $eor_str-to-upper-lower ((s1 (Seq Char)))
  :signature ((Seq Char)) Bool
  (
  (($eor_str-to-upper-lower s1) (_ (= (str.to_upper (str.to_lower s1))) (str.to_upper s1)))
  )
)
; program: $eovc_str-to-upper-lower
(program $eovc_str-to-upper-lower ((s1 (Seq Char)))
  :signature ((Seq Char)) Bool
  (
  (($eovc_str-to-upper-lower s1) ($eo_requires_eq ($eo_model_sat ($eor_str-to-upper-lower s1) false false) true true))
  )
)
(echo "smt-meta $eovc_str-to-upper-lower")
; program: $eor_str-to-lower-len
(program $eor_str-to-lower-len ((s1 (Seq Char)))
  :signature ((Seq Char)) Bool
  (
  (($eor_str-to-lower-len s1) (_ (= (str.len (str.to_lower s1))) (str.len s1)))
  )
)
; program: $eovc_str-to-lower-len
(program $eovc_str-to-lower-len ((s1 (Seq Char)))
  :signature ((Seq Char)) Bool
  (
  (($eovc_str-to-lower-len s1) ($eo_requires_eq ($eo_model_sat ($eor_str-to-lower-len s1) false false) true true))
  )
)
(echo "smt-meta $eovc_str-to-lower-len")
; program: $eor_str-to-upper-len
(program $eor_str-to-upper-len ((s1 (Seq Char)))
  :signature ((Seq Char)) Bool
  (
  (($eor_str-to-upper-len s1) (_ (= (str.len (str.to_upper s1))) (str.len s1)))
  )
)
; program: $eovc_str-to-upper-len
(program $eovc_str-to-upper-len ((s1 (Seq Char)))
  :signature ((Seq Char)) Bool
  (
  (($eovc_str-to-upper-len s1) ($eo_requires_eq ($eo_model_sat ($eor_str-to-upper-len s1) false false) true true))
  )
)
(echo "smt-meta $eovc_str-to-upper-len")
; program: $eor_str-to-lower-from-int
(program $eor_str-to-lower-from-int ((n1 Int))
  :signature (Int) Bool
  (
  (($eor_str-to-lower-from-int n1) (eo::define ((_v0 (str.from_int n1))) (_ (= (str.to_lower _v0)) _v0)))
  )
)
; program: $eovc_str-to-lower-from-int
(program $eovc_str-to-lower-from-int ((n1 Int))
  :signature (Int) Bool
  (
  (($eovc_str-to-lower-from-int n1) ($eo_requires_eq ($eo_model_sat ($eor_str-to-lower-from-int n1) false false) true true))
  )
)
(echo "smt-meta $eovc_str-to-lower-from-int")
; program: $eor_str-to-upper-from-int
(program $eor_str-to-upper-from-int ((n1 Int))
  :signature (Int) Bool
  (
  (($eor_str-to-upper-from-int n1) (eo::define ((_v0 (str.from_int n1))) (_ (= (str.to_upper _v0)) _v0)))
  )
)
; program: $eovc_str-to-upper-from-int
(program $eovc_str-to-upper-from-int ((n1 Int))
  :signature (Int) Bool
  (
  (($eovc_str-to-upper-from-int n1) ($eo_requires_eq ($eo_model_sat ($eor_str-to-upper-from-int n1) false false) true true))
  )
)
(echo "smt-meta $eovc_str-to-upper-from-int")
; program: $eor_str-to-int-concat-neg-one.fev1
(program $eor_str-to-int-concat-neg-one.fev1 ((s3 (Seq Char)) (s2 (Seq Char)) (s1 (Seq Char)) ($eo_1 (Seq Char)))
  :signature ((Seq Char) (Seq Char) (Seq Char) (Seq Char)) Bool
  (
  (($eor_str-to-int-concat-neg-one.fev1 s3 s2 s1 $eo_1) (_ (= (str.to_int $eo_1)) -1))
  )
)
; program: $eor_str-to-int-concat-neg-one
(program $eor_str-to-int-concat-neg-one ((s1 (Seq Char)) (s2 (Seq Char)) (s3 (Seq Char)))
  :signature ((Seq Char) (Seq Char) (Seq Char) Bool) Bool
  (
  (($eor_str-to-int-concat-neg-one s1 s2 s3 (_ (= (str.to_int s2)) -1)) ($eor_str-to-int-concat-neg-one.fev1 s3 s2 s1 (eo::list_concat str.++ s1 (_ (str.++ s2) s3))))
  )
)
; program: $eovc_str-to-int-concat-neg-one
(program $eovc_str-to-int-concat-neg-one ((s1 (Seq Char)) (s3 (Seq Char)) (s2 (Seq Char)))
  :signature ((Seq Char) (Seq Char) (Seq Char)) Bool
  (
  (($eovc_str-to-int-concat-neg-one s2 s3 s1) (eo::define ((_v0 (_ (= (str.to_int s2)) -1))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-to-int-concat-neg-one s1 s2 s3 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_str-to-int-concat-neg-one")
; program: $eor_str-leq-empty
(program $eor_str-leq-empty ((s1 (Seq Char)))
  :signature ((Seq Char)) Bool
  (
  (($eor_str-leq-empty s1) (_ (= (_ (str.<= "") s1)) true))
  )
)
; program: $eovc_str-leq-empty
(program $eovc_str-leq-empty ((s1 (Seq Char)))
  :signature ((Seq Char)) Bool
  (
  (($eovc_str-leq-empty s1) ($eo_requires_eq ($eo_model_sat ($eor_str-leq-empty s1) false false) true true))
  )
)
(echo "smt-meta $eovc_str-leq-empty")
; program: $eor_str-leq-empty-eq
(program $eor_str-leq-empty-eq ((s1 (Seq Char)))
  :signature ((Seq Char)) Bool
  (
  (($eor_str-leq-empty-eq s1) (_ (= (_ (str.<= s1) "")) (_ (= s1) "")))
  )
)
; program: $eovc_str-leq-empty-eq
(program $eovc_str-leq-empty-eq ((s1 (Seq Char)))
  :signature ((Seq Char)) Bool
  (
  (($eovc_str-leq-empty-eq s1) ($eo_requires_eq ($eo_model_sat ($eor_str-leq-empty-eq s1) false false) true true))
  )
)
(echo "smt-meta $eovc_str-leq-empty-eq")
; program: $eor_str-leq-concat-false.fev1
(program $eor_str-leq-concat-false.fev1 ((s3 (Seq Char)) (s2 (Seq Char)) (s1 (Seq Char)) (t2 (Seq Char)) (t1 (Seq Char)) ($eo_2 (Seq Char)) ($eo_1 (Seq Char)))
  :signature ((Seq Char) (Seq Char) (Seq Char) (Seq Char) (Seq Char) (Seq Char) (Seq Char)) Bool
  (
  (($eor_str-leq-concat-false.fev1 s3 s2 s1 t2 t1 $eo_1 $eo_2) (_ (= (_ (str.<= $eo_2) $eo_1)) false))
  )
)
; program: $eor_str-leq-concat-false
(program $eor_str-leq-concat-false ((s2 (Seq Char)) (s3 (Seq Char)) (s1 (Seq Char)) (t1 (Seq Char)) (t2 (Seq Char)))
  :signature ((Seq Char) (Seq Char) (Seq Char) (Seq Char) (Seq Char) Bool Bool) Bool
  (
  (($eor_str-leq-concat-false s1 t1 s2 t2 s3 (_ (= (str.len t1)) (str.len s2)) (_ (= (_ (str.<= t1) s2)) false)) ($eor_str-leq-concat-false.fev1 s3 s2 s1 t2 t1 (eo::list_concat str.++ s1 (_ (str.++ s2) s3)) (eo::list_concat str.++ s1 (_ (str.++ t1) t2))))
  )
)
; program: $eovc_str-leq-concat-false
(program $eovc_str-leq-concat-false ((s1 (Seq Char)) (t2 (Seq Char)) (s3 (Seq Char)) (t1 (Seq Char)) (s2 (Seq Char)))
  :signature ((Seq Char) (Seq Char) (Seq Char) (Seq Char) (Seq Char)) Bool
  (
  (($eovc_str-leq-concat-false s2 t1 s3 t2 s1) (eo::define ((_v0 (_ (= (_ (str.<= t1) s2)) false))) (eo::define ((_v1 (_ (= (str.len t1)) (str.len s2)))) ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-leq-concat-false s1 t1 s2 t2 s3 _v1 _v0) false false) true true))))))
  )
)
(echo "smt-meta $eovc_str-leq-concat-false")
; program: $eor_str-leq-concat-true.fev1
(program $eor_str-leq-concat-true.fev1 ((s3 (Seq Char)) (s2 (Seq Char)) (s1 (Seq Char)) (t2 (Seq Char)) (t1 (Seq Char)) ($eo_2 (Seq Char)) ($eo_1 (Seq Char)))
  :signature ((Seq Char) (Seq Char) (Seq Char) (Seq Char) (Seq Char) (Seq Char) (Seq Char)) Bool
  (
  (($eor_str-leq-concat-true.fev1 s3 s2 s1 t2 t1 $eo_1 $eo_2) (_ (= (_ (str.<= $eo_2) $eo_1)) true))
  )
)
; program: $eor_str-leq-concat-true
(program $eor_str-leq-concat-true ((s2 (Seq Char)) (s3 (Seq Char)) (s1 (Seq Char)) (t1 (Seq Char)) (t2 (Seq Char)))
  :signature ((Seq Char) (Seq Char) (Seq Char) (Seq Char) (Seq Char) Bool Bool Bool) Bool
  (
  (($eor_str-leq-concat-true s1 t1 s2 t2 s3 (_ (= (str.len t1)) (str.len s2)) (_ (= (_ (= t1) s2)) false) (_ (= (_ (str.<= t1) s2)) true)) ($eor_str-leq-concat-true.fev1 s3 s2 s1 t2 t1 (eo::list_concat str.++ s1 (_ (str.++ s2) s3)) (eo::list_concat str.++ s1 (_ (str.++ t1) t2))))
  )
)
; program: $eovc_str-leq-concat-true
(program $eovc_str-leq-concat-true ((s1 (Seq Char)) (t2 (Seq Char)) (s3 (Seq Char)) (t1 (Seq Char)) (s2 (Seq Char)))
  :signature ((Seq Char) (Seq Char) (Seq Char) (Seq Char) (Seq Char)) Bool
  (
  (($eovc_str-leq-concat-true s2 t1 s3 t2 s1) (eo::define ((_v0 (_ (= (_ (str.<= t1) s2)) true))) (eo::define ((_v1 (_ (= (_ (= t1) s2)) false))) (eo::define ((_v2 (_ (= (str.len t1)) (str.len s2)))) ($eo_requires_eq ($eo_model_sat _v2 true false) true ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-leq-concat-true s1 t1 s2 t2 s3 _v2 _v1 _v0) false false) true true))))))))
  )
)
(echo "smt-meta $eovc_str-leq-concat-true")
; program: $eor_str-leq-concat-base-1
(program $eor_str-leq-concat-base-1 ((t2 (Seq Char)) (t1 (Seq Char)) (s1 (Seq Char)))
  :signature ((Seq Char) (Seq Char) (Seq Char) Bool Bool) Bool
  (
  (($eor_str-leq-concat-base-1 t1 t2 s1 (_ (= (str.len t1)) (str.len s1)) (_ (= (_ (= t1) s1)) false)) (_ (= (_ (str.<= (_ (str.++ t1) t2)) s1)) (_ (str.<= t1) s1)))
  )
)
; program: $eovc_str-leq-concat-base-1
(program $eovc_str-leq-concat-base-1 ((t2 (Seq Char)) (t1 (Seq Char)) (s1 (Seq Char)))
  :signature ((Seq Char) (Seq Char) (Seq Char)) Bool
  (
  (($eovc_str-leq-concat-base-1 s1 t1 t2) (eo::define ((_v0 (_ (= (_ (= t1) s1)) false))) (eo::define ((_v1 (_ (= (str.len t1)) (str.len s1)))) ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-leq-concat-base-1 t1 t2 s1 _v1 _v0) false false) true true))))))
  )
)
(echo "smt-meta $eovc_str-leq-concat-base-1")
; program: $eor_str-leq-concat-base-2
(program $eor_str-leq-concat-base-2 ((s2 (Seq Char)) (t1 (Seq Char)) (s1 (Seq Char)))
  :signature ((Seq Char) (Seq Char) (Seq Char) Bool Bool) Bool
  (
  (($eor_str-leq-concat-base-2 t1 s1 s2 (_ (= (str.len t1)) (str.len s1)) (_ (= (_ (= t1) s1)) false)) (eo::define ((_v0 (str.<= t1))) (_ (= (_ _v0 (_ (str.++ s1) s2))) (_ _v0 s1))))
  )
)
; program: $eovc_str-leq-concat-base-2
(program $eovc_str-leq-concat-base-2 ((s2 (Seq Char)) (t1 (Seq Char)) (s1 (Seq Char)))
  :signature ((Seq Char) (Seq Char) (Seq Char)) Bool
  (
  (($eovc_str-leq-concat-base-2 s1 t1 s2) (eo::define ((_v0 (_ (= (_ (= t1) s1)) false))) (eo::define ((_v1 (_ (= (str.len t1)) (str.len s1)))) ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-leq-concat-base-2 t1 s1 s2 _v1 _v0) false false) true true))))))
  )
)
(echo "smt-meta $eovc_str-leq-concat-base-2")
; program: $eor_str-lt-elim
(program $eor_str-lt-elim ((s1 (Seq Char)) (t1 (Seq Char)))
  :signature ((Seq Char) (Seq Char)) Bool
  (
  (($eor_str-lt-elim s1 t1) (_ (= (_ (str.< s1) t1)) (_ (and (not (_ (= s1) t1))) (_ (and (_ (str.<= s1) t1)) true))))
  )
)
; program: $eovc_str-lt-elim
(program $eovc_str-lt-elim ((s1 (Seq Char)) (t1 (Seq Char)))
  :signature ((Seq Char) (Seq Char)) Bool
  (
  (($eovc_str-lt-elim t1 s1) ($eo_requires_eq ($eo_model_sat ($eor_str-lt-elim s1 t1) false false) true true))
  )
)
(echo "smt-meta $eovc_str-lt-elim")
; program: $eor_str-from-int-no-ctn-nondigit
(program $eor_str-from-int-no-ctn-nondigit ((n1 Int) (s1 (Seq Char)))
  :signature (Int (Seq Char) Bool Bool) Bool
  (
  (($eor_str-from-int-no-ctn-nondigit n1 s1 (_ (= (_ (= s1) "")) false) (_ (= (str.to_int s1)) -1)) (_ (= (_ (str.contains (str.from_int n1)) s1)) false))
  )
)
; program: $eovc_str-from-int-no-ctn-nondigit
(program $eovc_str-from-int-no-ctn-nondigit ((n1 Int) (s1 (Seq Char)))
  :signature ((Seq Char) Int) Bool
  (
  (($eovc_str-from-int-no-ctn-nondigit s1 n1) (eo::define ((_v0 (_ (= (str.to_int s1)) -1))) (eo::define ((_v1 (_ (= (_ (= s1) "")) false))) ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-from-int-no-ctn-nondigit n1 s1 _v1 _v0) false false) true true))))))
  )
)
(echo "smt-meta $eovc_str-from-int-no-ctn-nondigit")
; program: $eor_str-substr-ctn-contra
(program $eor_str-substr-ctn-contra ((@T0 Type) (@T1 Type) (t1 (Seq @T0)) (n1 Int) (m1 Int) (s1 (Seq @T1)))
  :signature ((Seq @T0) (Seq @T1) Int Int Bool) Bool
  (
  (($eor_str-substr-ctn-contra t1 s1 n1 m1 (_ (= (_ (str.contains t1) s1)) false)) (_ (= (_ (str.contains (_ (_ (str.substr t1) n1) m1)) s1)) false))
  )
)
; program: $eovc_str-substr-ctn-contra
(program $eovc_str-substr-ctn-contra ((@T1 Type) (@T0 Type) (n1 Int) (m1 Int) (t1 (Seq @T0)) (s1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T0) Int Int) Bool
  (
  (($eovc_str-substr-ctn-contra s1 t1 m1 n1) (eo::define ((_v0 (_ (= (_ (str.contains t1) s1)) false))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-substr-ctn-contra t1 s1 n1 m1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_str-substr-ctn-contra")
; program: $eor_str-substr-ctn
(program $eor_str-substr-ctn ((@T0 Type) (s1 (Seq @T0)) (n1 Int) (m1 Int))
  :signature ((Seq @T0) Int Int) Bool
  (
  (($eor_str-substr-ctn s1 n1 m1) (_ (= (_ (str.contains s1) (_ (_ (str.substr s1) n1) m1))) true))
  )
)
; program: $eovc_str-substr-ctn
(program $eovc_str-substr-ctn ((@T0 Type) (s1 (Seq @T0)) (n1 Int) (m1 Int))
  :signature (Int Int (Seq @T0)) Bool
  (
  (($eovc_str-substr-ctn m1 n1 s1) ($eo_requires_eq ($eo_model_sat ($eor_str-substr-ctn s1 n1 m1) false false) true true))
  )
)
(echo "smt-meta $eovc_str-substr-ctn")
; program: $eor_str-replace-dual-ctn
(program $eor_str-replace-dual-ctn ((@T0 Type) (@T1 Type) (@T2 Type) (@T3 Type) (s1 (Seq @T0)) (t1 (Seq @T1)) (r1 (Seq @T2)) (u1 (Seq @T3)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) (Seq @T3) Bool Bool) Bool
  (
  (($eor_str-replace-dual-ctn s1 t1 r1 u1 (_ (= (_ (str.contains s1) u1)) true) (_ (= (_ (str.contains r1) u1)) true)) (_ (= (_ (str.contains (_ (_ (str.replace s1) t1) r1)) u1)) true))
  )
)
; program: $eovc_str-replace-dual-ctn
(program $eovc_str-replace-dual-ctn ((@T3 Type) (@T2 Type) (@T0 Type) (@T1 Type) (t1 (Seq @T1)) (s1 (Seq @T0)) (r1 (Seq @T2)) (u1 (Seq @T3)))
  :signature ((Seq @T3) (Seq @T2) (Seq @T0) (Seq @T1)) Bool
  (
  (($eovc_str-replace-dual-ctn u1 r1 s1 t1) (eo::define ((_v0 (_ (= (_ (str.contains r1) u1)) true))) (eo::define ((_v1 (_ (= (_ (str.contains s1) u1)) true))) ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-replace-dual-ctn s1 t1 r1 u1 _v1 _v0) false false) true true))))))
  )
)
(echo "smt-meta $eovc_str-replace-dual-ctn")
; program: $eor_str-replace-dual-ctn-false
(program $eor_str-replace-dual-ctn-false ((@T0 Type) (@T1 Type) (@T2 Type) (@T3 Type) (s1 (Seq @T0)) (t1 (Seq @T1)) (r1 (Seq @T2)) (u1 (Seq @T3)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) (Seq @T3) Bool Bool) Bool
  (
  ((eo::define ((_v0 (str.contains s1))) ($eor_str-replace-dual-ctn-false s1 t1 r1 u1 (_ (= (_ _v0 t1)) false) (_ (= (_ _v0 u1)) false))) (_ (= (_ (str.contains s1) (_ (_ (str.replace t1) r1) u1))) false))
  )
)
; program: $eovc_str-replace-dual-ctn-false
(program $eovc_str-replace-dual-ctn-false ((@T3 Type) (@T0 Type) (@T1 Type) (@T2 Type) (r1 (Seq @T2)) (t1 (Seq @T1)) (s1 (Seq @T0)) (u1 (Seq @T3)))
  :signature ((Seq @T3) (Seq @T0) (Seq @T1) (Seq @T2)) Bool
  (
  (($eovc_str-replace-dual-ctn-false u1 s1 t1 r1) (eo::define ((_v0 (str.contains s1))) (eo::define ((_v1 (_ (= (_ _v0 u1)) false))) (eo::define ((_v2 (_ (= (_ _v0 t1)) false))) ($eo_requires_eq ($eo_model_sat _v2 true false) true ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-replace-dual-ctn-false s1 t1 r1 u1 _v2 _v1) false false) true true)))))))
  )
)
(echo "smt-meta $eovc_str-replace-dual-ctn-false")
; program: $eor_str-replace-self-ctn-simp
(program $eor_str-replace-self-ctn-simp ((@T0 Type) (@T1 Type) (s1 (Seq @T0)) (t1 (Seq @T1)))
  :signature ((Seq @T0) (Seq @T1)) Bool
  (
  (($eor_str-replace-self-ctn-simp s1 t1) (eo::define ((_v0 (str.contains s1))) (_ (= (_ _v0 (_ (_ (str.replace t1) s1) t1))) (_ _v0 t1))))
  )
)
; program: $eovc_str-replace-self-ctn-simp
(program $eovc_str-replace-self-ctn-simp ((@T1 Type) (@T0 Type) (s1 (Seq @T0)) (t1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-replace-self-ctn-simp t1 s1) ($eo_requires_eq ($eo_model_sat ($eor_str-replace-self-ctn-simp s1 t1) false false) true true))
  )
)
(echo "smt-meta $eovc_str-replace-self-ctn-simp")
; program: $eor_str-replace-emp-ctn-src.fev1
(program $eor_str-replace-emp-ctn-src.fev1 ((@T1 Type) (@T2 Type) (@T0 Type) ($ex_1 (Seq @T0)) ($eo_2 Bool) (emp1 (Seq @T2)) (s1 (Seq @T0)) (t1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T0) (Seq @T2) Type (Seq @T0) Bool Bool) Bool
  (
  (($eor_str-replace-emp-ctn-src.fev1 t1 s1 emp1 @T0 $ex_1 $eo_2 $eo_2) (eo::define ((_v0 (_ (_ (str.replace emp1) s1) t1))) (_ (= (_ (str.contains s1) _v0)) (_ (= emp1) _v0))))
  )
)
; program: $eor_str-replace-emp-ctn-src
(program $eor_str-replace-emp-ctn-src ((@T1 Type) (@T2 Type) (t1 (Seq @T1)) (@T0 Type) (s1 (Seq @T0)) (emp1 (Seq @T2)) ($ex_1 (Seq @T0)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) Type Bool) Bool
  (
  (($eor_str-replace-emp-ctn-src s1 t1 emp1 (Seq @T0) (_ (= emp1) $ex_1)) ($eor_str-replace-emp-ctn-src.fev1 t1 s1 emp1 @T0 $ex_1 $ex_1 ($seq_empty (Seq @T0))))
  )
)
; program: $eovc_str-replace-emp-ctn-src.fev1
(program $eovc_str-replace-emp-ctn-src.fev1 ((@T2 Type) (@T1 Type) (@T0 Type) (s1 (Seq @T0)) (t1 (Seq @T1)) (emp1 (Seq @T2)) ($eo_1 (Seq @T0)))
  :signature (Type (Seq @T2) (Seq @T1) (Seq @T0) (Seq @T0)) Bool
  (
  (($eovc_str-replace-emp-ctn-src.fev1 @T0 emp1 t1 s1 $eo_1) (eo::define ((_v0 (_ (= emp1) $eo_1))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-replace-emp-ctn-src s1 t1 emp1 (Seq @T0) _v0) false false) true true))))
  )
)
; program: $eovc_str-replace-emp-ctn-src
(program $eovc_str-replace-emp-ctn-src ((@T2 Type) (@T1 Type) (emp1 (Seq @T2)) (t1 (Seq @T1)) (@T0 Type) (s1 (Seq @T0)))
  :signature (Type (Seq @T2) (Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-replace-emp-ctn-src @T0 emp1 t1 s1) ($eovc_str-replace-emp-ctn-src.fev1 @T0 emp1 t1 s1 ($seq_empty (Seq @T0))))
  )
)
(echo "smt-meta $eovc_str-replace-emp-ctn-src")
; program: $eor_str-substr-char-start-eq-len.fev1
(program $eor_str-substr-char-start-eq-len.fev1 ((@T0 Type) (x1 (Seq @T0)) (n1 Int) ($eo_1 (Seq @T0)))
  :signature (Type Int (Seq @T0) (Seq @T0)) Bool
  (
  (($eor_str-substr-char-start-eq-len.fev1 @T0 n1 x1 $eo_1) (_ (= (_ (_ (str.substr x1) n1) n1)) $eo_1))
  )
)
; program: $eor_str-substr-char-start-eq-len
(program $eor_str-substr-char-start-eq-len ((n1 Int) (@T0 Type) (x1 (Seq @T0)))
  :signature ((Seq @T0) Int Type Bool) Bool
  (
  (($eor_str-substr-char-start-eq-len x1 n1 (Seq @T0) (_ (= (_ (>= 1) (str.len x1))) true)) ($eor_str-substr-char-start-eq-len.fev1 @T0 n1 x1 ($seq_empty (Seq @T0))))
  )
)
; program: $eovc_str-substr-char-start-eq-len
(program $eovc_str-substr-char-start-eq-len ((n1 Int) (@T0 Type) (x1 (Seq @T0)))
  :signature ((Seq @T0) Type Int) Bool
  (
  (($eovc_str-substr-char-start-eq-len x1 @T0 n1) (eo::define ((_v0 (_ (= (_ (>= 1) (str.len x1))) true))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-substr-char-start-eq-len x1 n1 (Seq @T0) _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_str-substr-char-start-eq-len")
; program: $eor_str-contains-repl-char
(program $eor_str-contains-repl-char ((@T0 Type) (@T1 Type) (@T2 Type) (@T3 Type) (x1 (Seq @T0)) (y1 (Seq @T1)) (z1 (Seq @T2)) (w1 (Seq @T3)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) (Seq @T3) Bool Bool) Bool
  (
  (($eor_str-contains-repl-char x1 y1 z1 w1 (_ (= (str.len w1)) 1) (_ (= (_ (str.contains w1) y1)) false)) (eo::define ((_v0 (str.contains x1))) (_ (= (_ (str.contains (_ (_ (str.replace x1) y1) z1)) w1)) (_ (or (_ _v0 w1)) (_ (or (_ (and (_ _v0 y1)) (_ (and (_ (str.contains z1) w1)) true))) false)))))
  )
)
; program: $eovc_str-contains-repl-char
(program $eovc_str-contains-repl-char ((@T1 Type) (@T3 Type) (@T2 Type) (@T0 Type) (x1 (Seq @T0)) (z1 (Seq @T2)) (w1 (Seq @T3)) (y1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T3) (Seq @T2) (Seq @T0)) Bool
  (
  (($eovc_str-contains-repl-char y1 w1 z1 x1) (eo::define ((_v0 (_ (= (_ (str.contains w1) y1)) false))) (eo::define ((_v1 (_ (= (str.len w1)) 1))) ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-contains-repl-char x1 y1 z1 w1 _v1 _v0) false false) true true))))))
  )
)
(echo "smt-meta $eovc_str-contains-repl-char")
; program: $eor_str-contains-repl-self-tgt-char
(program $eor_str-contains-repl-self-tgt-char ((@T0 Type) (@T1 Type) (@T2 Type) (y1 (Seq @T1)) (x1 (Seq @T0)) (w1 (Seq @T2)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) Bool) Bool
  (
  (($eor_str-contains-repl-self-tgt-char x1 y1 w1 (_ (= (str.len w1)) 1)) (_ (= (_ (str.contains (_ (_ (str.replace x1) y1) x1)) w1)) (_ (str.contains x1) w1)))
  )
)
; program: $eovc_str-contains-repl-self-tgt-char
(program $eovc_str-contains-repl-self-tgt-char ((@T2 Type) (@T1 Type) (@T0 Type) (x1 (Seq @T0)) (y1 (Seq @T1)) (w1 (Seq @T2)))
  :signature ((Seq @T2) (Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-contains-repl-self-tgt-char w1 y1 x1) (eo::define ((_v0 (_ (= (str.len w1)) 1))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-contains-repl-self-tgt-char x1 y1 w1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_str-contains-repl-self-tgt-char")
; program: $eor_str-contains-repl-self
(program $eor_str-contains-repl-self ((@T0 Type) (@T1 Type) (x1 (Seq @T0)) (y1 (Seq @T1)))
  :signature ((Seq @T0) (Seq @T1)) Bool
  (
  (($eor_str-contains-repl-self x1 y1) (_ (= (_ (str.contains (_ (_ (str.replace x1) y1) x1)) y1)) (_ (str.contains x1) y1)))
  )
)
; program: $eovc_str-contains-repl-self
(program $eovc_str-contains-repl-self ((@T1 Type) (@T0 Type) (x1 (Seq @T0)) (y1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-contains-repl-self y1 x1) ($eo_requires_eq ($eo_model_sat ($eor_str-contains-repl-self x1 y1) false false) true true))
  )
)
(echo "smt-meta $eovc_str-contains-repl-self")
; program: $eor_str-contains-repl-tgt
(program $eor_str-contains-repl-tgt ((@T0 Type) (@T1 Type) (@T2 Type) (y1 (Seq @T1)) (x1 (Seq @T0)) (z1 (Seq @T2)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2)) Bool
  (
  (($eor_str-contains-repl-tgt x1 y1 z1) (eo::define ((_v0 (str.contains x1))) (_ (= (_ (str.contains (_ (_ (str.replace x1) y1) z1)) z1)) (_ (or (_ _v0 y1)) (_ (or (_ _v0 z1)) false)))))
  )
)
; program: $eovc_str-contains-repl-tgt
(program $eovc_str-contains-repl-tgt ((@T2 Type) (@T1 Type) (@T0 Type) (x1 (Seq @T0)) (y1 (Seq @T1)) (z1 (Seq @T2)))
  :signature ((Seq @T2) (Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-contains-repl-tgt z1 y1 x1) ($eo_requires_eq ($eo_model_sat ($eor_str-contains-repl-tgt x1 y1 z1) false false) true true))
  )
)
(echo "smt-meta $eovc_str-contains-repl-tgt")
; program: $eor_str-repl-repl-len-id
(program $eor_str-repl-repl-len-id ((@T0 Type) (@T1 Type) (y1 (Seq @T1)) (x1 (Seq @T0)))
  :signature ((Seq @T0) (Seq @T1) Bool) Bool
  (
  (($eor_str-repl-repl-len-id x1 y1 (_ (= (_ (>= (str.len y1)) (str.len x1))) true)) (_ (= (_ (_ (str.replace x1) y1) x1)) x1))
  )
)
; program: $eovc_str-repl-repl-len-id
(program $eovc_str-repl-repl-len-id ((@T0 Type) (@T1 Type) (y1 (Seq @T1)) (x1 (Seq @T0)))
  :signature ((Seq @T0) (Seq @T1)) Bool
  (
  (($eovc_str-repl-repl-len-id x1 y1) (eo::define ((_v0 (_ (= (_ (>= (str.len y1)) (str.len x1))) true))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-repl-repl-len-id x1 y1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_str-repl-repl-len-id")
; program: $eor_str-repl-repl-src-tgt-no-ctn
(program $eor_str-repl-repl-src-tgt-no-ctn ((@T0 Type) (@T1 Type) (@T2 Type) (@T3 Type) (y1 (Seq @T1)) (x1 (Seq @T0)) (w1 (Seq @T3)) (z1 (Seq @T2)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) (Seq @T3) Bool) Bool
  (
  (($eor_str-repl-repl-src-tgt-no-ctn x1 y1 z1 w1 (_ (= (_ (str.contains z1) w1)) false)) (eo::define ((_v0 (_ (str.replace x1) w1))) (_ (= (_ _v0 (_ (_ (str.replace z1) x1) y1))) (_ _v0 z1))))
  )
)
; program: $eovc_str-repl-repl-src-tgt-no-ctn
(program $eovc_str-repl-repl-src-tgt-no-ctn ((@T3 Type) (@T2 Type) (@T1 Type) (@T0 Type) (x1 (Seq @T0)) (y1 (Seq @T1)) (z1 (Seq @T2)) (w1 (Seq @T3)))
  :signature ((Seq @T3) (Seq @T2) (Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-repl-repl-src-tgt-no-ctn w1 z1 y1 x1) (eo::define ((_v0 (_ (= (_ (str.contains z1) w1)) false))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-repl-repl-src-tgt-no-ctn x1 y1 z1 w1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_str-repl-repl-src-tgt-no-ctn")
; program: $eor_str-repl-repl-tgt-self
(program $eor_str-repl-repl-tgt-self ((@T0 Type) (@T1 Type) (y1 (Seq @T1)) (x1 (Seq @T0)))
  :signature ((Seq @T0) (Seq @T1)) Bool
  (
  (($eor_str-repl-repl-tgt-self x1 y1) (_ (= (_ (_ (str.replace x1) y1) (_ (_ (str.replace y1) x1) y1))) x1))
  )
)
; program: $eovc_str-repl-repl-tgt-self
(program $eovc_str-repl-repl-tgt-self ((@T1 Type) (@T0 Type) (x1 (Seq @T0)) (y1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-repl-repl-tgt-self y1 x1) ($eo_requires_eq ($eo_model_sat ($eor_str-repl-repl-tgt-self x1 y1) false false) true true))
  )
)
(echo "smt-meta $eovc_str-repl-repl-tgt-self")
; program: $eor_str-repl-repl-tgt-no-ctn
(program $eor_str-repl-repl-tgt-no-ctn ((@T0 Type) (@T1 Type) (@T2 Type) (@T3 Type) (y1 (Seq @T1)) (z1 (Seq @T2)) (w1 (Seq @T3)) (x1 (Seq @T0)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) (Seq @T3) Bool) Bool
  (
  (($eor_str-repl-repl-tgt-no-ctn x1 y1 z1 w1 (_ (= (_ (str.contains x1) z1)) false)) (_ (= (_ (_ (str.replace x1) y1) (_ (_ (str.replace y1) z1) w1))) x1))
  )
)
; program: $eovc_str-repl-repl-tgt-no-ctn
(program $eovc_str-repl-repl-tgt-no-ctn ((@T2 Type) (@T0 Type) (@T3 Type) (@T1 Type) (y1 (Seq @T1)) (w1 (Seq @T3)) (x1 (Seq @T0)) (z1 (Seq @T2)))
  :signature ((Seq @T2) (Seq @T0) (Seq @T3) (Seq @T1)) Bool
  (
  (($eovc_str-repl-repl-tgt-no-ctn z1 x1 w1 y1) (eo::define ((_v0 (_ (= (_ (str.contains x1) z1)) false))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-repl-repl-tgt-no-ctn x1 y1 z1 w1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_str-repl-repl-tgt-no-ctn")
; program: $eor_str-repl-repl-src-self
(program $eor_str-repl-repl-src-self ((@T0 Type) (@T1 Type) (@T2 Type) (x1 (Seq @T0)) (y1 (Seq @T1)) (z1 (Seq @T2)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2)) Bool
  (
  (($eor_str-repl-repl-src-self x1 y1 z1) (eo::define ((_v0 (str.replace x1))) (_ (= (_ (_ _v0 (_ (_ (str.replace y1) x1) y1)) z1)) (_ (_ _v0 y1) z1))))
  )
)
; program: $eovc_str-repl-repl-src-self
(program $eovc_str-repl-repl-src-self ((@T2 Type) (@T1 Type) (@T0 Type) (x1 (Seq @T0)) (y1 (Seq @T1)) (z1 (Seq @T2)))
  :signature ((Seq @T2) (Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-repl-repl-src-self z1 y1 x1) ($eo_requires_eq ($eo_model_sat ($eor_str-repl-repl-src-self x1 y1 z1) false false) true true))
  )
)
(echo "smt-meta $eovc_str-repl-repl-src-self")
; program: $eor_str-repl-repl-src-inv-no-ctn1
(program $eor_str-repl-repl-src-inv-no-ctn1 ((@T0 Type) (@T1 Type) (@T2 Type) (z1 (Seq @T2)) (x1 (Seq @T0)) (y1 (Seq @T1)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) Bool) Bool
  (
  (($eor_str-repl-repl-src-inv-no-ctn1 x1 y1 z1 (_ (= (_ (str.contains y1) z1)) false)) (eo::define ((_v0 (str.replace x1))) (_ (= (_ (_ _v0 (_ (_ (str.replace y1) x1) z1)) y1)) (_ (_ _v0 y1) y1))))
  )
)
; program: $eovc_str-repl-repl-src-inv-no-ctn1
(program $eovc_str-repl-repl-src-inv-no-ctn1 ((@T2 Type) (@T1 Type) (@T0 Type) (x1 (Seq @T0)) (y1 (Seq @T1)) (z1 (Seq @T2)))
  :signature ((Seq @T2) (Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-repl-repl-src-inv-no-ctn1 z1 y1 x1) (eo::define ((_v0 (_ (= (_ (str.contains y1) z1)) false))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-repl-repl-src-inv-no-ctn1 x1 y1 z1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_str-repl-repl-src-inv-no-ctn1")
; program: $eor_str-repl-repl-src-inv-no-ctn2
(program $eor_str-repl-repl-src-inv-no-ctn2 ((@T0 Type) (@T1 Type) (@T2 Type) (z1 (Seq @T2)) (y1 (Seq @T1)) (x1 (Seq @T0)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) Bool) Bool
  (
  (($eor_str-repl-repl-src-inv-no-ctn2 x1 y1 z1 (_ (= (_ (str.contains y1) z1)) false)) (eo::define ((_v0 (str.replace x1))) (_ (= (_ (_ _v0 (_ (_ (str.replace y1) x1) z1)) x1)) (_ (_ _v0 y1) x1))))
  )
)
; program: $eovc_str-repl-repl-src-inv-no-ctn2
(program $eovc_str-repl-repl-src-inv-no-ctn2 ((@T2 Type) (@T1 Type) (@T0 Type) (x1 (Seq @T0)) (y1 (Seq @T1)) (z1 (Seq @T2)))
  :signature ((Seq @T2) (Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-repl-repl-src-inv-no-ctn2 z1 y1 x1) (eo::define ((_v0 (_ (= (_ (str.contains y1) z1)) false))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-repl-repl-src-inv-no-ctn2 x1 y1 z1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_str-repl-repl-src-inv-no-ctn2")
; program: $eor_str-repl-repl-src-inv-no-ctn3
(program $eor_str-repl-repl-src-inv-no-ctn3 ((@T0 Type) (@T1 Type) (@T2 Type) (@T3 Type) (@T4 Type) (z1 (Seq @T2)) (w1 (Seq @T3)) (x1 (Seq @T0)) (y1 (Seq @T1)) (u1 (Seq @T4)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) (Seq @T3) (Seq @T4) Bool Bool) Bool
  (
  ((eo::define ((_v0 (str.contains x1))) ($eor_str-repl-repl-src-inv-no-ctn3 x1 y1 z1 w1 u1 (_ (= (_ _v0 z1)) false) (_ (= (_ _v0 w1)) false))) (eo::define ((_v0 (str.replace x1))) (_ (= (_ (_ _v0 (_ (_ (str.replace y1) z1) w1)) u1)) (_ (_ _v0 y1) u1))))
  )
)
; program: $eovc_str-repl-repl-src-inv-no-ctn3
(program $eovc_str-repl-repl-src-inv-no-ctn3 ((@T3 Type) (@T0 Type) (@T2 Type) (@T4 Type) (@T1 Type) (y1 (Seq @T1)) (u1 (Seq @T4)) (z1 (Seq @T2)) (x1 (Seq @T0)) (w1 (Seq @T3)))
  :signature ((Seq @T3) (Seq @T0) (Seq @T2) (Seq @T4) (Seq @T1)) Bool
  (
  (($eovc_str-repl-repl-src-inv-no-ctn3 w1 x1 z1 u1 y1) (eo::define ((_v0 (str.contains x1))) (eo::define ((_v1 (_ (= (_ _v0 w1)) false))) (eo::define ((_v2 (_ (= (_ _v0 z1)) false))) ($eo_requires_eq ($eo_model_sat _v2 true false) true ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-repl-repl-src-inv-no-ctn3 x1 y1 z1 w1 u1 _v2 _v1) false false) true true)))))))
  )
)
(echo "smt-meta $eovc_str-repl-repl-src-inv-no-ctn3")
; program: $eor_str-repl-repl-dual-self
(program $eor_str-repl-repl-dual-self ((@T0 Type) (@T1 Type) (y1 (Seq @T1)) (x1 (Seq @T0)))
  :signature ((Seq @T0) (Seq @T1)) Bool
  (
  (($eor_str-repl-repl-dual-self x1 y1) (eo::define ((_v0 (str.replace x1))) (_ (= (_ (_ _v0 (_ (_ _v0 y1) x1)) x1)) x1)))
  )
)
; program: $eovc_str-repl-repl-dual-self
(program $eovc_str-repl-repl-dual-self ((@T1 Type) (@T0 Type) (x1 (Seq @T0)) (y1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-repl-repl-dual-self y1 x1) ($eo_requires_eq ($eo_model_sat ($eor_str-repl-repl-dual-self x1 y1) false false) true true))
  )
)
(echo "smt-meta $eovc_str-repl-repl-dual-self")
; program: $eor_str-repl-repl-dual-ite1
(program $eor_str-repl-repl-dual-ite1 ((@T0 Type) (@T1 Type) (@T2 Type) (@T3 Type) (z1 (Seq @T2)) (y1 (Seq @T1)) (x1 (Seq @T0)) (w1 (Seq @T3)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) (Seq @T3) Bool) Bool
  (
  (($eor_str-repl-repl-dual-ite1 x1 y1 z1 w1 (_ (= (_ (str.contains x1) z1)) false)) (eo::define ((_v0 (str.replace x1))) (_ (= (_ (_ _v0 (_ (_ _v0 y1) z1)) w1)) (_ (_ (ite (_ (str.contains x1) y1)) x1) w1))))
  )
)
; program: $eovc_str-repl-repl-dual-ite1
(program $eovc_str-repl-repl-dual-ite1 ((@T2 Type) (@T0 Type) (@T3 Type) (@T1 Type) (y1 (Seq @T1)) (w1 (Seq @T3)) (x1 (Seq @T0)) (z1 (Seq @T2)))
  :signature ((Seq @T2) (Seq @T0) (Seq @T3) (Seq @T1)) Bool
  (
  (($eovc_str-repl-repl-dual-ite1 z1 x1 w1 y1) (eo::define ((_v0 (_ (= (_ (str.contains x1) z1)) false))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-repl-repl-dual-ite1 x1 y1 z1 w1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_str-repl-repl-dual-ite1")
; program: $eor_str-repl-repl-dual-ite2
(program $eor_str-repl-repl-dual-ite2 ((@T0 Type) (@T1 Type) (@T2 Type) (@T3 Type) (z1 (Seq @T2)) (y1 (Seq @T1)) (x1 (Seq @T0)) (w1 (Seq @T3)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) (Seq @T3) Bool Bool) Bool
  (
  (($eor_str-repl-repl-dual-ite2 x1 y1 z1 w1 (_ (= (_ (str.contains y1) z1)) false) (_ (= (_ (str.contains z1) y1)) false)) (eo::define ((_v0 (str.replace x1))) (_ (= (_ (_ _v0 (_ (_ _v0 y1) z1)) w1)) (_ (_ (ite (_ (str.contains x1) y1)) x1) w1))))
  )
)
; program: $eovc_str-repl-repl-dual-ite2
(program $eovc_str-repl-repl-dual-ite2 ((@T1 Type) (@T2 Type) (@T3 Type) (@T0 Type) (x1 (Seq @T0)) (w1 (Seq @T3)) (z1 (Seq @T2)) (y1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T2) (Seq @T3) (Seq @T0)) Bool
  (
  (($eovc_str-repl-repl-dual-ite2 y1 z1 w1 x1) (eo::define ((_v0 (_ (= (_ (str.contains z1) y1)) false))) (eo::define ((_v1 (_ (= (_ (str.contains y1) z1)) false))) ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-repl-repl-dual-ite2 x1 y1 z1 w1 _v1 _v0) false false) true true))))))
  )
)
(echo "smt-meta $eovc_str-repl-repl-dual-ite2")
; program: $eor_str-repl-repl-lookahead-id-simp
(program $eor_str-repl-repl-lookahead-id-simp ((@T0 Type) (@T1 Type) (@T2 Type) (w1 (Seq @T2)) (y1 (Seq @T0)) (z1 (Seq @T1)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) Bool Bool) Bool
  (
  (($eor_str-repl-repl-lookahead-id-simp y1 z1 w1 (_ (= (_ (= w1) z1)) false) (_ (= (_ (>= (str.len w1)) (str.len z1))) true)) (eo::define ((_v0 (_ (str.replace y1) w1))) (_ (= (_ (_ (str.replace (_ _v0 y1)) y1) z1)) (_ (_ (str.replace (_ _v0 z1)) y1) z1))))
  )
)
; program: $eovc_str-repl-repl-lookahead-id-simp
(program $eovc_str-repl-repl-lookahead-id-simp ((@T1 Type) (@T2 Type) (@T0 Type) (y1 (Seq @T0)) (w1 (Seq @T2)) (z1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T2) (Seq @T0)) Bool
  (
  (($eovc_str-repl-repl-lookahead-id-simp z1 w1 y1) (eo::define ((_v0 (_ (= (_ (>= (str.len w1)) (str.len z1))) true))) (eo::define ((_v1 (_ (= (_ (= w1) z1)) false))) ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-repl-repl-lookahead-id-simp y1 z1 w1 _v1 _v0) false false) true true))))))
  )
)
(echo "smt-meta $eovc_str-repl-repl-lookahead-id-simp")
; program: $eor_re-all-elim
(program $eor_re-all-elim (($etmp Bool))
  :signature (Bool) Bool
  (
  (($eor_re-all-elim $etmp) (_ (= re.all) (re.* re.allchar)))
  )
)
; program: $eovc_re-all-elim
(program $eovc_re-all-elim (($etmp Bool))
  :signature (Bool) Bool
  (
  (($eovc_re-all-elim $etmp) ($eo_requires_eq ($eo_model_sat ($eor_re-all-elim $etmp) false false) true true))
  )
)
(echo "smt-meta $eovc_re-all-elim")
; program: $eor_re-opt-elim
(program $eor_re-opt-elim ((x1 RegLan))
  :signature (RegLan) Bool
  (
  (($eor_re-opt-elim x1) (_ (= (re.opt x1)) (_ (re.union (str.to_re "")) (_ (re.union x1) re.none))))
  )
)
; program: $eovc_re-opt-elim
(program $eovc_re-opt-elim ((x1 RegLan))
  :signature (RegLan) Bool
  (
  (($eovc_re-opt-elim x1) ($eo_requires_eq ($eo_model_sat ($eor_re-opt-elim x1) false false) true true))
  )
)
(echo "smt-meta $eovc_re-opt-elim")
; program: $eor_re-diff-elim
(program $eor_re-diff-elim ((x1 RegLan) (y1 RegLan))
  :signature (RegLan RegLan) Bool
  (
  (($eor_re-diff-elim x1 y1) (_ (= (_ (re.diff x1) y1)) (_ (re.inter x1) (_ (re.inter (re.comp y1)) re.all))))
  )
)
; program: $eovc_re-diff-elim
(program $eovc_re-diff-elim ((x1 RegLan) (y1 RegLan))
  :signature (RegLan RegLan) Bool
  (
  (($eovc_re-diff-elim y1 x1) ($eo_requires_eq ($eo_model_sat ($eor_re-diff-elim x1 y1) false false) true true))
  )
)
(echo "smt-meta $eovc_re-diff-elim")
; program: $eor_re-plus-elim
(program $eor_re-plus-elim ((x1 RegLan))
  :signature (RegLan) Bool
  (
  (($eor_re-plus-elim x1) (_ (= (re.+ x1)) (_ (re.++ x1) (_ (re.++ (re.* x1)) (str.to_re "")))))
  )
)
; program: $eovc_re-plus-elim
(program $eovc_re-plus-elim ((x1 RegLan))
  :signature (RegLan) Bool
  (
  (($eovc_re-plus-elim x1) ($eo_requires_eq ($eo_model_sat ($eor_re-plus-elim x1) false false) true true))
  )
)
(echo "smt-meta $eovc_re-plus-elim")
; program: $eor_re-concat-star-swap.fev1
(program $eor_re-concat-star-swap.fev1 ((ys1 RegLan) (r1 RegLan) (xs1 RegLan) ($eo_2 RegLan) ($eo_1 RegLan))
  :signature (RegLan RegLan RegLan RegLan RegLan) Bool
  (
  (($eor_re-concat-star-swap.fev1 ys1 r1 xs1 $eo_1 $eo_2) (_ (= $eo_2) $eo_1))
  )
)
; program: $eor_re-concat-star-swap
(program $eor_re-concat-star-swap ((xs1 RegLan) (r1 RegLan) (ys1 RegLan))
  :signature (RegLan RegLan RegLan) Bool
  (
  (($eor_re-concat-star-swap xs1 r1 ys1) (eo::define ((_v0 (re.++ r1))) (eo::define ((_v1 (re.++ (re.* r1)))) ($eor_re-concat-star-swap.fev1 ys1 r1 xs1 (eo::list_concat re.++ xs1 (_ _v0 (_ _v1 ys1))) (eo::list_concat re.++ xs1 (_ _v1 (_ _v0 ys1)))))))
  )
)
; program: $eovc_re-concat-star-swap
(program $eovc_re-concat-star-swap ((xs1 RegLan) (r1 RegLan) (ys1 RegLan))
  :signature (RegLan RegLan RegLan) Bool
  (
  (($eovc_re-concat-star-swap ys1 r1 xs1) ($eo_requires_eq ($eo_model_sat ($eor_re-concat-star-swap xs1 r1 ys1) false false) true true))
  )
)
(echo "smt-meta $eovc_re-concat-star-swap")
; program: $eor_re-concat-star-repeat.fev1
(program $eor_re-concat-star-repeat.fev1 ((ys1 RegLan) (r1 RegLan) (xs1 RegLan) ($eo_2 RegLan) ($eo_1 RegLan))
  :signature (RegLan RegLan RegLan RegLan RegLan) Bool
  (
  (($eor_re-concat-star-repeat.fev1 ys1 r1 xs1 $eo_1 $eo_2) (_ (= $eo_2) $eo_1))
  )
)
; program: $eor_re-concat-star-repeat
(program $eor_re-concat-star-repeat ((xs1 RegLan) (r1 RegLan) (ys1 RegLan))
  :signature (RegLan RegLan RegLan) Bool
  (
  (($eor_re-concat-star-repeat xs1 r1 ys1) (eo::define ((_v0 (re.++ (re.* r1)))) (eo::define ((_v1 (_ _v0 ys1))) ($eor_re-concat-star-repeat.fev1 ys1 r1 xs1 ($singleton_elim (eo::list_concat re.++ xs1 _v1)) (eo::list_concat re.++ xs1 (_ _v0 _v1))))))
  )
)
; program: $eovc_re-concat-star-repeat
(program $eovc_re-concat-star-repeat ((xs1 RegLan) (r1 RegLan) (ys1 RegLan))
  :signature (RegLan RegLan RegLan) Bool
  (
  (($eovc_re-concat-star-repeat ys1 r1 xs1) ($eo_requires_eq ($eo_model_sat ($eor_re-concat-star-repeat xs1 r1 ys1) false false) true true))
  )
)
(echo "smt-meta $eovc_re-concat-star-repeat")
; program: $eor_re-concat-star-subsume1.fev1
(program $eor_re-concat-star-subsume1.fev1 ((ys1 RegLan) (xs1 RegLan) (r1 RegLan) ($eo_2 RegLan) ($eo_1 RegLan))
  :signature (RegLan RegLan RegLan RegLan RegLan) Bool
  (
  (($eor_re-concat-star-subsume1.fev1 ys1 xs1 r1 $eo_1 $eo_2) (_ (= $eo_2) $eo_1))
  )
)
; program: $eor_re-concat-star-subsume1
(program $eor_re-concat-star-subsume1 ((xs1 RegLan) (r1 RegLan) (ys1 RegLan))
  :signature (RegLan RegLan RegLan) Bool
  (
  (($eor_re-concat-star-subsume1 xs1 r1 ys1) (eo::define ((_v0 (_ (re.++ (re.* re.allchar)) ys1))) ($eor_re-concat-star-subsume1.fev1 ys1 xs1 r1 ($singleton_elim (eo::list_concat re.++ xs1 _v0)) (eo::list_concat re.++ xs1 (_ (re.++ (re.* r1)) _v0)))))
  )
)
; program: $eovc_re-concat-star-subsume1
(program $eovc_re-concat-star-subsume1 ((xs1 RegLan) (r1 RegLan) (ys1 RegLan))
  :signature (RegLan RegLan RegLan) Bool
  (
  (($eovc_re-concat-star-subsume1 ys1 r1 xs1) ($eo_requires_eq ($eo_model_sat ($eor_re-concat-star-subsume1 xs1 r1 ys1) false false) true true))
  )
)
(echo "smt-meta $eovc_re-concat-star-subsume1")
; program: $eor_re-concat-star-subsume2.fev1
(program $eor_re-concat-star-subsume2.fev1 ((ys1 RegLan) (xs1 RegLan) (r1 RegLan) ($eo_2 RegLan) ($eo_1 RegLan))
  :signature (RegLan RegLan RegLan RegLan RegLan) Bool
  (
  (($eor_re-concat-star-subsume2.fev1 ys1 xs1 r1 $eo_1 $eo_2) (_ (= $eo_2) $eo_1))
  )
)
; program: $eor_re-concat-star-subsume2
(program $eor_re-concat-star-subsume2 ((xs1 RegLan) (r1 RegLan) (ys1 RegLan))
  :signature (RegLan RegLan RegLan) Bool
  (
  (($eor_re-concat-star-subsume2 xs1 r1 ys1) (eo::define ((_v0 (re.++ (re.* re.allchar)))) ($eor_re-concat-star-subsume2.fev1 ys1 xs1 r1 ($singleton_elim (eo::list_concat re.++ xs1 (_ _v0 ys1))) (eo::list_concat re.++ xs1 (_ _v0 (_ (re.++ (re.* r1)) ys1))))))
  )
)
; program: $eovc_re-concat-star-subsume2
(program $eovc_re-concat-star-subsume2 ((xs1 RegLan) (r1 RegLan) (ys1 RegLan))
  :signature (RegLan RegLan RegLan) Bool
  (
  (($eovc_re-concat-star-subsume2 ys1 r1 xs1) ($eo_requires_eq ($eo_model_sat ($eor_re-concat-star-subsume2 xs1 r1 ys1) false false) true true))
  )
)
(echo "smt-meta $eovc_re-concat-star-subsume2")
; program: $eor_re-concat-merge.fev1
(program $eor_re-concat-merge.fev1 ((ys1 RegLan) (t1 (Seq Char)) (s1 (Seq Char)) (xs1 RegLan) ($eo_2 RegLan) ($eo_1 RegLan))
  :signature (RegLan (Seq Char) (Seq Char) RegLan RegLan RegLan) Bool
  (
  (($eor_re-concat-merge.fev1 ys1 t1 s1 xs1 $eo_1 $eo_2) (_ (= $eo_2) $eo_1))
  )
)
; program: $eor_re-concat-merge
(program $eor_re-concat-merge ((xs1 RegLan) (s1 (Seq Char)) (t1 (Seq Char)) (ys1 RegLan))
  :signature (RegLan (Seq Char) (Seq Char) RegLan) Bool
  (
  (($eor_re-concat-merge xs1 s1 t1 ys1) ($eor_re-concat-merge.fev1 ys1 t1 s1 xs1 ($singleton_elim (eo::list_concat re.++ xs1 (_ (re.++ (str.to_re (_ (str.++ s1) (_ (str.++ t1) "")))) ys1))) (eo::list_concat re.++ xs1 (_ (re.++ (str.to_re s1)) (_ (re.++ (str.to_re t1)) ys1)))))
  )
)
; program: $eovc_re-concat-merge
(program $eovc_re-concat-merge ((xs1 RegLan) (s1 (Seq Char)) (t1 (Seq Char)) (ys1 RegLan))
  :signature (RegLan (Seq Char) (Seq Char) RegLan) Bool
  (
  (($eovc_re-concat-merge ys1 t1 s1 xs1) ($eo_requires_eq ($eo_model_sat ($eor_re-concat-merge xs1 s1 t1 ys1) false false) true true))
  )
)
(echo "smt-meta $eovc_re-concat-merge")
; program: $eor_re-union-all.fev1
(program $eor_re-union-all.fev1 ((ys1 RegLan) (xs1 RegLan) ($eo_1 RegLan))
  :signature (RegLan RegLan RegLan) Bool
  (
  (($eor_re-union-all.fev1 ys1 xs1 $eo_1) (_ (= $eo_1) (re.* re.allchar)))
  )
)
; program: $eor_re-union-all
(program $eor_re-union-all ((xs1 RegLan) (ys1 RegLan))
  :signature (RegLan RegLan) Bool
  (
  (($eor_re-union-all xs1 ys1) ($eor_re-union-all.fev1 ys1 xs1 (eo::list_concat re.union xs1 (_ (re.union (re.* re.allchar)) ys1))))
  )
)
; program: $eovc_re-union-all
(program $eovc_re-union-all ((xs1 RegLan) (ys1 RegLan))
  :signature (RegLan RegLan) Bool
  (
  (($eovc_re-union-all ys1 xs1) ($eo_requires_eq ($eo_model_sat ($eor_re-union-all xs1 ys1) false false) true true))
  )
)
(echo "smt-meta $eovc_re-union-all")
; program: $eor_re-union-const-elim
(program $eor_re-union-const-elim ((s1 (Seq Char)) (r1 RegLan))
  :signature (RegLan (Seq Char) Bool) Bool
  (
  (($eor_re-union-const-elim r1 s1 (_ (= (_ (str.in_re s1) r1)) true)) (_ (= (_ (re.union (str.to_re s1)) (_ (re.union r1) re.none))) r1))
  )
)
; program: $eovc_re-union-const-elim
(program $eovc_re-union-const-elim ((s1 (Seq Char)) (r1 RegLan))
  :signature (RegLan (Seq Char)) Bool
  (
  (($eovc_re-union-const-elim r1 s1) (eo::define ((_v0 (_ (= (_ (str.in_re s1) r1)) true))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_re-union-const-elim r1 s1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_re-union-const-elim")
; program: $eor_re-inter-all.fev1
(program $eor_re-inter-all.fev1 ((ys1 RegLan) (xs1 RegLan) ($eo_2 RegLan) ($eo_1 RegLan))
  :signature (RegLan RegLan RegLan RegLan) Bool
  (
  (($eor_re-inter-all.fev1 ys1 xs1 $eo_1 $eo_2) (_ (= $eo_2) $eo_1))
  )
)
; program: $eor_re-inter-all
(program $eor_re-inter-all ((xs1 RegLan) (ys1 RegLan))
  :signature (RegLan RegLan) Bool
  (
  (($eor_re-inter-all xs1 ys1) ($eor_re-inter-all.fev1 ys1 xs1 ($singleton_elim (eo::list_concat re.inter xs1 ys1)) (eo::list_concat re.inter xs1 (_ (re.inter (re.* re.allchar)) ys1))))
  )
)
; program: $eovc_re-inter-all
(program $eovc_re-inter-all ((xs1 RegLan) (ys1 RegLan))
  :signature (RegLan RegLan) Bool
  (
  (($eovc_re-inter-all ys1 xs1) ($eo_requires_eq ($eo_model_sat ($eor_re-inter-all xs1 ys1) false false) true true))
  )
)
(echo "smt-meta $eovc_re-inter-all")
; program: $eor_re-star-none
(program $eor_re-star-none (($etmp Bool))
  :signature (Bool) Bool
  (
  (($eor_re-star-none $etmp) (_ (= (re.* re.none)) (str.to_re "")))
  )
)
; program: $eovc_re-star-none
(program $eovc_re-star-none (($etmp Bool))
  :signature (Bool) Bool
  (
  (($eovc_re-star-none $etmp) ($eo_requires_eq ($eo_model_sat ($eor_re-star-none $etmp) false false) true true))
  )
)
(echo "smt-meta $eovc_re-star-none")
; program: $eor_re-star-emp
(program $eor_re-star-emp (($etmp Bool))
  :signature (Bool) Bool
  (
  (($eor_re-star-emp $etmp) (eo::define ((_v0 (str.to_re ""))) (_ (= (re.* _v0)) _v0)))
  )
)
; program: $eovc_re-star-emp
(program $eovc_re-star-emp (($etmp Bool))
  :signature (Bool) Bool
  (
  (($eovc_re-star-emp $etmp) ($eo_requires_eq ($eo_model_sat ($eor_re-star-emp $etmp) false false) true true))
  )
)
(echo "smt-meta $eovc_re-star-emp")
; program: $eor_re-star-star
(program $eor_re-star-star ((x1 RegLan))
  :signature (RegLan) Bool
  (
  (($eor_re-star-star x1) (eo::define ((_v0 (re.* x1))) (_ (= (re.* _v0)) _v0)))
  )
)
; program: $eovc_re-star-star
(program $eovc_re-star-star ((x1 RegLan))
  :signature (RegLan) Bool
  (
  (($eovc_re-star-star x1) ($eo_requires_eq ($eo_model_sat ($eor_re-star-star x1) false false) true true))
  )
)
(echo "smt-meta $eovc_re-star-star")
; program: $eor_re-star-union-drop-emp.fev1
(program $eor_re-star-union-drop-emp.fev1 ((y1 RegLan) (x1 RegLan) ($eo_2 RegLan) ($eo_1 RegLan))
  :signature (RegLan RegLan RegLan RegLan) Bool
  (
  (($eor_re-star-union-drop-emp.fev1 y1 x1 $eo_1 $eo_2) (_ (= (re.* $eo_2)) (re.* $eo_1)))
  )
)
; program: $eor_re-star-union-drop-emp
(program $eor_re-star-union-drop-emp ((x1 RegLan) (y1 RegLan))
  :signature (RegLan RegLan) Bool
  (
  (($eor_re-star-union-drop-emp x1 y1) ($eor_re-star-union-drop-emp.fev1 y1 x1 ($singleton_elim (eo::list_concat re.union x1 y1)) (eo::list_concat re.union x1 (_ (re.union (str.to_re "")) y1))))
  )
)
; program: $eovc_re-star-union-drop-emp
(program $eovc_re-star-union-drop-emp ((x1 RegLan) (y1 RegLan))
  :signature (RegLan RegLan) Bool
  (
  (($eovc_re-star-union-drop-emp y1 x1) ($eo_requires_eq ($eo_model_sat ($eor_re-star-union-drop-emp x1 y1) false false) true true))
  )
)
(echo "smt-meta $eovc_re-star-union-drop-emp")
; program: $eor_re-loop-neg
(program $eor_re-loop-neg ((n1 Int) (m1 Int) (r1 RegLan))
  :signature (Int Int RegLan Bool) Bool
  (
  (($eor_re-loop-neg n1 m1 r1 (_ (= (_ (> n1) m1)) true)) (_ (= (_ (_ (re.loop n1) m1) r1)) re.none))
  )
)
; program: $eovc_re-loop-neg
(program $eovc_re-loop-neg ((r1 RegLan) (n1 Int) (m1 Int))
  :signature (Int Int RegLan) Bool
  (
  (($eovc_re-loop-neg m1 n1 r1) (eo::define ((_v0 (_ (= (_ (> n1) m1)) true))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_re-loop-neg n1 m1 r1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_re-loop-neg")
; program: $eor_re-inter-cstring.fev2
(program $eor_re-inter-cstring.fev2 ((ys1 RegLan) (xs1 RegLan) ($eo_3 RegLan) (s1 (Seq Char)))
  :signature ((Seq Char) RegLan RegLan RegLan) Bool
  (
  (($eor_re-inter-cstring.fev2 s1 ys1 xs1 $eo_3) (_ (= $eo_3) (str.to_re s1)))
  )
)
; program: $eor_re-inter-cstring.fev1
(program $eor_re-inter-cstring.fev1 (($ex_1 RegLan) ($eo_2 Bool) (xs1 RegLan) (s1 (Seq Char)) (ys1 RegLan))
  :signature ((Seq Char) RegLan RegLan RegLan Bool Bool) Bool
  (
  (($eor_re-inter-cstring.fev1 s1 ys1 xs1 $ex_1 $eo_2 $eo_2) ($eor_re-inter-cstring.fev2 s1 ys1 xs1 (eo::list_concat re.inter xs1 (_ (re.inter (str.to_re s1)) ys1))))
  )
)
; program: $eor_re-inter-cstring
(program $eor_re-inter-cstring ((s1 (Seq Char)) ($ex_1 RegLan) (xs1 RegLan) (ys1 RegLan))
  :signature (RegLan RegLan (Seq Char) Bool) Bool
  (
  (($eor_re-inter-cstring xs1 ys1 s1 (_ (= (_ (str.in_re s1) $ex_1)) true)) ($eor_re-inter-cstring.fev1 s1 ys1 xs1 $ex_1 $ex_1 ($singleton_elim (eo::list_concat re.inter xs1 ys1))))
  )
)
; program: $eovc_re-inter-cstring.fev1
(program $eovc_re-inter-cstring.fev1 ((xs1 RegLan) (ys1 RegLan) (s1 (Seq Char)) ($eo_1 RegLan))
  :signature (RegLan RegLan (Seq Char) RegLan) Bool
  (
  (($eovc_re-inter-cstring.fev1 ys1 xs1 s1 $eo_1) (eo::define ((_v0 (_ (= (_ (str.in_re s1) $eo_1)) true))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_re-inter-cstring xs1 ys1 s1 _v0) false false) true true))))
  )
)
; program: $eovc_re-inter-cstring
(program $eovc_re-inter-cstring ((s1 (Seq Char)) (xs1 RegLan) (ys1 RegLan))
  :signature (RegLan RegLan (Seq Char)) Bool
  (
  (($eovc_re-inter-cstring ys1 xs1 s1) ($eovc_re-inter-cstring.fev1 ys1 xs1 s1 ($singleton_elim (eo::list_concat re.inter xs1 ys1))))
  )
)
(echo "smt-meta $eovc_re-inter-cstring")
; program: $eor_re-inter-cstring-neg.fev2
(program $eor_re-inter-cstring-neg.fev2 ((ys1 RegLan) (s1 (Seq Char)) (xs1 RegLan) ($eo_3 RegLan))
  :signature (RegLan (Seq Char) RegLan RegLan) Bool
  (
  (($eor_re-inter-cstring-neg.fev2 ys1 s1 xs1 $eo_3) (_ (= $eo_3) re.none))
  )
)
; program: $eor_re-inter-cstring-neg.fev1
(program $eor_re-inter-cstring-neg.fev1 (($ex_1 RegLan) ($eo_2 Bool) (xs1 RegLan) (s1 (Seq Char)) (ys1 RegLan))
  :signature (RegLan (Seq Char) RegLan RegLan Bool Bool) Bool
  (
  (($eor_re-inter-cstring-neg.fev1 ys1 s1 xs1 $ex_1 $eo_2 $eo_2) ($eor_re-inter-cstring-neg.fev2 ys1 s1 xs1 (eo::list_concat re.inter xs1 (_ (re.inter (str.to_re s1)) ys1))))
  )
)
; program: $eor_re-inter-cstring-neg
(program $eor_re-inter-cstring-neg ((s1 (Seq Char)) ($ex_1 RegLan) (xs1 RegLan) (ys1 RegLan))
  :signature (RegLan RegLan (Seq Char) Bool) Bool
  (
  (($eor_re-inter-cstring-neg xs1 ys1 s1 (_ (= (_ (str.in_re s1) $ex_1)) false)) ($eor_re-inter-cstring-neg.fev1 ys1 s1 xs1 $ex_1 $ex_1 ($singleton_elim (eo::list_concat re.inter xs1 ys1))))
  )
)
; program: $eovc_re-inter-cstring-neg.fev1
(program $eovc_re-inter-cstring-neg.fev1 ((xs1 RegLan) (ys1 RegLan) (s1 (Seq Char)) ($eo_1 RegLan))
  :signature (RegLan RegLan (Seq Char) RegLan) Bool
  (
  (($eovc_re-inter-cstring-neg.fev1 ys1 xs1 s1 $eo_1) (eo::define ((_v0 (_ (= (_ (str.in_re s1) $eo_1)) false))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_re-inter-cstring-neg xs1 ys1 s1 _v0) false false) true true))))
  )
)
; program: $eovc_re-inter-cstring-neg
(program $eovc_re-inter-cstring-neg ((s1 (Seq Char)) (xs1 RegLan) (ys1 RegLan))
  :signature (RegLan RegLan (Seq Char)) Bool
  (
  (($eovc_re-inter-cstring-neg ys1 xs1 s1) ($eovc_re-inter-cstring-neg.fev1 ys1 xs1 s1 ($singleton_elim (eo::list_concat re.inter xs1 ys1))))
  )
)
(echo "smt-meta $eovc_re-inter-cstring-neg")
; program: $eor_str-substr-len-include
(program $eor_str-substr-len-include ((@T0 Type) (@T1 Type) (s2 (Seq @T1)) (s1 (Seq @T0)) (n1 Int) (m1 Int))
  :signature ((Seq @T0) (Seq @T1) Int Int Bool) Bool
  (
  (($eor_str-substr-len-include s1 s2 n1 m1 (_ (= (_ (>= (str.len s1)) (_ (+ n1) (_ (+ m1) 0)))) true)) (_ (= (_ (_ (str.substr (_ (str.++ s1) s2)) n1) m1)) (_ (_ (str.substr s1) n1) m1)))
  )
)
; program: $eovc_str-substr-len-include
(program $eovc_str-substr-len-include ((@T0 Type) (@T1 Type) (s2 (Seq @T1)) (s1 (Seq @T0)) (n1 Int) (m1 Int))
  :signature (Int Int (Seq @T0) (Seq @T1)) Bool
  (
  (($eovc_str-substr-len-include m1 n1 s1 s2) (eo::define ((_v0 (_ (= (_ (>= (str.len s1)) (_ (+ n1) (_ (+ m1) 0)))) true))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-substr-len-include s1 s2 n1 m1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_str-substr-len-include")
; program: $eor_str-substr-len-include-pre.fev1
(program $eor_str-substr-len-include-pre.fev1 ((@T0 Type) (@T1 Type) ($eoT.fev1 Type) (@T2 Type) ($eoT.fev4 Type) (s2 (Seq @T1)) (s3 (Seq @T2)) ($eo_3 (Seq @T2)) (n1 Int) (s1 (Seq @T0)) ($eo_2 $eoT.fev1))
  :signature ((Seq @T0) Int (Seq @T2) (Seq @T1) $eoT.fev1 (Seq @T2)) $eoT.fev4
  (
  (($eor_str-substr-len-include-pre.fev1 s1 n1 s3 s2 $eo_2 $eo_3) (eo::define ((_v0 (str.++ s1))) (_ (= (_ (_ (str.substr (_ _v0 (_ (str.++ s2) s3))) 0) n1)) (_ _v0 (_ (str.++ (_ (_ (str.substr $eo_3) 0) (_ (- n1) (str.len s1)))) $eo_2)))))
  )
)
; program: $eor_str-substr-len-include-pre
(program $eor_str-substr-len-include-pre ((@T0 Type) (@T1 Type) (@T2 Type) (n1 Int) (s1 (Seq @T0)) (s2 (Seq @T1)) (s3 (Seq @T2)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) Int Bool) Bool
  (
  (($eor_str-substr-len-include-pre s1 s2 s3 n1 (_ (= (_ (>= n1) (str.len s1))) true)) ($eor_str-substr-len-include-pre.fev1 s1 n1 s3 s2 (eo::nil str.++ (eo::typeof s1)) ($singleton_elim (_ (str.++ s2) s3))))
  )
)
; program: $eovc_str-substr-len-include-pre
(program $eovc_str-substr-len-include-pre ((@T0 Type) (@T2 Type) (@T1 Type) (s2 (Seq @T1)) (s3 (Seq @T2)) (n1 Int) (s1 (Seq @T0)))
  :signature ((Seq @T0) Int (Seq @T2) (Seq @T1)) Bool
  (
  (($eovc_str-substr-len-include-pre s1 n1 s3 s2) (eo::define ((_v0 (_ (= (_ (>= n1) (str.len s1))) true))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-substr-len-include-pre s1 s2 s3 n1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_str-substr-len-include-pre")
; program: $eor_str-substr-len-norm
(program $eor_str-substr-len-norm ((@T0 Type) (m1 Int) (n1 Int) (s1 (Seq @T0)))
  :signature ((Seq @T0) Int Int Bool) Bool
  (
  (($eor_str-substr-len-norm s1 n1 m1 (_ (= (_ (>= m1) (str.len s1))) true)) (eo::define ((_v0 (_ (str.substr s1) n1))) (_ (= (_ _v0 m1)) (_ _v0 (str.len s1)))))
  )
)
; program: $eovc_str-substr-len-norm
(program $eovc_str-substr-len-norm ((@T0 Type) (n1 Int) (m1 Int) (s1 (Seq @T0)))
  :signature ((Seq @T0) Int Int) Bool
  (
  (($eovc_str-substr-len-norm s1 m1 n1) (eo::define ((_v0 (_ (= (_ (>= m1) (str.len s1))) true))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-substr-len-norm s1 n1 m1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_str-substr-len-norm")
; program: $eor_seq-len-rev
(program $eor_seq-len-rev ((@T0 Type) (x1 (Seq @T0)))
  :signature ((Seq @T0)) Bool
  (
  (($eor_seq-len-rev x1) (_ (= (str.len (str.rev x1))) (str.len x1)))
  )
)
; program: $eovc_seq-len-rev
(program $eovc_seq-len-rev ((@T0 Type) (x1 (Seq @T0)))
  :signature ((Seq @T0)) Bool
  (
  (($eovc_seq-len-rev x1) ($eo_requires_eq ($eo_model_sat ($eor_seq-len-rev x1) false false) true true))
  )
)
(echo "smt-meta $eovc_seq-len-rev")
; program: $eor_seq-rev-rev
(program $eor_seq-rev-rev ((@T0 Type) (x1 (Seq @T0)))
  :signature ((Seq @T0)) Bool
  (
  (($eor_seq-rev-rev x1) (_ (= (str.rev (str.rev x1))) x1))
  )
)
; program: $eovc_seq-rev-rev
(program $eovc_seq-rev-rev ((@T0 Type) (x1 (Seq @T0)))
  :signature ((Seq @T0)) Bool
  (
  (($eovc_seq-rev-rev x1) ($eo_requires_eq ($eo_model_sat ($eor_seq-rev-rev x1) false false) true true))
  )
)
(echo "smt-meta $eovc_seq-rev-rev")
; program: $eor_seq-rev-concat.fev2
(program $eor_seq-rev-concat.fev2 (($eoT.fev1 Type) (@T2 Type) ($eoT.fev4 Type) (@T1 Type) (@T0 Type) ($eoT.fev7 Type) ($eoT.fev9 Type) ($eo_5 $eoT.fev4) (y1 (Seq @T1)) (x1 (Seq @T0)) ($eo_8 $eoT.fev7) (z1 (Seq @T2)) ($eo_3 (Seq @T1)) ($eo_2 $eoT.fev1))
  :signature ($eoT.fev1 (Seq @T1) (Seq @T2) $eoT.fev4 (Seq @T1) (Seq @T0) $eoT.fev7) $eoT.fev9
  (
  (($eor_seq-rev-concat.fev2 $eo_2 $eo_3 z1 $eo_5 y1 x1 $eo_8) (_ (= (str.rev (_ (str.++ x1) $eo_8))) (_ (str.++ (str.rev z1)) (_ (str.++ (str.rev $eo_3)) $eo_2))))
  )
)
; program: $eor_seq-rev-concat.fev1
(program $eor_seq-rev-concat.fev1 ((@T2 Type) (@T0 Type) ($eoT.fev1 Type) (@T1 Type) ($eoT.fev4 Type) ($eoT.fev6 Type) ($eo_2 $eoT.fev1) ($eo_3 (Seq @T1)) (x1 (Seq @T0)) (y1 (Seq @T1)) (z1 (Seq @T2)) ($eo_5 $eoT.fev4))
  :signature ((Seq @T2) (Seq @T1) (Seq @T0) $eoT.fev1 (Seq @T1) $eoT.fev4) $eoT.fev6
  (
  (($eor_seq-rev-concat.fev1 z1 y1 x1 $eo_2 $eo_3 $eo_5) ($eor_seq-rev-concat.fev2 $eo_2 $eo_3 z1 $eo_5 y1 x1 (eo::list_concat str.++ y1 (_ (str.++ z1) $eo_5))))
  )
)
; program: $eor_seq-rev-concat
(program $eor_seq-rev-concat ((@T0 Type) (@T1 Type) (@T2 Type) (z1 (Seq @T2)) (y1 (Seq @T1)) (x1 (Seq @T0)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2)) Bool
  (
  (($eor_seq-rev-concat x1 y1 z1) ($eor_seq-rev-concat.fev1 z1 y1 x1 (eo::nil str.++ (eo::typeof (str.rev z1))) ($singleton_elim (_ (str.++ x1) y1)) (eo::nil str.++ (eo::typeof x1))))
  )
)
; program: $eovc_seq-rev-concat
(program $eovc_seq-rev-concat ((@T2 Type) (@T1 Type) (@T0 Type) (x1 (Seq @T0)) (y1 (Seq @T1)) (z1 (Seq @T2)))
  :signature ((Seq @T2) (Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_seq-rev-concat z1 y1 x1) ($eo_requires_eq ($eo_model_sat ($eor_seq-rev-concat x1 y1 z1) false false) true true))
  )
)
(echo "smt-meta $eovc_seq-rev-concat")
; program: $eor_str-eq-repl-self-emp.fev1
(program $eor_str-eq-repl-self-emp.fev1 ((@T2 Type) (@T1 Type) (@T0 Type) ($ex_1 (Seq @T0)) ($eo_2 Bool) (y1 (Seq @T1)) (x1 (Seq @T0)) (emp1 (Seq @T2)))
  :signature ((Seq @T2) (Seq @T0) (Seq @T1) Type (Seq @T0) Bool Bool) Bool
  (
  (($eor_str-eq-repl-self-emp.fev1 emp1 x1 y1 @T0 $ex_1 $eo_2 $eo_2) (_ (= (_ (= (_ (_ (str.replace x1) y1) x1)) emp1)) (_ (= x1) emp1)))
  )
)
; program: $eor_str-eq-repl-self-emp
(program $eor_str-eq-repl-self-emp ((@T1 Type) (@T2 Type) (emp1 (Seq @T2)) (@T0 Type) (x1 (Seq @T0)) (y1 (Seq @T1)) ($ex_1 (Seq @T0)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) Type Bool) Bool
  (
  (($eor_str-eq-repl-self-emp x1 y1 emp1 (Seq @T0) (_ (= emp1) $ex_1)) ($eor_str-eq-repl-self-emp.fev1 emp1 x1 y1 @T0 $ex_1 $ex_1 ($seq_empty (Seq @T0))))
  )
)
; program: $eovc_str-eq-repl-self-emp.fev1
(program $eovc_str-eq-repl-self-emp.fev1 ((@T2 Type) (@T1 Type) (@T0 Type) (x1 (Seq @T0)) (y1 (Seq @T1)) (emp1 (Seq @T2)) ($eo_1 (Seq @T0)))
  :signature (Type (Seq @T2) (Seq @T1) (Seq @T0) (Seq @T0)) Bool
  (
  (($eovc_str-eq-repl-self-emp.fev1 @T0 emp1 y1 x1 $eo_1) (eo::define ((_v0 (_ (= emp1) $eo_1))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-eq-repl-self-emp x1 y1 emp1 (Seq @T0) _v0) false false) true true))))
  )
)
; program: $eovc_str-eq-repl-self-emp
(program $eovc_str-eq-repl-self-emp ((@T2 Type) (@T1 Type) (emp1 (Seq @T2)) (y1 (Seq @T1)) (@T0 Type) (x1 (Seq @T0)))
  :signature (Type (Seq @T2) (Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-eq-repl-self-emp @T0 emp1 y1 x1) ($eovc_str-eq-repl-self-emp.fev1 @T0 emp1 y1 x1 ($seq_empty (Seq @T0))))
  )
)
(echo "smt-meta $eovc_str-eq-repl-self-emp")
; program: $eor_str-eq-repl-no-change
(program $eor_str-eq-repl-no-change ((@T0 Type) (@T1 Type) (@T2 Type) (z1 (Seq @T2)) (x1 (Seq @T0)) (y1 (Seq @T1)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) Bool) Bool
  (
  (($eor_str-eq-repl-no-change x1 y1 z1 (_ (= (_ (= y1) z1)) false)) (_ (= (_ (= (_ (_ (str.replace x1) y1) z1)) x1)) (not (_ (str.contains x1) y1))))
  )
)
; program: $eovc_str-eq-repl-no-change
(program $eovc_str-eq-repl-no-change ((@T2 Type) (@T1 Type) (@T0 Type) (x1 (Seq @T0)) (y1 (Seq @T1)) (z1 (Seq @T2)))
  :signature ((Seq @T2) (Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-eq-repl-no-change z1 y1 x1) (eo::define ((_v0 (_ (= (_ (= y1) z1)) false))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-eq-repl-no-change x1 y1 z1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_str-eq-repl-no-change")
; program: $eor_str-eq-repl-tgt-eq-len
(program $eor_str-eq-repl-tgt-eq-len ((@T0 Type) (@T1 Type) (@T2 Type) (y1 (Seq @T1)) (x1 (Seq @T0)) (z1 (Seq @T2)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) Bool) Bool
  (
  (($eor_str-eq-repl-tgt-eq-len x1 y1 z1 (_ (= (str.len y1)) (str.len z1))) (eo::define ((_v0 (= x1))) (_ (= (_ (= (_ (_ (str.replace x1) y1) z1)) z1)) (_ (or (_ _v0 y1)) (_ (or (_ _v0 z1)) false)))))
  )
)
; program: $eovc_str-eq-repl-tgt-eq-len
(program $eovc_str-eq-repl-tgt-eq-len ((@T2 Type) (@T1 Type) (@T0 Type) (x1 (Seq @T0)) (y1 (Seq @T1)) (z1 (Seq @T2)))
  :signature ((Seq @T2) (Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-eq-repl-tgt-eq-len z1 y1 x1) (eo::define ((_v0 (_ (= (str.len y1)) (str.len z1)))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-eq-repl-tgt-eq-len x1 y1 z1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_str-eq-repl-tgt-eq-len")
; program: $eor_str-eq-repl-len-one-emp-prefix.fev1
(program $eor_str-eq-repl-len-one-emp-prefix.fev1 ((@T1 Type) (@T2 Type) (@T0 Type) ($ex_1 (Seq @T0)) ($eo_2 Bool) (emp1 (Seq @T2)) (x1 (Seq @T0)) (y1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T0) (Seq @T2) Type (Seq @T0) Bool Bool) Bool
  (
  (($eor_str-eq-repl-len-one-emp-prefix.fev1 y1 x1 emp1 @T0 $ex_1 $eo_2 $eo_2) (_ (= (_ (= (_ (_ (str.replace x1) y1) emp1)) emp1)) (_ (str.prefixof x1) y1)))
  )
)
; program: $eor_str-eq-repl-len-one-emp-prefix
(program $eor_str-eq-repl-len-one-emp-prefix ((@T1 Type) (@T2 Type) (y1 (Seq @T1)) (@T0 Type) (x1 (Seq @T0)) (emp1 (Seq @T2)) ($ex_1 (Seq @T0)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) Type Bool Bool) Bool
  (
  (($eor_str-eq-repl-len-one-emp-prefix x1 y1 emp1 (Seq @T0) (_ (= emp1) $ex_1) (_ (= (str.len y1)) 1)) ($eor_str-eq-repl-len-one-emp-prefix.fev1 y1 x1 emp1 @T0 $ex_1 $ex_1 ($seq_empty (Seq @T0))))
  )
)
; program: $eovc_str-eq-repl-len-one-emp-prefix.fev1
(program $eovc_str-eq-repl-len-one-emp-prefix.fev1 ((@T1 Type) (@T2 Type) ($eo_2 Bool) (@T0 Type) (x1 (Seq @T0)) (emp1 (Seq @T2)) ($eo_1 (Seq @T0)) (y1 (Seq @T1)))
  :signature ((Seq @T1) Type (Seq @T2) (Seq @T0) (Seq @T0) Bool) Bool
  (
  (($eovc_str-eq-repl-len-one-emp-prefix.fev1 y1 @T0 emp1 x1 $eo_1 $eo_2) (eo::define ((_v0 (_ (= emp1) $eo_1))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq $eo_2 true ($eo_requires_eq ($eo_model_sat ($eor_str-eq-repl-len-one-emp-prefix x1 y1 emp1 (Seq @T0) _v0 (_ (= (str.len y1)) 1)) false false) true true)))))
  )
)
; program: $eovc_str-eq-repl-len-one-emp-prefix
(program $eovc_str-eq-repl-len-one-emp-prefix ((@T1 Type) (@T2 Type) (emp1 (Seq @T2)) (@T0 Type) (x1 (Seq @T0)) (y1 (Seq @T1)))
  :signature ((Seq @T1) Type (Seq @T2) (Seq @T0)) Bool
  (
  (($eovc_str-eq-repl-len-one-emp-prefix y1 @T0 emp1 x1) ($eovc_str-eq-repl-len-one-emp-prefix.fev1 y1 @T0 emp1 x1 ($seq_empty (Seq @T0)) ($eo_model_sat (_ (= (str.len y1)) 1) true false)))
  )
)
(echo "smt-meta $eovc_str-eq-repl-len-one-emp-prefix")
; program: $eor_str-eq-repl-emp-tgt-nemp.fev1
(program $eor_str-eq-repl-emp-tgt-nemp.fev1 ((@T3 Type) (@T1 Type) (@T2 Type) (@T0 Type) ($ex_1 (Seq @T0)) ($eo_2 Bool) (z1 (Seq @T2)) (x1 (Seq @T0)) (y1 (Seq @T1)) (emp1 (Seq @T3)))
  :signature ((Seq @T3) (Seq @T1) (Seq @T0) (Seq @T2) Type (Seq @T0) Bool Bool) Bool
  (
  (($eor_str-eq-repl-emp-tgt-nemp.fev1 emp1 y1 x1 z1 @T0 $ex_1 $eo_2 $eo_2) (_ (= (_ (= (_ (_ (str.replace x1) y1) z1)) emp1)) (_ (and (_ (= x1) emp1)) (_ (and (not (_ (= y1) emp1))) true))))
  )
)
; program: $eor_str-eq-repl-emp-tgt-nemp
(program $eor_str-eq-repl-emp-tgt-nemp ((@T1 Type) (@T2 Type) (@T3 Type) (emp1 (Seq @T3)) (y1 (Seq @T1)) (@T0 Type) (x1 (Seq @T0)) (z1 (Seq @T2)) ($ex_1 (Seq @T0)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) (Seq @T3) Type Bool Bool) Bool
  (
  (($eor_str-eq-repl-emp-tgt-nemp x1 y1 z1 emp1 (Seq @T0) (_ (= emp1) $ex_1) (_ (= (_ (= z1) emp1)) false)) ($eor_str-eq-repl-emp-tgt-nemp.fev1 emp1 y1 x1 z1 @T0 $ex_1 $ex_1 ($seq_empty (Seq @T0))))
  )
)
; program: $eovc_str-eq-repl-emp-tgt-nemp.fev1
(program $eovc_str-eq-repl-emp-tgt-nemp.fev1 ((@T3 Type) (@T2 Type) (@T1 Type) ($eo_2 Bool) (@T0 Type) (x1 (Seq @T0)) (y1 (Seq @T1)) ($eo_1 (Seq @T0)) (z1 (Seq @T2)) (emp1 (Seq @T3)))
  :signature ((Seq @T3) (Seq @T2) Type (Seq @T1) (Seq @T0) (Seq @T0) Bool) Bool
  (
  (($eovc_str-eq-repl-emp-tgt-nemp.fev1 emp1 z1 @T0 y1 x1 $eo_1 $eo_2) (eo::define ((_v0 (_ (= emp1) $eo_1))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq $eo_2 true ($eo_requires_eq ($eo_model_sat ($eor_str-eq-repl-emp-tgt-nemp x1 y1 z1 emp1 (Seq @T0) _v0 (_ (= (_ (= z1) emp1)) false)) false false) true true)))))
  )
)
; program: $eovc_str-eq-repl-emp-tgt-nemp
(program $eovc_str-eq-repl-emp-tgt-nemp ((@T3 Type) (@T2 Type) (@T1 Type) (y1 (Seq @T1)) (@T0 Type) (x1 (Seq @T0)) (z1 (Seq @T2)) (emp1 (Seq @T3)))
  :signature ((Seq @T3) (Seq @T2) Type (Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-eq-repl-emp-tgt-nemp emp1 z1 @T0 y1 x1) ($eovc_str-eq-repl-emp-tgt-nemp.fev1 emp1 z1 @T0 y1 x1 ($seq_empty (Seq @T0)) ($eo_model_sat (_ (= (_ (= z1) emp1)) false) true false)))
  )
)
(echo "smt-meta $eovc_str-eq-repl-emp-tgt-nemp")
; program: $eor_str-eq-repl-nemp-src-emp.fev1
(program $eor_str-eq-repl-nemp-src-emp.fev1 ((@T2 Type) (@T1 Type) (@T3 Type) (@T0 Type) ($ex_1 (Seq @T0)) ($eo_2 Bool) (x1 (Seq @T0)) (emp1 (Seq @T3)) (y1 (Seq @T1)) (z1 (Seq @T2)))
  :signature ((Seq @T2) (Seq @T1) (Seq @T3) (Seq @T0) Type (Seq @T0) Bool Bool) Bool
  (
  (($eor_str-eq-repl-nemp-src-emp.fev1 z1 y1 emp1 x1 @T0 $ex_1 $eo_2 $eo_2) (_ (= (_ (= (_ (_ (str.replace emp1) x1) y1)) z1)) (_ (and (_ (= x1) emp1)) (_ (and (_ (= y1) z1)) true))))
  )
)
; program: $eor_str-eq-repl-nemp-src-emp
(program $eor_str-eq-repl-nemp-src-emp ((@T1 Type) (@T2 Type) (@T3 Type) (z1 (Seq @T2)) (y1 (Seq @T1)) (emp1 (Seq @T3)) (@T0 Type) (x1 (Seq @T0)) ($ex_1 (Seq @T0)))
  :signature ((Seq @T0) (Seq @T1) (Seq @T2) (Seq @T3) Type Bool Bool) Bool
  (
  (($eor_str-eq-repl-nemp-src-emp x1 y1 z1 emp1 (Seq @T0) (_ (= emp1) $ex_1) (_ (= (_ (= z1) emp1)) false)) ($eor_str-eq-repl-nemp-src-emp.fev1 z1 y1 emp1 x1 @T0 $ex_1 $ex_1 ($seq_empty (Seq @T0))))
  )
)
; program: $eovc_str-eq-repl-nemp-src-emp.fev1
(program $eovc_str-eq-repl-nemp-src-emp.fev1 ((@T3 Type) (@T2 Type) (@T1 Type) ($eo_2 Bool) (@T0 Type) (x1 (Seq @T0)) (y1 (Seq @T1)) ($eo_1 (Seq @T0)) (z1 (Seq @T2)) (emp1 (Seq @T3)))
  :signature ((Seq @T3) (Seq @T2) Type (Seq @T1) (Seq @T0) (Seq @T0) Bool) Bool
  (
  (($eovc_str-eq-repl-nemp-src-emp.fev1 emp1 z1 @T0 y1 x1 $eo_1 $eo_2) (eo::define ((_v0 (_ (= emp1) $eo_1))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq $eo_2 true ($eo_requires_eq ($eo_model_sat ($eor_str-eq-repl-nemp-src-emp x1 y1 z1 emp1 (Seq @T0) _v0 (_ (= (_ (= z1) emp1)) false)) false false) true true)))))
  )
)
; program: $eovc_str-eq-repl-nemp-src-emp
(program $eovc_str-eq-repl-nemp-src-emp ((@T3 Type) (@T2 Type) (@T1 Type) (y1 (Seq @T1)) (@T0 Type) (x1 (Seq @T0)) (z1 (Seq @T2)) (emp1 (Seq @T3)))
  :signature ((Seq @T3) (Seq @T2) Type (Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-eq-repl-nemp-src-emp emp1 z1 @T0 y1 x1) ($eovc_str-eq-repl-nemp-src-emp.fev1 emp1 z1 @T0 y1 x1 ($seq_empty (Seq @T0)) ($eo_model_sat (_ (= (_ (= z1) emp1)) false) true false)))
  )
)
(echo "smt-meta $eovc_str-eq-repl-nemp-src-emp")
; program: $eor_str-eq-repl-self-src
(program $eor_str-eq-repl-self-src ((@T0 Type) (@T1 Type) (x1 (Seq @T0)) (y1 (Seq @T1)))
  :signature ((Seq @T0) (Seq @T1)) Bool
  (
  (($eor_str-eq-repl-self-src x1 y1) (_ (= (_ (= (_ (_ (str.replace x1) y1) x1)) y1)) (_ (= x1) y1)))
  )
)
; program: $eovc_str-eq-repl-self-src
(program $eovc_str-eq-repl-self-src ((@T1 Type) (@T0 Type) (x1 (Seq @T0)) (y1 (Seq @T1)))
  :signature ((Seq @T1) (Seq @T0)) Bool
  (
  (($eovc_str-eq-repl-self-src y1 x1) ($eo_requires_eq ($eo_model_sat ($eor_str-eq-repl-self-src x1 y1) false false) true true))
  )
)
(echo "smt-meta $eovc_str-eq-repl-self-src")
; program: $eor_seq-len-unit
(program $eor_seq-len-unit ((@T0 Type) (x1 @T0))
  :signature (@T0) Bool
  (
  (($eor_seq-len-unit x1) (_ (= (str.len (seq.unit x1))) 1))
  )
)
; program: $eovc_seq-len-unit
(program $eovc_seq-len-unit ((@T0 Type) (x1 @T0))
  :signature (@T0) Bool
  (
  (($eovc_seq-len-unit x1) ($eo_requires_eq ($eo_model_sat ($eor_seq-len-unit x1) false false) true true))
  )
)
(echo "smt-meta $eovc_seq-len-unit")
; program: $eor_seq-nth-unit
(program $eor_seq-nth-unit ((@T0 Type) (x1 @T0))
  :signature (@T0) Bool
  (
  (($eor_seq-nth-unit x1) (_ (= (_ (seq.nth (seq.unit x1)) 0)) x1))
  )
)
; program: $eovc_seq-nth-unit
(program $eovc_seq-nth-unit ((@T0 Type) (x1 @T0))
  :signature (@T0) Bool
  (
  (($eovc_seq-nth-unit x1) ($eo_requires_eq ($eo_model_sat ($eor_seq-nth-unit x1) false false) true true))
  )
)
(echo "smt-meta $eovc_seq-nth-unit")
; program: $eor_seq-rev-unit
(program $eor_seq-rev-unit ((@T0 Type) (x1 @T0))
  :signature (@T0) Bool
  (
  (($eor_seq-rev-unit x1) (eo::define ((_v0 (seq.unit x1))) (_ (= (str.rev _v0)) _v0)))
  )
)
; program: $eovc_seq-rev-unit
(program $eovc_seq-rev-unit ((@T0 Type) (x1 @T0))
  :signature (@T0) Bool
  (
  (($eovc_seq-rev-unit x1) ($eo_requires_eq ($eo_model_sat ($eor_seq-rev-unit x1) false false) true true))
  )
)
(echo "smt-meta $eovc_seq-rev-unit")
; program: $eor_seq-len-empty.fev1
(program $eor_seq-len-empty.fev1 ((@T0 Type) ($ex_1 (Seq @T0)) ($eo_2 Bool) (x1 (Seq @T0)))
  :signature ((Seq @T0) Type (Seq @T0) Bool Bool) Bool
  (
  (($eor_seq-len-empty.fev1 x1 @T0 $ex_1 $eo_2 $eo_2) (_ (= (str.len x1)) 0))
  )
)
; program: $eor_seq-len-empty
(program $eor_seq-len-empty ((@T0 Type) (x1 (Seq @T0)) ($ex_1 (Seq @T0)))
  :signature ((Seq @T0) Type Bool) Bool
  (
  (($eor_seq-len-empty x1 (Seq @T0) (_ (= x1) $ex_1)) ($eor_seq-len-empty.fev1 x1 @T0 $ex_1 $ex_1 ($seq_empty (Seq @T0))))
  )
)
; program: $eovc_seq-len-empty.fev1
(program $eovc_seq-len-empty.fev1 ((@T0 Type) (x1 (Seq @T0)) ($eo_1 (Seq @T0)))
  :signature (Type (Seq @T0) (Seq @T0)) Bool
  (
  (($eovc_seq-len-empty.fev1 @T0 x1 $eo_1) (eo::define ((_v0 (_ (= x1) $eo_1))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_seq-len-empty x1 (Seq @T0) _v0) false false) true true))))
  )
)
; program: $eovc_seq-len-empty
(program $eovc_seq-len-empty ((@T0 Type) (x1 (Seq @T0)))
  :signature (Type (Seq @T0)) Bool
  (
  (($eovc_seq-len-empty @T0 x1) ($eovc_seq-len-empty.fev1 @T0 x1 ($seq_empty (Seq @T0))))
  )
)
(echo "smt-meta $eovc_seq-len-empty")
; program: $eor_re-in-empty
(program $eor_re-in-empty ((t1 (Seq Char)))
  :signature ((Seq Char)) Bool
  (
  (($eor_re-in-empty t1) (_ (= (_ (str.in_re t1) re.none)) false))
  )
)
; program: $eovc_re-in-empty
(program $eovc_re-in-empty ((t1 (Seq Char)))
  :signature ((Seq Char)) Bool
  (
  (($eovc_re-in-empty t1) ($eo_requires_eq ($eo_model_sat ($eor_re-in-empty t1) false false) true true))
  )
)
(echo "smt-meta $eovc_re-in-empty")
; program: $eor_re-in-sigma
(program $eor_re-in-sigma ((t1 (Seq Char)))
  :signature ((Seq Char)) Bool
  (
  (($eor_re-in-sigma t1) (_ (= (_ (str.in_re t1) re.allchar)) (_ (= (str.len t1)) 1)))
  )
)
; program: $eovc_re-in-sigma
(program $eovc_re-in-sigma ((t1 (Seq Char)))
  :signature ((Seq Char)) Bool
  (
  (($eovc_re-in-sigma t1) ($eo_requires_eq ($eo_model_sat ($eor_re-in-sigma t1) false false) true true))
  )
)
(echo "smt-meta $eovc_re-in-sigma")
; program: $eor_re-in-sigma-star
(program $eor_re-in-sigma-star ((t1 (Seq Char)))
  :signature ((Seq Char)) Bool
  (
  (($eor_re-in-sigma-star t1) (_ (= (_ (str.in_re t1) (re.* re.allchar))) true))
  )
)
; program: $eovc_re-in-sigma-star
(program $eovc_re-in-sigma-star ((t1 (Seq Char)))
  :signature ((Seq Char)) Bool
  (
  (($eovc_re-in-sigma-star t1) ($eo_requires_eq ($eo_model_sat ($eor_re-in-sigma-star t1) false false) true true))
  )
)
(echo "smt-meta $eovc_re-in-sigma-star")
; program: $eor_re-in-cstring
(program $eor_re-in-cstring ((t1 (Seq Char)) (s1 (Seq Char)))
  :signature ((Seq Char) (Seq Char)) Bool
  (
  (($eor_re-in-cstring t1 s1) (_ (= (_ (str.in_re t1) (str.to_re s1))) (_ (= t1) s1)))
  )
)
; program: $eovc_re-in-cstring
(program $eovc_re-in-cstring ((t1 (Seq Char)) (s1 (Seq Char)))
  :signature ((Seq Char) (Seq Char)) Bool
  (
  (($eovc_re-in-cstring s1 t1) ($eo_requires_eq ($eo_model_sat ($eor_re-in-cstring t1 s1) false false) true true))
  )
)
(echo "smt-meta $eovc_re-in-cstring")
; program: $eor_re-in-comp
(program $eor_re-in-comp ((t1 (Seq Char)) (r1 RegLan))
  :signature ((Seq Char) RegLan) Bool
  (
  (($eor_re-in-comp t1 r1) (eo::define ((_v0 (str.in_re t1))) (_ (= (_ _v0 (re.comp r1))) (not (_ _v0 r1)))))
  )
)
; program: $eovc_re-in-comp
(program $eovc_re-in-comp ((t1 (Seq Char)) (r1 RegLan))
  :signature (RegLan (Seq Char)) Bool
  (
  (($eovc_re-in-comp r1 t1) ($eo_requires_eq ($eo_model_sat ($eor_re-in-comp t1 r1) false false) true true))
  )
)
(echo "smt-meta $eovc_re-in-comp")
; program: $eor_str-in-re-union-elim.fev1
(program $eor_str-in-re-union-elim.fev1 ((r2 RegLan) (rs1 RegLan) (r1 RegLan) (s1 (Seq Char)) ($eo_1 RegLan))
  :signature (RegLan RegLan (Seq Char) RegLan RegLan) Bool
  (
  (($eor_str-in-re-union-elim.fev1 rs1 r2 s1 r1 $eo_1) (eo::define ((_v0 (str.in_re s1))) (_ (= (_ _v0 (_ (re.union r1) (_ (re.union r2) rs1)))) (_ (or (_ _v0 r1)) (_ (or (_ _v0 $eo_1)) false)))))
  )
)
; program: $eor_str-in-re-union-elim
(program $eor_str-in-re-union-elim ((s1 (Seq Char)) (r1 RegLan) (r2 RegLan) (rs1 RegLan))
  :signature ((Seq Char) RegLan RegLan RegLan) Bool
  (
  (($eor_str-in-re-union-elim s1 r1 r2 rs1) ($eor_str-in-re-union-elim.fev1 rs1 r2 s1 r1 ($singleton_elim (_ (re.union r2) rs1))))
  )
)
; program: $eovc_str-in-re-union-elim
(program $eovc_str-in-re-union-elim ((s1 (Seq Char)) (r1 RegLan) (r2 RegLan) (rs1 RegLan))
  :signature (RegLan RegLan RegLan (Seq Char)) Bool
  (
  (($eovc_str-in-re-union-elim rs1 r2 r1 s1) ($eo_requires_eq ($eo_model_sat ($eor_str-in-re-union-elim s1 r1 r2 rs1) false false) true true))
  )
)
(echo "smt-meta $eovc_str-in-re-union-elim")
; program: $eor_str-in-re-inter-elim.fev1
(program $eor_str-in-re-inter-elim.fev1 ((r2 RegLan) (rs1 RegLan) (r1 RegLan) (s1 (Seq Char)) ($eo_1 RegLan))
  :signature (RegLan RegLan (Seq Char) RegLan RegLan) Bool
  (
  (($eor_str-in-re-inter-elim.fev1 rs1 r2 s1 r1 $eo_1) (eo::define ((_v0 (str.in_re s1))) (_ (= (_ _v0 (_ (re.inter r1) (_ (re.inter r2) rs1)))) (_ (and (_ _v0 r1)) (_ (and (_ _v0 $eo_1)) true)))))
  )
)
; program: $eor_str-in-re-inter-elim
(program $eor_str-in-re-inter-elim ((s1 (Seq Char)) (r1 RegLan) (r2 RegLan) (rs1 RegLan))
  :signature ((Seq Char) RegLan RegLan RegLan) Bool
  (
  (($eor_str-in-re-inter-elim s1 r1 r2 rs1) ($eor_str-in-re-inter-elim.fev1 rs1 r2 s1 r1 ($singleton_elim (_ (re.inter r2) rs1))))
  )
)
; program: $eovc_str-in-re-inter-elim
(program $eovc_str-in-re-inter-elim ((s1 (Seq Char)) (r1 RegLan) (r2 RegLan) (rs1 RegLan))
  :signature (RegLan RegLan RegLan (Seq Char)) Bool
  (
  (($eovc_str-in-re-inter-elim rs1 r2 r1 s1) ($eo_requires_eq ($eo_model_sat ($eor_str-in-re-inter-elim s1 r1 r2 rs1) false false) true true))
  )
)
(echo "smt-meta $eovc_str-in-re-inter-elim")
; program: $eor_str-in-re-range-elim
(program $eor_str-in-re-range-elim ((c1 (Seq Char)) (s1 (Seq Char)) (c2 (Seq Char)))
  :signature ((Seq Char) (Seq Char) (Seq Char) Bool Bool) Bool
  (
  (($eor_str-in-re-range-elim s1 c1 c2 (_ (= (str.len c1)) 1) (_ (= (str.len c2)) 1)) (eo::define ((_v0 (str.to_code s1))) (_ (= (_ (str.in_re s1) (_ (re.range c1) c2))) (_ (and (_ (<= (str.to_code c1)) _v0)) (_ (and (_ (<= _v0) (str.to_code c2))) true)))))
  )
)
; program: $eovc_str-in-re-range-elim
(program $eovc_str-in-re-range-elim ((s1 (Seq Char)) (c1 (Seq Char)) (c2 (Seq Char)))
  :signature ((Seq Char) (Seq Char) (Seq Char)) Bool
  (
  (($eovc_str-in-re-range-elim c2 c1 s1) (eo::define ((_v0 (_ (= (str.len c2)) 1))) (eo::define ((_v1 (_ (= (str.len c1)) 1))) ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-in-re-range-elim s1 c1 c2 _v1 _v0) false false) true true))))))
  )
)
(echo "smt-meta $eovc_str-in-re-range-elim")
; program: $eor_str-in-re-contains
(program $eor_str-in-re-contains ((t1 (Seq Char)) (s1 (Seq Char)))
  :signature ((Seq Char) (Seq Char)) Bool
  (
  (($eor_str-in-re-contains t1 s1) (eo::define ((_v0 (re.++ (re.* re.allchar)))) (_ (= (_ (str.in_re t1) (_ _v0 (_ (re.++ (str.to_re s1)) (_ _v0 (str.to_re "")))))) (_ (str.contains t1) s1))))
  )
)
; program: $eovc_str-in-re-contains
(program $eovc_str-in-re-contains ((t1 (Seq Char)) (s1 (Seq Char)))
  :signature ((Seq Char) (Seq Char)) Bool
  (
  (($eovc_str-in-re-contains s1 t1) ($eo_requires_eq ($eo_model_sat ($eor_str-in-re-contains t1 s1) false false) true true))
  )
)
(echo "smt-meta $eovc_str-in-re-contains")
; program: $eor_str-in-re-from-int-nemp-dig-range
(program $eor_str-in-re-from-int-nemp-dig-range ((n1 Int))
  :signature (Int Bool) Bool
  (
  (($eor_str-in-re-from-int-nemp-dig-range n1 (_ (= (_ (>= n1) 0)) true)) (eo::define ((_v0 (_ (re.range "0") "9"))) (_ (= (_ (str.in_re (str.from_int n1)) (_ (re.++ _v0) (_ (re.++ (re.* _v0)) (str.to_re ""))))) true)))
  )
)
; program: $eovc_str-in-re-from-int-nemp-dig-range
(program $eovc_str-in-re-from-int-nemp-dig-range ((n1 Int))
  :signature (Int) Bool
  (
  (($eovc_str-in-re-from-int-nemp-dig-range n1) (eo::define ((_v0 (_ (= (_ (>= n1) 0)) true))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_str-in-re-from-int-nemp-dig-range n1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_str-in-re-from-int-nemp-dig-range")
; program: $eor_str-in-re-from-int-dig-range
(program $eor_str-in-re-from-int-dig-range ((n1 Int))
  :signature (Int) Bool
  (
  (($eor_str-in-re-from-int-dig-range n1) (_ (= (_ (str.in_re (str.from_int n1)) (re.* (_ (re.range "0") "9")))) true))
  )
)
; program: $eovc_str-in-re-from-int-dig-range
(program $eovc_str-in-re-from-int-dig-range ((n1 Int))
  :signature (Int) Bool
  (
  (($eovc_str-in-re-from-int-dig-range n1) ($eo_requires_eq ($eo_model_sat ($eor_str-in-re-from-int-dig-range n1) false false) true true))
  )
)
(echo "smt-meta $eovc_str-in-re-from-int-dig-range")
; program: $eor_eq-refl
(program $eor_eq-refl ((@T0 Type) (t1 @T0))
  :signature (@T0) Bool
  (
  (($eor_eq-refl t1) (_ (= (_ (= t1) t1)) true))
  )
)
; program: $eovc_eq-refl
(program $eovc_eq-refl ((@T0 Type) (t1 @T0))
  :signature (@T0) Bool
  (
  (($eovc_eq-refl t1) ($eo_requires_eq ($eo_model_sat ($eor_eq-refl t1) false false) true true))
  )
)
(echo "smt-meta $eovc_eq-refl")
; program: $eor_eq-symm
(program $eor_eq-symm ((@T0 Type) (@T1 Type) (s1 @T1) (t1 @T0))
  :signature (@T0 @T1) Bool
  (
  (($eor_eq-symm t1 s1) (_ (= (_ (= t1) s1)) (_ (= s1) t1)))
  )
)
; program: $eovc_eq-symm
(program $eovc_eq-symm ((@T1 Type) (@T0 Type) (t1 @T0) (s1 @T1))
  :signature (@T1 @T0) Bool
  (
  (($eovc_eq-symm s1 t1) ($eo_requires_eq ($eo_model_sat ($eor_eq-symm t1 s1) false false) true true))
  )
)
(echo "smt-meta $eovc_eq-symm")
; program: $eor_eq-cond-deq
(program $eor_eq-cond-deq ((@T0 Type) (@T1 Type) (@T2 Type) (s1 @T1) (t1 @T0) (r1 @T2))
  :signature (@T0 @T1 @T2 Bool) Bool
  (
  (($eor_eq-cond-deq t1 s1 r1 (_ (= (_ (= s1) r1)) false)) (eo::define ((_v0 (= t1))) (eo::define ((_v1 (_ _v0 r1))) (eo::define ((_v2 (_ _v0 s1))) (_ (= (_ (= _v2) _v1)) (_ (and (not _v2)) (_ (and (not _v1)) true)))))))
  )
)
; program: $eovc_eq-cond-deq
(program $eovc_eq-cond-deq ((@T2 Type) (@T1 Type) (@T0 Type) (t1 @T0) (s1 @T1) (r1 @T2))
  :signature (@T2 @T1 @T0) Bool
  (
  (($eovc_eq-cond-deq r1 s1 t1) (eo::define ((_v0 (_ (= (_ (= s1) r1)) false))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_eq-cond-deq t1 s1 r1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_eq-cond-deq")
; program: $eor_eq-ite-lift
(program $eor_eq-ite-lift ((@T0 Type) (@T1 Type) (@T2 Type) (C1 Bool) (t1 @T0) (s1 @T1) (r1 @T2))
  :signature (Bool @T0 @T1 @T2) Bool
  (
  (($eor_eq-ite-lift C1 t1 s1 r1) (eo::define ((_v0 (ite C1))) (_ (= (_ (= (_ (_ _v0 t1) s1)) r1)) (_ (_ _v0 (_ (= t1) r1)) (_ (= s1) r1)))))
  )
)
; program: $eovc_eq-ite-lift
(program $eovc_eq-ite-lift ((@T2 Type) (@T1 Type) (@T0 Type) (C1 Bool) (t1 @T0) (s1 @T1) (r1 @T2))
  :signature (@T2 @T1 @T0 Bool) Bool
  (
  (($eovc_eq-ite-lift r1 s1 t1 C1) ($eo_requires_eq ($eo_model_sat ($eor_eq-ite-lift C1 t1 s1 r1) false false) true true))
  )
)
(echo "smt-meta $eovc_eq-ite-lift")
; program: $eor_distinct-binary-elim
(program $eor_distinct-binary-elim ((@T0 Type) (@T1 Type) (t1 @T0) (s1 @T1))
  :signature (@T0 @T1) Bool
  (
  (($eor_distinct-binary-elim t1 s1) (_ (= (_ (distinct t1) s1)) (not (_ (= t1) s1))))
  )
)
; program: $eovc_distinct-binary-elim
(program $eovc_distinct-binary-elim ((@T1 Type) (@T0 Type) (t1 @T0) (s1 @T1))
  :signature (@T1 @T0) Bool
  (
  (($eovc_distinct-binary-elim s1 t1) ($eo_requires_eq ($eo_model_sat ($eor_distinct-binary-elim t1 s1) false false) true true))
  )
)
(echo "smt-meta $eovc_distinct-binary-elim")
; program: $eor_uf-bv2nat-int2bv
(program $eor_uf-bv2nat-int2bv ((@n0 Int) (w1 Int) (t1 (BitVec @n0)))
  :signature (Int (BitVec @n0) Bool) Bool
  (
  (($eor_uf-bv2nat-int2bv w1 t1 (_ (= (@bvsize t1)) w1)) (_ (= (_ (int_to_bv w1) (ubv_to_int t1))) t1))
  )
)
; program: $eovc_uf-bv2nat-int2bv
(program $eovc_uf-bv2nat-int2bv ((@n0 Int) (t1 (BitVec @n0)) (w1 Int))
  :signature (Int (BitVec @n0)) Bool
  (
  (($eovc_uf-bv2nat-int2bv w1 t1) (eo::define ((_v0 (_ (= (@bvsize t1)) w1))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_uf-bv2nat-int2bv w1 t1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_uf-bv2nat-int2bv")
; program: $eor_uf-bv2nat-int2bv-extend
(program $eor_uf-bv2nat-int2bv-extend ((@n0 Int) (w1 Int) (n1 Int) (t1 (BitVec @n0)))
  :signature (Int (BitVec @n0) Int Bool Bool) Bool
  (
  ((eo::define ((_v0 (@bvsize t1))) ($eor_uf-bv2nat-int2bv-extend w1 t1 n1 (_ (= (_ (> w1) _v0)) true) (_ (= n1) (_ (- w1) _v0)))) (_ (= (_ (int_to_bv w1) (ubv_to_int t1))) (_ (concat (_ (@bv 0) n1)) (_ (concat t1) (eo::to_bin 0 0)))))
  )
)
; program: $eovc_uf-bv2nat-int2bv-extend
(program $eovc_uf-bv2nat-int2bv-extend ((@n0 Int) (n1 Int) (w1 Int) (t1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int) Bool
  (
  (($eovc_uf-bv2nat-int2bv-extend t1 w1 n1) (eo::define ((_v0 (@bvsize t1))) (eo::define ((_v1 (_ (= n1) (_ (- w1) _v0)))) (eo::define ((_v2 (_ (= (_ (> w1) _v0)) true))) ($eo_requires_eq ($eo_model_sat _v2 true false) true ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat ($eor_uf-bv2nat-int2bv-extend w1 t1 n1 _v2 _v1) false false) true true)))))))
  )
)
(echo "smt-meta $eovc_uf-bv2nat-int2bv-extend")
; program: $eor_uf-bv2nat-int2bv-extract
(program $eor_uf-bv2nat-int2bv-extract ((@n0 Int) (w1 Int) (wm1 Int) (t1 (BitVec @n0)))
  :signature (Int (BitVec @n0) Int Bool Bool) Bool
  (
  (($eor_uf-bv2nat-int2bv-extract w1 t1 wm1 (_ (= (_ (< w1) (@bvsize t1))) true) (_ (= wm1) (_ (- w1) 1))) (_ (= (_ (int_to_bv w1) (ubv_to_int t1))) (_ (_ (extract wm1) 0) t1)))
  )
)
; program: $eovc_uf-bv2nat-int2bv-extract
(program $eovc_uf-bv2nat-int2bv-extract ((@n0 Int) (t1 (BitVec @n0)) (wm1 Int) (w1 Int))
  :signature (Int Int (BitVec @n0)) Bool
  (
  (($eovc_uf-bv2nat-int2bv-extract w1 wm1 t1) (eo::define ((_v0 (_ (= wm1) (_ (- w1) 1)))) (eo::define ((_v1 (_ (= (_ (< w1) (@bvsize t1))) true))) ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_uf-bv2nat-int2bv-extract w1 t1 wm1 _v1 _v0) false false) true true))))))
  )
)
(echo "smt-meta $eovc_uf-bv2nat-int2bv-extract")
; program: $eor_uf-int2bv-bv2nat
(program $eor_uf-int2bv-bv2nat ((t1 Int) (w1 Int))
  :signature (Int Int) Bool
  (
  (($eor_uf-int2bv-bv2nat w1 t1) (_ (= (ubv_to_int (_ (int_to_bv w1) t1))) (_ (mod_total t1) (int.pow2 w1))))
  )
)
; program: $eovc_uf-int2bv-bv2nat
(program $eovc_uf-int2bv-bv2nat ((w1 Int) (t1 Int))
  :signature (Int Int) Bool
  (
  (($eovc_uf-int2bv-bv2nat t1 w1) ($eo_requires_eq ($eo_model_sat ($eor_uf-int2bv-bv2nat w1 t1) false false) true true))
  )
)
(echo "smt-meta $eovc_uf-int2bv-bv2nat")
; program: $eor_uf-bv2nat-geq-elim
(program $eor_uf-bv2nat-geq-elim ((@n0 Int) (x1 (BitVec @n0)) (w1 Int) (n1 Int))
  :signature ((BitVec @n0) Int Int Bool) Bool
  (
  (($eor_uf-bv2nat-geq-elim x1 n1 w1 (_ (= w1) (@bvsize x1))) (_ (= (_ (>= (ubv_to_int x1)) n1)) (_ (_ (ite (_ (>= n1) w1)) false) (_ (_ (ite (_ (< n1) 0)) true) (_ (bvuge x1) (_ (int_to_bv w1) n1))))))
  )
)
; program: $eovc_uf-bv2nat-geq-elim
(program $eovc_uf-bv2nat-geq-elim ((@n0 Int) (n1 Int) (w1 Int) (x1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int) Bool
  (
  (($eovc_uf-bv2nat-geq-elim x1 w1 n1) (eo::define ((_v0 (_ (= w1) (@bvsize x1)))) ($eo_requires_eq ($eo_model_sat _v0 true false) true ($eo_requires_eq ($eo_model_sat ($eor_uf-bv2nat-geq-elim x1 n1 w1 _v0) false false) true true))))
  )
)
(echo "smt-meta $eovc_uf-bv2nat-geq-elim")
; program: $eor_uf-int2bv-bvult-equiv
(program $eor_uf-int2bv-bvult-equiv ((@n0 Int) (@n1 Int) (t1 (BitVec @n0)) (s1 (BitVec @n1)))
  :signature ((BitVec @n0) (BitVec @n1)) Bool
  (
  (($eor_uf-int2bv-bvult-equiv t1 s1) (_ (= (_ (bvult t1) s1)) (_ (< (ubv_to_int t1)) (ubv_to_int s1))))
  )
)
; program: $eovc_uf-int2bv-bvult-equiv
(program $eovc_uf-int2bv-bvult-equiv ((@n1 Int) (@n0 Int) (t1 (BitVec @n0)) (s1 (BitVec @n1)))
  :signature ((BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_uf-int2bv-bvult-equiv s1 t1) ($eo_requires_eq ($eo_model_sat ($eor_uf-int2bv-bvult-equiv t1 s1) false false) true true))
  )
)
(echo "smt-meta $eovc_uf-int2bv-bvult-equiv")
; program: $eor_uf-int2bv-bvule-equiv
(program $eor_uf-int2bv-bvule-equiv ((@n0 Int) (@n1 Int) (t1 (BitVec @n0)) (s1 (BitVec @n1)))
  :signature ((BitVec @n0) (BitVec @n1)) Bool
  (
  (($eor_uf-int2bv-bvule-equiv t1 s1) (_ (= (_ (bvule t1) s1)) (_ (<= (ubv_to_int t1)) (ubv_to_int s1))))
  )
)
; program: $eovc_uf-int2bv-bvule-equiv
(program $eovc_uf-int2bv-bvule-equiv ((@n1 Int) (@n0 Int) (t1 (BitVec @n0)) (s1 (BitVec @n1)))
  :signature ((BitVec @n1) (BitVec @n0)) Bool
  (
  (($eovc_uf-int2bv-bvule-equiv s1 t1) ($eo_requires_eq ($eo_model_sat ($eor_uf-int2bv-bvule-equiv t1 s1) false false) true true))
  )
)
(echo "smt-meta $eovc_uf-int2bv-bvule-equiv")
; program: $eor_uf-sbv-to-int-elim
(program $eor_uf-sbv-to-int-elim ((@n0 Int) (wm1 Int) (t1 (BitVec @n0)) (n1 Int))
  :signature ((BitVec @n0) Int Int Bool Bool) Bool
  (
  ((eo::define ((_v0 (@bvsize t1))) ($eor_uf-sbv-to-int-elim t1 wm1 n1 (_ (= wm1) (_ (- _v0) 1)) (_ (= n1) (int.pow2 _v0)))) (eo::define ((_v0 (ubv_to_int t1))) (_ (= (sbv_to_int t1)) (_ (_ (ite (_ (= (_ (_ (extract wm1) wm1) t1)) (_ (@bv 0) 1))) _v0) (_ (- _v0) n1)))))
  )
)
; program: $eovc_uf-sbv-to-int-elim
(program $eovc_uf-sbv-to-int-elim ((@n0 Int) (wm1 Int) (n1 Int) (t1 (BitVec @n0)))
  :signature ((BitVec @n0) Int Int) Bool
  (
  (($eovc_uf-sbv-to-int-elim t1 n1 wm1) (eo::define ((_v0 (@bvsize t1))) (eo::define ((_v1 (_ (= n1) (int.pow2 _v0)))) (eo::define ((_v2 (_ (= wm1) (_ (- _v0) 1)))) ($eo_requires_eq ($eo_model_sat _v2 true false) true ($eo_requires_eq ($eo_model_sat _v1 true false) true ($eo_requires_eq ($eo_model_sat ($eor_uf-sbv-to-int-elim t1 wm1 n1 _v2 _v1) false false) true true)))))))
  )
)
(echo "smt-meta $eovc_uf-sbv-to-int-elim")
; program: $eor_evaluate.fev1
(program $eor_evaluate.fev1 ((U Type) (t U) ($eo_1 U))
  :signature (U U) Bool
  (
  (($eor_evaluate.fev1 t $eo_1) (_ (= t) $eo_1))
  )
)
; program: $eor_evaluate
(program $eor_evaluate ((U Type) (t U))
  :signature (U) Bool
  (
  (($eor_evaluate t) ($eor_evaluate.fev1 t ($run_evaluate t)))
  )
)
; program: $eovc_evaluate
(program $eovc_evaluate ((U Type) (t U))
  :signature (U) Bool
  (
  (($eovc_evaluate t) ($eo_requires_eq ($eo_model_sat ($eor_evaluate t) false false) true true))
  )
)
(echo "smt-meta $eovc_evaluate")
; program: $eor_distinct_values.fev2
(program $eor_distinct_values.fev2 ((U Type) (s U) (t U))
  :signature (U U Bool) Bool
  (
  (($eor_distinct_values.fev2 s t true) false)
  (($eor_distinct_values.fev2 s t false) ($are_distinct_terms_list (_ ($eo_List_cons t) (_ ($eo_List_cons s) $eo_List_nil)) (eo::typeof t)))
  )
)
; program: $eor_distinct_values.fev3
(program $eor_distinct_values.fev3 ((U Type) ($eo_1 Bool) ($eo_3 Bool) (t U) (s U))
  :signature (U U Bool Bool Bool) Bool
  (
  (($eor_distinct_values.fev3 s t $eo_1 $eo_3 $eo_3) (not (_ (= t) s)))
  )
)
; program: $eor_distinct_values.fev1
(program $eor_distinct_values.fev1 ((U Type) (s U) (t U) ($eo_1 Bool))
  :signature (U U Bool) Bool
  (
  (($eor_distinct_values.fev1 s t $eo_1) ($eor_distinct_values.fev3 s t $eo_1 $eo_1 true))
  )
)
; program: $eor_distinct_values
(program $eor_distinct_values ((U Type) (t U) (s U))
  :signature (U U) Bool
  (
  (($eor_distinct_values t s) ($eor_distinct_values.fev1 s t ($eor_distinct_values.fev2 s t (eo::eq t s))))
  )
)
; program: $eovc_distinct_values
(program $eovc_distinct_values ((U Type) (t U) (s U))
  :signature (U U) Bool
  (
  (($eovc_distinct_values s t) ($eo_requires_eq ($eo_model_sat ($eor_distinct_values t s) false false) true true))
  )
)
(echo "smt-meta $eovc_distinct_values")
; program: $eor_aci_norm.fev3
(program $eor_aci_norm.fev3 ((U Type) (a U) (b U))
  :signature (U U Bool) Bool
  (
  (($eor_aci_norm.fev3 b a true) true)
  (($eor_aci_norm.fev3 b a false) ($aci_norm_eq ($get_aci_normal_form a) ($get_aci_normal_form b)))
  )
)
; program: $eor_aci_norm.fev2
(program $eor_aci_norm.fev2 ((U Type) (b U) (a U))
  :signature (U U Bool) Bool
  (
  (($eor_aci_norm.fev2 b a true) true)
  (($eor_aci_norm.fev2 b a false) ($eor_aci_norm.fev3 b a ($aci_norm_eq ($get_aci_normal_form b) a)))
  )
)
; program: $eor_aci_norm.fev4
(program $eor_aci_norm.fev4 ((U Type) ($eo_1 Bool) ($eo_4 Bool) (a U) (b U))
  :signature (U U Bool Bool Bool) Bool
  (
  (($eor_aci_norm.fev4 b a $eo_1 $eo_4 $eo_4) (_ (= a) b))
  )
)
; program: $eor_aci_norm.fev1
(program $eor_aci_norm.fev1 ((U Type) (b U) (a U) ($eo_1 Bool))
  :signature (U U Bool) Bool
  (
  (($eor_aci_norm.fev1 b a $eo_1) ($eor_aci_norm.fev4 b a $eo_1 $eo_1 true))
  )
)
; program: $eor_aci_norm
(program $eor_aci_norm ((U Type) (a U) (b U))
  :signature (Bool) Bool
  (
  (($eor_aci_norm (_ (= a) b)) ($eor_aci_norm.fev1 b a ($eor_aci_norm.fev2 b a ($aci_norm_eq ($get_aci_normal_form a) b))))
  )
)
; program: $eovc_aci_norm
(program $eovc_aci_norm ((U Type) (a U) (b U))
  :signature (U U) Bool
  (
  (($eovc_aci_norm b a) ($eo_requires_eq ($eo_model_sat ($eor_aci_norm (_ (= a) b)) false false) true true))
  )
)
(echo "smt-meta $eovc_aci_norm")
; program: $eor_absorb.fev2
(program $eor_absorb.fev2 ((U Type) ($eo_4 Bool) (t U) (zero U))
  :signature (U U Bool Bool) Bool
  (
  (($eor_absorb.fev2 zero t $eo_4 $eo_4) (_ (= t) zero))
  )
)
; program: $eor_absorb.fev1
(program $eor_absorb.fev1 ((U Type) ($eo_2 Bool) (t U) (zero U))
  :signature (U U Bool Bool) Bool
  (
  (($eor_absorb.fev1 zero t $eo_2 $eo_2) ($eor_absorb.fev2 zero t ($is_absorb t zero) true))
  )
)
; program: $eor_absorb
(program $eor_absorb ((U Type) (t U) (zero U))
  :signature (Bool) Bool
  (
  (($eor_absorb (_ (= t) zero)) ($eor_absorb.fev1 zero t ($get_zero t) zero))
  )
)
; program: $eovc_absorb
(program $eovc_absorb ((U Type) (t U) (zero U))
  :signature (U U) Bool
  (
  (($eovc_absorb zero t) ($eo_requires_eq ($eo_model_sat ($eor_absorb (_ (= t) zero)) false false) true true))
  )
)
(echo "smt-meta $eovc_absorb")
; program: $eor_distinct-card-conflict.fev1
(program $eor_distinct-card-conflict.fev1 (($eo_2 Bool) (D Bool))
  :signature (Bool Bool Bool) Bool
  (
  (($eor_distinct-card-conflict.fev1 D $eo_2 $eo_2) (_ (= D) false))
  )
)
; program: $eor_distinct-card-conflict
(program $eor_distinct-card-conflict ((D Bool))
  :signature (Bool) Bool
  (
  (($eor_distinct-card-conflict (_ (= D) false)) (eo::define ((_v0 ($extract_pairwise_args distinct and D))) ($eor_distinct-card-conflict.fev1 D (eo::gt (eo::list_len $eo_List_cons _v0) ($compute_card ($assoc_nil_nth_type $eo_List_cons _v0 0))) true)))
  )
)
; program: $eovc_distinct-card-conflict
(program $eovc_distinct-card-conflict ((D Bool))
  :signature (Bool) Bool
  (
  (($eovc_distinct-card-conflict D) ($eo_requires_eq ($eo_model_sat ($eor_distinct-card-conflict (_ (= D) false)) false false) true true))
  )
)
(echo "smt-meta $eovc_distinct-card-conflict")
; program: $eor_trust
(program $eor_trust ((P Bool) (F Bool))
  :signature (Bool Bool) Bool
  (
  (($eor_trust F P) F)
  )
)

