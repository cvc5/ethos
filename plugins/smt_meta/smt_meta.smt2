(set-logic UFDTSNIRA)

; TODO: types vs terms
;(declare-datatype sm.Type
;  (
;  )
;)
(declare-datatype sm.Term
  (
  ; The type of types  TODO: maybe this is Eunoia??
  (sm.Type)
  ; Application of an SMT-LIB term
  (sm.Apply (sm.Apply.arg1 sm.Term) (sm.Apply.arg2 sm.Term))
  ; Booleans
  (sm.BoolType)
  (sm.True)
  (sm.False)
  ; Literal types
  (sm.Numeral (sm.Numeral.arg1 Int))
  (sm.Rational (sm.Rational.arg1 Real))
  (sm.String (sm.String.arg1 String))
  (sm.Binary (sm.Binary.arg1 Int) (sm.Binary.arg2 Int))

  ; generated by signature
$SM_TERM_DECL$
  )
)

; A Eunoia internal term
(declare-datatype eo.Term
  (
  ; Application of a Eunoia term
  (eo.FunType (eo.FunType.arg1 eo.Term) (eo.FunType.arg2 eo.Term))
  ; Application of a Eunoia term
  (eo.Apply (eo.Apply.arg1 eo.Term) (eo.Apply.arg2 eo.Term))
  ; The SMT-LIB embedding of a Eunoia term
  (eo.SmtTerm (eo.SmtTerm.arg1 sm.Term))
  ; Defines "stuckness"
  (eo.Stuck)

  ; generated by signature
$SM_EO_TERM_DECL$
  )
)

; convert to SMT
(define-fun eo.to_smt ((x eo.Term)) sm.Term (eo.SmtTerm.arg1 x))
(define-fun smt.to_eo ((x sm.Term)) eo.Term (eo.SmtTerm x))

;;; Utilities

; Stuckness propagates through non-nullary constructors
(define-fun $eo_FunType ((x eo.Term) (y eo.Term)) eo.Term
  (ite (or (= x eo.Stuck) (= y eo.Stuck))
    eo.Stuck
    (eo.FunType x y)))

(define-fun $eo_Apply ((x eo.Term) (y eo.Term)) eo.Term
  (ite (or (= x eo.Stuck) (= y eo.Stuck))
    eo.Stuck
    (eo.Apply x y)))

;;; Core operators

; Note that these cannot be lifted further since their semantics wrt
; stuckness is non-standard.

; axiom: $eo_is_ok
(define-fun $eo_is_ok ((x1 eo.Term)) eo.Term
  (ite (= x1 eo.Stuck)
    (eo.SmtTerm sm.False)
    (eo.SmtTerm sm.True)))

; axiom: $eo_ite
(define-fun $eo_ite ((x1 eo.Term) (x2 eo.Term) (x3 eo.Term)) eo.Term
  (ite (= x1 (eo.SmtTerm sm.True))
    x2
  (ite (= x1 (eo.SmtTerm sm.False))
    x3
    eo.Stuck)))

; axiom: $eo_requires
(define-fun $eo_requires ((x1 eo.Term) (x2 eo.Term) (x3 eo.Term)) eo.Term
  (ite (and (not (= x1 eo.Stuck)) (not (= x2 eo.Stuck)) (= x1 x2))
    x3
    eo.Stuck))

; axiom: $eo_hash
; note: This is defined axiomatically.
; TODO: break dependence on sm.Numeral??
(declare-fun $eo_hash (eo.Term) eo.Term)
(assert (! (forall ((x eo.Term))
  (=> (not (= x eo.Stuck))
    (and
      ((_ is eo.SmtTerm) ($eo_hash x))
      ((_ is sm.Numeral) (eo.to_smt ($eo_hash x)))))) :named sm.hash_numeral))
(assert (! (forall ((x eo.Term) (y eo.Term))
  (=> (and (not (= x eo.Stuck)) (not (= y eo.Stuck))
    (= ($eo_hash x) ($eo_hash y))) (= x y))) :named sm.hash_inj))

;;; User defined symbols

$SM_DEFS$

;;; The verification condition

$SMT_VC$

(check-sat)
