(set-logic UFDTSNIRA)


;(declare-datatype sm.Type
;  (
;  )
;)
(declare-datatype sm.Term
  (
  ; Core
  (sm.Type)
  (sm.Apply (sm.Apply.arg1 sm.Term) (sm.Apply.arg2 sm.Term))
  ; Booleans
  (sm.BoolType)
  (sm.True)
  (sm.False)
  ; builtin literal types
  (sm.Numeral (sm.Numeral.val Int))
  (sm.Rational (sm.Rational.val Real))
  (sm.String (sm.String.val String))
  (sm.Binary (sm.Binary.width Int) (sm.Binary.val Int))

  ; generated by signature
$SM_TERM_DECL$
  )
)

; A Eunoia internal term
(declare-datatype eo.Term
  (
  ; Application of a Eunoia term
  (eo.Apply (eo.Apply.arg1 eo.Term) (eo.Apply.arg2 eo.Term))
  ; A term used to define the semantics of SMT-LIB.
  (eo.SmtTerm (eo.SmtTerm.val sm.Term))
  ; Represents "stuckness"
  (eo.Stuck)
  ; generated by signature
$SM_EO_TERM_DECL$
  ; none
  (eo.None)
  )
)

; convert to SMT
(define-fun eo.to_smt ((x eo.Term)) sm.Term (eo.SmtTerm.val x))
(define-fun smt.to_eo ((x sm.Term)) eo.Term (eo.SmtTerm x))

;;; Literal conversions
; All these methods should only be used for sm.Term

; smt-define: $smt_to_eo_bool
(define-fun $smt_to_eo_bool ((x Bool)) eo.Term
  (smt.to_eo (ite x sm.True sm.False)))
  
; smt-define: $smt_from_eo_bool
(define-fun $smt_from_eo_bool ((x eo.Term)) Bool
  (= (eo.to_smt x) sm.True))

; smt-define: $sm_is_Boolean
(define-fun $sm_is_Boolean ((x eo.Term)) Bool
  ; key that this uses smt.to_eo, not eo.to_smt
  (or (= x (smt.to_eo sm.True)) (= x (smt.to_eo sm.False))))

; smt-define: $smt_to_eo_z
(define-fun $smt_to_eo_z ((x Int)) eo.Term
  (smt.to_eo (sm.Numeral x)))
  
; smt-define: $smt_from_eo_z
(define-fun $smt_from_eo_z ((x eo.Term)) Int
  (sm.Numeral.val (eo.to_smt x)))

; smt-define: $smt_to_eo_q
(define-fun $smt_to_eo_q ((x Real)) eo.Term
  (smt.to_eo (sm.Rational x)))
  
; smt-define: $smt_from_eo_q
(define-fun $smt_from_eo_q ((x eo.Term)) Real
  (sm.Rational.val (eo.to_smt x)))

; smt-define: $smt_to_eo_str
(define-fun $smt_to_eo_str ((x String)) eo.Term
  (smt.to_eo (sm.String x)))
  
; smt-define: $smt_from_eo_str
(define-fun $smt_from_eo_str ((x eo.Term)) String
  (sm.String.val (eo.to_smt x)))

;;; Utilities

; Stuckness propagates through non-nullary constructors
;(define-fun $sm_FunType ((x sm.Term) (y sm.Term)) sm.Term
;  (ite (or (= x sm.Stuck) (= y sm.Stuck))
;    sm.Stuck
;    (sm.FunType x y)))

(define-fun $eo_Apply ((x eo.Term) (y eo.Term)) eo.Term
  (ite (or (= x eo.Stuck) (= y eo.Stuck))
    eo.Stuck
    (eo.Apply x y)))


;;; Definitions of forward declared programs in SMT preamble

; note: should never be called on negative numbers
(declare-fun $sm_pow2_eval (Int) Int)
(assert (! (forall ((i Int))
  (= ($sm_pow2_eval i) (ite (<= i 0) 1 (* 2 ($sm_pow2_eval (- i 1)))))) :named sm.eval_pow2))

; program: $sm_Binary
; Forward declaration in model_smt_preamble.eo
(define-fun $sm_Binary ((w Int) (x Int)) eo.Term
  (ite (and (<= 0 w) (< w 4294967296))
    (smt.to_eo (sm.Binary w (mod x ($sm_pow2_eval w))))
    eo.Stuck))

(define-fun $sm_bit ((x Int) (i Int)) Bool
  (= (mod (div x ($sm_pow2_eval i)) 2) 1))

(declare-fun $sm_Binary_and (Int Int Int) Int)
(assert (! (forall ((w Int) (x1 Int) (x2 Int))
  (= ($sm_Binary_and w x1 x2)
    (ite (= w 0) 0
    (ite (= w 1) (ite (and (= x1 1) (= x2 1)) 1 0)
      (+ ($sm_Binary_and (- w 1) x1 x2) (* ($sm_pow2_eval w)
         (ite (and ($sm_bit x1 w) ($sm_bit x2 w)) 1 0))))))) :named sm.eval_bin_and))

; ((w Int) (x1 Int) (x2 Int))
(declare-fun $sm_Binary_or (Int Int Int) Int) ; TODO

; ((w Int) (x1 Int) (x2 Int))
(declare-fun $sm_Binary_xor (Int Int Int) Int) ; TODO

; ((w Int) (x1 Int))
(declare-fun $sm_Binary_not (Int Int) Int) ; TODO

; ((x1 Int) (l Int) (h Int))
(declare-fun $sm_Binary_extract (Int Int Int) Int) ; TODO

; ((w Int) (x Int) (x1 Int) (x2 Int))
(declare-fun $sm_Binary_concat (Int Int Int Int) Int) ; TODO

;;; Core operators

; axiom: $eo_is_ok
(define-fun $eo_is_ok ((x1 eo.Term)) eo.Term
  ($smt_to_eo_bool (not (= x1 eo.Stuck))))

; axiom: $eo_ite
(define-fun $eo_ite ((x1 eo.Term) (x2 eo.Term) (x3 eo.Term)) eo.Term
  (ite (= x1 (eo.SmtTerm sm.True))
    x2
  (ite (= x1 (eo.SmtTerm sm.False))
    x3
    eo.Stuck)))

; axiom: $eo_requires
(define-fun $eo_requires ((x1 eo.Term) (x2 eo.Term) (x3 eo.Term)) eo.Term
  (ite (and (not (= x1 eo.Stuck)) (not (= x2 eo.Stuck)) (= x1 x2))
    x3
    eo.Stuck))

; axiom: $eo_hash
; note: This is defined axiomatically.
(declare-fun $eo_hash (eo.Term) eo.Term)
(assert (! (forall ((x eo.Term))
  (=> (not (= x eo.Stuck))
    (and
      ((_ is eo.SmtTerm) ($eo_hash x))
      ((_ is sm.Numeral) (eo.to_smt ($eo_hash x)))))) :named sm.hash_numeral))
(assert (! (forall ((x eo.Term) (y eo.Term))
  (=> (and (not (= x eo.Stuck)) (not (= y eo.Stuck))
    (= ($eo_hash x) ($eo_hash y))) (= x y))) :named sm.hash_inj))

;;; User defined symbols

$SM_DEFS$

;;; The verification condition

$SMT_VC$

(check-sat)
