(echo "trim-defs-cmd (depends divisible (= (mod x2 x1) 0))")
(echo "trim-defs-cmd (depends /_total (ite (= x2 0/1) 0/1 (/ x1 x2)))")
(echo "trim-defs-cmd (depends div_total (ite (= x2 0) 0 (div x1 x2)))")
(echo "trim-defs-cmd (depends mod_total (ite (= x2 0) x1 (mod x1 x2)))")
(echo "trim-defs-cmd (depends distinct (not (= x1 x2)))")
(echo "trim-defs-cmd (depends bvsub (bvadd x1 (bvneg x2)))")
(echo "trim-defs-cmd (depends bvsle (bvsge x2 x1))")
(echo "trim-defs-cmd (depends bvule (bvuge x2 x1))")
(echo "trim-defs-cmd (depends bvslt (bvsgt x2 x1))")
(echo "trim-defs-cmd (depends bvult (bvugt x2 x1))")
(echo "trim-defs-cmd (depends bvnand (bvnot (bvand x1 x2)))")
(echo "trim-defs-cmd (depends bvnor (bvnot (bvor x1 x2)))")
(echo "trim-defs-cmd (depends bvxnor (bvnot (bvxor x1 x2)))")
(echo "trim-defs-cmd (depends bvuge (or (bvugt x1 x2) (= x1 x2)))")
(echo "trim-defs-cmd (depends bvsge (or (bvsgt x1 x2) (= x1 x2)))")
(echo "trim-defs-cmd (depends bvashr (ite (= (extract (- w 1) (- w 1) s) #b0) (bvlshr s t) (bvnot (bvlshr (bvnot s) t))))")
(echo "trim-defs-cmd (depends rotate_left (rotate_left (- x1 1) (concat (extract (- w 1) 0 b1) (extract w w b1))))")
(echo "trim-defs-cmd (depends rotate_right (rotate_right (- x1 1) (concat (extract 0 0 b1) (extract w 1 b1))))")
(echo "trim-defs-cmd (depends repeat (concat (repeat (- x1 1) b1) b1))")
(echo "trim-defs-cmd (depends @purify x1)")
(echo "trim-defs-cmd (depends @int_div_by_zero (div x1 0))")
(echo "trim-defs-cmd (depends @mod_by_zero (mod x1 0))")
(echo "trim-defs-cmd (depends @div_by_zero (/ x1 0/1))")
(echo "trim-defs-cmd (depends int.log2 (ite (< x1 0) 0 (div x1 (int.pow2 x1))))")
(echo "trim-defs-cmd (depends int.ispow2 (and (>= x1 0) (= x1 (int.pow2 (int.log2 x1)))))")
(echo "trim-defs-cmd (depends @strings_itos_result (str.from_int (mod x1 (^ 10 x2))))")
(echo "trim-defs-cmd (depends @strings_stoi_result (str.to_int (str.substr x1 0 x2)))")
(echo "trim-defs-cmd (depends @strings_stoi_non_digit (str.indexof_re x1 (re.comp (re.range ""0"" ""9"")) 0))")
(echo "trim-defs-cmd (depends set.subset (= (set.inter x1 x2) x1))")
(echo "trim-defs-cmd (depends set.insert ($eo_List_cons x1 x2) $eo_List_nil (set.insert x2 (set.union (set.singleton x1) x3)))")
(echo "trim-defs-cmd (depends bvite (ite (= x1 (@bv 1 1)) x2 x3))")
(echo "trim-defs-cmd (depends bvcomp (ite (= x1 x2) (@bv 1 1) (@bv 0 1)))")
(echo "trim-defs-cmd (depends bvultbv (ite (bvult x1 x2) (@bv 1 1) (@bv 0 1)))")
(echo "trim-defs-cmd (depends bvsltbv (ite (bvslt x1 x2) (@bv 1 1) (@bv 0 1)))")
(echo "trim-defs-cmd (depends @bit (extract x1 x1 x2))")
(echo "trim-defs-cmd (depends forall (not (exists x1 (not x2))))")
(echo "trim-defs-cmd (depends lambda ($eo_List_cons x1 x2) $eo_List_nil (lambda x2 x3))")

;;; Types
; special case: we need to include array constant if Array type is involved so
; that we have constructible values.
(echo "trim-defs-cmd (depends Array (const))")
(echo "trim-defs-cmd (depends Set (set.empty set.union set.singleton))")
; TODO: more?

