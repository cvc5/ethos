; This is both a valid *.smt2 and *.eo file after filling in the templates.
; For consistency we name it *.eo.

; The final embedding of SMT-LIB types that are relevant to the VC.
(declare-datatype tsm.Type
  (
  ; the Boolean type
  (tsm.Bool)
  ; uninterpreted sorts
  (tsm.USort (tsm.USort.arg1 Int))
  ; The application of SMT-LIB types
  (tsm.Apply (tsm.Apply.arg1 tsm.Type) (tsm.Apply.arg2 tsm.Type))
$SM_TYPE_DECL$
  ; error sort
  (tsm.NullSort)
  )
)

; carrying the literal types?
$SM_LITERAL_TYPE_DECL$

; The final embedding of SMT-LIB terms that are relevant to the VC.
; In other words, this defines the Herbrand universe.
(declare-datatype sm.Term
  (
  ; The application of SMT-LIB terms
  (sm.Apply (sm.Apply.arg1 sm.Term) (sm.Apply.arg2 sm.Term))
  ; Booleans
  ; NOTE: these are inlined for efficiency and to ensure there are no Boolean subterms
  (sm.True)
  (sm.False)
  ; builtin literals
  (sm.Numeral (sm.Numeral.arg1 Int))
  (sm.Rational (sm.Rational.arg1 Real))
  (sm.String (sm.String.arg1 String))
  (sm.Binary (sm.Binary.arg1 Int) (sm.Binary.arg2 Int))
  ; free constants
  (sm.Const (sm.Const.arg1 tsm.Type) (sm.Const.arg2 Int))
  ; skolems
  (sm.Skolem (sm.Skolem.arg1 tsm.Type) (sm.Skolem.arg2 sm.Term) (sm.Skolem.arg3 Int))
$SM_TERM_DECL$
  )
)

; The final embedding of Eunoia terms that are relevant to the VC.
; SMT-LIB terms, types and values are embedded in this datatype.
; We require a mutually recursive datatype, since these are
; inter-dependent.
(declare-datatypes ((eo.Term 0) (vsm.Value 0) (@Map 0))
  (
  (
  ; The type of types in Eunoia
  (eo.Type)
  ; The Eunoia function type.
  (eo.FunType (eo.FunType.arg1 eo.Term) (eo.FunType.arg2 eo.Term))
  ; Application of a Eunoia term
  (eo.Apply (eo.Apply.arg1 eo.Term) (eo.Apply.arg2 eo.Term))
  ; The Eunoia representation of an SMT-LIB term
  (eo.SmtTerm (eo.SmtTerm.arg1 sm.Term))
  ; The Eunoia representation of an SMT-LIB type
  (eo.SmtType (eo.SmtType.arg1 tsm.Type))
  ; The Eunoia representation of an SMT-LIB value
  ;(eo.SmtValue (eo.SmtValue.arg1 vsm.Value))
  (eo.$eo_Var (eo.$eo_Var.arg1 String) (eo.$eo_Var.arg2 eo.Term))
  ; "stuckness"
  (eo.Stuck)
$SM_EO_TERM_DECL$
  )
  (
  ; map with an index type
  ; valueness: $smtx_map_is_value
  (vsm.Map (vsm.Map.arg1 @Map) (vsm.Map.arg2 tsm.Type))
  ; uninterpreted constants
  ; valueness: $smtx_usort_is_value
  (vsm.UValue (vsm.UValue.arg1 tsm.Type) (i Int))
  ; an SMT value represented by an SMT-LIB term, e.g. Int/Real/String.
  ; valueness: $smtx_is_value
  (vsm.Term (vsm.Term.arg1 sm.Term))
  ; A non-value
  (vsm.NotValue)
  )
  (
  ; (@Map.cons i e M) maps i -> e, as well as mappings in M
  (@Map.cons (@Map.cons.arg1 vsm.Value) (@Map.cons.arg2 vsm.Value) (@Map.cons.arg3 @Map))
  ; (@Map.default e) maps all remaining elements in the sort to e
  (@Map.default (@Map.default.arg1 vsm.Value))
  ))
)
