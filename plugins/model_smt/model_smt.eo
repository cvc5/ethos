
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; model_eo_embed

;;; Eunoia datatype constructors

; The Eunoia representation of an SMT-LIB term.
; declare $eo_smt_term
; - already declared in eo_builtin_smt.eo

; The Eunoia representation of an SMT-LIB type.
; declare $eo_smt_type
; - already declared in eo_builtin_smt.eo

; The Eunoia representation of an SMT-LIB value.
; declare $eo_smt_value
; - already declared in eo_builtin_smt.eo

;;; SMT term datatype constructors

; An application of SMT-LIB terms.
(declare-parameterized-const $smd_sm.Apply
  ((t1 $smt_Term :opaque) (t2 $smt_Term :opaque)) $smt_Term)
(define $sm_apply_term ((t1 $smt_Term) (t2 $smt_Term))
  ($smd_sm.Apply t1 t2))
  
; A skolem, identified by kind, identifier and Type.
; The kind 0 is reserved for standard SMT-LIB symbols introduced
; by the user by declare-const. The other kinds of free symbols
; can be custom defined based on the Eunoia signature (see method
; $eo_const_predicate in model_eo.eo).
; A skolem is identified by a type, a term and a kind.
(declare-parameterized-const $smd_sm.Skolem
  ((T $smt_Type :opaque) (k $smt_Term :opaque) (id $smt_builtin_Int :opaque))
  $smt_Term)
(define $sm_skolem
  ((k $smt_builtin_Int) (id $smt_builtin_Int) (T $smt_Type))
  ($smd_sm.Skolem k id T))

; A free constant
(declare-parameterized-const $smd_sm.Const
  ((T $smt_Type :opaque) (id $smt_builtin_Int :opaque))
  $smt_Term)
(define $sm_const ((T $smt_Type) (id $smt_builtin_Int))
  ($smd_sm.Const T id))
  
;;; SMT type datatype constructors

; The Boolean type
(declare-const $smd_tsm.Bool $smt_Type)
(define $tsm_Bool () $smd_tsm.Bool)

; Function types
(declare-parameterized-const $smd_tsm.FunType
  ((T1 $smt_Type :opaque) (T2 $smt_Type :opaque)) $smt_Type)
(define $tsm_fun_type ((T1 $smt_Type) (T2 $smt_Type))
  ($smd_tsm.FunType T1 T2))
  
; Uninterpreted sorts
(declare-parameterized-const $smd_tsm.USort
  ((id $smt_builtin_Int :opaque)) $smt_Type)
(define $tsm_USort ((id $smt_builtin_Int :opaque)) ($smd_tsm.USort id))
  
; The sort of a term that doesn't have an SMT-LIB type.
; This is used as an error condition
(declare-parameterized-const $smd_tsm.NullSort
  ((id $smt_builtin_Int :opaque)) $smt_Type)
(define $tsm_NullSort ((id $smt_builtin_Int :opaque)) ($smd_tsm.NullSort id))

;;; SMT value datatype constructors

(declare-const $smt_Map Type)

(declare-parameterized-const $smd_vsm.Map
  ((T $smt_Type :opaque) (m $smt_Map :opaque))
  $smt_Value)
(define $vsm_map ((T $smt_Type) (m $smt_Map))
  ($smd_vsm.Map T m))

(declare-parameterized-const $smd_vsm.UConst
  ((T $smt_Type :opaque) (id $smt_builtin_Int :opaque))
  $smt_Value)
(define $vsm_uconst ((T $smt_Type) (id $smt_builtin_Int))
  ($smd_vsm.UConst T id))

(declare-parameterized-const $smd_vsm.Term
  ((t $smt_Term :opaque))
  $smt_Value)
(define $vsm_term ((t $smt_Term)) ($smd_vsm.Term t))

(declare-const $smd_vsm.NotValue $smt_Value)
(define $vsm_not_value () $smd_vsm.NotValue)

;;; SMT map value datatype constructors

(declare-parameterized-const $smd_msm.Map.cons
  ((i $smt_Value :opaque) (e $smt_Value :opaque) (m $smt_Map))
  $smt_Map)
(define $map_cons ((i $smt_Value) (e $smt_Value) (m $smt_Map))
  ($smd_msm.Map.cons i e m))
  
(declare-parameterized-const $smd_msm.Map.default
  ((e $smt_Value :opaque))
  $smt_Map)
(define $map_default ((e $smt_Value)) ($smd_msm.Map.default e))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; NOTE: this is auto-generated by the model_smt layer.
; NOTE: we probably want to have this function live in the C++.
; For each relevant user term, return the datatype above that it belongs to.
; This program will be used in the smt_meta_reduce compilation step, and
; will dissappear in the final signature.
; TODO: fill in this function????
(program $eo_get_meta_type ((T Type) (U Type) (t T) (f (-> U T)) (a U))
  :signature (T) Type
  (
$SMT_EMBED_META_TYPE_DECL$
  ;(($eo_get_meta_type (f a)) ($eo_get_meta_type f))
  ; otherwise, assume eo.new.Term
  (($eo_get_meta_type t) $eo_Term)
  )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; model_smt

; This file is a formalization of the SMT-LIB semantics in Eunoia.
; It uses a deep embedding of SMT-LIB terms .
; This file is expected to define function $eo_model_sat, which can be used 
; to define whether a (Boolean) term is satisfied by a model.
; It generates symbols $smt_Term, $sym_apply_*, $smt_from_eo_*, and $smt_to_eo_*,
; which have further meaning in the compilation pipeline.

; Invariant: all programs in this signature should be well-founded and never
; never get stuck unless otherwise stated.

; Returns SMT-LIB builtin true/false if x is stuck
(define $smt_builtin_is_ok ((x $eo_Term))
  ($smt_apply_3 "ite" ($smt_apply_= x $eo_stuck)
    $smt_builtin_false
    $smt_builtin_true))

; Utilities to ensure that programs are total.
; Takes
; - A $eo_Term t where we are not sure if it gets stuck.
; - A $eo_Term elseTerm where we are sure it does not get stuck.
; Returns the SMT term corresponding to the evaluation of t, if possible,
; or elseTerm otherwise. This always successfully evaluates.
; Note that these definitions are slightly more complex than they need
; to be, as they could rely on is_ok above. However:
; - Using the raw tester/selector is more efficient in the end
;   encoding.
; - It is easier to recognize the pattern (eo.SmtTerm.arg1 *)
;   than (ite (eo.is_ok *) * elseTerm).
(define $smt_try_eo ((t $eo_Term) (elseTerm $smt_Term))
  ($smt_apply_3 "ite" ($smt_apply_1 "(_ is eo.SmtTerm)" t)
    ($smt_apply_1 "eo.SmtTerm.arg1" t)
    elseTerm))
; Same as above, for SMT types.
(define $smt_try_eo_type ((t $eo_Term) (elseTerm $smt_Type))
  ($smt_apply_3 "ite" ($smt_apply_1 "(_ is eo.SmtType)" t)
    ($smt_apply_1 "eo.SmtType.arg1" t)
    elseTerm))
; Same as above, for SMT values.
(define $smt_try_eo_value ((t $eo_Term) (elseTerm $smt_Value))
  ($smt_apply_3 "ite" ($smt_apply_1 "(_ is eo.SmtValue)" t)
    ($smt_apply_1 "eo.SmtValue.arg1" t)
    elseTerm))

; Only call when we are sure that t is a value
; TODO: guard this properly
(define $smt_term_from_value ((t $smt_Term))
  ($smt_apply_1 "vsm.Term.arg1" t))

;;;;;; SMT values

; forward declaration
; This method classifies SMT terms as being values.
; The invariant of this method is that if
;   ($smt_Type t1) and ($smt_Type t2)
; return true where t1 and t2 have the same type ($smtx_typeof), then
;   (not (= t1 t2))
; is valid.
(program $smtx_term_is_value ()
  :signature ($smt_Term) $smt_builtin_Bool)

;;; Functions and array values.

; $smt_Map is recursive and thus defined above.

; Get the default for the map
(program $smtx_map_default
  ((i $smt_Value) (j $smt_Value) (e $smt_Value) (M $smt_Map))
  :signature ($smt_Map) $smt_Term
  (
  (($smtx_map_default ($map_cons j e M))  ($smtx_map_default M))
  (($smtx_map_default ($map_default e))   e)
  )
)

; This program looks up the value of a term in a map.
; This is used for function evaluation.
(program $smtx_map_lookup
  ((i $smt_Value) (j $smt_Value) (e $smt_Value) (M $smt_Map))
  :signature ($smt_Map $smt_Term) $smt_Term
  (
  ; NOTE: the cases here are exhaustive, meaning we can soundly ignore the "is nil" else condition
  (($smtx_map_lookup ($map_cons i e M) i)  e)
  (($smtx_map_lookup ($map_cons j e M) i)  ($smtx_map_lookup M i))
  (($smtx_map_lookup ($map_default e) i)   e)
  )
)

; This program determines whether the map value is canonical
; This program is only necessary if we are doing equality between arrays
; (or functions).
(program $smtx_map_is_redundant
  ((T $smt_Type) (U $smt_Type) (t $smt_Term) (u $smt_Term) (M $smt_Map))
  :signature ($smt_Map $smt_Type) $smt_builtin_Bool
  (
  (($smtx_map_is_redundant ($map_default u) U)     false)
  (($smtx_map_is_redundant ($map_cons t u M) U)
    ; lookup value on tail
    (eo::define ((ru ($smtx_map_lookup t M)))
    ; if it is the same, this index is redundant and thus we are not a value
    ($smt_apply_3 "ite"
      ($smt_apply_= ru u)
      $smt_builtin_false
      ($smtx_map_is_redundant M))))
  )
)

; TODO:
(program $smtx_map_is_value ()
  :signature ($smt_Type $smt_Map) $smt_builtin_Bool)

;;; Datatype values

; Datatypes are not embedded.

; TODO: since e.g. uinterpreted sorts can be nested in
; datatypes we need a lifted datatype value.

; define: $smt_is_dt
; returns: true if t is a datatpe (i.e. it has constructors).
(define $smt_is_dt ((t $smt_Type))
  ($smt_builtin_is_ok ($eo_dt_constructors t)))

; define: $smt_is_dt_cons
; returns: true if t is a constructor (i.e. it has selectors).
(define $smt_is_dt_cons ((t $smt_Term))
  ($smt_builtin_is_ok ($eo_dt_selectors t)))

; program: $smtx_dt_is_value
; Returns true if its argument is a datatype value.
; This checks that the term is constructed solely based on values and values of
; (possibly other) types.
(program $smtx_dt_is_value ((f $smt_Term) (a $smt_Term) (c $smt_Term))
  :signature ($smt_Term) $smt_builtin_Bool
  (
  (($smtx_dt_is_value ($sm_apply_term f a)) ($smt_apply_3 "ite"
                                              ($smtx_term_is_value a)
                                              ($smtx_dt_is_value f)
                                              $smt_builtin_false))
  (($smtx_dt_is_value c)                    ($smt_is_dt_cons c))
  )
)

;;; Term values.

; program: $smtx_term_is_value
; Returns true if its argument is an SMT value.
; This function is expected to never get stuck.
(program $smtx_term_is_value
  ((T $smt_Type) (t $smt_Term) (n $smt_builtin_Int) (r $smt_builtin_Real) (s $smt_builtin_String))
  :signature ($smt_Term) $smt_builtin_Bool
  (
  ; standard atomic types are values
  (($smtx_term_is_value $sm_mk_true)            $smt_builtin_true)
  (($smtx_term_is_value $sm_mk_false)           $smt_builtin_true)
  (($smtx_term_is_value ($smd_sm.Numeral n))    $smt_builtin_true)
  (($smtx_term_is_value ($smd_sm.Rational r))   $smt_builtin_true)
  (($smtx_term_is_value ($smd_sm.String s))     $smt_builtin_true)
  ; by default, not a value
  (($smtx_term_is_value t)                      $smt_builtin_false)
  )
)

;;; Guarded utilities for making values

; Returns a term of type @Value, embeds the term
; if indeed it is a value, or returns not a value otherwise.
(define $smt_mk_value_term ((t $smt_Term))
  ($smt_apply_3 "ite"
    ($smtx_term_is_value t)
    ($vsm_term t)
    $vsm_not_value))

(define $smt_mk_value_map ((m $smt_Map) (T $smt_Type))
  ($smt_apply_3 "ite"
    ($smtx_map_is_value T m)
    ($vsm_map T m)
    $vsm_not_value))
    
;(define $smt_mk_value_uconst ((m $smt_Map) (T $smt_Type))
;  ($smt_apply_3 "ite"
;    ($smtx_map_is_value T m)
;    ($vsm_map T m)
;    $vsm_not_value))

;;; utilities

(define $vsm_is_value ((t $smt_Value))
  ($smt_apply_1 "not" ($smt_apply_1 "(_ is vsm.NotValue)" t)))

(define $vsm_is_true ((t $smt_Value))
  ($smt_builtin_and
    ($smt_apply_1 "(_ is vsm.Term)" t)
    ($sm_is_true ($smt_apply_1 "vsm.Term.arg1" t))))

; Used to totalize $eo_typeof.
(program $smtx_typeof () :signature ($smt_Term) $smt_Type)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; Model semantics

; Forward declaration of the main method defined by this signature.
; We use this to define $eo_model_sat.
(program $smtx_model_eval () :signature ($smt_Term) $smt_Value)

; free constants

; fwd-decl: $smtx_model_lookup
; Conceptually, returns the model value for constant with kind k, identifier id and type T.
; This is intentionally undefined in this signature.
(program $smtx_model_lookup ()
  :signature ($smt_builtin_Int $smt_builtin_Int $smt_Type) $smt_Value)
  

; Lookup the predicate the constant can be assumed to have.
; If the kind is 0, it is an SMT-LIB input constant, we return true.
; Otherwise, we lookup the predicate for the skolem, which may be
; user-defined. Note this need not be a valid formula due to the
; definition of $smtx_model_eval, which checks whether the predicate
; is satisfied in the model.
; If this is undefined, we return true.
(program $smtx_const_predicate
  ((k $smt_builtin_Int) (id $smt_builtin_Int) (T $smt_Type) (val $smt_Value))
  :signature ($smt_builtin_Int $smt_builtin_Int $smt_Type $smt_Value) $smt_builtin_Bool
  (
  ; Builtin constants are always interpreted
  ;(($smtx_const_predicate k $smt_builtin_z_zero T val) $smt_builtin_true)
  ; TODO
  (($smtx_const_predicate k id T val) $smt_builtin_false)
  )
)

; program: $smtx_substitute
; Used to define $smtx_eval_quant.
; TODO: debruijn
(program $smtx_substitute
  ((x $smt_Term) (y $smt_Term) (f $smt_Term) (a $smt_Term) (z $smt_Term))
  :signature ($smt_Term $smt_Term $smt_Term) $smt_Term
  (
  (($smtx_substitute x y (f a))         (_ ($smtx_substitute x y f) ($smtx_substitute x y a)))
  (($smtx_substitute x y x)             y)
  (($smtx_substitute x y z)             z)
  )
)

(program $smtx_model_lookup_predicate 
  ((T $smt_Type) (k $smt_builtin_Int) (id $smt_builtin_Int) (F $smt_Term) (t $smt_Term))
  :signature ($smt_Term) $smt_builtin_Bool
  (
  (($smtx_model_lookup_predicate ($sm_const T id))   $smt_builtin_true)
  (($smtx_model_lookup_predicate ($sm_skolem T F k)) $smt_builtin_true)
  (($smtx_model_lookup_predicate t)                  $smt_builtin_false)
  )
)

;;; Core definition of $smtx_model_eval

; An evaluator for all terms that we can reason about models.
; This is a recursive call.
; NOTE: for the sake of soundness, this must be a total function!!!!!!!
(program $smtx_model_eval
  ((T Type) (U Type) (V Type) (a1 T) (a2 T) (c Bool) (f $smt_Term) (y U) (z $smt_Term) (k $smt_builtin_Int) (id $smt_builtin_Int) (F Bool)
   ; generic parameters that may appear in terms to pattern match
   (W1 Type) (x1 W1) (W2 Type) (x2 W2) (W3 Type) (x3 W3))
  :signature ($smt_Term) $smt_Value
  (
  ; Booleans are their own values.
  (($smtx_model_eval $sm_mk_true)             ($vsm_term $sm_mk_true))
  (($smtx_model_eval $sm_mk_false)            ($vsm_term $sm_mk_false))
  ; ITE branches to the appropriate child.
  (($smtx_model_eval (ite x1 x2 x3))
    (eo::define ((e1 ($smtx_model_eval x1)))
    ($smt_apply_3 "ite" ($vsm_is_value e1)
      ($smt_apply_3 "ite" ($vsm_is_true e1)
        ($smtx_model_eval x2)
        ($smtx_model_eval x3))
      $vsm_not_value)))
  ; Equality insists on valueness and then reduces to an equality over datatypes
  ; in the deep embedding (vsm.Value), meaning it works for all types, including
  ; functions and uninterpreted sorts where values are not represented by terms.
  ; Note that the valueness predicate ensures this is sound. Moreover note that
  ; we do not invoke the type checker here. This means that if an ill-typed
  ; equality was given as input to this method, it would always evaluate to false.
  ; The caller of this method is responsible for ensuring that this behavior is
  ; either avoided or admissible.
  (($smtx_model_eval (= x1 x2))
    (eo::define ((e1 ($smtx_model_eval x1)))
    (eo::define ((e2 ($smtx_model_eval x2)))
    ($smt_apply_3 "ite" ($smt_builtin_and ($vsm_is_value e1) ($vsm_is_value e2))
      ; use datatype equality over $smt_Value
      ($vsm_term ($sm_mk_bool ($smt_apply_= e1 e2)))
      $vsm_not_value))))
  ; evaluation of standard SMT symbols
  ; These calls may only call one of the above macros:
  ; - $smtx_eval_quant
  ; - $smt_eval_o_arith_*,
  ; - $smt_eval_apply_*
$SMT_EVAL_CASES$
  ; Apply case.
  ;(($smtx_model_eval ($sm_apply_term f y))    (eo::define ((fme ($smtx_model_eval f)))
  ;                                            (eo::define ((yme ($smtx_model_eval y)))
  ;                                              ($smtx_eval_apply fme yme))))
  ;; free constants and partial functions
  ; These are given an arbitrary value by the model ($smtx_model_lookup),
  ; which is an uninterpreted function. The properties of this value are
  ; axiomatized in the final SMT2.
  (($smtx_model_eval ($sm_const T id))        ($smtx_model_lookup $smt_builtin_z_zero id T))
  ;(($smtx_model_eval ($sm_skolem T F))       ($smtx_model_lookup i i T))   ; FIXME
  ; generic apply and base case.
  ; these do not insist that the term is a value.
  
  ; Otherwise, try to evaluate based on the user callback
  ;(($smtx_model_eval z)                      ($smt_try_eo ($eo_model_eval z) z))
  (($smtx_model_eval z)                      $vsm_not_value)
  )
)

(program $smtx_model_sat ((b $smt_Value))
  :signature ($smt_Value) Bool
  (
  (($smtx_model_sat ($vsm_term $sm_mk_true))  true)
  (($smtx_model_sat b)                        false)
  )
)
; program: $eo_model_sat
; note: Satisfied by the model if F evaluates to true.
; We expect that the input to this method is an SMT term.
(program $eo_model_sat ((F $smt_Term))
  :signature ($eo_Term) Bool
  (
  (($eo_model_sat ($eo_smt_term F)) ($smtx_model_sat ($smtx_model_eval F)))
  )
)

; The SMT typeof function, which incorporates builtin SMT terms

(program $smtx_typeof
  ((T $smt_Type) (t $smt_Term) (F $smt_Term) (k $smt_builtin_Int) (id $smt_builtin_Int))
  :signature ($smt_Term) $smt_Type
  (
  (($smtx_typeof ($sm_const T id))        T)
  (($smtx_typeof ($sm_skolem T F id))     T)
  ; for all other user defined terms, we totalize using the null sorts
  ; we use the hash so that all terms that do not type check have a new unknown sort.
  (($smtx_typeof t)                       ($smt_try_eo_type
                                            ($eo_typeof t)
                                            ($tsm_NullSort $smt_builtin_z_zero)))  ; TODO: Use hash?
  )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; model_end
