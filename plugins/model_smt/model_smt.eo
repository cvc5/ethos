
; This file is expected to define function $smt_model_eval, which can be used to define
; whether a (Boolean) term is satisfied by a model.

; An SMT-LIB term.
(declare-const $smt_Term Type)

; Apply the SMT operator named "op" to x1 and x2.
(declare-parameterized-const $smt_apply_1
  ((T Type :implicit) (op $eo_String) (x1 T)) $smt_Term)
(declare-parameterized-const $smt_apply_2
  ((T Type :implicit) (U Type :implicit) (op $eo_String) (x1 T) (x2 U)) $smt_Term)
(declare-parameterized-const $smt_apply_3
  ((T Type :implicit) (U Type :implicit) (V Type :implicit) (op $eo_String) (x1 T) (x2 U) (x3 V)) $smt_Term)

; Convert smt2 term to a Eunoia Boolean.
(declare-const $smt_to_bool (-> $smt_Term Bool))
; Convert smt2 term to a Eunoia numeral.
(declare-const $smt_to_z (-> $smt_Term $eo_Numeral))
; Convert smt2 term to a Eunoia rational.
(declare-const $smt_to_q (-> $smt_Term $eo_Rational))
; Convert smt2 term to a Eunoia string.
(declare-const $smt_to_str (-> $smt_Term $eo_String))
; Convert smt2 term to a Eunoia binary.
(declare-const $smt_to_bin (-> $smt_Term $eo_Binary))

;;; definitions of Types

; represents an unknown value
; NOTE: could be a program??
(declare-parameterized-const @unknown_value ((T Type) (i $eo_Numeral)) T)

; definitions of Values

(program $smt_is_value ((T Type) (t T)
   ; generic parameters that may appear in terms to pattern match
   (W1 Type) (x1 W1) (W2 Type) (x2 W2) (W3 Type) (x3 W3))
  :signature ((eo::quote T) T) Bool
  (
  (($smt_is_value $eo_Numeral t)  (eo::is_z t))
  (($smt_is_value $eo_Rational t) (eo::is_q t))
  (($smt_is_value $eo_String t)   (eo::is_str t))
  (($smt_is_value $eo_Binary t)   (eo::is_bin t))
$SMT_IS_VALUE_CASES$
  (($smt_is_value T t) false)
  )
)

(program $smt_type_enum ((T Type) (i $eo_Numeral)
   ; generic parameters that may appear in terms to pattern match
   (W1 Type) (x1 W1) (W2 Type) (x2 W2) (W3 Type) (x3 W3))
  :signature ((eo::quote T) $eo_Numeral) T
  (
  ; enumeration of standard SMT types
$SMT_TYPE_ENUM_CASES$
  (($smt_type_enum T i)           (@unknown_value T i))   ; note since this always succeeds, this assumes that unhandled types have infinite type
  )
)

; definitions of operators

; fwd-decl: $smt_model_lookup
; Conceptually, returns the model value for constant with identifier id and type T.
; This is intentionally undefined in this signature.
(program $smt_model_lookup ((T Type))
  :signature (T) T)

; An evaluator for all terms that we can reason about models.
; This is a recursive call.
(program $smt_model_eval
  ((T Type) (U Type) (V Type) (a1 T) (a2 T) (c Bool) (f (-> U T)) (y U) (z T)
   ; generic parameters that may appear in terms to pattern match
   (W1 Type) (x1 W1) (W2 Type) (x2 W2) (W3 Type) (x3 W3))
  :signature (T) T
  (
  ; evaluation of standard SMT symbols
$SMT_EVAL_CASES$
  ; generic apply
  (($smt_model_eval (f y))          (eo::define ((fme ($smt_model_eval f)))
                                    (eo::define ((yme ($smt_model_eval y)))
                                    (eo::define ((tme (_ fme yme)))
                                      (eo::requires ($smt_is_value tme) true tme)))))
  (($smt_model_eval z)              (eo::requires ($smt_is_value z) true z))
  )
)
