; This file defines SMT-LIB model semantics in Eunoia.
; It has exception handling utilities to call Eunoia programs in
; a safe way that ensures that all programs in this signature are total.

; The programs in this file operate on datatypes that correspond to
; a deep embedding of Eunoia and SMT-LIB terms, types and values.
; In particular, we use the following types:
; 1. $eo_Term, the type of Eunoia terms.
; 2. $smt_Term, the type of SMT-LIB terms.
; 3. $smt_Type, the type of SMT-LIB types.
; 4. $smt_Value, the type of SMT-LIB values.
; 5. Further types defining specific SMT-LIB values, e.g. $smt_Map.
; 6. $smt_builtin_X, the builtin SMT-LIB type X.
; Note that the last type allows us to define symbols whose type
; will be a native SMT-LIB type in the final embedding generated
; by the smt-meta plugin.
  
;;; SMT type datatype constructors

; The Boolean type
(define $tsm_Bool () $smd_tsm.Bool)
  
; Uninterpreted sorts
(define $tsm_USort ((id $smt_builtin_Int)) ($smd_tsm.USort id))
  
; The sort of a term that doesn't have an SMT-LIB type.
; This is used as an error condition
(define $tsm_NullSort ((id $smt_builtin_Int)) ($smd_tsm.NullSort id))

;;; SMT value datatype constructors

; A value denoting a map.
(define $vsm_map ((T $smt_Type) (m $smt_Map))
  ($smd_vsm.Map T m))

; A value denoting an uninterpreted constant.
(define $vsm_uconst ((T $smt_Type) (id $smt_builtin_Int))
  ($smd_vsm.UConst T id))

; A value represented by an SMT-LIB term. This is used for types
; where terms are used to denote the values of that type, e.g.
; SMT-LIB numerals for Int.
(define $vsm_term ((t $smt_Term)) ($smd_vsm.Term t))
(define $vsm_true () ($vsm_term $sm_mk_true))
(define $vsm_false () ($vsm_term $sm_mk_false))

; Denotes a failure case for values.
(define $vsm_not_value () $smd_vsm.NotValue)

;;; SMT map value datatype constructors

; Constructs a map value where i is mapped to e.
(define $map_cons ((i $smt_Value) (e $smt_Value) (m $smt_Map))
  ($smd_msm.Map.cons i e m))

; Constructs a map value where all indices are mapped to e.
(define $map_default ((e $smt_Value)) ($smd_msm.Map.default e))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Exception handling

; Invariant: all programs in this signature should be well-founded and never
; never get stuck unless otherwise stated.

; Returns SMT-LIB builtin true/false if x is stuck
(define $smt_builtin_is_ok ((x $eo_Term))
  ($smt_apply_3 "ite" ($smt_apply_= x $eo_stuck)
    $smt_builtin_false
    $smt_builtin_true))

; Utilities to ensure that programs are total.
; Takes
; - A $eo_Term t where we are not sure if it gets stuck.
; - A $eo_Term elseTerm where we are sure it does not get stuck.
; Returns the SMT term corresponding to the evaluation of t, if possible,
; or elseTerm otherwise. This always successfully evaluates.
(define $smt_try ((t $eo_Term) (elseTerm $eo_Term))
  ($smt_apply_3 "ite" ($smt_builtin_is_ok t)
    t
    elseTerm))

(define $smt_try_type ((t $eo_Term))
  ($smt_try t ($eo_smt_type ($tsm_NullSort $smt_builtin_z_zero))))

;;;;;; SMT values

; forward declaration
; This method classifies SMT terms as being values.
; The invariant of this method is that if
;   ($smt_Type t1) and ($smt_Type t2)
; return true where t1 and t2 have the same type ($smtx_typeof), then
;   (not (= t1 t2))
; is valid.
(program $smtx_term_is_value ()
  :signature ($smt_Term) $smt_builtin_Bool)

;;; Functions and array values.

; $smt_Map is recursive and thus defined above.

; Get the default for the map
(program $smtx_map_default
  ((i $smt_Value) (j $smt_Value) (e $smt_Value) (M $smt_Map))
  :signature ($smt_Map) $smt_Value
  (
  (($smtx_map_default ($map_cons j e M))  ($smtx_map_default M))
  (($smtx_map_default ($map_default e))   e)
  )
)

; This program looks up the value of a term in a map.
; This is used for function evaluation.
(program $smtx_map_lookup
  ((i $smt_Value) (j $smt_Value) (e $smt_Value) (M $smt_Map))
  :signature ($smt_Map $smt_Value) $smt_Value
  (
  ; NOTE: the cases here are exhaustive
  (($smtx_map_lookup ($map_cons i e M) i)  e)
  (($smtx_map_lookup ($map_cons j e M) i)  ($smtx_map_lookup M i))
  (($smtx_map_lookup ($map_default e) i)   e)
  )
)

; This program determines whether the map value is canonical
; This program is only necessary if we are doing equality between arrays
; (or functions).
(program $smtx_map_is_redundant
  ((T $smt_Type) (U $smt_Type) (t $smt_Value) (u $smt_Value) (M $smt_Map))
  :signature ($smt_Map $smt_Type) $smt_builtin_Bool
  (
  (($smtx_map_is_redundant ($map_default u) U)     $smt_builtin_false)
  (($smtx_map_is_redundant ($map_cons t u M) U)
    ; lookup value on tail
    ; if it is the same, this index is redundant and thus we are not a value
    ($smt_apply_3 "ite"
      ($smt_apply_= ($smtx_map_lookup t M) u)
      $smt_builtin_true
      ($smtx_map_is_redundant M)))
  )
)

; TODO: use $smtx_map_is_redundant.
; Also requires a sortedness and non-exhaustiveness conditions.
(program $smtx_map_is_value ()
  :signature ($smt_Type $smt_Map) $smt_builtin_Bool)

;;; Datatype values

; Datatypes are not embedded.

; TODO: since e.g. uinterpreted sorts can be nested in
; datatypes we need a lifted datatype value.

; define: $smt_is_dt
; returns: true if t is a datatpe (i.e. it has constructors).
(define $smt_is_dt ((t $smt_Type))
  ($smt_builtin_is_ok ($eo_dt_constructors t)))

; define: $smt_is_dt_cons
; returns: true if t is a constructor (i.e. it has selectors).
(define $smt_is_dt_cons ((t $smt_Term))
  ($smt_builtin_is_ok ($eo_dt_selectors t)))

; program: $smtx_dt_is_value
; Returns true if its argument is a datatype value.
; This checks that the term is constructed solely based on values and values of
; (possibly other) types.
;(program $smtx_dt_is_value ((f $smt_Term) (a $smt_Term) (c $smt_Term))
;  :signature ($smt_Term) $smt_builtin_Bool
;  (
;  (($smtx_dt_is_value ($sm_apply_term f a)) ($smt_apply_3 "ite"
;                                              ($smtx_term_is_value a)
;                                              ($smtx_dt_is_value f)
;                                              $smt_builtin_false))
;  (($smtx_dt_is_value c)                    ($smt_is_dt_cons c))
;  )
;)

;;; Term values.

; program: $smtx_term_is_value
; Returns true if its argument is an SMT value.
; This function is expected to never get stuck.
; Note that this does not take a type. This function must ensure
; that if it returns true for two terms t1 and t2 of the same type,
; then t1 != t2 in all models.
(program $smtx_term_is_value
  ((t $smt_Term) (b $smt_builtin_Bool) (n $smt_builtin_Int) (r $smt_builtin_Real) (s $smt_builtin_String))
  :signature ($smt_Term) $smt_builtin_Bool
  (
  ; standard atomic types are values
  (($smtx_term_is_value ($sm_mk_bool b))  $smt_builtin_true)
  (($smtx_term_is_value ($sm_mk_z n))     $smt_builtin_true)
  (($smtx_term_is_value ($sm_mk_q r))     $smt_builtin_true)
  (($smtx_term_is_value ($sm_mk_str s))   $smt_builtin_true)
  ; by default, not a value
  (($smtx_term_is_value t)                $smt_builtin_false)
  )
)

;;; Guarded utilities for making values

; Returns a term of type $smt_Value, embeds the term
; if indeed it is a value, or returns not a value otherwise.
(define $smt_mk_value_term ((t $smt_Term))
  ($smt_apply_3 "ite"
    ($smtx_term_is_value t)
    ($vsm_term t)
    $vsm_not_value))

(define $smt_mk_value_map ((T $smt_Type) (m $smt_Map))
  ($smt_apply_3 "ite"
    ($smtx_map_is_value T m)
    ($vsm_map T m)
    $vsm_not_value))

; program: $smtx_ensure_value
; args:
; - v $smt_Value: A value term.
; return: >
;   v itself if it denotes a proper SMT-LIB value, or $vsm_not_value otherwise.
(program $smtx_ensure_value
  ((t $smt_Value) (val $smt_Value) (T $smt_Type) (m $smt_Map) (id $smt_builtin_Int))
  :signature ($smt_Value) $smt_Value
  (
  (($smtx_ensure_value ($vsm_term t))        ($smt_mk_value_term t))
  (($smtx_ensure_value ($vsm_map T m))       ($smt_mk_value_map T m))
  (($smtx_ensure_value ($vsm_uconst T id))   ($vsm_uconst T id))
  (($smtx_ensure_value t)                    $vsm_not_value)
  )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; Model semantics

; Forward declaration of the main method defined by this signature.
; We use this to define $eo_model_sat.
(program $smtx_model_eval () :signature ($eo_Term) $smt_Value)

; program: $smtx_model_lookup
; Conceptually, returns the model value for a term whose value is
; partially constrained or unconstrained in the model. This is
; intentionally undefined. For example, we may pass the following
; terms to this method:
;   (sm.Apply (sm.Apply sm./ x1) x2), when M(x2) = 0,
;   TODO: skolems??
(program $smtx_model_lookup ()
  :signature ($smt_Term) $smt_Value)

; Lookup the predicate the constant can be assumed to have.
; These should be valid formulas.
(program $smtx_model_lookup_predicate_internal ((t $smt_Term) (v $smt_Value))
  :signature ($smt_Term $smt_Value) $smt_builtin_Bool
  (
$SMT_MODEL_LOOKUP_PREDICATE_CASES$
  ; otherwise, no predicate
  (($smtx_model_lookup_predicate_internal t v) $smt_builtin_true)
  )
)

; Calls the method above
(program $smtx_model_lookup_predicate ((t $smt_Term))
  :signature ($smt_Term) $smt_builtin_Bool
  (
  (($smtx_model_lookup_predicate t)
    ($smtx_model_lookup_predicate_internal t ($smtx_model_lookup t)))
  )
)

; program: $smtx_substitute
; Used to define $smtx_eval_quant.
; TODO: debruijn
(program $smtx_substitute
  ((x $eo_Term) (y $eo_Term) (f $eo_Term) (a $eo_Term) (z $eo_Term))
  :signature ($eo_Term $eo_Term $eo_Term) $eo_Term
  (
  (($smtx_substitute x y (f a))   (_ ($smtx_substitute x y f) ($smtx_substitute x y a)))
  (($smtx_substitute x y x)       y)
  (($smtx_substitute x y z)       z)
  )
)

;;; Core definition of $smtx_model_eval

; program: $smtx_model_eval_apply
; We call ($smtx_model_eval_apply value_f value_i) when
; evaluating (f i) whose values are value_f and value_i
; respectively. If value_f is a map value, then we extract
; the map and call the map lookup routine.
(program $smtx_model_eval_apply
  ((T $smt_Type) (m $smt_Map) (i $smt_Value) (v $smt_Value))
  :signature ($smt_Value $smt_Value) $smt_Value
  (
  ; The function evaluated to a map value, call the map lookup.
  (($smtx_model_eval_apply ($vsm_map T m) i)  ($smtx_map_lookup m i))
  ; The function did not evaluate to a map value, we fail.
  (($smtx_model_eval_apply v i)               $vsm_not_value)
  )
)

; return: The evaluation of an ite application.
(program $smtx_model_eval_ite
  ((t1 $smt_Value) (t2 $smt_Value) (t3 $smt_Value))
  :signature ($smt_Value $smt_Value $smt_Value) $smt_Value

  (
  (($smtx_model_eval_ite $vsm_true t2 t3)   t2)
  (($smtx_model_eval_ite $vsm_false t2 t3)  t3)
  (($smtx_model_eval_ite t1 t2 t3)          $vsm_not_value)
  )
)

; return: The evaluation of an equality application.
(program $smtx_model_eval_=
  ((t1 $smt_Value) (t2 $smt_Value))
  :signature ($smt_Value $smt_Value) $smt_Value

  (
  (($smtx_model_eval_= $vsm_not_value t2) $vsm_not_value)
  (($smtx_model_eval_= t1 $vsm_not_value) $vsm_not_value)
  ; use datatype equality over $smt_Value, which depends on t1 and t2 being proper values.
  (($smtx_model_eval_= t1 t2)             ($vsm_term ($sm_mk_bool ($smt_apply_= t1 t2))))
  )
)

$SMT_EVAL_PROGS$

; An evaluator for all terms that we can reason about models.
; This is a recursive call.
; invariant: this must be a total function
; invariant: unless this method returns $vsm_not_value, it must be such that
;            it represents a unique SMT-LIB value, i.e. ($vsm_term t) is
;            forbidden unless t denotes a value.
(program $smtx_model_eval
  ((f $eo_Term) (y $eo_Term) (z $eo_Term)
   (val $smt_Value)
   ; generic parameters that may appear in terms to pattern match
   (x1 $eo_Term) (x2 $eo_Term) (x3 $eo_Term) (x4 $eo_Term) (x5 $eo_Term))
  :signature ($eo_Term) $smt_Value
  (
  ; ITE branches to the appropriate child.
  (($smtx_model_eval (ite x1 x2 x3))
    ($smtx_model_eval_ite ($smtx_model_eval x1) ($smtx_model_eval x2) ($smtx_model_eval x3)))
  ; Equality insists on valueness and then reduces to an equality over datatypes
  ; in the deep embedding (vsm.Value), meaning it works for all types, including
  ; functions and uninterpreted sorts where values are not represented by terms.
  ; Note that the valueness predicate ensures this is sound. Moreover note that
  ; we do not invoke the type checker here. This means that if an ill-typed
  ; equality was given as input to this method, it would always evaluate to false.
  ; The caller of this method is responsible for ensuring that this behavior is
  ; either avoided or admissible.
  (($smtx_model_eval (= x1 x2))
    ($smtx_model_eval_= ($smtx_model_eval x1) ($smtx_model_eval x2)))
  ; evaluation of standard SMT symbols
  ; These calls will reference helper methods above, e.g. of the form
  ; $smtx_model_eval_*, or call builtin methods e.g. $smtx_eval_quant.
$SMT_EVAL_CASES$

  ;; free constants
  ; Constants carry their value in the model, which is an arbitrary value term.
  ; We run this value through $smtx_ensure_value to ensure it is a proper value.
  (($smtx_model_eval ($sm_Const val))           ($smtx_ensure_value val))
  
  ; Apply case. We evaluate f and y separately and then call the
  ; $smtx_model_eval_apply above. We expect f to be an uninterpreted
  ; function whose model evaluation is an SMT-LIB map in this case.
  ; All interpreted f should be handled in the evaluation cases above.
  (($smtx_model_eval (f y))
    ($smtx_model_eval_apply ($smtx_model_eval f) ($smtx_model_eval y)))

  ; Otherwise, it may be a term value (e.g. if z is a Boolean or numeral constant).
  ; We call the utility method which will either generate an SMT-LIB term value or
  ; a SMT-LIB non-value error term.
  (($smtx_model_eval z)                         ($smtx_ensure_value ($vsm_term z)))
  )
)

; program: $eo_model_sat_internal
(program $eo_model_sat_internal ((val $smt_Value))
  :signature ($smt_Value) Bool
  (
  (($eo_model_sat_internal ($vsm_term $sm_mk_true)) true)
  (($eo_model_sat_internal ($vsm_term $sm_mk_false)) false)
  )
)

; program: $eo_model_sat
; note: F is satisfied by the model if F evaluates to the SMT-LIB value denoting true.
; We expect the input to this method to be a Eunoia term denoting an SMT-LIB formula
; (term of Boolean type).
(program $eo_model_sat ((F $eo_Term))
  :signature (Bool) Bool
  (
  (($eo_model_sat F) ($eo_model_sat_internal ($smtx_model_eval F)))
  )
)

; program: $eo_app_from_smt
; args:
; - t $eo_Term: A Eunoia term, expected to be an SMT-LIB application.
; return: >
;   The (embedding of) the Eunoia term application that is equivalent to
;   the given SMT-LIB application.
; note: >
;   We model Eunoia applications (eo.Apply) and SMT-LIB applications (sm.Apply)
;   since we distinguish SMT-LIB terms from Eunoia terms. This ensures that
;   sm.Term contains only legal SMT-LIB terms. However, to define
;   $eo_model_typeof below, we rely on calling $eo_typeof, which in the final
;   encoding expects applications to be eo.Apply. Thus, this method is used to
;   "lift" SMT-LIB applications to Eunoia ones. For example:
;      (eo.smt_term (sm.Apply sm.not sm.True))
;   is lifted to:
;      (eo.Apply (eo.smt_term sm.not) (eo.smt_term sm.True))
;   The latter can be type checked using $eo_typeof. Note that we recurisvely
;   convert sm.Apply in the head of terms only; their arguments may have
;   further occurrences of sm.Apply.
;(program $eo_app_from_smt ((f $smt_Term) (a $smt_Term) (t $eo_Term))
;  :signature ($eo_Term) $eo_Term
;  (
;  (($eo_app_from_smt ($eo_smt_term ($sm_apply_term f a)))
;    ($eo_apply ($eo_app_from_smt ($eo_smt_term f)) ($eo_smt_term a)))
;  (($eo_app_from_smt t) t)
;  )
;)

; The EO model typeof function, which incorporates builtin SMT terms.
; This is intended to cover all Eunoia and SMT terms (those of the form
; (eo.SmtTerm *). Since values are embedded into SMT terms, we cover SMT values,
; i.e. those of the form (eo.SmtValue *) as well.
; Furthermore note:
; - (SMT terms in $eo_typeof_main): sm.True, sm.False
; - (SMT terms in $eo_typeof): sm.Numeral, sm.Rational, sm.String, sm.Binary
; - (SMT terms handled below): sm.Const, sm.Apply
; - (EO terms in $eo_typeof_main): eo.Type, eo.FunType, eo.Apply
; - (EO terms in $eo_typeof): eo.Var
; - (EO terms intentionally unhandled): eo.Stuck, eo.SmtType
; invariant: all terms introduced by this layer must be given a type rule here.
; TODO: use hash for the nullsort below?
(program $eo_model_typeof
  ((t $eo_Term) (val $smt_Value) (T $smt_Type) (m $smt_Map) (id $smt_builtin_Int)
   (f $smt_Term) (a $smt_Term))
  :signature ($eo_Term) $eo_Term
  (
  ; To compute the type of an apply, convert it to a Eunoia application as
  ; described above.
  ;(($eo_model_typeof ($eo_smt_term ($sm_apply_term f a)))
  ;  ($eo_model_typeof ($eo_app_from_smt ($eo_smt_term ($sm_apply_term f a)))))
  ; the type of a constant is the type of its value.
  (($eo_model_typeof ($eo_smt_term ($sm_Const val)))      ($eo_model_typeof ($eo_smt_value val)))
  (($eo_model_typeof ($eo_smt_term a))                    ($smt_try_type ($eo_typeof a)))
  ; the type of a value term is the type of its term.
  (($eo_model_typeof ($eo_smt_value ($vsm_term t)))       ($eo_model_typeof ($eo_smt_term t)))
  (($eo_model_typeof ($eo_smt_value ($vsm_map T m)))      T) ; FIXME
  ; the type of uninterpreted constants carry its type.
  (($eo_model_typeof ($eo_smt_value ($vsm_uconst T id)))  T)
  ; the type of not-values is the null sort.
  (($eo_model_typeof ($eo_smt_value $vsm_not_value))      ($tsm_NullSort $smt_builtin_z_zero))
  ; For all other terms, we try to run Eunoia's typeof builtin. If this fails,
  ; then we are null sort. 
  (($eo_model_typeof t)                                   ($smt_try_type ($eo_typeof t)))
  )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; model_end
