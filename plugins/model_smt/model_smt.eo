
; This file is a formalization of the SMT-LIB semantics in Eunoia.
; It uses a deep embedding of SMT-LIB terms .
; This file is expected to define function $eo_model_sat, which can be used 
; to define whether a (Boolean) term is satisfied by a model.
; It generates symbols $smt_Term, $sym_apply_*, $eo_to_smt_*, and $smt_to_eo_*,
; which have further meaning in the compilation pipeline.

; Forward declaration of the main method defined by this signature.
; We use this to define $eo_model_sat.
(program $smt_model_eval ((T Type)) :signature (T) T)

; These functions will be handled by smt_meta.

; An SMT-LIB term.
(declare-const $smt_Term Type)

; Apply the SMT operator named "op" to x1, x2, and so on.
; Assumes arity of SMT-LIB operators are at most 5.
(declare-parameterized-const $smt_apply_1
  ((W1 Type :implicit))
  (-> $eo_String W1 $smt_Term))
(declare-parameterized-const $smt_apply_2
  ((W1 Type :implicit) (W2 Type :implicit))
  (-> $eo_String W1 W2 $smt_Term))
(declare-parameterized-const $smt_apply_3
  ((W1 Type :implicit) (W2 Type :implicit) (W3 Type :implicit))
  (-> $eo_String W1 W2 W3 $smt_Term))
(declare-parameterized-const $smt_apply_4
  ((W1 Type :implicit) (W2 Type :implicit) (W3 Type :implicit) (W4 Type :implicit))
  (-> $eo_String W1 W2 W3 W4 $smt_Term))
(declare-parameterized-const $smt_apply_5
  ((W1 Type :implicit) (W2 Type :implicit) (W3 Type :implicit) (W4 Type :implicit) (W5 Type :implicit))
  (-> $eo_String W1 W2 W3 W4 W5 $smt_Term))

; Convert from Eunoia to an SMT value
; These assume the Eunoia term is a literal of the correct type.
; All uses of the $eo_to_smt_* methods must ensure this is the case
; Convert Eunoia Boolean to an smt Boolean.
(declare-const $eo_to_smt_bool (-> Bool $smt_Term))
; Convert Eunoia Numeral to an smt Integer.
(declare-const $eo_to_smt_z (-> $eo_Numeral $smt_Term))
; Convert Eunoia Rational to an smt Real.
(declare-const $eo_to_smt_q (-> $eo_Rational $smt_Term))
; Convert Eunoia String to an smt String.
(declare-const $eo_to_smt_str (-> $eo_String $smt_Term))
; Convert Eunoia Binary to an smt-meta representation of Binary.
(declare-const $eo_to_smt_bin (-> $eo_Binary $smt_Term))
; Convert smt2 term to a Eunoia Boolean.
(declare-const $smt_to_eo_bool (-> $smt_Term Bool))
; Convert smt2 term to a Eunoia numeral.
(declare-const $smt_to_eo_z (-> $smt_Term $eo_Numeral))
; Convert smt2 term to a Eunoia rational.
(declare-const $smt_to_eo_q (-> $smt_Term $eo_Rational))
; Convert smt2 term to a Eunoia string.
(declare-const $smt_to_eo_str (-> $smt_Term $eo_String))
; Convert smt2 term to a Eunoia binary.
(declare-const $smt_to_eo_bin (-> $smt_Term $eo_Binary))

;;; Things that can be desugared at this layer

;(program $eo_typeof ((T Type)) :signature (T) Type)

;;; definitions of Valueness

; represents an unknown value
; NOTE: could be a program??
(declare-parameterized-const $smt_unknown_type_enum ((T Type) (i $eo_Numeral)) T)

; definitions of Values

; forward declaration
(program $smt_is_value ((T Type)) :signature ((eo::quote T) T) Bool)

; define: $smt_dt_is_cons
; returns: true if t is a datatpe (i.e. it has constructors).
(define $smt_is_dt ((T Type :implicit) (t T))
  (eo::is_ok ($eo_dt_constructors t)))

; define: $smt_is_dt_cons
; returns: true if t is a constructor (i.e. it has selectors).
(define $smt_is_dt_cons ((T Type :implicit) (t T))
  (eo::is_ok ($eo_dt_selectors t)))

; program: $smt_dt_is_value
; Returns true if its argument is a datatype value.
(program $smt_dt_is_value
  ((U Type) (T Type) (f (-> T U)) (a T) (c U))
  :signature (U) Bool
  (
  (($smt_dt_is_value (f a))  (eo::ite ($smt_is_value a) ($smt_dt_is_value f) false))
  (($smt_dt_is_value c)      ($smt_is_dt_cons c))
  )
)

; program: $smt_dt_is_value
; Returns true if its argument is an SMT value.
(program $smt_is_value ((T Type) (t T)
   ; generic parameters that may appear in terms to pattern match
   (W1 Type) (x1 W1) (W2 Type) (x2 W2) (W3 Type) (x3 W3))
  :signature ((eo::quote T) T) Bool
  (
  ; if the literal type is not defined, this is false
  (($smt_is_value $eo_undef_type t) false)
  ; standard atomic types
  (($smt_is_value $eo_Numeral t)      ($eo_is_z t))
  (($smt_is_value $eo_Rational t)     ($eo_is_q t))
  (($smt_is_value $eo_String t)       ($eo_is_str t))
  (($smt_is_value $eo_Binary t)       ($eo_is_bin t))
  ; TODO: Arrays? Sets? Seq?
$SMT_IS_VALUE_CASES$
  (($smt_is_value T t) false)
  )
)

;;; definitions of Type enumeration

(declare-const @smt_RatPair Type)
(declare-const @smt_ratPair (-> $eo_Numeral $eo_Numeral @smt_RatPair))

; Based on Calkinâ€“Wilf tree.
(program $smt_rat_enum_rec () :signature ($eo_Numeral $eo_List) @smt_RatPair)
;(program $smt_rat_enum_rec
;  ((i $eo_Numeral) (n $eo_Numeral) (d $eo_Numeral) (r @smt_RatPair) (rs $eo_List))
;  :signature ($eo_Numeral $eo_List) @smt_RatPair
;  (
;  (($smt_rat_enum_rec 0 ($eo_List_cons r rs)) r)
;  (($smt_rat_enum_rec i ($eo_List_cons (@smt_ratPair n d) rs))
;     (eo::define ((r1 (@smt_ratPair (eo::add n d) d)))
;     (eo::define ((r2 (@smt_ratPair n (eo::add n d))))
;      ($smt_rat_enum_rec (eo::add i -1)
;        ($eo_List_concat rs ($eo_List_cons r1 ($eo_List_cons r2 $eo_List_nil)))))))
;  )
;)

(define $smt_rat_enum ((i $eo_Numeral))
  ($smt_rat_enum_rec i ($eo_List_cons (@smt_ratPair 1 1) $eo_List_nil)))

(program $smt_rat_to_num ((n $eo_Numeral) (d $eo_Numeral))
  :signature ($eo_Numeral) $eo_Rational
  (
  (($smt_rat_to_num (@smt_ratPair n d)) (eo::qdiv n d))
  )
)

(program $smt_type_enum ((T Type) (i $eo_Numeral)
   ; generic parameters that may appear in terms to pattern match
   (W1 Type) (x1 W1) (W2 Type) (x2 W2) (W3 Type) (x3 W3) (W4 Type) (x4 W4) (W5 Type) (x5 W5))
  :signature ((eo::quote T) $eo_Numeral) T
  (
  ; enumeration of standard SMT types
  (($smt_type_enum $eo_Numeral i)   (eo::define ((v (eo::zdiv i 2)))
                                      (eo::ite (eo::eq (eo::zmod i 2) 0) v (eo::neg v))))
  (($smt_type_enum $eo_String i)    (eo::ite (eo::eq i 0)
                                      ""
                                      (eo::concat (eo::to_str (eo::zmod i 196608)) ($smt_type_enum $eo_String (eo::zdiv i 196608)))))
  (($smt_type_enum $eo_Rational i)  (eo::define ((i (eo::zdiv i 2)))
                                    (eo::define ((v ($smt_rat_to_num ($smt_rat_enum i))))
                                      (eo::ite (eo::eq (eo::zmod i 2) 0) v (eo::neg v)))))

  ; Cannot define Bit-vectors here as this requires a parameteric type to know "w".
  ;(($smt_type_enum $eo_Binary i)   (eo::define ((v (eo::to_bin w i)))
  ;                                    (eo::requires (eo::to_z v) i v)))
$SMT_TYPE_ENUM_CASES$
  (($smt_type_enum T i) ($smt_unknown_type_enum T i))   ; note since this always succeeds, this assumes that unhandled types have infinite type
  )
)

; definitions of operators

; program: $smt_substitute
; Used to define $smt_model_eval_quant.
(program $smt_substitute
  ((T Type) (U Type) (S Type) (x S) (y S) (f (-> T U)) (a T) (z U))
  :signature (S S U) U
  (
  (($smt_substitute x y (f a))         (_ ($smt_substitute x y f) ($smt_substitute x y a)))
  (($smt_substitute x y x)             y)
  (($smt_substitute x y z)             z)
  )
)

; program: $smt_model_eval_quant
; specification for exists is a (non-computable) function
; The last argument is whether we are check exists (resp. forall).
(program $smt_model_eval_quant ((T Type) (x T) (xs $eo_List) (F Bool) (i $eo_Numeral) (isExists Bool))
  :signature ($eo_List Bool $eo_Numeral Bool) Bool
  (
  (($smt_model_eval_quant $eo_List_nil F i isExists)
    ; base case: we have processed all variables, recurse, negate if isExists is false.
    (eo::eq ($smt_model_eval F) isExists))
  (($smt_model_eval_quant ($eo_List_cons x xs) F i isExists)
    ; get the next value in the type enumeration
    (eo::define ((next ($smt_type_enum (eo::typeof x) i)))
    ; if it exists
    (eo::ite (eo::is_ok next)
      ; evaluate the body for this value. if this is a forcing value, return it
      (eo::ite (eo::eq ($smt_model_eval ($smt_substitute x next F)) isExists)
        isExists
        ; otherwise recurse for the next value in the type enumeration for the current variable
        ($smt_model_eval_quant ($eo_List_cons x xs) F (eo::add i 1) isExists))
      (eo::not isExists)))) ; out of values,
  )
)

; fwd-decl: $smt_model_lookup
; Conceptually, returns the model value for constant with identifier id and type T.
; This is intentionally undefined in this signature.
(program $smt_model_lookup ((T Type))
  :signature ($eo_Numeral T) T)

; An evaluator for all terms that we can reason about models.
; This is a recursive call.
(program $smt_model_eval
  ((T Type) (U Type) (V Type) (a1 T) (a2 T) (c Bool) (f (-> U T)) (y U) (z T) (id $eo_Numeral) (F Bool)
   ; generic parameters that may appear in terms to pattern match
   (W1 Type) (x1 W1) (W2 Type) (x2 W2) (W3 Type) (x3 W3))
  :signature (T) T
  (
  ; evaluation of standard SMT symbols
$SMT_EVAL_CASES$
  ; free constants
  ; These are given an arbitrary value by the model ($smt_model_lookup).
  ; We then check if their property F is satisfied. If so, then they are
  ; interpreted to be this value. Otherwise, they are unevaluated.
  ; FIXME: must apply substitution to F.
  (($smt_model_eval ($eo_model_Const id T F)) (eo::define ((val ($smt_model_lookup id T)))
                                              (eo::ite ($smt_model_eval F)
                                                val
                                                ($eo_model_Const id T F))))
  ; generic apply and base case.
  ; these do not insist that the term is a value.
  (($smt_model_eval (f y))                (eo::define ((fme ($smt_model_eval f)))
                                          (eo::define ((yme ($smt_model_eval y)))
                                            (_ fme yme))))
  (($smt_model_eval z)                    z)
  )
)

; program: $eo_model_sat
; note: Satisfied by the model if F evaluates to true.
(program $eo_model_sat ((F Bool))
  :signature (Bool) Bool
  (
  (($eo_model_sat F) ($smt_model_eval F))
  )
)

