
; This file is a formalization of the SMT-LIB semantics in Eunoia.
; It uses a deep embedding of SMT-LIB terms .
; This file is expected to define function $eo_model_sat, which can be used 
; to define whether a (Boolean) term is satisfied by a model.
; It generates symbols $smt_Term, $sym_apply_*, $smt_from_eo_*, and $smt_to_eo_*,
; which have further meaning in the compilation pipeline.

; Forward declaration of the main method defined by this signature.
; We use this to define $eo_model_sat.
(program $smt_model_eval ((T Type)) :signature (T) T)

; Invariant: all programs in this signature should be well-founded and never
; never get stuck unless otherwise stated.

; These functions will be handled by smt_meta.

; An SMT-LIB term.
(declare-const $smt_Term Type)

; Apply the SMT operator named "op" to x1, x2, and so on.
; Assumes arity of SMT-LIB operators are at most 5.
(declare-parameterized-const $smt_apply_1
  ((W1 Type :implicit))
  (-> $eo_String W1 $smt_Term))
(declare-parameterized-const $smt_apply_2
  ((W1 Type :implicit) (W2 Type :implicit))
  (-> $eo_String W1 W2 $smt_Term))
(declare-parameterized-const $smt_apply_3
  ((W1 Type :implicit) (W2 Type :implicit) (W3 Type :implicit))
  (-> $eo_String W1 W2 W3 $smt_Term))
(declare-parameterized-const $smt_apply_4
  ((W1 Type :implicit) (W2 Type :implicit) (W3 Type :implicit) (W4 Type :implicit))
  (-> $eo_String W1 W2 W3 W4 $smt_Term))
(declare-parameterized-const $smt_apply_5
  ((W1 Type :implicit) (W2 Type :implicit) (W3 Type :implicit) (W4 Type :implicit) (W5 Type :implicit))
  (-> $eo_String W1 W2 W3 W4 W5 $smt_Term))

; Convert from Eunoia to an SMT value
; These assume the Eunoia term is a literal of the correct type.
; All uses of the $smt_from_eo_* methods must ensure this is the case
; Convert Eunoia Boolean to an smt Boolean.
(declare-const $smt_from_eo_bool (-> Bool $smt_Term))
; Convert Eunoia Numeral to an smt Integer.
(declare-const $smt_from_eo_z (-> $eo_Numeral $smt_Term))
; Convert Eunoia Rational to an smt Real.
(declare-const $smt_from_eo_q (-> $eo_Rational $smt_Term))
; Convert Eunoia String to an smt String.
(declare-const $smt_from_eo_str (-> $eo_String $smt_Term))
; Convert Eunoia Binary to an smt-meta representation of Binary.
(declare-const $smt_from_eo_bin (-> $eo_Binary $smt_Term))
; Convert smt2 term to a Eunoia Boolean.
(declare-const $smt_to_eo_bool (-> $smt_Term Bool))
; Convert smt2 term to a Eunoia numeral.
(declare-const $smt_to_eo_z (-> $smt_Term $eo_Numeral))
; Convert smt2 term to a Eunoia rational.
(declare-const $smt_to_eo_q (-> $smt_Term $eo_Rational))
; Convert smt2 term to a Eunoia string.
(declare-const $smt_to_eo_str (-> $smt_Term $eo_String))
; Convert smt2 term to a Eunoia binary.
(declare-const $smt_to_eo_bin (-> $smt_Term $eo_Binary))

; Testers that use lower level sm.Term datatype, both for simplicity and efficiency.
; These rely on "is sm.Numeral" referring to the SMT-LIB operator (_ is sm.Numeral)
; in the final encoding.
(define $smt_is_z ((T Type :implicit) (t T)) ($smt_to_eo_bool ($smt_apply_1 "is sm.Numeral" t)))
(define $smt_is_q ((T Type :implicit) (t T)) ($smt_to_eo_bool ($smt_apply_1 "is sm.Rational" t)))
(define $smt_is_str ((T Type :implicit) (t T)) ($smt_to_eo_bool ($smt_apply_1 "is sm.String" t)))
(define $smt_is_bin ((T Type :implicit) (t T)) ($smt_to_eo_bool ($smt_apply_1 "is sm.Binary" t)))

;;; utilities

; A utility to ensure that programs are total.
(define $smt_try ((T Type :implicit) (t T) (u T))
  (eo::ite (eo::is_ok t) t u))

; Used to totalize $eo_typeof.
(declare-const $smt_unknown_type Type)
(program $smt_typeof ((T Type) (t T))
  :signature (T) Type)

; re-bootstrap version of list operators, monomorphized for $eo_List.
; We only define what is necessary.
(program $smt_list_concat ((T Type) (x T) (y $eo_List) (z $eo_List))
  :signature ($eo_List $eo_List) $eo_List
  (
  (($smt_list_concat ($eo_List_cons x y) z)  ($eo_List_cons x ($smt_list_concat y z)))
  (($smt_list_concat $eo_List_nil z)         z)
  )
)

;;; Definition of legal types

; Is T a type that can be assigned to free constants?
; Note if $eo_is_type gets stuck, we assume the type is not legal.
(define $smt_is_type ((T Type))
  ($smt_try ($eo_is_type T) false))

;;; Builtin parametric types

; Maps, which model values for functions.
(declare-parameterized-const @Map ((T Type) (U Type)) Type)
(declare-parameterized-const @Map_nil
  ((T Type) (U Type) (default U)) (@Map T U))
(declare-parameterized-const @Map_cons
  ((T Type) (U Type) (index T) (element U) (tail (@Map T U)))
  (@Map T U))

; Bit-vectors
(declare-parameterized-const $smt_BitVec ((n $eo_Numeral :opaque)) Type)

;;; Definitions of Type enumeration

; represents an unknown value
; This must be a constructor in the final sm.Term.
(declare-parameterized-const $smt_unknown_type_enum
  ((T Type :opaque) (i $eo_Numeral :opaque)) T)

; note: The methods in this section are only included (based on trim-defs) if
; the verification condition is reasoning about quantified formuls.

; Use "@" to indicate that this is not an SMT-LIB term.
(declare-const @smt_RatPair Type)
(declare-const @smt_ratPair (-> $eo_Numeral $eo_Numeral @smt_RatPair))

; Based on Calkinâ€“Wilf tree.
; NOTE: this method is only necessary if reasoning about the enumeration of Reals,
; this is only necessary if we are proving soundness of a proof rule that involves
; quantified reals.
(program $smt_rat_enum_rec
  ((i $eo_Numeral) (n $eo_Numeral) (d $eo_Numeral) (r @smt_RatPair) (rs $eo_List))
  :signature ($eo_Numeral $eo_List) @smt_RatPair
  (
  (($smt_rat_enum_rec 0 ($eo_List_cons r rs)) r)
  (($smt_rat_enum_rec i ($eo_List_cons (@smt_ratPair n d) rs))
     (eo::define ((r1 (@smt_ratPair (eo::add n d) d)))
     (eo::define ((r2 (@smt_ratPair n (eo::add n d))))
      ($smt_rat_enum_rec (eo::add i -1)
        ($smt_list_concat rs ($eo_List_cons r1 ($eo_List_cons r2 $eo_List_nil)))))))
  )
)

(define $smt_rat_enum ((i $eo_Numeral))
  ($smt_rat_enum_rec i ($eo_List_cons (@smt_ratPair 1 1) $eo_List_nil)))

(program $smt_rat_to_num ((n $eo_Numeral) (d $eo_Numeral))
  :signature ($eo_Numeral) $eo_Rational
  (
  (($smt_rat_to_num (@smt_ratPair n d)) (eo::qdiv n d))
  )
)

; we have no incorporate of irrational values, which can be soundly approximated using
; $smt_unknown_type_enum.
(define $smt_irrat_enum ((i $eo_Numeral))
 ($smt_unknown_type_enum $eo_Rational i))

(program $smt_type_enum ((T Type) (i $eo_Numeral) (w $eo_Numeral))
  :signature ((eo::quote T) $eo_Numeral) T
  (
  ; enumeration of standard SMT types
  (($smt_type_enum $eo_Numeral i)     (eo::define ((v (eo::zdiv i 2)))
                                        (eo::ite (eo::eq (eo::zmod i 2) 0) v (eo::neg v))))
  (($smt_type_enum $eo_String i)      (eo::ite (eo::eq i 0)
                                        ""
                                        (eo::concat (eo::to_str (eo::zmod i 196608)) ($smt_type_enum $eo_String (eo::zdiv i 196608)))))
  ; rationals are treated as Real, meaning we interleave rational/irrational.
  (($smt_type_enum $eo_Rational i)    (eo::define ((ir (eo::zdiv i 2)))
                                      (eo::define ((isRat (eo::eq (eo::zmod ir 2) 0)))
                                      (eo::define ((i (eo::zdiv ir 2)))
                                      (eo::define ((v (eo::ite isRat ($smt_rat_to_num ($smt_rat_enum i)) ($smt_irrat_enum i))))
                                        (eo::ite (eo::eq (eo::zmod i 2) 0) v (eo::neg v)))))))
  ; Note that $smt_BitVec must be mapped to the user's definition of binaries.
  ; Note this method gets stuck if i > 2^w, indicating we have run out of values.
  (($smt_type_enum ($smt_BitVec w) i) (eo::define ((v (eo::to_bin w i)))
                                        (eo::requires (eo::to_z v) i v)))
  ; TODO: functions, datatypes
  ; Try to enumerate the type, if we fail, we return $smt_unknown_type_enum.
  ; Note that this essentially assumes that unhandled types are uninterpreted
  ; and have infinite cardinality (since this does not get stuck).
  (($smt_type_enum T i)               ($smt_try ($eo_type_enum T i) ($smt_unknown_type_enum T i)))
  )
)

; program: ($smt_type_enum_contains_rec T t i)
; Returns true if t is contained in the type enumeration of T, starting from i.
(program $smt_type_enum_contains_rec ((T Type) (t T) (i $eo_Numeral))
  :signature ((eo::quote T) T $eo_Numeral) Bool
  (
  (($smt_type_enum_contains_rec T t i)  (eo::define ((v ($smt_type_enum T i)))
                                        (eo::ite (eo::is_ok v)
                                          (eo::ite (eo::eq v t)
                                            true
                                            ($smt_type_enum_contains_rec T i (eo::add i 1)))
                                          false)))
  )
)

;;; definitions of Values

; forward declaration
(program $smt_is_value ((T Type)) :signature ((eo::quote T) T) Bool)

; functions and array values.

(program $smt_map_is_value ((T Type) (U Type) (t T) (u U) (tail (@Map T U)))
  :signature ((@Map T U)) Bool
  (
  ; TODO
  (($smt_map_is_value (@Map_nil T U u)) ($smt_is_value U u))
  ;(($smt_map_is_value (@Map_cons T U t u tail)) ($smt_is_value u))
  )
)

; datatypes.

; define: $smt_is_dt
; returns: true if t is a datatpe (i.e. it has constructors).
(define $smt_is_dt ((T Type :implicit) (t T))
  (eo::is_ok ($eo_dt_constructors t)))

; define: $smt_is_dt_cons
; returns: true if t is a constructor (i.e. it has selectors).
(define $smt_is_dt_cons ((T Type :implicit) (t T))
  (eo::is_ok ($eo_dt_selectors t)))

; program: $smt_dt_is_value
; Returns true if its argument is a datatype value.
(program $smt_dt_is_value
  ((U Type) (T Type) (f (-> T U)) (a T) (c U))
  :signature (U) Bool
  (
  (($smt_dt_is_value (f a))  (eo::ite ($smt_is_value ($smt_typeof a) a)
                               ($smt_dt_is_value f)
                               false))
  (($smt_dt_is_value c)      ($smt_is_dt_cons c))
  )
)

; program: $smt_dt_is_value
; Returns true if its argument is an SMT value.
; This function is expected to never get stuck.
(program $smt_is_value ((T Type) (U Type) (t T)
   ; generic parameters that may appear in terms to pattern match
   (W1 Type) (x1 W1) (W2 Type) (x2 W2) (W3 Type) (x3 W3))
  :signature ((eo::quote T) T) Bool
  (
  ; if the literal type is not defined, this is false
  (($smt_is_value $smt_unknown_type t)  false)
  ; standard atomic types
  (($smt_is_value $eo_Numeral t)  ($smt_is_z t))
  (($smt_is_value $eo_Rational t) ($smt_is_q t))
  (($smt_is_value $eo_String t)   ($smt_is_str t))
  (($smt_is_value $eo_Binary t)   ($smt_is_bin t))
  (($smt_is_value (@Map T U) t)   ($smt_map_is_value t))
  ; by default, a value is a term that appears in the type enumeration
  (($smt_is_value T t)            (eo::ite ($smt_is_dt T)
                                    ($smt_dt_is_value t)
                                    ($smt_type_enum_contains_rec T t 0)))
  )
)

;;; Model semantics

; free constants

; declare: $smt_Const
; A free constant. Constants are identified by:
; (1) Their kind (numeral k),
; (2) Their identifier (numeral i),
; (3) Their type.
; The kind 0 is reserved for standard SMT-LIB symbols introduced
; by the user by declare-const. The other kinds of free symbols
; can be custom defined based on the Eunoia signature (see method
; $eo_const_predicate in model_eo.eo).
(declare-parameterized-const $smt_Const
  ((k $eo_Numeral :opaque) (id $eo_Numeral :opaque) (T Type :opaque))
  T)

; fwd-decl: $smt_model_lookup
; Conceptually, returns the model value for constant with kind k, identifier id and type T.
; This is intentionally undefined in this signature.
(program $smt_model_lookup ((T Type))
  :signature ($eo_Numeral $eo_Numeral T) T)

; Lookup the predicate the constant can be assumed to have.
; If the kind is 0, it is an SMT-LIB input constant, we return true.
; Otherwise, we lookup the predicate for the skolem, which may be
; user-defined. Note this need not be a valid formula due to the
; definition of $smt_model_eval, which checks whether the predicate
; is satisfied in the model.
; If this is undefined, we return true.
(define $smt_const_predicate ((k $eo_Numeral) (id $eo_Numeral) (T Type))
  (eo::ite (eo::eq k 0) ; Kind 0 is reserved for uninterpreted constants.
    true
    ($smt_try ($eo_const_predicate k id T) true)))

; program: $smt_substitute
; Used to define $smt_eval_quant.
(program $smt_substitute
  ((T Type) (U Type) (S Type) (x S) (y S) (f (-> T U)) (a T) (z U))
  :signature (S S U) U
  (
  (($smt_substitute x y (f a))         (_ ($smt_substitute x y f) ($smt_substitute x y a)))
  (($smt_substitute x y x)             y)
  (($smt_substitute x y z)             z)
  )
)

; program: $smt_eval_quant
; specification for exists is a (non-computable) function
; The last argument is whether we are check exists (resp. forall).
(program $smt_eval_quant ((T Type) (x T) (xs $eo_List) (F Bool) (i $eo_Numeral) (isExists Bool))
  :signature ($eo_List Bool $eo_Numeral Bool) Bool
  (
  (($smt_eval_quant $eo_List_nil F i isExists)
    ; base case: we have processed all variables, recurse, negate if isExists is false.
    (eo::eq ($smt_model_eval F) isExists))  ; we are now fully instantiated, look at the body
  (($smt_eval_quant ($eo_List_cons x xs) F i isExists)
    ; get the next value in the type enumeration
    (eo::define ((next ($smt_type_enum ($smt_typeof x) i)))
    ; if it exists
    (eo::ite (eo::is_ok next)
      ; evaluate the body for this value. if this is a forcing value, return it
      (eo::ite (eo::eq ($smt_model_eval ($smt_substitute x next F)) isExists)
        isExists
        ; otherwise recurse for the next value in the type enumeration for the current variable
        ($smt_eval_quant ($eo_List_cons x xs) F (eo::add i 1) isExists))
      (eo::not isExists)))) ; out of values.
  )
)

;;; Core definition of $smt_model_eval

; For example:
; ($smt_eval_= Int ($smt_from_eo_z x1) ($smt_from_eo_z x2) (= x1 x2)).
(define $smt_eval_=
  ((B Type :implicit) (W Type) (x1 W) (x2 W) (u B))
  (eo::ite (eo::and ($smt_is_value W x1) ($smt_is_value W x2))
    ($smt_to_eo_bool ($smt_apply_2 "=" x1 x2))
    u))

; For example:
; ($smt_eval_apply_2
;   "and"
;   ($smt_from_eo_bool x1) $smt_is_bool
;   ($smt_from_eo_bool x2) $smt_is_bool
;   $smt_to_eo_bool (and x1 x2))
; Is the call to evaluate the SMT-LIB and from Eunoia.
; The last term is what is returned if the call is unevaluated.
(define $smt_eval_apply_1
  ((W1 Type :implicit) (R Type :implicit) (op $eo_String)
  (x1 W1) (d1 (-> W1 Bool))
  (r (-> $smt_Term R)) (u R))
  (eo::ite (d1 x1)
    (r ($smt_apply_1 op x1))
    u))
(define $smt_eval_apply_2
  ((W1 Type :implicit) (W2 Type :implicit) (R Type :implicit) (op $eo_String)
  (x1 W1) (d1 (-> W1 Bool))
  (x2 W2) (d2 (-> W2 Bool))
  (r (-> $smt_Term R)) (u R))
  (eo::ite (eo::and (d1 x1) (d2 x2))
    (r ($smt_apply_2 op x1 x2))
    u))
(define $smt_eval_apply_3
  ((W1 Type :implicit) (W2 Type :implicit) (W3 Type :implicit) (R Type :implicit) (op $eo_String)
  (x1 W1) (d1 (-> W1 Bool))
  (x2 W2) (d2 (-> W2 Bool))
  (x3 W3) (d2 (-> W3 Bool))
  (r (-> $smt_Term R)) (u R))
  (eo::ite (eo::and (d1 x1) (d2 x2))
    (r ($smt_apply_3 op x1 x2 x3))
    u))

(define $smt_eval_o_arith_unary
  ((W1 Type :implicit) (U Type :implicit) (op $eo_String) (x1 W1) (u U))
  (eo::ite ($smt_is_z x1)
    ($smt_to_eo_z ($smt_apply_1 op ($smt_from_eo_z x1)))
  (eo::ite ($smt_is_q x1)
    ($smt_to_eo_q ($smt_apply_1 op ($smt_from_eo_q x1)))
    u)))

(define $smt_eval_o_arith
  ((W1 Type :implicit) (W2 Type :implicit) (U Type :implicit) (op $eo_String) (x1 W1) (x2 W2) (u U))
  (eo::ite (eo::and ($smt_is_z x1) ($smt_is_z x2))
    ($smt_to_eo_z ($smt_apply_2 op ($smt_from_eo_z x1) ($smt_from_eo_z x2)))
  (eo::ite (eo::and ($smt_is_q x1) ($smt_is_q x2))
    ($smt_to_eo_q ($smt_apply_2 op ($smt_from_eo_q x1) ($smt_from_eo_q x2)))
    u)))

(define $smt_eval_o_arith_pred
  ((W1 Type :implicit) (W2 Type :implicit) (U Type :implicit) (op $eo_String) (x1 W1) (x2 W2) (u U))
  (eo::ite (eo::and ($smt_is_z x1) ($smt_is_z x2))
    ($smt_to_eo_bool ($smt_apply_2 op ($smt_from_eo_z x1) ($smt_from_eo_z x2)))
  (eo::ite (eo::and ($smt_is_q x1) ($smt_is_q x2))
    ($smt_to_eo_bool ($smt_apply_2 op ($smt_from_eo_q x1) ($smt_from_eo_q x2)))
    u)))


; An evaluator for all terms that we can reason about models.
; This is a recursive call.
(program $smt_model_eval
  ((T Type) (U Type) (V Type) (a1 T) (a2 T) (c Bool) (f (-> U T)) (y U) (z T) (k $eo_Numeral) (i $eo_Numeral) (F Bool)
   ; generic parameters that may appear in terms to pattern match
   (W1 Type) (x1 W1) (W2 Type) (x2 W2) (W3 Type) (x3 W3))
  :signature (T) T
  (
  ; evaluation of standard SMT symbols
  ; These calls may only call one of the above macros:
  ; - $smt_eval_quant
  ; - $smt_eval_o_arith_*,
  ; - $smt_eval_apply_*
$SMT_EVAL_CASES$
  ; free constants
  ; These are given an arbitrary value by the model ($smt_model_lookup).
  ; We then check if their property F is satisfied. If so, then they are
  ; interpreted to be this value. Otherwise, they are unevaluated.
  ; TODO: val can be assumed such that $smt_is_value is true.
  (($smt_model_eval ($smt_Const k i T))   (eo::define ((val ($smt_model_lookup k i T)))
                                          (eo::define ((mpred ($smt_model_eval ($smt_const_predicate k i T))))
                                            ; note that mpred can never be stuck and should be a Bool at this point.
                                            (eo::ite mpred val ($smt_Const k i T)))))
  ; generic apply and base case.
  ; these do not insist that the term is a value.
  ; They call the user callback $eo_model_eval.
  (($smt_model_eval (f y))                (eo::define ((fme ($smt_model_eval f)))
                                          (eo::define ((yme ($smt_model_eval y)))
                                            ($smt_try ($eo_model_eval (_ fme yme)) (_ fme yme)))))
  (($smt_model_eval z)                    ($smt_try ($eo_model_eval z) z))
  )
)

; program: $eo_model_sat
; note: Satisfied by the model if F evaluates to true.
(program $eo_model_sat ((F Bool))
  :signature (Bool) Bool
  (
  (($eo_model_sat F) ($smt_model_eval F))
  )
)

; TODO: many of the remaining Eunoia builtins can be modelled here

; The SMT typeof function, which incorporates builtin SMT terms


(program $smt_typeof ((T Type) (t T) (k $eo_Numeral) (id $eo_Numeral))
  :signature (T) Type
  (
  (($smt_typeof $smt_unknown_type)    Type)
  (($smt_typeof ($smt_Const k id T))  T)
  (($smt_typeof t)                    ($smt_try ($eo_typeof t) $smt_unknown_type))
  )
)
