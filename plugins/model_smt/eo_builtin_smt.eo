

;;;;;; Eunoia builtin

; We are now ready to define the builtins of Eunoia.
; We define all the Eunoia builtins here that are best to
; define in terms of SMT-LIB operators.

;;; Boolean operators

; axiom: $eo_not
(program $eo_not ((w $smt_builtin_Int) (n $smt_builtin_Int))
  :signature ($eo_Term) $eo_Term
  (
  (($eo_not $eo_true)          $eo_false)
  (($eo_not $eo_false)         $eo_true)
  (($eo_not ($eo_binary w n))  ($eo_mk_binary w ($sm_mk_binary_not w n)))
  )
)

; axiom: $eo_and
(program $eo_and
  ((b1 $eo_Term) (b2 $eo_Term) (w $smt_builtin_Int) (n1 $smt_builtin_Int) (n2 $smt_builtin_Int))
  :signature ($eo_Term $eo_Term) $eo_Term
  (
  (($eo_and $sm_mk_true $sm_mk_true)   ($eo_mk_bool $smt_builtin_true))
  (($eo_and $sm_mk_true $sm_mk_false)  ($eo_mk_bool $smt_builtin_false))
  (($eo_and $sm_mk_false $sm_mk_true)  ($eo_mk_bool $smt_builtin_false))
  (($eo_and $sm_mk_false $sm_mk_false) ($eo_mk_bool $smt_builtin_false))
  (($eo_and ($eo_binary w n1) ($eo_binary w n2))
     ($eo_mk_binary w ($sm_mk_binary_and w n1 n2)))
  )
)

; axiom: $eo_or
(program $eo_or
  ((b1 $eo_Term) (b2 $eo_Term) (w $smt_builtin_Int) (n1 $smt_builtin_Int) (n2 $smt_builtin_Int))
  :signature ($eo_Term $eo_Term) $eo_Term
  (
  (($eo_or $sm_mk_true $sm_mk_true)   ($eo_mk_bool $smt_builtin_true))
  (($eo_or $sm_mk_true $sm_mk_false)  ($eo_mk_bool $smt_builtin_true))
  (($eo_or $sm_mk_false $sm_mk_true)  ($eo_mk_bool $smt_builtin_true))
  (($eo_or $sm_mk_false $sm_mk_false) ($eo_mk_bool $smt_builtin_false))
  (($eo_or ($eo_binary w n1) ($eo_binary w n2))
     ($eo_mk_binary w ($sm_mk_binary_or w n1 n2)))
  )
)

; axiom: $eo_xor
(program $eo_xor ((b1 $eo_Term) (b2 $eo_Term) (w $eo_Numeral) (n1 $eo_Numeral) (n2 $eo_Numeral))
  :signature ($eo_Term $eo_Term) $eo_Term
  (
  (($eo_xor $sm_mk_true $sm_mk_true)   ($eo_mk_bool $smt_builtin_false))
  (($eo_xor $sm_mk_true $sm_mk_false)  ($eo_mk_bool $smt_builtin_true))
  (($eo_xor $sm_mk_false $sm_mk_true)  ($eo_mk_bool $smt_builtin_true))
  (($eo_xor $sm_mk_false $sm_mk_false) ($eo_mk_bool $smt_builtin_false))
  (($eo_xor ($eo_binary w n1) ($eo_binary w n2))
     ($eo_mk_binary w ($sm_mk_binary_or w n1 n2)))
  )
)

;;; Arithmetic operators

(program $eo_add ((w $eo_Numeral) (n1 $eo_Numeral) (n2 $eo_Numeral) (r1 $eo_Rational) (r2 $eo_Rational))
  :signature ($eo_Term $eo_Term) $eo_Term
  (
  (($eo_add ($eo_mk_numeral n1) ($eo_mk_numeral n2))
    ($eo_mk_numeral ($smt_apply_2 "+" n1 n2)))
  (($eo_add ($eo_mk_rational r1) ($eo_mk_rational r2))
    ($eo_mk_rational ($smt_apply_2 "+" r1 r2)))
  (($eo_add ($eo_binary w n1) ($eo_binary w n2))
    ($eo_mk_binary w ($smt_apply_2 "+" n1 n2)))
  )
)

(program $eo_mul ((w $eo_Numeral) (n1 $eo_Numeral) (n2 $eo_Numeral) (r1 $eo_Rational) (r2 $eo_Rational))
  :signature ($eo_Term $eo_Term) $eo_Term
  (
  (($eo_mul ($eo_mk_numeral n1) ($eo_mk_numeral n2))
    ($eo_mk_numeral ($smt_apply_2 "*" n1 n2)))
  (($eo_mul ($eo_mk_rational r1) ($eo_mk_rational r2))
    ($eo_mk_rational ($smt_apply_2 "*" r1 r2)))
  (($eo_mul ($eo_binary w n1) ($eo_binary w n2))
    ($eo_mk_binary w ($smt_apply_2 "*" n1 n2)))
  )
)

(program $eo_qdiv ((w $eo_Numeral) (n1 $eo_Numeral) (n2 $eo_Numeral) (r1 $eo_Rational) (r2 $eo_Rational))
  :signature ($eo_Term $eo_Term) $eo_Term
  (
  (($eo_qdiv ($eo_mk_numeral n1) ($eo_mk_numeral n2))
    (eo::define ((r1 ($smt_apply_1 "to_real" n1)))
    (eo::define ((r2 ($smt_apply_1 "to_real" n2)))
    ($smt_apply_3 "ite" ($smt_apply_1 "= 0" n2)
      $eo_mk_stuck
      ($eo_mk_rational ($smt_apply_2 "/" r1 r2))))))
  (($eo_qdiv ($eo_mk_rational r1) ($eo_mk_rational r2))
    ($smt_apply_3 "ite" ($smt_apply_1 "= 0/1" r2)
      $eo_mk_stuck
      ($eo_mk_rational ($smt_apply_2 "/" r1 r2))))
  )
)


(program $eo_zdiv ((w $eo_Numeral) (n1 $eo_Numeral) (n2 $eo_Numeral))
  :signature ($eo_Term $eo_Term) $eo_Term
  (
  (($eo_zdiv ($eo_mk_numeral n1) ($eo_mk_numeral n2))
    ($smt_apply_3 "ite" ($smt_apply_1 "= 0" n2)
      $eo_mk_stuck
      ($eo_mk_numeral ($smt_builtin_div n1 n2))))
  (($eo_zdiv ($eo_binary w n1) ($eo_binary w n2))
    ($smt_apply_3 "ite" ($smt_apply_1 "= 0" n2)
      ($eo_mk_binary w ($sm_mk_binary_max w))
      ($eo_mk_binary w ($smt_builtin_div n1 n2))))
  )
)

(program $eo_zmod ((w $eo_Numeral) (n1 $eo_Numeral) (n2 $eo_Numeral))
  :signature ($eo_Term $eo_Term) $eo_Term
  (
  (($eo_zmod ($eo_mk_numeral n1) ($eo_mk_numeral n2))
    ($smt_apply_3 "ite" ($smt_apply_1 "= 0" n2)
      $eo_mk_stuck
      ($eo_mk_numeral ($smt_apply_2 "mod" n1 n2))))
  (($eo_zmod ($eo_binary w n1) ($eo_binary w n2))
    ($smt_apply_3 "ite" ($smt_apply_1 "= 0" n2)
      ($eo_binary w n1)
      ($eo_mk_binary w ($smt_apply_2 "mod" n1 n2))))
  )
)

(program $eo_is_neg ((n1 $eo_Numeral) (r1 $eo_Rational))
  :signature ($eo_Term) $eo_Term
  (
  (($eo_is_neg ($eo_mk_numeral n1))
    ($eo_mk_bool ($smt_apply_1 "> 0 " n1)))
  (($eo_is_neg ($eo_mk_rational r1))
    ($eo_mk_bool ($smt_apply_1 "> 0/1" r1)))
  )
)

; axiom: $eo_neg
(program $eo_neg ((n1 $eo_Numeral) (r1 $eo_Rational))
  :signature ($eo_Term) $eo_Term
  (
  (($eo_neg ($eo_mk_numeral n1))
    ($eo_mk_numeral ($smt_apply_1 "-" n1)))
  (($eo_neg ($eo_mk_rational r1))
    ($eo_mk_rational ($smt_apply_1 "-" r1)))
  )
)


;;; String operators

(program $eo_len ((s1 $eo_String) (w $eo_Numeral) (n1 $eo_Numeral))
  :signature ($eo_Term) $eo_Term
  (
  (($eo_len ($eo_mk_string s1))
    ($eo_mk_numeral ($smt_apply_1 "str.len" s1)))
  (($eo_len ($eo_binary w n1))
    ($eo_mk_numeral w))
  )
)

(program $eo_concat
  ((w1 $eo_Numeral) (n1 $eo_Numeral) (w2 $eo_Numeral) (n2 $eo_Numeral) (s1 $eo_String) (s2 $eo_String))
  :signature ($eo_Term $eo_Term) $eo_Term
  (
  (($eo_concat ($eo_mk_string s1) ($eo_mk_string s2))
     ($eo_mk_string ($smt_apply_2 "str.++" s1 s2)))
  (($eo_concat ($eo_binary w1 n1) ($eo_binary w2 n2))
     ($eo_mk_binary ($smt_apply_2 "+" w1 w2) ($sm_mk_binary_concat w1 n1 w2 n2)))
  )
)

(program $eo_extract
  ((s1 $eo_String) (w1 $eo_Numeral) (n1 $eo_Numeral) (n2 $eo_Numeral) (n3 $eo_Numeral))
  :signature ($eo_Term $eo_Term $eo_Term) $eo_Term
  (
  (($eo_extract ($eo_mk_string s1) ($eo_mk_numeral n2) ($eo_mk_numeral n3))
     ($eo_mk_string ($smt_apply_3 "str.substr" s1 n2 ($smt_apply_1 "+ 1" ($smt_apply_2 "-" n3 n2)))))
  (($eo_extract ($eo_binary w1 n1) ($eo_mk_numeral n2) ($eo_mk_numeral n3))
     ($eo_mk_binary
       ($smt_apply_1 "+ 1" ($smt_apply_2 "-" n3 n2))
       ($sm_mk_binary_extract w1 n1 n2 n3)))
  )
)

(program $eo_find ((s1 $eo_String) (s2 $eo_String))
  :signature ($eo_Term $eo_Term) $eo_Term
  (
  (($eo_find ($eo_mk_string s1) ($eo_mk_string s2))
     ($eo_mk_string ($smt_apply_3 "str.indexof" s1 s2 $smt_builtin_z_zero)))
  )
)

;;; Conversion operators

(program $eo_to_z ((n1 $eo_Numeral) (r1 $eo_Rational) (s1 $eo_String) (w $eo_Numeral))
  :signature ($eo_Term) $eo_Term
  (
  (($eo_to_z ($eo_mk_numeral n1))
    ($eo_mk_numeral n1))
  (($eo_to_z ($eo_mk_rational r1))
    ($eo_mk_numeral ($smt_apply_1 "to_int" r1)))
  (($eo_to_z ($eo_mk_string s1))
    ($smt_apply_3 "ite"
      ($smt_apply_1 "= 1" ($smt_apply_1 "str.len" s1))
      ($eo_mk_numeral ($smt_apply_1 "str.to_code" s1))
      $eo_mk_stuck))
  (($eo_to_z ($eo_binary w n1))
    ($eo_mk_numeral n1))
  )
)

(program $eo_to_q ((n1 $eo_Numeral) (r1 $eo_Rational) (s1 $eo_String) (w $eo_Numeral))
  :signature ($eo_Term) $eo_Term
  (
  (($eo_to_q ($eo_mk_numeral n1))
    ($eo_mk_rational ($smt_apply_1 "to_real" n1)))
  (($eo_to_q ($eo_mk_rational r1))
    ($eo_mk_rational r1))
  )
)

(program $eo_to_bin ((w $eo_Numeral) (w1 $eo_Numeral) (n1 $eo_Numeral))
  :signature ($eo_Term $eo_Term) $eo_Term
  (
  (($eo_to_bin ($eo_mk_numeral w) ($eo_mk_numeral n1))
    ($eo_mk_binary w n1))
  (($eo_to_bin ($eo_mk_numeral w) ($eo_binary w1 n1))
    ($eo_mk_binary w n1))
  )
)

(program $eo_to_str ((n1 $eo_Numeral) (s1 $eo_String))
  :signature ($eo_Term) $eo_Term
  (
  (($eo_to_str ($eo_mk_numeral n1))
    ($smt_apply_3 "ite"
      ($smt_builtin_and ($smt_apply_1 "<= 0" n1) ($smt_apply_1 "> 196608" n1))
      ($eo_mk_string ($smt_apply_1 "str.from_code" n1))
      $eo_mk_stuck))
  (($eo_to_str ($eo_mk_string s1))
    ($eo_mk_string s1))
  ; TODO: technically others here
  )
)
