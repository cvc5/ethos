(declare-const = (-> (T Type :implicit) T T Bool))
(declare-const or (-> Bool Bool Bool) :right-assoc-nil false)
(declare-const and (-> Bool Bool Bool) :left-assoc-nil true)

(declare-const a Bool)
(declare-const b Bool)
(declare-const c Bool)

(declare-rule bool-or-true ((xs Bool :list) (ys Bool :list))
  :args (xs ys)
  :conclusion (= (or xs true ys) true)
)

(program elim_singleton_list_rhs ((T Type) (f (-> T T T)) (t T) (s T :list))
  ((-> T T T) T) T
  (
  ((elim_singleton_list_rhs f (f t s)) (eo::ite (eo::is_eq s (eo::nil f)) t (f t s)))
  ((elim_singleton_list_rhs f t)       t)
  )
)
(program elim_singleton_list_lhs ((T Type) (f (-> T T T)) (t T :list) (s T))
  ((-> T T T) T) T
  (
  ((elim_singleton_list_lhs f (f t s)) (eo::ite (eo::is_eq t (eo::nil f)) s (f t s)))
  ((elim_singleton_list_lhs f s)       s)
  )
)

(declare-rule bool-or-false ((xs Bool :list) (ys Bool :list))
  :args (xs ys)
  :conclusion (= (or xs false ys) (elim_singleton_list_rhs or (eo::list_concat or xs ys)))
)

(step @p0 (= (or a b true c) true) :rule bool-or-true :args ((or a b) (or c)))
(step @p1 (= (or a true) true) :rule bool-or-true :args ((or a) false))
(step @p2 (= (or (or a b) true) true) :rule bool-or-true :args ((or (or a b)) false))

(step @p3 (= (or a b false c) (or a b c)) :rule bool-or-false :args ((or a b) (or c)))
(step @p4 (= (or a false) a) :rule bool-or-false :args ((or a) false))
(step @p5 (= (or (or a b) false) (or a b)) :rule bool-or-false :args ((or (or a b)) false))

(declare-rule bool-and-true ((xs Bool :list) (ys Bool :list))
  :args (xs ys)
  :conclusion (= (and xs true ys) (elim_singleton_list_lhs and (eo::list_concat and xs ys)))
)

(declare-rule bool-and-false ((xs Bool :list) (ys Bool :list))
  :args (xs ys)
  :conclusion (= (and xs false ys) false)
)

(step @p6 (= (and a b false c) false) :rule bool-and-false :args ((and a b) (and c)))
(step @p7 (= (and a false) false) :rule bool-and-false :args ((and a) true))
(step @p8 (= (and (and a b) false) false) :rule bool-and-false :args ((and (and a b)) true))

(step @p9 (= (and a b true c) (and a b c)) :rule bool-and-true :args ((and a b) (and c)))
(step @p10 (= (and a true) a) :rule bool-and-true :args ((and a) true))
(step @p11 (= (and (and a b) true) (and a b)) :rule bool-and-true :args ((and (and a b)) true))

