(include "Utils.eo")
(include "Arith-theory.eo")
(include "Datatypes-theory.eo")

(declare-const Set (-> Type Type))

; NOTE: permits non-set types
(declare-parameterized-const set.empty ((T Type)) (-> T))
(declare-parameterized-const set.universe ((T Type)) (-> T))

(declare-parameterized-const set.singleton ((T Type :implicit)) (-> T (Set T)))
(declare-parameterized-const set.union ((T Type :implicit)) (-> (Set T) (Set T) (Set T)))
(declare-parameterized-const set.inter ((T Type :implicit)) (-> (Set T) (Set T) (Set T)))
(declare-parameterized-const set.minus ((T Type :implicit)) (-> (Set T) (Set T) (Set T)))
(declare-parameterized-const set.complement ((T Type :implicit)) (-> (Set T) (Set T)))
(declare-parameterized-const set.member ((T Type :implicit)) (-> T (Set T) Bool))
(declare-parameterized-const set.subset ((T Type :implicit)) (-> (Set T) (Set T) Bool))
(declare-parameterized-const set.card ((T Type :implicit)) (-> (Set T) Int))
(declare-parameterized-const set.choose ((T Type :implicit)) (-> (Set T) T))
(declare-parameterized-const set.is_singleton ((T Type :implicit)) (-> (Set T) Bool))

(declare-parameterized-const set.filter ((T Type :implicit)) (-> (-> T Bool) (Set T) (Set T)))
(declare-parameterized-const set.map ((T Type :implicit) (U Type :implicit)) (-> (-> T U) (Set T) (Set U)))
(declare-parameterized-const set.fold ((T Type :implicit) (U Type :implicit)) (-> (-> T U U) U (Set T) U))

(declare-parameterized-const set.comprehension ((T Type :implicit)) (-> @List Bool T (Set T)))
(declare-parameterized-const set.insert ((T Type :implicit)) (-> @List (Set T) (Set T)))

(declare-parameterized-const rel.tclosure ((T Type :implicit)) (-> (Set (Tuple T T)) (Set (Tuple T T))))
(declare-parameterized-const rel.transpose ((T Type :implicit)) (-> (Set T) (Set (nary.reverse Tuple UnitTuple T))))
(declare-parameterized-const rel.product ((T Type :implicit) (U Type :implicit)) (-> (Set T) (Set U) (Set (eo::list_concat Tuple T U))))
(declare-parameterized-const rel.join ((T Type :implicit) (U Type :implicit)) (-> (Set T) (Set U) (Set (nary.join Tuple UnitTuple T U))))
(declare-parameterized-const rel.group ((T Type :implicit)) (-> @List (Set T) (Set (Set T))))

(declare-parameterized-const rel.iden ((T Type :implicit)) (-> (Set (Tuple T)) (Set (Tuple T T))))  
(declare-parameterized-const rel.join_image ((T Type :implicit)) (-> (Set (Tuple T T)) Int (Set (Tuple T))))

