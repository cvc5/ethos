(declare-const Int Type)
(declare-consts <numeral> Int)

(declare-parameterized-const = ((T Type :implicit)) (-> T T Bool))
(declare-const + (-> Int Int Int))
(declare-const - (-> Int Int Int))
(declare-const > (-> Int Int Bool))
(declare-const >= (-> Int Int Bool))

(program run_evaluate ((T Type) (U Type) (S Type) (a T) (b T) (ai Int) (bi Int) (z S))
    :signature (S) S
    (
      ((run_evaluate (= a b))  (eo::is_eq (run_evaluate a) (run_evaluate b)))
      ((run_evaluate (> ai bi))  (eo::is_neg (run_evaluate (- bi ai))))
      ((run_evaluate (>= ai bi)) (eo::define ((x (run_evaluate (- bi ai)))) 
                                 (eo::or (eo::is_neg x) (eo::is_eq x 0))))
      ((run_evaluate (+ ai bi))  (eo::add (run_evaluate ai) (run_evaluate bi)))
      ((run_evaluate (- ai bi))  (eo::add (run_evaluate ai) (eo::neg (run_evaluate bi))))
      ((run_evaluate z)        z)
    )
)

(declare-parameterized-const BitVec ((w Int :requires ((run_evaluate (> w 0)) true))) Type)

(declare-parameterized-const bvadd ((n Int :implicit)) 
  (-> (BitVec n) (BitVec n) (BitVec n)))

(declare-const a (BitVec 4))

(declare-const i Int)
(declare-const j Int)
;(declare-const b (BitVec (+ i j)))
