(declare-type Pair (Type))

(declare-parameterized-const pair ((T Type :implicit)) (-> T T (Pair T)))


(program swap ((T Type) (t1 T) (t2 T))
  :signature ((Pair T)) (Pair T)
  ; cases
  (
  ((swap (pair t1 t2)) (pair t2 t1))
  )
)

(declare-parameterized-const is_swap ((T Type :implicit)) (-> (Pair T) (Pair T) Bool))

(declare-rule do_swap ((T Type) (t (Pair T)))
  :premises ()
  :args (t)
  :conclusion (is_swap t (swap t))
)

(declare-type Int ())
(declare-const a Int)
(declare-const b Int)

(step a0 (is_swap (pair a b) (pair b a)) :rule do_swap :premises () :args ((pair a b)))
