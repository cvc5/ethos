(declare-const @List Type)
(declare-const @nil @List)
(declare-parameterized-const @cons ((T Type :implicit)) (-> T @List @List) :right-assoc-nil @nil)

(declare-const exists (-> @List Bool Bool) :binder @cons)
(declare-const and (-> Bool Bool Bool) :right-assoc-nil true)
(declare-parameterized-const = ((A Type :implicit)) (-> A A Bool) :chainable and)

(program $substitute
  ((T Type) (U Type) (S Type) (x S) (y S) (f (-> T U)) (a T) (z U) (w T))
  (S S U) U
  (
  (($substitute x y x)             y)
  (($substitute x y (f a))         (_ ($substitute x y f) ($substitute x y a)))
  (($substitute x y z)             z)
  )
)

(program $substitute_list ((T Type) (U Type) (F U) (x T) (xs @List :list) (t T) (ts @List :list))
  :signature (@List @List U) U
  (
    (($substitute_list (@cons x xs) (@cons t ts) F) ($substitute_list xs ts ($substitute x t F)))
    (($substitute_list @nil @nil F)       F)
  )
)

;; ---------------------

(declare-parameterized-const @qskolem
  ((T Type :implicit) (b Bool :opaque) (t T :opaque))
  T)

(program $mk_skolems ((T Type) (x T) (xs @List :list) (F Bool))
  :signature (@List Bool) @List
  (
    (($mk_skolems (@cons x xs) F) (eo::cons @cons (@qskolem F x) ($mk_skolems xs F)))
    (($mk_skolems @nil F)         @nil)
  )
)

(declare-rule skolemize ((x @List) (F Bool))
  :premises ((exists x F))
  :conclusion ($substitute_list x ($mk_skolems x (exists x F)) F)
)

;; ---------------------

(declare-const Int Type)
(declare-const a Int)
(declare-const b Int)
(define Q () (exists ((x Int) (y Int)) (and (= x a) (= y b))))
(assume @p0 Q)
(define x () (eo::var "x" Int))
(define y () (eo::var "y" Int))
(define Result () (and (= (@qskolem Q x) a) (= (@qskolem Q y) b)))
(step @p1 Result :rule skolemize :premises (@p0))
