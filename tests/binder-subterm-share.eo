(declare-type @List ())
(declare-const @list.nil @List)
(declare-const @list.cons (-> (T Type :implicit) T @List @List) :right-assoc-nil @list.nil)

(declare-type Int ())
(declare-const P (-> Int Bool))
(declare-const forall (-> @List Bool Bool) :binder @list.cons)
(declare-rule id ((y Bool)) :premises (y) :conclusion y)

(define x () (eo::var "x" Int))
(define Q () (P x))

(assume @p0 (forall ((x Int)) Q))
(step @p1 (forall ((x Int)) (P x)) :rule id :premises (@p0))


