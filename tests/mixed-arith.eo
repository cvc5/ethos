(declare-type Int ())
(declare-type Real ())

(declare-consts <numeral> Int)
(declare-consts <rational> Real)
(declare-consts <decimal> Real)


(declare-const = (-> (T Type :implicit) T T Bool))

(program a.typeunion ()
    (Type Type) Type
    (
      ((a.typeunion Int Int) Int)
      ((a.typeunion Int Real) Real)
      ((a.typeunion Real Int) Real)
      ((a.typeunion Real Real) Real)
    )
)

(declare-const + (-> (T Type :implicit) 
                     (U Type :implicit) 
                     T U (a.typeunion T U)))
(declare-const - (-> (T Type :implicit) 
                     (U Type :implicit) 
                     T U (a.typeunion T U)))
(declare-const < (-> (T Type :implicit) 
                      T T Bool))
(declare-const <= (-> (T Type :implicit) 
                      T T Bool))


(program run_evaluate ((T Type) (U Type) (S Type) (a T) (b U) (z S))
    (S) S
    (
      ((run_evaluate (= a b))  (eo::is_eq (run_evaluate a) (run_evaluate b)))
      ((run_evaluate (< a b))  (eo::is_neg (run_evaluate (- a b))))
      ((run_evaluate (<= a b)) (eo::define ((x (run_evaluate (- a b)))) 
                                 (eo::or (eo::is_neg x) (eo::is_eq (eo::to_q x) 0/1))))
      ((run_evaluate (+ a b))  (eo::add (run_evaluate a) (run_evaluate b)))
      ((run_evaluate (- a b))  (eo::add (run_evaluate a) (eo::neg (run_evaluate b))))
      ((run_evaluate z)        z)
    )
)

(declare-rule eval
   ((T Type) (U Type) (a T) (b U))
   :premises ()
   :args (a b)
   :requires (((run_evaluate a) (run_evaluate b)))
   :conclusion (= a b)
)

(step a1 (= (+ 0.5 0.25) 0.75) :rule eval :args ((+ 0.5 0.25) 0.75))
(step a2 (= (- 0.6 0.2) 0.4) :rule eval :args ((- 0.6 0.2) 0.4))
(step a3 (= (< 1.25 1.5) true) :rule eval :args ((< 1.25 1.5) true))
(step a4 (= (<= 1.25 1.5) true) :rule eval :args ((<= 1.25 1.5) true))
; should be agnostic to spurious zeroes
(step a5 (= (= 1.500 1.5) true) :rule eval :args ((= 1.5000 1.5) true))
; rationals and decimals are equivalent after normalization
(step a6 (= (= 3/2 (eo::to_q 1.5)) true) :rule eval :args ((= 3/2 (eo::to_q 1.5)) true))
; not possible to do rational arithmetic with decimal syntax
(step a7 (= (= (+ 1/3 1/6) 1/2) true) :rule eval :args ((= (+ 1/3 1/6) 1/2) true))

; negatives
(step a8 (= (= (+ 1/3 -1/6) 1/6) true) :rule eval :args ((= (+ 1/3 -1/6) 1/6) true))
(step a9 (= (eo::to_q -10.5) -21/2) :rule eval :args ((eo::to_q -10.5) -21/2))
(step a10 (= -1 (- 0 1)) :rule eval :args (-1 (- 0 1)))

; this would fail due to the use of mixed arithmetic:
;(step a11 (= (+ 1 1/2) 3/2) :rule eval :args ((+ 1 1/2) 3/2))
