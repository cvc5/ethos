(declare-type Int ())
(declare-consts <numeral> Int)

(declare-const = (-> (! Type :var T :implicit) T T Bool))
(declare-const + (-> Int Int Int))
(declare-const - (-> Int Int Int))
(declare-const < (-> Int Int Bool))
(declare-const <= (-> Int Int Bool))

(program arith.eval ((S Type) (a Int) (b Int) (z S))
    (S) S
    (
      ((arith.eval (= a b))  (eo::is_eq (arith.eval a) (arith.eval b)))
      ((arith.eval (< a b))  (eo::is_neg (arith.eval (- a b))))
      ((arith.eval (<= a b)) (eo::define ((x (arith.eval (- a b)))) 
                                 (eo::or (eo::is_neg x) (eo::is_eq x 0))))
      ((arith.eval (+ a b))  (eo::add (arith.eval a) (arith.eval b)))
      ((arith.eval (- a b))  (eo::add (arith.eval a) (eo::neg (arith.eval b))))
      ((arith.eval z)        z)
    )
)

(declare-const BitVec 
  (-> Int Type))

(declare-consts <binary> (BitVec (eo::len eo::self)))

(declare-const bvadd (->
  (! Int :var n :implicit)
  (BitVec n)
  (BitVec n)
  (BitVec n)))

(declare-const bvextract (->
  (! Int :var n :implicit)
  (! Int :var h)
  (! Int :var l)
  (BitVec n)
  (!
    (BitVec (arith.eval (+ (- h l) 1)))
      :requires ((arith.eval (<= 0 h)) true)
      :requires ((arith.eval (< h n)) true)
      :requires ((arith.eval (<= 0 l)) true)
      :requires ((arith.eval (< l h)) true)
  ))
)

(declare-const bvconcat (->
  (! Int :var n :implicit)
  (! Int :var m :implicit)
  (BitVec n)
  (BitVec m)
  (BitVec (arith.eval (+ n m)))))

(program bv.eval ((T Type) (U Type) (S Type) (a T) (b U) (z S) (h Int) (l Int))
    (S) S
    (
      ((bv.eval (= a b))           (eo::is_eq (bv.eval a) (bv.eval b)))
      ((bv.eval (bvadd a b))       (eo::add (bv.eval a) (bv.eval b)))
      ((bv.eval (bvconcat a b))    (eo::concat (bv.eval a) (bv.eval b)))
      ((bv.eval (bvextract h l a)) (eo::extract (bv.eval a) l h)) ; note swap l/h
      ((bv.eval z)                 z)
    )
)

(declare-rule eval
   ((T Type) (U Type) (a T) (b U))
   :premises ()
   :args (a b)
   :requires (((bv.eval a) (bv.eval b)))
   :conclusion (= a b)
)

(declare-const x (BitVec 3))

(step a2 (= #b0010 (bvextract 3 0 #b11010010)) :rule eval :premises (#b0010 (bvextract 3 0 #b11010010)))
(step a3 (= #b000 (bvadd #b111 #b001)) :rule eval :premises (#b000 (bvadd #b111 #b001)))
