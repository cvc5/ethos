(include "Builtin-theory.eo")

(declare-const Int Type)
(declare-const Real Type)

(declare-consts <numeral> Int)
(declare-consts <rational> Real)

; used for right-assoc-nil operators, must consider the nil terminator
(program arith_typeunion_nary ()
    :signature (Type Type) Type
    (
      ((arith_typeunion_nary Int Real) Real)
      ((arith_typeunion_nary Int Int) Int)
      ((arith_typeunion_nary Real Real) Real)
      ((arith_typeunion_nary Real Int) Real)
    )
)
(program arith_typeunion ((x Type) (y Type))
    :signature (Type Type) Type
    (
      ((arith_typeunion Int Int) Int)
      ((arith_typeunion Real Real) Real)
      ((arith_typeunion Real Int) Real)
      ((arith_typeunion Int Real) Real)
    )
)

(program is_arith_type ((x Type))
    :signature (Type) Bool
    (
      ((is_arith_type Int) true)
      ((is_arith_type Real) true)
    )
)

; Must use integer nil terminators to avoid confusion with subtyping
(declare-parameterized-const + ((T Type :implicit) (U Type :implicit)) 
  (-> T U (arith_typeunion_nary T U)) :right-assoc-nil 0)
(declare-parameterized-const - ((T Type :implicit) (U Type :implicit)) 
  (-> T U (arith_typeunion T U)) :left-assoc)
(declare-parameterized-const * ((T Type :implicit) (U Type :implicit)) 
  (-> T U (arith_typeunion_nary T U)) :right-assoc-nil 1)

(declare-parameterized-const < ((T Type :implicit) (U Type :implicit))
  (-> T U
      (eo::requires (is_arith_type T) true
      (eo::requires (is_arith_type U) true
      Bool))) :chainable and)
(declare-parameterized-const <= ((T Type :implicit) (U Type :implicit))
  (-> T U
      (eo::requires (is_arith_type T) true
      (eo::requires (is_arith_type U) true
      Bool))) :chainable and)
(declare-parameterized-const > ((T Type :implicit) (U Type :implicit))
  (-> T U
      (eo::requires (is_arith_type T) true
      (eo::requires (is_arith_type U) true
      Bool))) :chainable and)
(declare-parameterized-const >= ((T Type :implicit) (U Type :implicit))
  (-> T U
      (eo::requires (is_arith_type T) true
      (eo::requires (is_arith_type U) true
      Bool))) :chainable and)

(declare-parameterized-const to_real
  ((T Type :implicit) (t T :requires ((is_arith_type T) true)))
  Real)
(declare-parameterized-const to_int
  ((T Type :implicit) (t T :requires ((is_arith_type T) true)))
  Int)
(declare-parameterized-const is_int
  ((T Type :implicit) (t T :requires ((is_arith_type T) true)))
  Bool)
(declare-parameterized-const abs
  ((T Type :implicit) (t T :requires ((is_arith_type T) true)))
  T)

; power
(declare-parameterized-const ^ ((T Type :implicit) (U Type :implicit)) 
  (-> T U (arith_typeunion T U)))

; currently unary negation cannot use overload
(declare-parameterized-const u- ((T Type :implicit) (t T :requires ((is_arith_type T) true))) 
  T)
