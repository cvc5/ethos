
(declare-const @List Type)
(declare-const @list.nil @List)
(declare-parameterized-const @list ((T Type :implicit)) (-> T @List @List) :right-assoc-nil @list.nil)

(declare-const forall (-> @List Bool Bool) :binder @list)

(declare-parameterized-const = ((A Type :implicit)) (-> A A Bool))

(declare-rule refl ((F Bool))
  :args (F)
  :conclusion (= F F))


(declare-const P (-> Bool Bool))
(define x.1 () (eo::var "x" Bool))

(step @p0 (= (forall ((x Bool)) (P x)) (forall ((x Bool)) (P x.1))) :rule refl :args ((forall ((x Bool)) (P x))))
(step @p1 (= (forall ((x Bool)) (P x)) (forall ((x Bool)) (P (eo::var "x" Bool)))) :rule refl :args ((forall ((x Bool)) (P x))))
(step @p2 (= (forall ((x Bool)) (P x)) (forall (@list x.1) (P x.1))) :rule refl :args ((forall ((x Bool)) (P x))))


(step @p3 (= x.1 (eo::var (eo::nameof x.1) (eo::typeof x.1))) :rule refl :args (x.1))
