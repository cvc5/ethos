(include "Builtin-theory.eo")
(include "Arith-theory.eo")

(declare-type RegLan ())
(declare-type Seq (Type))
(declare-type Char ())
(define String () (Seq Char))

(declare-consts <string> String)

(declare-parameterized-const seq.empty ((T Type)) (-> T))

; Make empty string of the given string-like sort U.
(program mk_emptystr ((U Type))
  ((eo::quote U)) U
  (
  ((mk_emptystr String)   "")
  ((mk_emptystr (Seq U))  (seq.empty (Seq U)))
  )
)

; core
(declare-parameterized-const str.len ((T Type :implicit)) (-> (Seq T) Int))
(declare-parameterized-const str.++ ((T Type :implicit))
  (-> (Seq T) (Seq T) (Seq T)) :right-assoc-nil (mk_emptystr (Seq T)))

; extended functions
(declare-parameterized-const str.substr ((T Type :implicit)) (-> (Seq T) Int Int (Seq T)))
(declare-parameterized-const str.contains ((T Type :implicit)) (-> (Seq T) (Seq T) Bool))
(declare-parameterized-const str.replace ((T Type :implicit)) (-> (Seq T) (Seq T) (Seq T) (Seq T)))
(declare-parameterized-const str.indexof ((T Type :implicit)) (-> (Seq T) (Seq T) Int Int))
(declare-parameterized-const str.at ((T Type :implicit)) (-> (Seq T) Int (Seq T)))
(declare-parameterized-const str.prefixof ((T Type :implicit)) (-> (Seq T) (Seq T) Bool))
(declare-parameterized-const str.suffixof ((T Type :implicit)) (-> (Seq T) (Seq T) Bool))
(declare-parameterized-const str.rev ((T Type :implicit)) (-> (Seq T) (Seq T)))
(declare-const str.unit (-> Int String))
(declare-parameterized-const str.update ((T Type :implicit)) (-> (Seq T) Int (Seq T) (Seq T)))
(declare-const str.to_lower (-> String String))
(declare-const str.to_upper (-> String String))
(declare-const str.to_code (-> String Int))
(declare-const str.from_code (-> Int String))
(declare-const str.is_digit (-> String Bool))
(declare-const str.to_int (-> String Int))
(declare-const str.from_int (-> Int String))
(declare-const str.< (-> String String Bool))
(declare-const str.<= (-> String String Bool))
(declare-parameterized-const str.replace_all ((T Type :implicit)) (-> (Seq T) (Seq T) (Seq T) (Seq T)))
(declare-const str.replace_re (-> String RegLan String String))
(declare-const str.replace_re_all (-> String RegLan String String))
(declare-const str.indexof_re (-> String RegLan Int Int))

; regular expressions
(declare-const re.allchar RegLan)
(declare-const re.none RegLan)
(declare-const re.all RegLan)
(declare-const re.empty RegLan)
(declare-const str.to_re (-> String RegLan))
(declare-const re.* (-> RegLan RegLan))
(declare-const re.+ (-> RegLan RegLan))
(declare-const re.opt (-> RegLan RegLan))
(declare-const re.comp (-> RegLan RegLan))
(declare-const re.range (-> String String RegLan))
(declare-const re.++ (-> RegLan RegLan RegLan) :right-assoc-nil (str.to_re ""))
(declare-const re.inter (-> RegLan RegLan RegLan) :right-assoc-nil re.all)
(declare-const re.union (-> RegLan RegLan RegLan) :right-assoc-nil re.none)
(declare-const re.diff (-> RegLan RegLan RegLan))
(declare-const re.loop (-> Int Int RegLan RegLan))
(declare-const str.in_re (-> String RegLan Bool))


; Sequences
(declare-parameterized-const seq.unit ((T Type :implicit)) (-> T (Seq T)))
(declare-parameterized-const seq.nth ((T Type :implicit)) (-> (Seq T) Int (eo::ite (eo::is_eq T Char) Int T)))
(declare-parameterized-const seq.len ((T Type :implicit)) (-> (Seq T) Int))

; sequence operators just convert to the string operators
(define seq.++ () str.++)
(define seq.extract () str.substr)
(define seq.contains () str.contains)
(define seq.replace () str.replace)
(define seq.indexof () str.indexof)
(define seq.prefixof () str.prefixof)
(define seq.suffixof () str.suffixof)
(define seq.rev () str.rev)
(define seq.update () str.update)

; skolems
(declare-const @k.RE_UNFOLD_POS_COMPONENT (-> String RegLan Int String))
(declare-parameterized-const @k.STRINGS_DEQ_DIFF ((T Type :implicit)) (-> (Seq T) (Seq T) Int))
(declare-const @k.STRINGS_STOI_RESULT (-> String Int Int))
(declare-const @k.STRINGS_STOI_NON_DIGIT (-> String Int))
(declare-const @k.STRINGS_ITOS_RESULT (-> Int Int Int))

(declare-parameterized-const @k.STRINGS_NUM_OCCUR ((T Type :implicit)) (-> (Seq T) (Seq T) Int))
(declare-const @k.STRINGS_NUM_OCCUR_RE (-> String RegLan Int))
(declare-parameterized-const @k.STRINGS_OCCUR_INDEX ((T Type :implicit)) (-> (Seq T) (Seq T) Int Int))
(declare-const @k.STRINGS_OCCUR_INDEX_RE (-> String RegLan Int Int))
(declare-parameterized-const @k.STRINGS_OCCUR_LEN ((T Type :implicit)) (-> (Seq T) (Seq T) Int Int))
(declare-const @k.STRINGS_OCCUR_LEN_RE (-> String RegLan Int Int))

(declare-parameterized-const @k.STRINGS_REPLACE_ALL_RESULT ((T Type :implicit)) (-> (Seq T) Int (Seq T)))

(declare-const @k.RE_FIRST_MATCH_PRE (-> String RegLan String))
(declare-const @k.RE_FIRST_MATCH (-> String RegLan String))
(declare-const @k.RE_FIRST_MATCH_POST (-> String RegLan String))


