(declare-const not (-> Bool Bool))
(declare-const = (-> (A Type :implicit) A A Bool))

(declare-rule disinct_value_bool ((t Bool) (s Bool))
    :args (t s)
    :requires (((eo::is_bool t) true) ((eo::is_bool s) true) ((eo::is_eq t s) false))
    :conclusion (not (= t s))
)

(declare-type Int ())
(declare-consts <numeral> Int)

(declare-rule disinct_value_int ((t Int) (s Int))
    :args (t s)
    :requires (((eo::is_z t) true) ((eo::is_z s) true) ((eo::is_eq t s) false))
    :conclusion (not (= t s))
)

(declare-type Real ())
(declare-consts <rational> Real)

(declare-rule disinct_value_real ((t Real) (s Real))
    :args (t s)
    :requires (((eo::is_q t) true) ((eo::is_q s) true) ((eo::is_eq t s) false))
    :conclusion (not (= t s))
)


(declare-type String ())
(declare-consts <string> String)

(declare-rule disinct_value_str ((t String) (s String))
    :args (t s)
    :requires (((eo::is_str t) true) ((eo::is_str s) true) ((eo::is_eq t s) false))
    :conclusion (not (= t s))
)

(declare-type Bin ())
(declare-consts <binary> Bin)

(declare-rule disinct_value_bin ((t Bin) (s Bin))
    :args (t s)
    :requires (((eo::is_bin t) true) ((eo::is_bin s) true) ((eo::is_eq t s) false))
    :conclusion (not (= t s))
)

(step @p0 (not (= true false)) :rule disinct_value_bool :args (true false))
(step @p1 (not (= 0 1)) :rule disinct_value_int :args (0 1))
(step @p2 (not (= 0/1 1/1)) :rule disinct_value_real :args (0/1 1/1))
(step @p3 (not (= "A" "B")) :rule disinct_value_str :args ("A" "B"))
(step @p4 (not (= #b0 #b1)) :rule disinct_value_bin :args (#b0 #b1))
