(declare-type Int ())
(declare-consts <numeral> Int)

(declare-const = (-> (T Type :implicit) T T Bool))

(declare-const BitVec 
  (-> Int Type))

(declare-consts <binary> (BitVec (eo::len eo::self)))
  
(declare-const bvadd (->
  (n Int :implicit)
  (BitVec n)
  (BitVec n)
  (BitVec n)))
  
(declare-rule eq-symm 
  ((T Type) (x T) (y T))
  :premises ((= x y))
  :args ()
  :conclusion (= y x))
  
(declare-const x (BitVec 3))

(assume a1 (= x #b101))
(step a2 (= #b101 x) :rule eq-symm :premises (a1))
