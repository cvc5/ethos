
(include "Builtin-theory.eo")
(include "Nary.eo")

(include "Arith-theory.eo")
(include "Strings-theory.eo")


; This signature is used for both strings and sequences, where we often
; write "string" in the documentation to refer to a string or sequence.

; Return true if s is the empty string or sequence.
(program string_is_empty ((U Type) (x U))
  (U) Bool
  (
    ((string_is_empty (seq.empty U)) true)
    ((string_is_empty "") true)
    ((string_is_empty x) false)
  )
)

(define $char_type_of ((T Type)) 
  (eo::match ((U Type)) T (((Seq U) U))))
(define $str_concat ((T Type :implicit) (x (Seq T)) (y (Seq T)))
  (eo::list_concat str.++ x y))
(define $str_cons ((T Type :implicit) (x (Seq T)) (y (Seq T)))
  (eo::cons str.++ x y))

;;-------------------- Skolem terms
; The following side conditions are used for computing terms that define
; Skolems, which are used in reductions. Notice that Skolem terms may use
; terms that are not in original form, meaning that the definitions of Skolems
; may themselves contain Skolems. This is to avoid the use of a side condition
; for computing the original form of a term in the LFSC signature, which
; naively is exponential.

; Get the term corresponding to the prefix of term s of fixed length n.
(define skolem_prefix ((U Type) (s U) (n Int))
  (str.substr s 0 n)
)

; Get the term corresponding to the suffix of term s of fixed length n.
(define skolem_suffix_rem ((U Type) (s U) (n Int))
  (str.substr s n (- (str.len s) n))
)

; Get the term corresponding to the prefix of s before the first occurrence of
; t in s.
(define skolem_first_ctn_pre ((U Type) (s (Seq U)) (t (Seq U)))
  (skolem_prefix U s (str.indexof s t 0)))

; Get the term corresponding to the suffix of s after the first occurrence of
; t in s.
(define skolem_first_ctn_post ((U Type) (s (Seq U)) (t (Seq U)))
  (skolem_suffix_rem U s (+ (str.len (skolem (skolem_first_ctn_pre U s t))) (str.len t))))

;;-------------------- Utilities

; Concatenation str.++ applications t1 and t2. Note this side condition requires
; taking the sort u of t1 for constructing the empty string.
(program string_concat ((T Type) (t1 (Seq T)) (t2 (Seq T)))
  ((Seq T) (Seq T)) (Seq T)
  (((string_concat t1 t2) ($str_concat t1 t2)))
)

(program $string_rev_rec
    ((T Type) (t (Seq T)) (ss (Seq T) :list) (acc (Seq T)))
    ((Seq T) (Seq T) Type) (Seq T)
    (
        (($string_rev_rec (str.++ t ss) acc T) ($string_rev_rec ss (eo::cons (eo::_ str.++ T) t acc) T))
        (($string_rev_rec t acc T)             (eo::requires t (mk_emptystr (Seq T)) acc))
    )
)

(program $string_rev
    ((T Type) (t (Seq T)))
    ((Seq T)) (Seq T)
    (
        (($string_rev t) (eo::define ((U ($char_type_of (eo::typeof t)))) ($string_rev_rec t (mk_emptystr (Seq U)) U)))
    )
)

; Return reverse of t if rev = tt, return t unchanged otherwise.
(define string_rev ((U Type) (rev Bool) (t (Seq U))) (eo::ite rev ($string_rev t) t))

; Returns true if the length of s evaluates to one, false otherwise.
(define check_length_one ((s String)) (eo::is_eq (eo::len s) 1))

; Returns true if the length of s evaluates to greater than one, false otherwise.
(define check_length_gt_one ((s String)) (eo::is_eq (eo::is_neg (eo::add 1 (eo::neg (eo::len s)))) true))

; Flatten constants in str.++ application s. Notice that the rewritten form
; of strings in cvc5 are such that constants are grouped into constants of
; length >=1 which we call "word" constants. For example, the cvc5 rewritten
; form of (str.++ "A" "B" x) is (str.++ "AB" x). Similarly for sequences,
; the rewriten form of (str.++ (seq.unit 0) (seq.unit 1) x) is
; (str.++ (str.++ (seq.unit 0) (seq.unit 1)) x).
; Many string rules rely on processing the prefix of strings, which
; involves reasoning about the characters one-by-one. Since the above term
; has a level of nesting when word constants of size > 1 are involved, this
; method is used to "flatten" str.++ applications so that we have a uniform
; way of reasoning about them in proof rules. In this method, we take a
; str.++ application corresponding to a string term in cvc5 rewritten form.
; It returns the flattened form such that there are no nested applications of
; str.++. For example, given input:
;    (str.++ "AB" (str.++ x ""))
; we return:
;    (str.++ "A" (str.++ "B" (str.++ x "")))
; Notice that this is done for all word constants in the chain recursively.
; It does not insist that the nested concatenations are over characters only.
; This rule may fail if s is not a str.++ application corresponding to a term
; in cvc5 rewritten form.

; Helper for below, assumes t is a non-empty word constant.
; For example, given "AB", this returns (str.++ "A" (str.++ "B" "")).
(program string_flatten_word ((t String))
  (String) String
  (
    ((string_flatten_word t) 
      (eo::ite (check_length_one t) 
        ($str_cons t "")
        ($str_cons (eo::extract t 0 0) (string_flatten_word (eo::extract t 1 (eo::len t))))))
  )
)
(program string_flatten ((U Type) (t (Seq U)) (tail (Seq U) :list) (tail2 (Seq U) :list))
  ((Seq U)) (Seq U)
  (
    ; required for sequences
    ((string_flatten (str.++ (str.++ t tail2) tail)) 
        ($str_concat (str.++ t tail2) (string_flatten tail)))
    ((string_flatten (str.++ t tail))
        ; otherwise, check whether t is a word constant of length greater than one
        (eo::ite (check_length_gt_one t)
          ; if so, we flatten the word using the method above and concatenate it.
          ($str_concat (string_flatten_word t) (string_flatten tail))
          ; if not, we just append it to the result of the recursive call
          ($str_cons t (string_flatten tail))))
    ((string_flatten t)   (eo::requires t (mk_emptystr (eo::typeof t)) t))
  )
)

; Helper for collecting adjacent constants. This side condition takes as input
; a str.++ application s. It returns a pair whose concatenation is equal to s,
; whose first component corresponds to a word constant, and whose second
; component is a str.++ application whose first element is not a character.
; For example, for:
;   (str.++ "A" (str.++ "B" (str.++ x "")))
; We return:
;   (@pair "AB" (str.++ x ""))
(program string_collect_acc ((U Type) (t (Seq U)) (tail (Seq U) :list))
  ((Seq U)) (@Pair (Seq U) (Seq U))
  (
    ; TODO: sequences
    ; Check if t is a word constant
    ((string_collect_acc (str.++ t tail))
      (eo::ite (check_length_one t)
        (eo::match ((s1 (Seq U)) (s2 (Seq U))) 
          (string_collect_acc tail)
          (
            ((@pair "" s2)  (@pair t s2))
            ((@pair s1 s2)  (@pair (eo::concat t s1) s2))    ; concatentate the constant
          )
        )
        (@pair "" (str.++ t tail))))
    ((string_collect_acc t)            (eo::requires t (mk_emptystr (eo::typeof t)) (@pair t t)))
  )
)

; Collect adjacent constants for the prefix of string s. For example:
;    (str.++ "A" (str.++ "B" (str.++ x "")))
; we return:
;    (str.++ (str.++ "A" (str.++ "B" "")) (str.++ x ""))
; This side condition may fail if s is not a str.++ application.
; Notice that the collection of constants is done for all word constants in the
; term s recursively.
(program string_collect ((U Type) (t (Seq U)) (s (Seq U) :list))
  ((Seq U)) (Seq U)
  (
    ((string_collect (str.++ t s))
      (eo::match ((s1 (Seq U)) (s2 (Seq U)))
        (string_collect_acc (str.++ t s))
        (
          ; did not strip a constant prefix, just append t to the result of processing s
          ((@pair "" s2)
            ($str_cons t (string_collect s)))
          ; stripped a constant prefix, append it to second term in the pair
          ((@pair s1 s2)
            ($str_cons s1 (string_collect s2)))
        )
      )
    )
    ((string_collect t)       (eo::requires t (mk_emptystr (eo::typeof t)) t))
  )
)

; Strip equal prefix of s and t. This returns the pair corresponding to s and
; t after dropping the maximal equal prefix removed. For example, for:
;   (str.++ x (str.++ y (str.++ z "")))
;   (str.++ x (str.++ w ""))
; This method will return:
;   (pair (str.++ y (str.++ z "")) (str.++ w ""))
; This side condition may fail if s or t is not a str.++ application.
(program strip_prefix ((U Type) (t (Seq U)) (s (Seq U)) (t2 (Seq U) :list) (s2 (Seq U) :list))
  ((Seq U) (Seq U)) (@Pair (Seq U) (Seq U))
  (
    ((strip_prefix (str.++ t t2) (str.++ t s2)) (strip_prefix t2 s2))
    ((strip_prefix t s)                         (@pair t s))
  )
)


(program $string_nary_intro
    ((T Type) (t (Seq T)) (ss (Seq T) :list))
    ((Seq T)) (Seq T)
    (
        (($string_nary_intro (str.++ t ss)) (str.++ t ss))
        (($string_nary_intro t)             (eo::define ((nil (mk_emptystr (eo::typeof t))))
                                            (eo::ite (eo::is_eq t nil) t ($str_cons t nil))))
    )
)

(program $string_nary_elim
    ((T Type) (t (Seq T)) (ss (Seq T) :list))
    ((Seq T)) (Seq T)
    (
        (($string_nary_elim (str.++ t ss)) (eo::define ((nil (mk_emptystr (eo::typeof t))))
                                           (eo::ite (eo::is_eq ss nil) t (str.++ t ss))))
        (($string_nary_elim t)             (eo::requires t (mk_emptystr (eo::typeof t)) t))
    )
)

; Converts a str.++ application into "flat form" so that we are ready to
; process its prefix. This consists of the following steps:
; (1) convert s to n-ary form if it is not already a str.++ application,
; (2) flatten so that its constant prefix,
; (3) (optionally) reverse.
(define string_to_flat_form ((U Type) (s U) (rev Bool))
  ; intro, flatten, reverse
  (string_rev U rev (string_flatten ($string_nary_intro s))))

; Converts a term in "flat form" to a term that is in a form that corresponds
; to one in cvc5 rewritten form. This is the dual method to
; string_to_flat_form. This consists of the following steps:
; (1) (optionally) reverse,
; (2) collect constants
; (3) eliminate n-ary form to its element if the term is a singleton list.
(define string_from_flat_form ((U Type) (s U) (rev Bool))
  ; reverse, collect, elim
  ($string_nary_elim (string_collect (string_rev U rev s))))
