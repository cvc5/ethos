(declare-const Int Type)
(declare-consts <numeral> Int)

(declare-const BitVec (-> Int Type))
(declare-consts <binary> (BitVec (eo::len eo::self)))

(declare-parameterized-const bvor ((m Int :implicit))
    (-> (BitVec m) (BitVec m) (BitVec m))
    :right-assoc-nil (eo::to_bin m 0)
)

(declare-parameterized-const bvand ((m Int :implicit))
    (-> (BitVec m) (BitVec m) (BitVec m))
    :right-assoc-nil (eo::not (eo::to_bin m 0))
)

(program $get_tail ((T Type) (f (-> T T T)) (t T) (s T :list))
  ((-> T T T) T) T
  (
  (($get_tail f (f t s)) s)
  )
)

(declare-parameterized-const is-tail-of ((T Type :implicit) (U Type :implicit)) (-> T U Bool))

(declare-rule find_tail ((T Type) (W1 Type) (W2 Type) (W3 Type)  (f (-> W1 W2 W3)) (t T) (s T :list))
  :args ((f t s))
  :conclusion (is-tail-of ($get_tail f (f t s)) (f t s)))

(declare-const a (BitVec 4))
(declare-const b (BitVec 4))
(declare-const c (BitVec 3))

(step @p0-explicit (is-tail-of #b0000 (bvor a)) :rule find_tail :args ((bvor a)))
(step @p0 (is-tail-of #b0000 (bvor a)) :rule find_tail :args ((bvor a)))
(step @p1 (is-tail-of #b111 (bvand c)) :rule find_tail :args ((bvand c)))
(step @p0 (is-tail-of (bvand b) (bvand a b)) :rule find_tail :args ((bvand a b)))
