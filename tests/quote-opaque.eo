(declare-type Int ())
(declare-consts <numeral> Int)

(declare-const @const (-> (! Int :opaque) (! Type :var T :opaque) T))



(declare-const = (-> (! Type :var T :implicit) T T Bool))

(program substitute
  ((T Type) (U Type) (S Type) (x S) (y S) (f (-> T U)) (a T) (z U))
  (S S U) U
  (
  ((substitute x y x)     y)
  ((substitute x y (f a)) (_ (substitute x y f) (substitute x y a)))
  ((substitute x y z)     z)
  )
)


(declare-rule eq-subs
   ((f Bool) (a Bool) (b Bool))
   :premises (f (= a b))
   :args ()
   :conclusion (substitute a b f)
)

(declare-const T Type)
(declare-const U Type)
(declare-const f (-> U T))
(assume a1 (= (@const 1 T) (f (@const 1 U))))
(assume a2 (= T U))
; substitution will not impact the n within the opaque symbol
(step a3 (= (@const 1 T) (f (@const 1 U))) :rule eq-subs :premises (a1 a2))



;(declare-parameterized-const @pconst ((id Int :opaque) (T Type :opaque))
