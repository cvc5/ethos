(declare-type @List ())
(declare-const @list.nil @List)
(declare-parameterized-const @list.cons ((T Type :implicit)) (-> T @List @List) :right-assoc-nil @list.nil)

(declare-type Int ())

(declare-const P (-> Int Bool))
(declare-const forall (-> @List Bool Bool) :binder @list.cons)

(declare-rule id ((y Bool)) :premises (y) :conclusion y)

(assume @p0 (forall ((x Int)) (P x)))
(assume @p2 (forall ((x Int)) false))


; should match
(step @p1 (forall ((x Int)) (P x)) :rule id :premises (@p0))

; wrong
; (step @p1 (forall ((z Int)) (P z)) :rule id :premises (@p0))


(declare-rule q-rule ((xs @List))
  :premises ((forall xs false))
  :conclusion false)

(step @p3 false :rule q-rule :premises (@p2))


(declare-const f_list (-> Int @List))
(declare-const a Int)

(assume @pf (forall (f_list a) false))
