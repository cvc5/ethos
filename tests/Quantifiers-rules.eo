(include "Builtin-theory.eo")
(include "Quantifiers-theory.eo")

(program substitute
  ((T Type) (U Type) (S Type) (V Type) (x S) (y S) (f (-> T U)) (a T) (z U) (w V))
  (S S U) U
  (
  ((substitute x y x)             y)
  ((substitute x y (skolem w))    (skolem w))   ; do not traverse into skolems
  ((substitute x y (f a))         (_ (substitute x y f) (substitute x y a)))
  ((substitute x y z)             z)
  )
)
(program substitute_list ((T Type) (U Type) (F U) (x T) (xs @List :list) (t T) (ts @List :list))
  :signature (@List @List U) U
  (
    ((substitute_list (@list x xs) (@list t ts) F) (substitute_list xs ts (substitute x t F)))
    ((substitute_list @list.nil @list.nil F)           F)
  )
)

(declare-rule instantiate ((F Bool) (xs @List) (ts @List))
  :premises ((forall xs F))
  :args (ts)
  :conclusion (substitute_list xs ts F))

; returns the list of skolems for F
; TODO: this could be a fold
(program mk_skolems ((x @List) (xs @List :list) (F Bool))
  :signature (@List Bool) @List
  (
    ((mk_skolems (@list x xs) F) (eo::cons @list (skolem (@k.QUANTIFIERS_SKOLEMIZE F x)) (mk_skolems xs F)))
    ((mk_skolems @list.nil F)      @list.nil)
  )
)

(declare-rule skolemize ((F Bool))
  :premises (F)
  :conclusion
    (eo::match ((T Type) (x @List) (G Bool))
        F
        (
          ((exists x G)       (substitute_list x (mk_skolems x F) G))
          ((not (forall x G)) (substitute_list x (mk_skolems x (exists x (not G))) (not G)))
        )
    )
)

(declare-rule skolem_intro ((T Type) (t T))
  :args ((skolem t))
  :conclusion (= (skolem t) t)
)

; special case for now
(declare-rule skolem_witness_intro ((T Type) (x T) (F Bool))
  :args ((witness x F))
  :conclusion (= (skolem (@k.QUANTIFIERS_SKOLEMIZE (exists (@list x) F) x)) (witness x F))
)
